/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 18);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });var _utils = __webpack_require__(6);Object.keys(_utils).forEach(function (key) {if (key === "default" || key === "__esModule") return;Object.defineProperty(exports, key, { enumerable: true, get: function get() {return _utils[key];} });});var _testComponent = __webpack_require__(41);
Object.keys(_testComponent).forEach(function (key) {if (key === "default" || key === "__esModule") return;Object.defineProperty(exports, key, { enumerable: true, get: function get() {return _testComponent[key];} });});

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 /*
              	MIT License http://www.opensource.org/licenses/mit-license.php
              	Author Tobias Koppers @sokra
              */
// css base code, injected by the css-loader
module.exports = function () {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		var result = [];
		for (var i = 0; i < this.length; i++) {
			var item = this[i];
			if (item[2]) {
				result.push("@media " + item[2] + "{" + item[1] + "}");
			} else {
				result.push(item[1]);
			}
		}
		return result.join("");
	};

	// import a list of modules into the list
	list.i = function (modules, mediaQuery) {
		if (typeof modules === "string")
		modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for (var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if (typeof id === "number")
			alreadyImportedModules[id] = true;
		}
		for (i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if (typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if (mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if (mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

/***/ }),
/* 2 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
var stylesInDom = {},
	memoize = function(fn) {
		var memo;
		return function () {
			if (typeof memo === "undefined") memo = fn.apply(this, arguments);
			return memo;
		};
	},
	isOldIE = memoize(function() {
		return /msie [6-9]\b/.test(self.navigator.userAgent.toLowerCase());
	}),
	getHeadElement = memoize(function () {
		return document.head || document.getElementsByTagName("head")[0];
	}),
	singletonElement = null,
	singletonCounter = 0,
	styleElementsInsertedAtTop = [];

module.exports = function(list, options) {
	if(typeof DEBUG !== "undefined" && DEBUG) {
		if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};
	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (typeof options.singleton === "undefined") options.singleton = isOldIE();

	// By default, add <style> tags to the bottom of <head>.
	if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

	var styles = listToStyles(list);
	addStylesToDom(styles, options);

	return function update(newList) {
		var mayRemove = [];
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			domStyle.refs--;
			mayRemove.push(domStyle);
		}
		if(newList) {
			var newStyles = listToStyles(newList);
			addStylesToDom(newStyles, options);
		}
		for(var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];
			if(domStyle.refs === 0) {
				for(var j = 0; j < domStyle.parts.length; j++)
					domStyle.parts[j]();
				delete stylesInDom[domStyle.id];
			}
		}
	};
}

function addStylesToDom(styles, options) {
	for(var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];
		if(domStyle) {
			domStyle.refs++;
			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}
			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];
			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}
			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles(list) {
	var styles = [];
	var newStyles = {};
	for(var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};
		if(!newStyles[id])
			styles.push(newStyles[id] = {id: id, parts: [part]});
		else
			newStyles[id].parts.push(part);
	}
	return styles;
}

function insertStyleElement(options, styleElement) {
	var head = getHeadElement();
	var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
	if (options.insertAt === "top") {
		if(!lastStyleElementInsertedAtTop) {
			head.insertBefore(styleElement, head.firstChild);
		} else if(lastStyleElementInsertedAtTop.nextSibling) {
			head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			head.appendChild(styleElement);
		}
		styleElementsInsertedAtTop.push(styleElement);
	} else if (options.insertAt === "bottom") {
		head.appendChild(styleElement);
	} else {
		throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
	}
}

function removeStyleElement(styleElement) {
	styleElement.parentNode.removeChild(styleElement);
	var idx = styleElementsInsertedAtTop.indexOf(styleElement);
	if(idx >= 0) {
		styleElementsInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement(options) {
	var styleElement = document.createElement("style");
	styleElement.type = "text/css";
	insertStyleElement(options, styleElement);
	return styleElement;
}

function createLinkElement(options) {
	var linkElement = document.createElement("link");
	linkElement.rel = "stylesheet";
	insertStyleElement(options, linkElement);
	return linkElement;
}

function addStyle(obj, options) {
	var styleElement, update, remove;

	if (options.singleton) {
		var styleIndex = singletonCounter++;
		styleElement = singletonElement || (singletonElement = createStyleElement(options));
		update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
		remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
	} else if(obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function") {
		styleElement = createLinkElement(options);
		update = updateLink.bind(null, styleElement);
		remove = function() {
			removeStyleElement(styleElement);
			if(styleElement.href)
				URL.revokeObjectURL(styleElement.href);
		};
	} else {
		styleElement = createStyleElement(options);
		update = applyToTag.bind(null, styleElement);
		remove = function() {
			removeStyleElement(styleElement);
		};
	}

	update(obj);

	return function updateStyle(newObj) {
		if(newObj) {
			if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
				return;
			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;
		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag(styleElement, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (styleElement.styleSheet) {
		styleElement.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = styleElement.childNodes;
		if (childNodes[index]) styleElement.removeChild(childNodes[index]);
		if (childNodes.length) {
			styleElement.insertBefore(cssNode, childNodes[index]);
		} else {
			styleElement.appendChild(cssNode);
		}
	}
}

function applyToTag(styleElement, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		styleElement.setAttribute("media", media)
	}

	if(styleElement.styleSheet) {
		styleElement.styleSheet.cssText = css;
	} else {
		while(styleElement.firstChild) {
			styleElement.removeChild(styleElement.firstChild);
		}
		styleElement.appendChild(document.createTextNode(css));
	}
}

function updateLink(linkElement, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	if(sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = linkElement.href;

	linkElement.href = URL.createObjectURL(blob);

	if(oldSrc)
		URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 /* -*- Mode: js; js-indent-level: 2; -*- */
/*
                                                           * Copyright 2011 Mozilla Foundation and contributors
                                                           * Licensed under the New BSD license. See LICENSE or:
                                                           * http://opensource.org/licenses/BSD-3-Clause
                                                           */

/**
                                                               * This is a helper function for getting values from parameter/options
                                                               * objects.
                                                               *
                                                               * @param args The object we are extracting values from
                                                               * @param name The name of the property we are getting.
                                                               * @param defaultValue An optional value to return if the property is missing
                                                               * from the object. If this is not specified and the property is missing, an
                                                               * error will be thrown.
                                                               */
function getArg(aArgs, aName, aDefaultValue) {
  if (aName in aArgs) {
    return aArgs[aName];
  } else if (arguments.length === 3) {
    return aDefaultValue;
  } else {
    throw new Error('"' + aName + '" is a required argument.');
  }
}
exports.getArg = getArg;

var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
var dataUrlRegexp = /^data:.+\,.+$/;

function urlParse(aUrl) {
  var match = aUrl.match(urlRegexp);
  if (!match) {
    return null;
  }
  return {
    scheme: match[1],
    auth: match[2],
    host: match[3],
    port: match[4],
    path: match[5] };

}
exports.urlParse = urlParse;

function urlGenerate(aParsedUrl) {
  var url = '';
  if (aParsedUrl.scheme) {
    url += aParsedUrl.scheme + ':';
  }
  url += '//';
  if (aParsedUrl.auth) {
    url += aParsedUrl.auth + '@';
  }
  if (aParsedUrl.host) {
    url += aParsedUrl.host;
  }
  if (aParsedUrl.port) {
    url += ":" + aParsedUrl.port;
  }
  if (aParsedUrl.path) {
    url += aParsedUrl.path;
  }
  return url;
}
exports.urlGenerate = urlGenerate;

/**
                                    * Normalizes a path, or the path portion of a URL:
                                    *
                                    * - Replaces consecutive slashes with one slash.
                                    * - Removes unnecessary '.' parts.
                                    * - Removes unnecessary '<dir>/..' parts.
                                    *
                                    * Based on code in the Node.js 'path' core module.
                                    *
                                    * @param aPath The path or url to normalize.
                                    */
function normalize(aPath) {
  var path = aPath;
  var url = urlParse(aPath);
  if (url) {
    if (!url.path) {
      return aPath;
    }
    path = url.path;
  }
  var isAbsolute = exports.isAbsolute(path);

  var parts = path.split(/\/+/);
  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
    part = parts[i];
    if (part === '.') {
      parts.splice(i, 1);
    } else if (part === '..') {
      up++;
    } else if (up > 0) {
      if (part === '') {
        // The first part is blank if the path is absolute. Trying to go
        // above the root is a no-op. Therefore we can remove all '..' parts
        // directly after the root.
        parts.splice(i + 1, up);
        up = 0;
      } else {
        parts.splice(i, 2);
        up--;
      }
    }
  }
  path = parts.join('/');

  if (path === '') {
    path = isAbsolute ? '/' : '.';
  }

  if (url) {
    url.path = path;
    return urlGenerate(url);
  }
  return path;
}
exports.normalize = normalize;

/**
                                * Joins two paths/URLs.
                                *
                                * @param aRoot The root path or URL.
                                * @param aPath The path or URL to be joined with the root.
                                *
                                * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
                                *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
                                *   first.
                                * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
                                *   is updated with the result and aRoot is returned. Otherwise the result
                                *   is returned.
                                *   - If aPath is absolute, the result is aPath.
                                *   - Otherwise the two paths are joined with a slash.
                                * - Joining for example 'http://' and 'www.example.com' is also supported.
                                */
function join(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }
  if (aPath === "") {
    aPath = ".";
  }
  var aPathUrl = urlParse(aPath);
  var aRootUrl = urlParse(aRoot);
  if (aRootUrl) {
    aRoot = aRootUrl.path || '/';
  }

  // `join(foo, '//www.example.org')`
  if (aPathUrl && !aPathUrl.scheme) {
    if (aRootUrl) {
      aPathUrl.scheme = aRootUrl.scheme;
    }
    return urlGenerate(aPathUrl);
  }

  if (aPathUrl || aPath.match(dataUrlRegexp)) {
    return aPath;
  }

  // `join('http://', 'www.example.com')`
  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
    aRootUrl.host = aPath;
    return urlGenerate(aRootUrl);
  }

  var joined = aPath.charAt(0) === '/' ?
  aPath :
  normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

  if (aRootUrl) {
    aRootUrl.path = joined;
    return urlGenerate(aRootUrl);
  }
  return joined;
}
exports.join = join;

exports.isAbsolute = function (aPath) {
  return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);
};

/**
    * Make a path relative to a URL or another path.
    *
    * @param aRoot The root path or URL.
    * @param aPath The path or URL to be made relative to aRoot.
    */
function relative(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }

  aRoot = aRoot.replace(/\/$/, '');

  // It is possible for the path to be above the root. In this case, simply
  // checking whether the root is a prefix of the path won't work. Instead, we
  // need to remove components from the root one by one, until either we find
  // a prefix that fits, or we run out of components to remove.
  var level = 0;
  while (aPath.indexOf(aRoot + '/') !== 0) {
    var index = aRoot.lastIndexOf("/");
    if (index < 0) {
      return aPath;
    }

    // If the only part of the root that is left is the scheme (i.e. http://,
    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
    // have exhausted all components, so the path is not relative to the root.
    aRoot = aRoot.slice(0, index);
    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
      return aPath;
    }

    ++level;
  }

  // Make sure we add a "../" for each component we removed from the root.
  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
}
exports.relative = relative;

var supportsNullProto = function () {
  var obj = Object.create(null);
  return !('__proto__' in obj);
}();

function identity(s) {
  return s;
}

/**
   * Because behavior goes wacky when you set `__proto__` on objects, we
   * have to prefix all the strings in our set with an arbitrary character.
   *
   * See https://github.com/mozilla/source-map/pull/31 and
   * https://github.com/mozilla/source-map/issues/30
   *
   * @param String aStr
   */
function toSetString(aStr) {
  if (isProtoString(aStr)) {
    return '$' + aStr;
  }

  return aStr;
}
exports.toSetString = supportsNullProto ? identity : toSetString;

function fromSetString(aStr) {
  if (isProtoString(aStr)) {
    return aStr.slice(1);
  }

  return aStr;
}
exports.fromSetString = supportsNullProto ? identity : fromSetString;

function isProtoString(s) {
  if (!s) {
    return false;
  }

  var length = s.length;

  if (length < 9 /* "__proto__".length */) {
      return false;
    }

  if (s.charCodeAt(length - 1) !== 95 /* '_' */ ||
  s.charCodeAt(length - 2) !== 95 /* '_' */ ||
  s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
  s.charCodeAt(length - 4) !== 116 /* 't' */ ||
  s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
  s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
  s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
  s.charCodeAt(length - 8) !== 95 /* '_' */ ||
  s.charCodeAt(length - 9) !== 95 /* '_' */) {
      return false;
    }

  for (var i = length - 10; i >= 0; i--) {
    if (s.charCodeAt(i) !== 36 /* '$' */) {
        return false;
      }
  }

  return true;
}

/**
   * Comparator between two mappings where the original positions are compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same original source/line/column, but different generated
   * line and column the same. Useful when searching for a mapping with a
   * stubbed out mapping.
   */
function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
  var cmp = mappingA.source - mappingB.source;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0 || onlyCompareOriginal) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  return mappingA.name - mappingB.name;
}
exports.compareByOriginalPositions = compareByOriginalPositions;

/**
                                                                  * Comparator between two mappings with deflated source and name indices where
                                                                  * the generated positions are compared.
                                                                  *
                                                                  * Optionally pass in `true` as `onlyCompareGenerated` to consider two
                                                                  * mappings with the same generated line and column, but different
                                                                  * source/name/original line and column the same. Useful when searching for a
                                                                  * mapping with a stubbed out mapping.
                                                                  */
function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0 || onlyCompareGenerated) {
    return cmp;
  }

  cmp = mappingA.source - mappingB.source;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return mappingA.name - mappingB.name;
}
exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

function strcmp(aStr1, aStr2) {
  if (aStr1 === aStr2) {
    return 0;
  }

  if (aStr1 > aStr2) {
    return 1;
  }

  return -1;
}

/**
   * Comparator between two mappings with inflated source and name strings where
   * the generated positions are compared.
   */
function compareByGeneratedPositionsInflated(mappingA, mappingB) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.Subheader = undefined;var _src = __webpack_require__(0);

var Subheader = exports.Subheader = function Subheader(_ref) {var title = _ref.title,subtitle = _ref.subtitle,id = _ref.id;return (
        (0, _src.h)("div", { "class": "row center" }, [
            (0, _src.h)("div", { "class": "anchor", id: id }, []),
            (0, _src.h)("h3", { "class": "light header highlight" }, [title]),
            (0, _src.h)("p", { "class": "col s12 m8 offset-m2 caption" }, [subtitle])]));};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};(function (root, factory) {
    'use strict';
    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

    /* istanbul ignore next */
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
        module.exports = factory();
    } else {
        root.StackFrame = factory();
    }
})(undefined, function () {
    'use strict';
    function _isNumber(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    }

    function _capitalize(str) {
        return str[0].toUpperCase() + str.substring(1);
    }

    function _getter(p) {
        return function () {
            return this[p];
        };
    }

    var booleanProps = ['isConstructor', 'isEval', 'isNative', 'isToplevel'];
    var numericProps = ['columnNumber', 'lineNumber'];
    var stringProps = ['fileName', 'functionName', 'source'];
    var arrayProps = ['args'];

    var props = booleanProps.concat(numericProps, stringProps, arrayProps);

    function StackFrame(obj) {
        if (obj instanceof Object) {
            for (var i = 0; i < props.length; i++) {
                if (obj.hasOwnProperty(props[i]) && obj[props[i]] !== undefined) {
                    this['set' + _capitalize(props[i])](obj[props[i]]);
                }
            }
        }
    }

    StackFrame.prototype = {
        getArgs: function getArgs() {
            return this.args;
        },
        setArgs: function setArgs(v) {
            if (Object.prototype.toString.call(v) !== '[object Array]') {
                throw new TypeError('Args must be an Array');
            }
            this.args = v;
        },

        getEvalOrigin: function getEvalOrigin() {
            return this.evalOrigin;
        },
        setEvalOrigin: function setEvalOrigin(v) {
            if (v instanceof StackFrame) {
                this.evalOrigin = v;
            } else if (v instanceof Object) {
                this.evalOrigin = new StackFrame(v);
            } else {
                throw new TypeError('Eval Origin must be an Object or StackFrame');
            }
        },

        toString: function toString() {
            var functionName = this.getFunctionName() || '{anonymous}';
            var args = '(' + (this.getArgs() || []).join(',') + ')';
            var fileName = this.getFileName() ? '@' + this.getFileName() : '';
            var lineNumber = _isNumber(this.getLineNumber()) ? ':' + this.getLineNumber() : '';
            var columnNumber = _isNumber(this.getColumnNumber()) ? ':' + this.getColumnNumber() : '';
            return functionName + args + fileName + lineNumber + columnNumber;
        } };


    for (var i = 0; i < booleanProps.length; i++) {
        StackFrame.prototype['get' + _capitalize(booleanProps[i])] = _getter(booleanProps[i]);
        StackFrame.prototype['set' + _capitalize(booleanProps[i])] = function (p) {
            return function (v) {
                this[p] = Boolean(v);
            };
        }(booleanProps[i]);
    }

    for (var j = 0; j < numericProps.length; j++) {
        StackFrame.prototype['get' + _capitalize(numericProps[j])] = _getter(numericProps[j]);
        StackFrame.prototype['set' + _capitalize(numericProps[j])] = function (p) {
            return function (v) {
                if (!_isNumber(v)) {
                    throw new TypeError(p + ' must be a Number');
                }
                this[p] = Number(v);
            };
        }(numericProps[j]);
    }

    for (var k = 0; k < stringProps.length; k++) {
        StackFrame.prototype['get' + _capitalize(stringProps[k])] = _getter(stringProps[k]);
        StackFrame.prototype['set' + _capitalize(stringProps[k])] = function (p) {
            return function (v) {
                this[p] = String(v);
            };
        }(stringProps[k]);
    }

    return StackFrame;
});

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });var _streamy = __webpack_require__(7);Object.keys(_streamy).forEach(function (key) {if (key === "default" || key === "__esModule") return;Object.defineProperty(exports, key, { enumerable: true, get: function get() {return _streamy[key];} });});var _streamyDom = __webpack_require__(11);
Object.keys(_streamyDom).forEach(function (key) {if (key === "default" || key === "__esModule") return;Object.defineProperty(exports, key, { enumerable: true, get: function get() {return _streamyDom[key];} });});var _streamyHyperscript = __webpack_require__(40);
Object.keys(_streamyHyperscript).forEach(function (key) {if (key === "default" || key === "__esModule") return;Object.defineProperty(exports, key, { enumerable: true, get: function get() {return _streamyHyperscript[key];} });});var _streamyHelpers = __webpack_require__(39);
Object.keys(_streamyHelpers).forEach(function (key) {if (key === "default" || key === "__esModule") return;Object.defineProperty(exports, key, { enumerable: true, get: function get() {return _streamyHelpers[key];} });});var _router = __webpack_require__(37);
Object.keys(_router).forEach(function (key) {if (key === "default" || key === "__esModule") return;Object.defineProperty(exports, key, { enumerable: true, get: function get() {return _router[key];} });});var _stacktrace = __webpack_require__(38);
Object.keys(_stacktrace).forEach(function (key) {if (key === "default" || key === "__esModule") return;Object.defineProperty(exports, key, { enumerable: true, get: function get() {return _stacktrace[key];} });});

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.stream = undefined;exports.







































































































































































































merge$ = merge$;exports.




















isStream = isStream;var _deepEqual = __webpack_require__(20);var _deepEqual2 = _interopRequireDefault(_deepEqual);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} /*
                                                                                                                                                                                                              * stream constructor
                                                                                                                                                                                                              * constructor returns a stream
                                                                                                                                                                                                              * get the current value of stream like: stream.value
                                                                                                                                                                                                              */var stream = exports.stream = function stream(init_value) {var s = function s(value) {if (value === undefined) {return s.value;}update(s, value);return s;};s.IS_STREAM = true;s.value = init_value;s.listeners = [];s.map = function (fn) {return map(s, fn);};s.is = function (value) {return map(s, function (cur) {return cur === value;});};s.flatMap = function (fn) {return flatMap(s, fn);};s.filter = function (fn) {return filter(s, fn);};s.deepSelect = function (fn) {return deepSelect(s, fn);};s.distinct = function (fn) {return distinct(s, fn);};s.$ = function (selectorArr) {return query(s, selectorArr);};s.until = function (stopEmit$) {return until(s, stopEmit$);};s.patch = function (partialChange) {return patch(s, partialChange);};s.reduce = function (fn, startValue) {return reduce(s, fn, startValue);};return s;}; /*
wrapper for the diffing of stream values
function valuesChanged(oldValue, newValue) {return !(0, _deepEqual2.default)(oldValue, newValue);} /*
update the stream value and notify listeners on the stream
function update(parent$, newValue) {parent$.value = newValue;notifyListeners(parent$.listeners, newValue);}; /*
provide a new value to all listeners registered for a stream
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           */function notifyListeners(listeners, value) {listeners.forEach(function notifyListener(listener) {listener(value);});} /*
o not pipe the value undefined. This allows to wait for an external initialization.
t also saves you from checking for an initial null on every map function.
function fork$(parent$, mapFunction) {var initValue = parent$.value !== undefined ? mapFunction(parent$.value) : undefined;return stream(initValue);} /*
provides a new stream applying a transformation function to the value of a parent stream
function map(parent$, fn) {var newStream = fork$(parent$, fn);parent$.listeners.push(function mapValue(value) {newStream(fn(value));});return newStream;} /*
provides a new stream applying a transformation function to the value of a parent stream
function flatMap(parent$, fn) {var newStream = fork$(parent$, function getChildStreamValue(value) {return fn(value).value;});parent$.listeners.push(function flatMapValue(value) {fn(value).map(function updateOuterStream(result) {newStream(result);});});return newStream;} /*
provides a new stream that only serves the values that a filter function returns true for
still a stream ALWAYS has a value -> so it starts at least with NULL
function filter(parent$, fn) {var newStream = fork$(parent$, function (value) {return fn(value) ? value : undefined;});parent$.listeners.push(function filterValue(value) {if (fn(value)) {newStream(value);}});return newStream;} /*
provides a new stream that has a selected sub property of the object value of the parent stream
the selector has the format [{propertyName}.]*
function deepSelect(parent$, selector) {var selectors = selector.split('.');function select(parent, selectors) {return selectors.reduce(function (input, selector) {return input[selector];}, parent);}var newStream = fork$(parent$, function (value) {return select(value, selectors);});parent$.listeners.push(function deepSelectValue(newValue) {newStream(select(newValue, selectors));});return newStream;};function query(parent$, selectorArr) {if (!Array.isArray(selectorArr)) {return deepSelect(parent$, selectorArr);}return merge$(selectorArr.map(function (selector) {return deepSelect(parent$, selector);}));} // TODO: maybe refactor with filter
/*
* provide a new stream that only notifys its children if the containing value actualy changes
*/function distinct(parent$) {var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (a, b) {return valuesChanged(a, b);};var newStream = fork$(parent$, function (value) {return value;});parent$.listeners.push(function deepSelectValue(value) {if (fn(newStream.value, value)) {newStream(value);}});return newStream;} /*
                                                                                                                                                                                                                                                                                                                                                           * update only the properties of an object passed
                                                                                                                                                                                                                                                                                                                                                           * i.e. {name: 'Fabian', lastname: 'Weber} patched with {name: 'Fabo'} produces {name: 'Fabo', lastname: 'Weber}
                                                                                                                                                                                                                                                                                                                                                           */function patch(parent$, partialChange) {if (parent$.value == null) {parent$(partialChange);return;}return parent$(Object.assign({}, parent$.value, partialChange));}function until(parent$, stopEmitValues$) {var newStream = stream(stopEmitValues$.value ? undefined : parent$.value);var subscribeTo = function subscribeTo(stream) {newStream(parent$.value);stream.listeners.push(newStream);};var unsubscribeFrom = function unsubscribeFrom(stream) {var index = stream.listeners.indexOf(newStream);if (index !== -1) {stream.listeners.splice(index, 1);}};stopEmitValues$.map(function (stopEmitValues) {if (stopEmitValues) {unsubscribeFrom(parent$);} else {subscribeTo(parent$);}});return newStream;} /*
reduce a stream over time
this will pass the last output value to the calculation function
reads like the array reduce function
function reduce(parent$, fn, startValue) {var aggregate = parent$.value !== undefined ? fn(startValue, parent$.value) : undefined;var newStream = stream(aggregate);parent$.listeners.push(function reduceValue(value) {aggregate = fn(aggregate, parent$.value);newStream(aggregate);});return newStream;} /*
merge several streams into one stream providing the values of all streams as an array
accepts also non stream elements, those are just copied to the output
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * the merge will only have a value if every stream for the merge has a value
function merge$(potentialStreamsArr) {var values = potentialStreamsArr.map(function (parent$) {return parent$.IS_STREAM ? parent$.value : parent$;});var actualStreams = potentialStreamsArr.reduce(function (streams, potentialStream, index) {if (potentialStream.IS_STREAM) {streams.push({ stream: potentialStream, index: index });}return streams;}, []);var newStream = stream(values.indexOf(undefined) === -1 ? values : undefined);actualStreams.forEach(function triggerMergedStreamUpdate(_ref) {var stream = _ref.stream,index = _ref.index;stream.listeners.push(function updateMergedStream(value) {values[index] = value;newStream(values.indexOf(undefined) === -1 ? values : undefined);});});return newStream;}function isStream(parent$) {return parent$ != null && !!parent$.IS_STREAM;}

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 /* -*- Mode: js; js-indent-level: 2; -*- */
/*
                                                           * Copyright 2011 Mozilla Foundation and contributors
                                                           * Licensed under the New BSD license. See LICENSE or:
                                                           * http://opensource.org/licenses/BSD-3-Clause
                                                           */

var util = __webpack_require__(3);
var has = Object.prototype.hasOwnProperty;

/**
                                            * A data structure which is a combination of an array and a set. Adding a new
                                            * member is O(1), testing for membership is O(1), and finding the index of an
                                            * element is O(1). Removing elements from the set is not supported. Only
                                            * strings are supported for membership.
                                            */
function ArraySet() {
  this._array = [];
  this._set = Object.create(null);
}

/**
   * Static method for creating ArraySet instances from an existing array.
   */
ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
  var set = new ArraySet();
  for (var i = 0, len = aArray.length; i < len; i++) {
    set.add(aArray[i], aAllowDuplicates);
  }
  return set;
};

/**
    * Return how many unique items are in this ArraySet. If duplicates have been
    * added, than those do not count towards the size.
    *
    * @returns Number
    */
ArraySet.prototype.size = function ArraySet_size() {
  return Object.getOwnPropertyNames(this._set).length;
};

/**
    * Add the given string to this set.
    *
    * @param String aStr
    */
ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
  var sStr = util.toSetString(aStr);
  var isDuplicate = has.call(this._set, sStr);
  var idx = this._array.length;
  if (!isDuplicate || aAllowDuplicates) {
    this._array.push(aStr);
  }
  if (!isDuplicate) {
    this._set[sStr] = idx;
  }
};

/**
    * Is the given string a member of this set?
    *
    * @param String aStr
    */
ArraySet.prototype.has = function ArraySet_has(aStr) {
  var sStr = util.toSetString(aStr);
  return has.call(this._set, sStr);
};

/**
    * What is the index of the given string in the array?
    *
    * @param String aStr
    */
ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
  var sStr = util.toSetString(aStr);
  if (has.call(this._set, sStr)) {
    return this._set[sStr];
  }
  throw new Error('"' + aStr + '" is not in the set.');
};

/**
    * What is the element at the given index?
    *
    * @param Number aIdx
    */
ArraySet.prototype.at = function ArraySet_at(aIdx) {
  if (aIdx >= 0 && aIdx < this._array.length) {
    return this._array[aIdx];
  }
  throw new Error('No element indexed by ' + aIdx);
};

/**
    * Returns the array representation of this set (which has the proper indices
    * indicated by indexOf). Note that this is a copy of the internal array used
    * for storing the members so that no one can mess with internal state.
    */
ArraySet.prototype.toArray = function ArraySet_toArray() {
  return this._array.slice();
};

exports.ArraySet = ArraySet;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 /* -*- Mode: js; js-indent-level: 2; -*- */
/*
                                                           * Copyright 2011 Mozilla Foundation and contributors
                                                           * Licensed under the New BSD license. See LICENSE or:
                                                           * http://opensource.org/licenses/BSD-3-Clause
                                                           *
                                                           * Based on the Base 64 VLQ implementation in Closure Compiler:
                                                           * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
                                                           *
                                                           * Copyright 2011 The Closure Compiler Authors. All rights reserved.
                                                           * Redistribution and use in source and binary forms, with or without
                                                           * modification, are permitted provided that the following conditions are
                                                           * met:
                                                           *
                                                           *  * Redistributions of source code must retain the above copyright
                                                           *    notice, this list of conditions and the following disclaimer.
                                                           *  * Redistributions in binary form must reproduce the above
                                                           *    copyright notice, this list of conditions and the following
                                                           *    disclaimer in the documentation and/or other materials provided
                                                           *    with the distribution.
                                                           *  * Neither the name of Google Inc. nor the names of its
                                                           *    contributors may be used to endorse or promote products derived
                                                           *    from this software without specific prior written permission.
                                                           *
                                                           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
                                                           * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
                                                           * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
                                                           * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
                                                           * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
                                                           * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
                                                           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
                                                           * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
                                                           * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                                                           * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                                                           * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                                           */

var base64 = __webpack_require__(26);

// A single base 64 digit can contain 6 bits of data. For the base 64 variable
// length quantities we use in the source map spec, the first bit is the sign,
// the next four bits are the actual value, and the 6th bit is the
// continuation bit. The continuation bit tells us whether there are more
// digits in this value following this digit.
//
//   Continuation
//   |    Sign
//   |    |
//   V    V
//   101011

var VLQ_BASE_SHIFT = 5;

// binary: 100000
var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

// binary: 011111
var VLQ_BASE_MASK = VLQ_BASE - 1;

// binary: 100000
var VLQ_CONTINUATION_BIT = VLQ_BASE;

/**
                                      * Converts from a two-complement value to a value where the sign bit is
                                      * placed in the least significant bit.  For example, as decimals:
                                      *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
                                      *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
                                      */
function toVLQSigned(aValue) {
  return aValue < 0 ?
  (-aValue << 1) + 1 :
  (aValue << 1) + 0;
}

/**
   * Converts to a two-complement value from a value where the sign bit is
   * placed in the least significant bit.  For example, as decimals:
   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
   */
function fromVLQSigned(aValue) {
  var isNegative = (aValue & 1) === 1;
  var shifted = aValue >> 1;
  return isNegative ?
  -shifted :
  shifted;
}

/**
   * Returns the base 64 VLQ encoded value.
   */
exports.encode = function base64VLQ_encode(aValue) {
  var encoded = "";
  var digit;

  var vlq = toVLQSigned(aValue);

  do {
    digit = vlq & VLQ_BASE_MASK;
    vlq >>>= VLQ_BASE_SHIFT;
    if (vlq > 0) {
      // There are still more digits in this value, so we must make sure the
      // continuation bit is marked.
      digit |= VLQ_CONTINUATION_BIT;
    }
    encoded += base64.encode(digit);
  } while (vlq > 0);

  return encoded;
};

/**
    * Decodes the next base 64 VLQ value from the given string and returns the
    * value and the rest of the string via the out parameter.
    */
exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
  var strLen = aStr.length;
  var result = 0;
  var shift = 0;
  var continuation, digit;

  do {
    if (aIndex >= strLen) {
      throw new Error("Expected more digits in base 64 VLQ value.");
    }

    digit = base64.decode(aStr.charCodeAt(aIndex++));
    if (digit === -1) {
      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
    }

    continuation = !!(digit & VLQ_CONTINUATION_BIT);
    digit &= VLQ_BASE_MASK;
    result = result + (digit << shift);
    shift += VLQ_BASE_SHIFT;
  } while (continuation);

  aOutParam.value = fromVLQSigned(result);
  aOutParam.rest = aIndex;
};

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 /* -*- Mode: js; js-indent-level: 2; -*- */
/*
                                                           * Copyright 2011 Mozilla Foundation and contributors
                                                           * Licensed under the New BSD license. See LICENSE or:
                                                           * http://opensource.org/licenses/BSD-3-Clause
                                                           */

var base64VLQ = __webpack_require__(9);
var util = __webpack_require__(3);
var ArraySet = __webpack_require__(8).ArraySet;
var MappingList = __webpack_require__(28).MappingList;

/**
                                                          * An instance of the SourceMapGenerator represents a source map which is
                                                          * being built incrementally. You may pass an object with the following
                                                          * properties:
                                                          *
                                                          *   - file: The filename of the generated source.
                                                          *   - sourceRoot: A root for all relative URLs in this source map.
                                                          */
function SourceMapGenerator(aArgs) {
  if (!aArgs) {
    aArgs = {};
  }
  this._file = util.getArg(aArgs, 'file', null);
  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
  this._sources = new ArraySet();
  this._names = new ArraySet();
  this._mappings = new MappingList();
  this._sourcesContents = null;
}

SourceMapGenerator.prototype._version = 3;

/**
                                            * Creates a new SourceMapGenerator based on a SourceMapConsumer
                                            *
                                            * @param aSourceMapConsumer The SourceMap.
                                            */
SourceMapGenerator.fromSourceMap =
function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
  var sourceRoot = aSourceMapConsumer.sourceRoot;
  var generator = new SourceMapGenerator({
    file: aSourceMapConsumer.file,
    sourceRoot: sourceRoot });

  aSourceMapConsumer.eachMapping(function (mapping) {
    var newMapping = {
      generated: {
        line: mapping.generatedLine,
        column: mapping.generatedColumn } };



    if (mapping.source != null) {
      newMapping.source = mapping.source;
      if (sourceRoot != null) {
        newMapping.source = util.relative(sourceRoot, newMapping.source);
      }

      newMapping.original = {
        line: mapping.originalLine,
        column: mapping.originalColumn };


      if (mapping.name != null) {
        newMapping.name = mapping.name;
      }
    }

    generator.addMapping(newMapping);
  });
  aSourceMapConsumer.sources.forEach(function (sourceFile) {
    var content = aSourceMapConsumer.sourceContentFor(sourceFile);
    if (content != null) {
      generator.setSourceContent(sourceFile, content);
    }
  });
  return generator;
};

/**
    * Add a single mapping from original source line and column to the generated
    * source's line and column for this source map being created. The mapping
    * object should have the following properties:
    *
    *   - generated: An object with the generated line and column positions.
    *   - original: An object with the original line and column positions.
    *   - source: The original source file (relative to the sourceRoot).
    *   - name: An optional original token name for this mapping.
    */
SourceMapGenerator.prototype.addMapping =
function SourceMapGenerator_addMapping(aArgs) {
  var generated = util.getArg(aArgs, 'generated');
  var original = util.getArg(aArgs, 'original', null);
  var source = util.getArg(aArgs, 'source', null);
  var name = util.getArg(aArgs, 'name', null);

  if (!this._skipValidation) {
    this._validateMapping(generated, original, source, name);
  }

  if (source != null) {
    source = String(source);
    if (!this._sources.has(source)) {
      this._sources.add(source);
    }
  }

  if (name != null) {
    name = String(name);
    if (!this._names.has(name)) {
      this._names.add(name);
    }
  }

  this._mappings.add({
    generatedLine: generated.line,
    generatedColumn: generated.column,
    originalLine: original != null && original.line,
    originalColumn: original != null && original.column,
    source: source,
    name: name });

};

/**
    * Set the source content for a source file.
    */
SourceMapGenerator.prototype.setSourceContent =
function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
  var source = aSourceFile;
  if (this._sourceRoot != null) {
    source = util.relative(this._sourceRoot, source);
  }

  if (aSourceContent != null) {
    // Add the source content to the _sourcesContents map.
    // Create a new _sourcesContents map if the property is null.
    if (!this._sourcesContents) {
      this._sourcesContents = Object.create(null);
    }
    this._sourcesContents[util.toSetString(source)] = aSourceContent;
  } else if (this._sourcesContents) {
    // Remove the source file from the _sourcesContents map.
    // If the _sourcesContents map is empty, set the property to null.
    delete this._sourcesContents[util.toSetString(source)];
    if (Object.keys(this._sourcesContents).length === 0) {
      this._sourcesContents = null;
    }
  }
};

/**
    * Applies the mappings of a sub-source-map for a specific source file to the
    * source map being generated. Each mapping to the supplied source file is
    * rewritten using the supplied source map. Note: The resolution for the
    * resulting mappings is the minimium of this map and the supplied map.
    *
    * @param aSourceMapConsumer The source map to be applied.
    * @param aSourceFile Optional. The filename of the source file.
    *        If omitted, SourceMapConsumer's file property will be used.
    * @param aSourceMapPath Optional. The dirname of the path to the source map
    *        to be applied. If relative, it is relative to the SourceMapConsumer.
    *        This parameter is needed when the two source maps aren't in the same
    *        directory, and the source map to be applied contains relative source
    *        paths. If so, those relative source paths need to be rewritten
    *        relative to the SourceMapGenerator.
    */
SourceMapGenerator.prototype.applySourceMap =
function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
  var sourceFile = aSourceFile;
  // If aSourceFile is omitted, we will use the file property of the SourceMap
  if (aSourceFile == null) {
    if (aSourceMapConsumer.file == null) {
      throw new Error(
      'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
      'or the source map\'s "file" property. Both were omitted.');

    }
    sourceFile = aSourceMapConsumer.file;
  }
  var sourceRoot = this._sourceRoot;
  // Make "sourceFile" relative if an absolute Url is passed.
  if (sourceRoot != null) {
    sourceFile = util.relative(sourceRoot, sourceFile);
  }
  // Applying the SourceMap can add and remove items from the sources and
  // the names array.
  var newSources = new ArraySet();
  var newNames = new ArraySet();

  // Find mappings for the "sourceFile"
  this._mappings.unsortedForEach(function (mapping) {
    if (mapping.source === sourceFile && mapping.originalLine != null) {
      // Check if it can be mapped by the source map, then update the mapping.
      var original = aSourceMapConsumer.originalPositionFor({
        line: mapping.originalLine,
        column: mapping.originalColumn });

      if (original.source != null) {
        // Copy mapping
        mapping.source = original.source;
        if (aSourceMapPath != null) {
          mapping.source = util.join(aSourceMapPath, mapping.source);
        }
        if (sourceRoot != null) {
          mapping.source = util.relative(sourceRoot, mapping.source);
        }
        mapping.originalLine = original.line;
        mapping.originalColumn = original.column;
        if (original.name != null) {
          mapping.name = original.name;
        }
      }
    }

    var source = mapping.source;
    if (source != null && !newSources.has(source)) {
      newSources.add(source);
    }

    var name = mapping.name;
    if (name != null && !newNames.has(name)) {
      newNames.add(name);
    }

  }, this);
  this._sources = newSources;
  this._names = newNames;

  // Copy sourcesContents of applied map.
  aSourceMapConsumer.sources.forEach(function (sourceFile) {
    var content = aSourceMapConsumer.sourceContentFor(sourceFile);
    if (content != null) {
      if (aSourceMapPath != null) {
        sourceFile = util.join(aSourceMapPath, sourceFile);
      }
      if (sourceRoot != null) {
        sourceFile = util.relative(sourceRoot, sourceFile);
      }
      this.setSourceContent(sourceFile, content);
    }
  }, this);
};

/**
    * A mapping can have one of the three levels of data:
    *
    *   1. Just the generated position.
    *   2. The Generated position, original position, and original source.
    *   3. Generated and original position, original source, as well as a name
    *      token.
    *
    * To maintain consistency, we validate that any new mapping being added falls
    * in to one of these categories.
    */
SourceMapGenerator.prototype._validateMapping =
function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
aName) {
  if (aGenerated && 'line' in aGenerated && 'column' in aGenerated &&
  aGenerated.line > 0 && aGenerated.column >= 0 &&
  !aOriginal && !aSource && !aName) {
    // Case 1.
    return;
  } else
  if (aGenerated && 'line' in aGenerated && 'column' in aGenerated &&
  aOriginal && 'line' in aOriginal && 'column' in aOriginal &&
  aGenerated.line > 0 && aGenerated.column >= 0 &&
  aOriginal.line > 0 && aOriginal.column >= 0 &&
  aSource) {
    // Cases 2 and 3.
    return;
  } else
  {
    throw new Error('Invalid mapping: ' + JSON.stringify({
      generated: aGenerated,
      source: aSource,
      original: aOriginal,
      name: aName }));

  }
};

/**
    * Serialize the accumulated mappings in to the stream of base 64 VLQs
    * specified by the source map format.
    */
SourceMapGenerator.prototype._serializeMappings =
function SourceMapGenerator_serializeMappings() {
  var previousGeneratedColumn = 0;
  var previousGeneratedLine = 1;
  var previousOriginalColumn = 0;
  var previousOriginalLine = 0;
  var previousName = 0;
  var previousSource = 0;
  var result = '';
  var next;
  var mapping;
  var nameIdx;
  var sourceIdx;

  var mappings = this._mappings.toArray();
  for (var i = 0, len = mappings.length; i < len; i++) {
    mapping = mappings[i];
    next = '';

    if (mapping.generatedLine !== previousGeneratedLine) {
      previousGeneratedColumn = 0;
      while (mapping.generatedLine !== previousGeneratedLine) {
        next += ';';
        previousGeneratedLine++;
      }
    } else
    {
      if (i > 0) {
        if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
          continue;
        }
        next += ',';
      }
    }

    next += base64VLQ.encode(mapping.generatedColumn -
    previousGeneratedColumn);
    previousGeneratedColumn = mapping.generatedColumn;

    if (mapping.source != null) {
      sourceIdx = this._sources.indexOf(mapping.source);
      next += base64VLQ.encode(sourceIdx - previousSource);
      previousSource = sourceIdx;

      // lines are stored 0-based in SourceMap spec version 3
      next += base64VLQ.encode(mapping.originalLine - 1 -
      previousOriginalLine);
      previousOriginalLine = mapping.originalLine - 1;

      next += base64VLQ.encode(mapping.originalColumn -
      previousOriginalColumn);
      previousOriginalColumn = mapping.originalColumn;

      if (mapping.name != null) {
        nameIdx = this._names.indexOf(mapping.name);
        next += base64VLQ.encode(nameIdx - previousName);
        previousName = nameIdx;
      }
    }

    result += next;
  }

  return result;
};

SourceMapGenerator.prototype._generateSourcesContent =
function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
  return aSources.map(function (source) {
    if (!this._sourcesContents) {
      return null;
    }
    if (aSourceRoot != null) {
      source = util.relative(aSourceRoot, source);
    }
    var key = util.toSetString(source);
    return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ?
    this._sourcesContents[key] :
    null;
  }, this);
};

/**
    * Externalize the source map.
    */
SourceMapGenerator.prototype.toJSON =
function SourceMapGenerator_toJSON() {
  var map = {
    version: this._version,
    sources: this._sources.toArray(),
    names: this._names.toArray(),
    mappings: this._serializeMappings() };

  if (this._file != null) {
    map.file = this._file;
  }
  if (this._sourceRoot != null) {
    map.sourceRoot = this._sourceRoot;
  }
  if (this._sourcesContents) {
    map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
  }

  return map;
};

/**
    * Render the source map being generated to a string.
    */
SourceMapGenerator.prototype.toString =
function SourceMapGenerator_toString() {
  return JSON.stringify(this.toJSON());
};

exports.SourceMapGenerator = SourceMapGenerator;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.



render = render;exports.




















diff = diff;exports.















































































































createNode = createNode;var _streamy = __webpack_require__(7);var TEXT_NODE = '#text';function render(component, parentElement) {return component.vdom$.reduce(function (_ref, _ref2) {var oldElement = _ref.element,oldVersion = _ref.version,oldChildren = _ref.children;var tag = _ref2.tag,props = _ref2.props,children = _ref2.children,version = _ref2.version;if (oldElement === null) {oldElement = createNode(tag, children);if (parentElement) {parentElement.appendChild(oldElement);}}diff(oldElement, tag, props, children, version, oldChildren, oldVersion);return { element: oldElement, version: version, children: JSON.parse(JSON.stringify(children)) };}, { element: null, version: -1, children: [] });}function diff(oldElement, tag, props, newChildren, newVersion, oldChildren, oldVersion) {// if the dom-tree hasn't changed, don't process it
	if (newVersion === undefined && newVersion === oldVersion) {return oldElement;}var newElement = oldElement;if (oldElement instanceof window.Text && tag === TEXT_NODE && oldElement.nodeValue !== newChildren[0]) {oldElement.nodeValue = newChildren[0];return newElement;}if (oldElement.nodeName.toLowerCase() !== tag) {newElement = createNode(tag, newChildren);oldElement.parentElement.replaceChild(newElement, oldElement);oldChildren = [];oldVersion = -1;}diffAttributes(newElement, props);if (tag !== TEXT_NODE && !(newChildren.length === 0 && oldChildren.length === 0)) {diffChildren(newElement, newChildren, oldChildren);}return newElement;}function diffAttributes(element, props) {if (props !== undefined) {Object.getOwnPropertyNames(props).map(function applyPropertyToElement(attribute) {applyAttribute(element, attribute, props[attribute]);});cleanupAttributes(element, props);}}function applyAttribute(element, attribute, value) {if (attribute === 'class' || attribute === 'className') {element.className = value; // we leave the possibility to define styles as strings
		// but we allow styles to be defined as an object
	} else if (attribute === 'style' && typeof value !== "string") {Object.assign(element.style, value); // other propertys are just added as is to the DOM
	} else {// also remove attributes on null to allow better handling of streams
		// streams don't emit on undefined
		if (value === null) {element[attribute] = undefined;} else {// element.setAttribute(attribute, value);
			element[attribute] = value;}}} // remove attributes that are not in props anymore
function cleanupAttributes(element, props) {if (element.props !== undefined) {for (var attribute in element.props) {if (props[attribute] === undefined) {element.removeAttribute(attribute);}}}}function unifyChildren(children) {return children.map(function (child) {// if there is no tag we assume it's a number or a string
		if (!(0, _streamy.isStream)(child) && child.tag === undefined) {return { tag: TEXT_NODE, children: [child], version: 1 };} else {return child;}});}function diffChildren(element, newChildren, oldChildren) {var oldChildNodes = element.childNodes;var unifiedChildren = unifyChildren(newChildren);var unifiedOldChildren = unifyChildren(oldChildren);var i = 0; // diff existing nodes
	for (; i < unifiedOldChildren.length && i < unifiedChildren.length; i++) {var oldElement = oldChildNodes[i];var _unifiedOldChildren$i = unifiedOldChildren[i],oldVersion = _unifiedOldChildren$i.version,oldChildChildren = _unifiedOldChildren$i.children;var _unifiedChildren$i = unifiedChildren[i],tag = _unifiedChildren$i.tag,props = _unifiedChildren$i.props,children = _unifiedChildren$i.children,version = _unifiedChildren$i.version;diff(oldElement, tag, props, children, version, oldChildChildren, oldVersion);} // remove not needed nodes at the end
	for (; i < unifiedOldChildren.length; i++) {element.removeChild(element.lastChild);} // add new nodes
	for (; i < unifiedChildren.length; i++) {var _unifiedChildren$i2 = unifiedChildren[i],tag = _unifiedChildren$i2.tag,props = _unifiedChildren$i2.props,children = _unifiedChildren$i2.children,version = _unifiedChildren$i2.version;var newElement = createNode(tag, children);element.appendChild(newElement);diff(newElement, tag, props, children, version, [], -1);}} // create text_nodes from numbers or strings
// create domNodes from regular vdom descriptions
function createNode(tag, children) {if (tag === TEXT_NODE) {return document.createTextNode(children[0]);} else {return document.createElement(tag);}}

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.Header = undefined;var _src = __webpack_require__(0);
__webpack_require__(58);

var Header = exports.Header = function Header() {
    var scroll$ = (0, _src.stream)();
    window.addEventListener('scroll', scroll$);

    var headerHidden$ = (0, _src.stream)(false);
    var header = (0, _src.h)('div', {
            'class': headerHidden$.map(function (hidden) {return "row big-header highlight-background " + (hidden ? 'hidden' : '');}),
            onclick: function onclick(e) {return e.target.tagName != "A" && scrollUp();} }, [

        (0, _src.h)('div', { 'class': 'container' }, [
            (0, _src.h)('div', { 'class': 'row' }, [
                (0, _src.h)('div', { 'class': 'col s12 center' }, [
                    (0, _src.h)('img', { src: './icon.png' }, [])]),

                (0, _src.h)('h1', { 'class': 'col s12 center highlight' }, ['ZLIQ'])]),

            (0, _src.h)('h3', { 'class': 'center highlight-less' }, ['The web-framework-force you want your Padawan to learn.'])]),

        (0, _src.h)('div', { 'class': 'link-list center' }, [
            (0, _src.h)('a', { href: '/#motivation' }, ['Motivation']),
            (0, _src.h)('a', { href: '/#tutorial' }, ['Tutorial']),
            (0, _src.h)('a', { href: '/#streams' }, ['Streams']),
            (0, _src.h)('a', { href: '/#state' }, ['State']),
            (0, _src.h)('a', { href: '/#helpers' }, ['Helpers']),
            (0, _src.h)('a', { href: '/#routing' }, ['Routing']),
            (0, _src.h)('a', { href: '/#lifecycle' }, ['Lifecycle']),
            (0, _src.h)('a', { href: '/#testing' }, ['Testing'])])]);



    scroll$.map(function () {
        if (!headerHidden$.value && document.body.scrollHeight < 900) return false;
        var scrollTop = window.scrollY;
        return scrollTop > 100;
    }).map(headerHidden$);

    return header;
};

function scrollUp() {
    scrollTo(document.body, 0, 0.5);
}

function scrollTo(element, to, duration) {
    if (duration <= 0) return;
    var difference = to - element.scrollTop;
    var perTick = difference / duration * 10;

    setTimeout(function () {
        element.scrollTop = element.scrollTop + perTick;
        if (element.scrollTop === to) return;
        scrollTo(element, to, duration - 10);
    }, 10);
}

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.Infos = undefined;var _src = __webpack_require__(0);

var InfoBullet = function InfoBullet(_ref, children) {var icon = _ref.icon,title = _ref.title;
    return (0, _src.h)("div", { "class": "col s12 m4" }, [
        (0, _src.h)("div", { "class": "center promo" }, [
            (0, _src.h)("i", { "class": "material-icons highlight" }, [icon]),
            (0, _src.h)("p", { "class": "promo-caption highlight-less" }, [title]),
            (0, _src.h)("p", { "class": "light center" }, [
                children])])]);



};

var Infos = exports.Infos = function Infos() {return (
        (0, _src.h)("div", { "class": "section" }, [
            (0, _src.h)("div", { "class": "row" }, [
                (0, _src.h)(InfoBullet, { icon: "fast_forward", title: "Few concepts" }, ["ZLIQ is mainly based on functions and streams. If you know React you already understand it. But it doesn't force you into how to build your components.",

                    (0, _src.h)("br", null, []), "Bend it to your will."]),


                (0, _src.h)(InfoBullet, { icon: "merge_type", title: "Based on streams" }, ["ZLIQ uses streams to apply changes to the DOM. You can provide these streams per component. Or you can provide a state stream and pass it through to your component.",

                    (0, _src.h)("br", null, []), "Feel the flow."]),


                (0, _src.h)(InfoBullet, { icon: "merge_type", title: "Few concepts" }, ["ZLIQ is mainly based on functions and streams. If you know React you already understand it. But it doesn't force you into how to build your components.",

                    (0, _src.h)("br", null, []), "Bend it to your will."])])]));};

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.Playground = undefined;var _src = __webpack_require__(0);
var _subheader = __webpack_require__(4);
__webpack_require__(59);

var Playground = exports.Playground = function Playground() {return (
        (0, _src.h)('div', { 'class': 'section' }, [
            (0, _src.h)(_subheader.Subheader, { title: 'Experiment', subtitle: 'Fork and get your hands dirty' }, []),
            (0, _src.h)('script', { async: true, src: '//jsfiddle.net/hvbee8m9/7/embed/js,html,result/' }, [])]));};

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.Tutorial = undefined;var _src = __webpack_require__(0);
var _subheader = __webpack_require__(4);
var _utils = __webpack_require__(19);
__webpack_require__(60);

var Tutorial = exports.Tutorial = function Tutorial() {return (
                (0, _src.h)('div', { 'class': 'section tutorial' }, [
                        (0, _src.h)(_subheader.Subheader, { title: 'Writing Components', subtitle: 'Hello World here we come', id: 'tutorial' }, []),

                        (0, _src.h)('p', null, ['ZLIQ is leveraging ES2015 to read easier and to be readable by everybody. ZLIQ is using ',
                                (0, _src.h)('a', { href: 'https://facebook.github.io/jsx/' }, ['JSX']), ' as a DOM abstraction in JS. This allows templating of the components and allows ZLIQ to define how properties and children are rendered.']),

                        (0, _src.h)('p', null, ['A component in ZLIQ can look like this:']),

                        (0, _src.h)(_utils.Markup, null, ['\n            |import {h} from \'zliq\';\n            |\n            |// insert values in the markup with {x}\n            |export const Highlight = (props, children) =>\n            |    <span class=\'highlight\'>{props.text}</span>;\n            ']),









                        (0, _src.h)('p', null, ['You need to always provide the ', (0, _src.h)('code', null, ['h']), ' function. JSX gets transformed to Hyperscript and the ', (0, _src.h)('code', null, ['h']), ' is what gets evaluated by ZLIQ.']),

                        (0, _src.h)(_utils.Markup, null, ['\n            |// before\n            |export const Highlight = ({text}) =>\n            |    <span class="highlight">{text}</span>;\n            |\n            |// after\n            |export const Highlight = ({text}) =>\n            |    h(\'span\', {\'class\': \'highlight\'}, [text]);\n            ']),











                        (0, _src.h)('p', null, ['ZLIQ is a reactive view rendering framework. Much like React. Reactivity enables the developer to define how the rendering performs without needing to know when or where the data is coming from. Separating the concerns. ZLIQ will rerender the above component every time the input changes. Displaying it with the new content.']),


                        (0, _src.h)('p', null, ['To use components in other components just import the function and use the function name as a tag name:']),

                        (0, _src.h)(_utils.Markup, null, ['\n            |import {h} from \'zliq\';\n            |import {Highlight} from \'./highlight.js\';\n            |\n            |let app = <div>\n            |        <Highlight text="Hello World!!!"></Highlight>\n            |    </div>;\n            |...\n            ']),











                        (0, _src.h)('p', null, ['Insert the generated element into the DOM where you please:']),

                        (0, _src.h)(_utils.Markup, null, ['\n            |import {render} from \'zliq\';\n            |\n            |render(app, document.querySelector(\'#app\'));\n            ']),







                        (0, _src.h)('p', null, ['ZLIQ doesn\'t enforce the parent element rule known from React. Do whatever you like with an element array.']),

                        (0, _src.h)(_utils.Markup, null, ['\n            |import {h} from \'zliq\';\n            |\n            |export const ListItems = () => {\n            |    return [\n            |        <li>I am 1</li>,\n            |        <li>I am 2</li>\n            |    ]\n            |}\n            |\n            |let list = <ul><ListItems /></ul>;\n            ']),














                        (0, _src.h)('p', null, ['ZLIQ allows HTML style event binding to elements:']),

                        (0, _src.h)(_utils.Markup, null, ['|let button = <button onclick={() => console.log(\'got clicked\')}>Click me</button>;']),


                        (0, _src.h)(_subheader.Subheader, { title: 'Streams', subtitle: 'Feel the flow', id: 'streams' }, []),

                        (0, _src.h)('p', null, ['To render static content, we don\'t need to framework... Actual user interaction with our application will change the state at several occasions over time. Stream-librarys like ', (0, _src.h)('a', { href: 'https://github.com/Reactive-Extensions/RxJS' }, ['RXJS']), ' are there explicitly for that scenario. ZLIQ includes a very lite implementation of streams inspired by RXJS and ', (0, _src.h)('a', { href: 'https://github.com/paldepind/flyd' }, ['Flyd']), '.']),

                        (0, _src.h)(_utils.Markup, null, ['\n            |import {stream} from \'zliq\';\n            |\n            |// streams are objects with changing values\n            |let newStream = stream(5);\n            |console.log(newStream()); // 5\n            |newStream(6);\n            |console.log(newStream()); // 6\n            |\n            |// the map function is the easy way to manipulate or interact with values of the stream\n            |newStream.map(value => console.log(value));\n            |// 6\n            |newStream(7);\n            |// 7\n            |\n            |// the format of the steam as a function makes it easy to pipe events into streams\n            |element.attachEventListener(newStream);\n            |// or pipe streams into streams\n            |newStream.map(otherStream);\n            ']),






















                        (0, _src.h)('p', null, ['Available stream manipulation functions are ', (0, _src.h)('code', null, ['.map']), ', ', (0, _src.h)('code', null, ['.is']), ', ', (0, _src.h)('code', null, ['.flatMap']), ', ', (0, _src.h)('code', null, ['.filter']), ', ', (0, _src.h)('code', null, ['.deepSelect']), ', ', (0, _src.h)('code', null, ['.distinct']), ', ', (0, _src.h)('code', null, ['.$']), ', ', (0, _src.h)('code', null, ['.patch']), ' and ', (0, _src.h)('code', null, ['.reduce']), '. Checkout ', (0, _src.h)('code', null, ['src/utils/streamy.js']), ' for descriptions.']),

                        (0, _src.h)('p', null, ['A special manipulation is the ', (0, _src.h)('code', null, ['.$()']), ' query selector. As a developer I often want to react to changes on a specific nested property. The query selector takes one or more property paths and will return a new stream with the current selected properties:']),

                        (0, _src.h)(_utils.Markup, null, ['\n            |let newStream = stream({\n            |    propA: 1,\n            |    propB: {\n            |        propBA: 2\n            |    }\n            |});\n            |console.log(newStream.$(\'propA\')()); // 1\n            |console.log(newStream.$([\'propA\', \'propB.propBA\')()); // [1,2]\n            ']),












                        (0, _src.h)('p', null, ['The counterpart is the ', (0, _src.h)('code', null, ['.patch']), ' functions. It will update just parts of the object:']),

                        (0, _src.h)(_utils.Markup, null, ['\n            |let newStream = stream({\n            |    propA: 1\n            |});\n            |console.log(JSON.stringify(newStream())); // { propA: 1 }\n            |newStream.patch({ propB: 2});\n            |console.log(JSON.stringify(newStream())); // { propA: 1, propB: 2 }\n            ']),










                        (0, _src.h)('p', null, ['ZLIQ recognizes passed streams in the Hyperscript and updates the DOM on new stream values:']),

                        (0, _src.h)(_utils.Markup, null, ['\n            |let newStream = stream(\'Hello World\');\n            |let app <span>{newStream}</span>;\n            |assert(app.outerHTML === \'<span>Hello World</span>\');\n            |newStream(\'Bye World\');\n            |assert(app.outerHTML === \'<span>Bye World</span>\');\n            ']),









                        (0, _src.h)('p', null, ['ZLIQ are always hot, meaning they will send their last value on hooking into it. BUT the streams will not emit `undefined`!']),

                        (0, _src.h)(_utils.Markup, null, ['\n            |let newStream = stream();\n            |assert(newStream() == undefined);\n            |newStream.map(console.log); // nothing is written\n            |newStream(\'Hallo World\'); // Hallo World is written\n            |\n            |newStream.map(console.log); // Hallo World is written again\n            ']),










                        (0, _src.h)(_subheader.Subheader, { title: 'State Management', subtitle: 'F*** Redux. ZLIQ \u2665 streams', id: 'state' }, []),

                        (0, _src.h)('p', null, ['A core reason for web UI frameworks is the automatic updating of the UI according to some state. This is handled very different in the known frameworks. ZLIQ has no dedicated state management. We already saw that ZLIQ reacts to streams in the Hyperscript. This way you are free to decide if you want to put the state locally or globally or where ever.']),

                        (0, _src.h)('p', null, ['For a component based state like in used in the most MV* frameworks just define a state stream locally.']),

                        (0, _src.h)(_utils.Markup, null, ['\n            |let state$ = stream({ clicks: 0 });\n            |let Component = () => <div>\n            |  Clicks: {state$.$(\'clicks\')}\n            |</div>;\n            ']),








                        (0, _src.h)('p', null, ['For a centralized state like in ', (0, _src.h)('a', { href: 'http://redux.js.org/' }, ['Redux']), ' define a state for the application and then pass it on to each component.']),

                        (0, _src.h)(_utils.Markup, null, ['\n            |let state$ = stream({ clicks: 0 });\n            |\n            |let Component = ({state$}) => <div>\n            |  Clicks: {state$.$(\'clicks\')}\n            |</div>;\n            |\n            |let app = <Component state$={state$} />;\n            ']),











                        (0, _src.h)('p', null, ['To manipulate the local or global state you can emit a completely new state to the state stream. Or use the `.patch` function to update only parts of the state:']),

                        (0, _src.h)(_utils.Markup, null, ['\n            |// Redux like action\n            |let increment = (state$) => () => {\n            |    state$.patch({ clicks: state$.$(\'clicks\')() + 1 })\n            |};\n            |\n            |let app = <div>\n            |    <button onclick={increment(state$)}>Click + 1</button>\n            |</div>;\n            ']),












                        (0, _src.h)(_subheader.Subheader, { title: 'Helpers', subtitle: 'Because in some situation you need a friend', id: 'helpers' }, []),

                        (0, _src.h)('p', null, ['ZLIQ acknowledges that a web developer has a bunch of tasks he performs frequently. With ZLIQ this developer could build his own helpers. But we developers are lazy, so ZLIQ provides some basics you probably will use in you ZLIQ application.']),

                        (0, _src.h)('h6', null, ['if$ - boolean switch']),

                        (0, _src.h)('p', null, ['Often you want to show content dependent on boolean-state:']),

                        (0, _src.h)(_utils.Markup, null, ['\n            |<div>\n            |    {\n            |        open$.map(open => {\n            |            if (open) {\n            |                return <span>Open</span>;\n            |            } else {\n            |                return <span>Closed</span>;\n            |            }\n            |        })\n            |    }\n            |</div>\n            ']),















                        (0, _src.h)('p', null, ['ZLIQ provides a boolean switch for these cases:']),

                        (0, _src.h)(_utils.Markup, null, ['\n            |<div>\n            |    {\n            |        if$(open$,\n            |            <span>Open</span>,\n            |            <span>Closed</span>)\n            |    }\n            |</div>\n            ']),











                        (0, _src.h)('h6', null, ['join$ - string merge']),

                        (0, _src.h)('p', null, ['Performing class manipulation on an element can be a pain:']),

                        (0, _src.h)(_utils.Markup, null, ['\n            |<div class={open$.map(open => \'container \' + open ? \'open\' : \'closed\')}>\n            |</div>\n            ']),






                        (0, _src.h)('p', null, ['Imagine this with more then one condition... ZLIQ provides a helper for joining strings even from streams:']),

                        (0, _src.h)(_utils.Markup, null, ['\n            |<div class={join$(\'container\', if$(open$, \'open\', \'closed\'))}>\n            |</div>\n            ']),






                        (0, _src.h)('h6', null, ['promise$ - promise enhancer']),

                        (0, _src.h)('p', null, ['ZLIQ provides a little wrapper around promises. It provides a flag for the ongoing request. This way you can show loading bars easily:']),

                        (0, _src.h)(_utils.Markup, null, ['\n            |import { promise$ } from \'../src\';\n            |\n            |let fetchQuote = (into$) => () => {\n            |\tpromise$(fetch(\'http://quotes.rest/qod.json?category=inspire\')\n            |        .then(res => res.json())\n            |        .then(data => {\n            |\t\t    return {\n            |\t\t    \tquote: data.contents.quotes["0"].quote,\n            |\t\t    \tauthor: data.contents.quotes["0"].author\n            |\t\t    };\n            |\t}).map(into$);\n            |}\n            |let quoteRequest$ = stream({initial: true});\n            |\n            |let app = <div>\n            |    <button onclick={fetchQuote(quoteRequest$)}>Get Quote of the Day</button>\n            |    <p>\n            |        {\n            |            quoteRequest$.map(({initial, data, loading}) => {\n            |                if (initial) {\n            |                   return null;\n            |                }\n            |                if (loading) {\n            |                    return \'Loading...\';\n            |                }\n            |                return <p>{data.quote} - {data.author}</p>;\n            |            })\n            |        }\n            |    </p>\n            |</div>;\n            ']),


































                        (0, _src.h)(_subheader.Subheader, { title: 'Routing', subtitle: 'To allow deeplinks and browser history', id: 'routing' }, []),

                        (0, _src.h)('p', null, ['ZLIQ currently has a basic router. The router prevents page reloading for local links and gives you a stream for the current routing information:']),

                        (0, _src.h)(_utils.Markup, null, ['\n            |import { initRouter } from \'../src\';\n            |let router$ = initRouter();\n            ']),






                        (0, _src.h)('p', null, ['The router element is the counterpart in the Hyperscript. It registers a provided route in the global router so we can decide on routes where we need them, in the view:']),

                        (0, _src.h)(_utils.Markup, null, ['\n            |import { Router } from \'../src\';\n            |let routes = [\n            |    <Router router$={router$} route={\'/\'}>\n            |        <a href=\'/place?foo=bar\'>Go to place bar</a>\n            |    </Router>,\n            |    <Router router$={router$} route={\'/place\'}>\n            |        You are at place {router$.$(\'params.foo\')}.\n            |        <a href=\'/\'>Go home</a>\n            |    </Router>\n            |];\n            ']),














                        (0, _src.h)('p', null, ['The router is currently not allowing for some kind of child-routes.']),

                        (0, _src.h)('p', null, ['Test the router on this page: ', (0, _src.h)('a', { href: '/subpage?foo=bar' }, ['Go to Subpage'])]),






































                        (0, _src.h)(_subheader.Subheader, { title: 'Testing', subtitle: 'A good framework is easy to test', id: 'testing' }, []),

                        (0, _src.h)('p', null, ['ZLIQ provides a helper to test the output of your components over time:']),

                        (0, _src.h)(_utils.Markup, null, ['\n            |import {test} from \'zliq\';\n            |import {Highlight} from \'./highlight.js\';\n            |\n            |let text$ = stream(\'Hello World!!!\');\n            |test(<p>{text$}></p>, [\n            |    // on each update of an element, we can test it\n            |    element => assert.equal(element.outerHTML, \'<p>Hello World!!!</p>\'),\n            |    element => assert.equal(element.outerHTML, \'<p>Bye World!!!</p>\'),\n            |]);\n            |text$(\'Bye World!!!\');\n            ']),














                        (0, _src.h)('p', null, ['If you need an easy test setup checkout how the ZLIQ project uses ', (0, _src.h)('a', { href: 'https://facebook.github.io/jest/' }, ['Jest']), ' with almost 0 configuration.'])]));};

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(44);
if(typeof content === 'string') content = [[module.i, content, '']];
// add the styles to the DOM
var update = __webpack_require__(2)(content, {});
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../node_modules/css-loader/index.js!../node_modules/sass-loader/lib/loader.js!./styles.scss", function() {
			var newContent = require("!!../node_modules/css-loader/index.js!../node_modules/sass-loader/lib/loader.js!./styles.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(46);
if(typeof content === 'string') content = [[module.i, content, '']];
// add the styles to the DOM
var update = __webpack_require__(2)(content, {});
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../css-loader/index.js!../../sass-loader/lib/loader.js!./ghpages-materialize.css", function() {
			var newContent = require("!!../../css-loader/index.js!../../sass-loader/lib/loader.js!./ghpages-materialize.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(17);


var _src = __webpack_require__(0);








var _subheader = __webpack_require__(4);
var _infos = __webpack_require__(13);
var _header = __webpack_require__(12);
var _tutorial = __webpack_require__(15);
var _playground = __webpack_require__(14);


__webpack_require__(16); // components
// router
// dependencies
(0, _src.shrink_stacktrace)(); //styles
// stacktrace
// core
var router$ = (0, _src.initRouter)(); // main render function for the application
// render provided hyperscript into a parent element
// zliq passes around HTMLElement elements so you can decide what to do with them
var app = (0, _src.h)('div', null, [
	(0, _src.h)(_header.Header, null, []),
	(0, _src.h)('div', { 'class': 'container' }, [
		(0, _src.h)('a', { href: 'https://github.com/faboweb/zliq' }, [(0, _src.h)('img', { style: 'position: absolute; top: 0; right: 0; border: 0;', src: 'https://camo.githubusercontent.com/38ef81f8aca64bb9a64448d0d70f1308ef5341ab/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67', alt: 'Fork me on GitHub', 'data-canonical-src': 'https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png' }, [])]),
		(0, _src.h)(_src.Router, { router$: router$, route: '/' }, [
			(0, _src.h)(_infos.Infos, null, []),
			(0, _src.h)('div', { 'class': 'section' }, [
				(0, _src.h)(_subheader.Subheader, { title: 'Motivation', subtitle: 'Why yet another web framework?', id: 'motivation' }, []),

				(0, _src.h)('div', { 'class': 'row' }, [
					(0, _src.h)('p', null, ['Modern web frameworks got really big (React + Redux 139Kb and Angular 2 + Rx 766Kb, ', (0, _src.h)('a', { href: 'https://gist.github.com/Restuta/cda69e50a853aa64912d' }, ['src']), '). As a developer I came into the (un)pleasant situation to teach people how these work. But I couldn\'t really say, as I haven\'t actually understood each line of code in these beasts. But not only that, they also have a lot of structures I as a developer have to learn to get where I want to go. It feels like learning programming again just to be able to render some data.']),
					(0, _src.h)('p', null, ['ZLIQ tries to be something simple. Something that reads in an evening. But that is still so powerful you can just go and display complex UIs with it. Something that feels more JS less Java.']),
					(0, _src.h)('p', null, ['Still ZLIQ doesn\'t try to be the next React or Angular! ZLIQ has a decent render speed even up to several hundred simultaneous updates but it\'s not as fast as ', (0, _src.h)('a', { href: '(https://preactjs.com/' }, ['Preact']), '. And it on purpose does not solve every problem you will ever have. ZLIQ is a tool to help you create the solution that fits your need.'])])]),


			(0, _src.h)(_tutorial.Tutorial, null, []),
			(0, _src.h)(_playground.Playground, null, [])]),

		(0, _src.h)(_src.Router, { router$: router$, route: '/subpage' }, ['You are at a subpage. The router detected the params:',

			router$.$('params').map(function (params) {return JSON.stringify(params);}), '.',
			(0, _src.h)('a', { href: '/#routing' }, ['Go Back'])])])]);



(0, _src.render)(app, document.querySelector('#app'));

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.Output = exports.Markup = undefined;var _prismjs = __webpack_require__(25);var _prismjs2 = _interopRequireDefault(_prismjs);
__webpack_require__(24);
__webpack_require__(61);
var _src = __webpack_require__(0);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var Markup = exports.Markup = function Markup(props, children$) {
    // children are always arrays of arrays to allow children that stream arrays
    var code$ = (0, _src.stream)('');
    setTimeout(function () {
        children$.map(function (children) {
            var code = children[0];
            var strippedMarginCode = code.
            split('\n').
            filter(function (line) {return line.trim() !== '';}).
            map(function (line) {return line.trim().substr(1);}).
            join('\n');
            var html = _prismjs2.default.highlight(strippedMarginCode, _prismjs2.default.languages.jsx);
            return html;
        }).map(code$);
    }, 10);
    return (0, _src.h)('pre', { 'class': 'language-jsx' }, [
        (0, _src.h)('code', { 'class': 'language-jsx', innerHTML: code$ }, [])]);

};

var Output = exports.Output = function Output(props, children) {
    return (0, _src.h)('pre', { 'class': 'example-output' }, [
        children]);

};

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};var pSlice = Array.prototype.slice;
var objectKeys = __webpack_require__(22);
var isArguments = __webpack_require__(21);

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

    // 7.3. Other pairs that do not both pass typeof value == 'object',
    // equivalence is determined by ==.
  } else if (!actual || !expected || (typeof actual === 'undefined' ? 'undefined' : _typeof(actual)) != 'object' && (typeof expected === 'undefined' ? 'undefined' : _typeof(expected)) != 'object') {
    return opts.strict ? actual === expected : actual == expected;

    // 7.4. For all other Object pairs, including Array objects, equivalence is
    // determined by having the same number of owned properties (as verified
    // with Object.prototype.hasOwnProperty.call), the same set of keys
    // (although not necessarily the same order), equivalent values for every
    // corresponding key, and an identical 'prototype' property. Note: this
    // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
};

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer(x) {
  if (!x || (typeof x === 'undefined' ? 'undefined' : _typeof(x)) !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
  return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
    kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
  return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
    return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return (typeof a === 'undefined' ? 'undefined' : _typeof(a)) === (typeof b === 'undefined' ? 'undefined' : _typeof(b));
}

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};var supportsArgumentsClass = function () {
  return Object.prototype.toString.call(arguments);
}() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object) {
  return object &&
  (typeof object === 'undefined' ? 'undefined' : _typeof(object)) == 'object' &&
  typeof object.length == 'number' &&
  Object.prototype.hasOwnProperty.call(object, 'callee') &&
  !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
  false;
};

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
exports = module.exports = typeof Object.keys === 'function' ?
Object.keys : shim;

exports.shim = shim;
function shim(obj) {
  var keys = [];
  for (var key in obj) {keys.push(key);}
  return keys;
}

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};(function (root, factory) {
    'use strict';
    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

    /* istanbul ignore next */
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
        module.exports = factory(require('stackframe'));
    } else {
        root.ErrorStackParser = factory(root.StackFrame);
    }
})(undefined, function ErrorStackParser(StackFrame) {
    'use strict';

    var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\S+\:\d+/;
    var CHROME_IE_STACK_REGEXP = /^\s*at .*(\S+\:\d+|\(native\))/m;
    var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\[native code\])?$/;

    return {
        /**
              * Given an Error object, extract the most information from it.
              *
              * @param {Error} error object
              * @return {Array} of StackFrames
              */
        parse: function ErrorStackParser$$parse(error) {
            if (typeof error.stacktrace !== 'undefined' || typeof error['opera#sourceloc'] !== 'undefined') {
                return this.parseOpera(error);
            } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {
                return this.parseV8OrIE(error);
            } else if (error.stack) {
                return this.parseFFOrSafari(error);
            } else {
                throw new Error('Cannot parse given Error object');
            }
        },

        // Separate line and column numbers from a string of the form: (URI:Line:Column)
        extractLocation: function ErrorStackParser$$extractLocation(urlLike) {
            // Fail-fast but return locations like "(native)"
            if (urlLike.indexOf(':') === -1) {
                return [urlLike];
            }

            var regExp = /(.+?)(?:\:(\d+))?(?:\:(\d+))?$/;
            var parts = regExp.exec(urlLike.replace(/[\(\)]/g, ''));
            return [parts[1], parts[2] || undefined, parts[3] || undefined];
        },

        parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {
            var filtered = error.stack.split('\n').filter(function (line) {
                return !!line.match(CHROME_IE_STACK_REGEXP);
            }, this);

            return filtered.map(function (line) {
                if (line.indexOf('(eval ') > -1) {
                    // Throw away eval information until we implement stacktrace.js/stackframe#8
                    line = line.replace(/eval code/g, 'eval').replace(/(\(eval at [^\()]*)|(\)\,.*$)/g, '');
                }
                var tokens = line.replace(/^\s+/, '').replace(/\(eval code/g, '(').split(/\s+/).slice(1);
                var locationParts = this.extractLocation(tokens.pop());
                var functionName = tokens.join(' ') || undefined;
                var fileName = ['eval', '<anonymous>'].indexOf(locationParts[0]) > -1 ? undefined : locationParts[0];

                return new StackFrame({
                    functionName: functionName,
                    fileName: fileName,
                    lineNumber: locationParts[1],
                    columnNumber: locationParts[2],
                    source: line });

            }, this);
        },

        parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {
            var filtered = error.stack.split('\n').filter(function (line) {
                return !line.match(SAFARI_NATIVE_CODE_REGEXP);
            }, this);

            return filtered.map(function (line) {
                // Throw away eval information until we implement stacktrace.js/stackframe#8
                if (line.indexOf(' > eval') > -1) {
                    line = line.replace(/ line (\d+)(?: > eval line \d+)* > eval\:\d+\:\d+/g, ':$1');
                }

                if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {
                    // Safari eval frames only have function names and nothing else
                    return new StackFrame({
                        functionName: line });

                } else {
                    var tokens = line.split('@');
                    var locationParts = this.extractLocation(tokens.pop());
                    var functionName = tokens.join('@') || undefined;

                    return new StackFrame({
                        functionName: functionName,
                        fileName: locationParts[0],
                        lineNumber: locationParts[1],
                        columnNumber: locationParts[2],
                        source: line });

                }
            }, this);
        },

        parseOpera: function ErrorStackParser$$parseOpera(e) {
            if (!e.stacktrace || e.message.indexOf('\n') > -1 &&
            e.message.split('\n').length > e.stacktrace.split('\n').length) {
                return this.parseOpera9(e);
            } else if (!e.stack) {
                return this.parseOpera10(e);
            } else {
                return this.parseOpera11(e);
            }
        },

        parseOpera9: function ErrorStackParser$$parseOpera9(e) {
            var lineRE = /Line (\d+).*script (?:in )?(\S+)/i;
            var lines = e.message.split('\n');
            var result = [];

            for (var i = 2, len = lines.length; i < len; i += 2) {
                var match = lineRE.exec(lines[i]);
                if (match) {
                    result.push(new StackFrame({
                        fileName: match[2],
                        lineNumber: match[1],
                        source: lines[i] }));

                }
            }

            return result;
        },

        parseOpera10: function ErrorStackParser$$parseOpera10(e) {
            var lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;
            var lines = e.stacktrace.split('\n');
            var result = [];

            for (var i = 0, len = lines.length; i < len; i += 2) {
                var match = lineRE.exec(lines[i]);
                if (match) {
                    result.push(
                    new StackFrame({
                        functionName: match[3] || undefined,
                        fileName: match[2],
                        lineNumber: match[1],
                        source: lines[i] }));


                }
            }

            return result;
        },

        // Opera 10.65+ Error.stack very similar to FF/Safari
        parseOpera11: function ErrorStackParser$$parseOpera11(error) {
            var filtered = error.stack.split('\n').filter(function (line) {
                return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);
            }, this);

            return filtered.map(function (line) {
                var tokens = line.split('@');
                var locationParts = this.extractLocation(tokens.pop());
                var functionCall = tokens.shift() || '';
                var functionName = functionCall.
                replace(/<anonymous function(: (\w+))?>/, '$2').
                replace(/\([^\)]*\)/g, '') || undefined;
                var argsRaw;
                if (functionCall.match(/\(([^\)]*)\)/)) {
                    argsRaw = functionCall.replace(/^[^\(]+\(([^\)]*)\)$/, '$1');
                }
                var args = argsRaw === undefined || argsRaw === '[arguments not available]' ?
                undefined : argsRaw.split(',');

                return new StackFrame({
                    functionName: functionName,
                    args: args,
                    fileName: locationParts[0],
                    lineNumber: locationParts[1],
                    columnNumber: locationParts[2],
                    source: line });

            }, this);
        } };

});

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
(function (Prism) {

	var javascript = Prism.util.clone(Prism.languages.javascript);

	Prism.languages.jsx = Prism.languages.extend('markup', javascript);
	Prism.languages.jsx.tag.pattern = /<\/?[\w\.:-]+\s*(?:\s+[\w\.:-]+(?:=(?:("|')(\\?[\w\W])*?\1|[^\s'">=]+|(\{[\w\W]*?\})))?\s*)*\/?>/i;

	Prism.languages.jsx.tag.inside['attr-value'].pattern = /=[^\{](?:('|")[\w\W]*?(\1)|[^\s>]+)/i;

	var jsxExpression = Prism.util.clone(Prism.languages.jsx);

	delete jsxExpression.punctuation;

	jsxExpression = Prism.languages.insertBefore('jsx', 'operator', {
		'punctuation': /=(?={)|[{}[\];(),.:]/ },
	{ jsx: jsxExpression });

	Prism.languages.insertBefore('inside', 'attr-value', {
		'script': {
			// Allow for one level of nesting
			pattern: /=(\{(?:\{[^}]*\}|[^}])+\})/i,
			inside: jsxExpression,
			'alias': 'language-javascript' } },

	Prism.languages.jsx.tag);

})(Prism);

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {
/* **********************************************
                   Begin prism-core.js
              ********************************************** */

var _self = typeof window !== 'undefined' ?
window // if in browser
:
typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope ?
self // if in worker
: {} // if in node js
;

/**
   * Prism: Lightweight, robust, elegant syntax highlighting
   * MIT license http://www.opensource.org/licenses/mit-license.php/
   * @author Lea Verou http://lea.verou.me
   */

var Prism = function () {

	// Private helper vars
	var lang = /\blang(?:uage)?-(\w+)\b/i;
	var uniqueId = 0;

	var _ = _self.Prism = {
		util: {
			encode: function encode(tokens) {
				if (tokens instanceof Token) {
					return new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);
				} else if (_.util.type(tokens) === 'Array') {
					return tokens.map(_.util.encode);
				} else {
					return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\u00a0/g, ' ');
				}
			},

			type: function type(o) {
				return Object.prototype.toString.call(o).match(/\[object (\w+)\]/)[1];
			},

			objId: function objId(obj) {
				if (!obj['__id']) {
					Object.defineProperty(obj, '__id', { value: ++uniqueId });
				}
				return obj['__id'];
			},

			// Deep clone a language definition (e.g. to extend it)
			clone: function clone(o) {
				var type = _.util.type(o);

				switch (type) {
					case 'Object':
						var clone = {};

						for (var key in o) {
							if (o.hasOwnProperty(key)) {
								clone[key] = _.util.clone(o[key]);
							}
						}

						return clone;

					case 'Array':
						// Check for existence for IE8
						return o.map && o.map(function (v) {return _.util.clone(v);});}


				return o;
			} },


		languages: {
			extend: function extend(id, redef) {
				var lang = _.util.clone(_.languages[id]);

				for (var key in redef) {
					lang[key] = redef[key];
				}

				return lang;
			},

			/**
       * Insert a token before another token in a language literal
       * As this needs to recreate the object (we cannot actually insert before keys in object literals),
       * we cannot just provide an object, we need anobject and a key.
       * @param inside The key (or language id) of the parent
       * @param before The key to insert before. If not provided, the function appends instead.
       * @param insert Object with the key/value pairs to insert
       * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.
       */
			insertBefore: function insertBefore(inside, before, insert, root) {
				root = root || _.languages;
				var grammar = root[inside];

				if (arguments.length == 2) {
					insert = arguments[1];

					for (var newToken in insert) {
						if (insert.hasOwnProperty(newToken)) {
							grammar[newToken] = insert[newToken];
						}
					}

					return grammar;
				}

				var ret = {};

				for (var token in grammar) {

					if (grammar.hasOwnProperty(token)) {

						if (token == before) {

							for (var newToken in insert) {

								if (insert.hasOwnProperty(newToken)) {
									ret[newToken] = insert[newToken];
								}
							}
						}

						ret[token] = grammar[token];
					}
				}

				// Update references in other language definitions
				_.languages.DFS(_.languages, function (key, value) {
					if (value === root[inside] && key != inside) {
						this[key] = ret;
					}
				});

				return root[inside] = ret;
			},

			// Traverse a language definition with Depth First Search
			DFS: function DFS(o, callback, type, visited) {
				visited = visited || {};
				for (var i in o) {
					if (o.hasOwnProperty(i)) {
						callback.call(o, i, o[i], type || i);

						if (_.util.type(o[i]) === 'Object' && !visited[_.util.objId(o[i])]) {
							visited[_.util.objId(o[i])] = true;
							_.languages.DFS(o[i], callback, null, visited);
						} else
						if (_.util.type(o[i]) === 'Array' && !visited[_.util.objId(o[i])]) {
							visited[_.util.objId(o[i])] = true;
							_.languages.DFS(o[i], callback, i, visited);
						}
					}
				}
			} },

		plugins: {},

		highlightAll: function highlightAll(async, callback) {
			var env = {
				callback: callback,
				selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code' };


			_.hooks.run("before-highlightall", env);

			var elements = env.elements || document.querySelectorAll(env.selector);

			for (var i = 0, element; element = elements[i++];) {
				_.highlightElement(element, async === true, env.callback);
			}
		},

		highlightElement: function highlightElement(element, async, callback) {
			// Find language
			var language,grammar,parent = element;

			while (parent && !lang.test(parent.className)) {
				parent = parent.parentNode;
			}

			if (parent) {
				language = (parent.className.match(lang) || [, ''])[1].toLowerCase();
				grammar = _.languages[language];
			}

			// Set language on the element, if not present
			element.className = element.className.replace(lang, '').replace(/\s+/g, ' ') + ' language-' + language;

			// Set language on the parent, for styling
			parent = element.parentNode;

			if (/pre/i.test(parent.nodeName)) {
				parent.className = parent.className.replace(lang, '').replace(/\s+/g, ' ') + ' language-' + language;
			}

			var code = element.textContent;

			var env = {
				element: element,
				language: language,
				grammar: grammar,
				code: code };


			_.hooks.run('before-sanity-check', env);

			if (!env.code || !env.grammar) {
				if (env.code) {
					env.element.textContent = env.code;
				}
				_.hooks.run('complete', env);
				return;
			}

			_.hooks.run('before-highlight', env);

			if (async && _self.Worker) {
				var worker = new Worker(_.filename);

				worker.onmessage = function (evt) {
					env.highlightedCode = evt.data;

					_.hooks.run('before-insert', env);

					env.element.innerHTML = env.highlightedCode;

					callback && callback.call(env.element);
					_.hooks.run('after-highlight', env);
					_.hooks.run('complete', env);
				};

				worker.postMessage(JSON.stringify({
					language: env.language,
					code: env.code,
					immediateClose: true }));

			} else
			{
				env.highlightedCode = _.highlight(env.code, env.grammar, env.language);

				_.hooks.run('before-insert', env);

				env.element.innerHTML = env.highlightedCode;

				callback && callback.call(element);

				_.hooks.run('after-highlight', env);
				_.hooks.run('complete', env);
			}
		},

		highlight: function highlight(text, grammar, language) {
			var tokens = _.tokenize(text, grammar);
			return Token.stringify(_.util.encode(tokens), language);
		},

		tokenize: function tokenize(text, grammar, language) {
			var Token = _.Token;

			var strarr = [text];

			var rest = grammar.rest;

			if (rest) {
				for (var token in rest) {
					grammar[token] = rest[token];
				}

				delete grammar.rest;
			}

			tokenloop: for (var token in grammar) {
				if (!grammar.hasOwnProperty(token) || !grammar[token]) {
					continue;
				}

				var patterns = grammar[token];
				patterns = _.util.type(patterns) === "Array" ? patterns : [patterns];

				for (var j = 0; j < patterns.length; ++j) {
					var pattern = patterns[j],
					inside = pattern.inside,
					lookbehind = !!pattern.lookbehind,
					greedy = !!pattern.greedy,
					lookbehindLength = 0,
					alias = pattern.alias;

					if (greedy && !pattern.pattern.global) {
						// Without the global flag, lastIndex won't work
						var flags = pattern.pattern.toString().match(/[imuy]*$/)[0];
						pattern.pattern = RegExp(pattern.pattern.source, flags + "g");
					}

					pattern = pattern.pattern || pattern;

					// Don’t cache length as it changes during the loop
					for (var i = 0, pos = 0; i < strarr.length; pos += strarr[i].length, ++i) {

						var str = strarr[i];

						if (strarr.length > text.length) {
							// Something went terribly wrong, ABORT, ABORT!
							break tokenloop;
						}

						if (str instanceof Token) {
							continue;
						}

						pattern.lastIndex = 0;

						var match = pattern.exec(str),
						delNum = 1;

						// Greedy patterns can override/remove up to two previously matched tokens
						if (!match && greedy && i != strarr.length - 1) {
							pattern.lastIndex = pos;
							match = pattern.exec(text);
							if (!match) {
								break;
							}

							var from = match.index + (lookbehind ? match[1].length : 0),
							to = match.index + match[0].length,
							k = i,
							p = pos;

							for (var len = strarr.length; k < len && p < to; ++k) {
								p += strarr[k].length;
								// Move the index i to the element in strarr that is closest to from
								if (from >= p) {
									++i;
									pos = p;
								}
							}

							/*
          * If strarr[i] is a Token, then the match starts inside another Token, which is invalid
          * If strarr[k - 1] is greedy we are in conflict with another greedy pattern
          */
							if (strarr[i] instanceof Token || strarr[k - 1].greedy) {
								continue;
							}

							// Number of tokens to delete and replace with the new match
							delNum = k - i;
							str = text.slice(pos, p);
							match.index -= pos;
						}

						if (!match) {
							continue;
						}

						if (lookbehind) {
							lookbehindLength = match[1].length;
						}

						var from = match.index + lookbehindLength,
						match = match[0].slice(lookbehindLength),
						to = from + match.length,
						before = str.slice(0, from),
						after = str.slice(to);

						var args = [i, delNum];

						if (before) {
							args.push(before);
						}

						var wrapped = new Token(token, inside ? _.tokenize(match, inside) : match, alias, match, greedy);

						args.push(wrapped);

						if (after) {
							args.push(after);
						}

						Array.prototype.splice.apply(strarr, args);
					}
				}
			}

			return strarr;
		},

		hooks: {
			all: {},

			add: function add(name, callback) {
				var hooks = _.hooks.all;

				hooks[name] = hooks[name] || [];

				hooks[name].push(callback);
			},

			run: function run(name, env) {
				var callbacks = _.hooks.all[name];

				if (!callbacks || !callbacks.length) {
					return;
				}

				for (var i = 0, callback; callback = callbacks[i++];) {
					callback(env);
				}
			} } };



	var Token = _.Token = function (type, content, alias, matchedStr, greedy) {
		this.type = type;
		this.content = content;
		this.alias = alias;
		// Copy of the full string this token was created from
		this.length = (matchedStr || "").length | 0;
		this.greedy = !!greedy;
	};

	Token.stringify = function (o, language, parent) {
		if (typeof o == 'string') {
			return o;
		}

		if (_.util.type(o) === 'Array') {
			return o.map(function (element) {
				return Token.stringify(element, language, o);
			}).join('');
		}

		var env = {
			type: o.type,
			content: Token.stringify(o.content, language, parent),
			tag: 'span',
			classes: ['token', o.type],
			attributes: {},
			language: language,
			parent: parent };


		if (env.type == 'comment') {
			env.attributes['spellcheck'] = 'true';
		}

		if (o.alias) {
			var aliases = _.util.type(o.alias) === 'Array' ? o.alias : [o.alias];
			Array.prototype.push.apply(env.classes, aliases);
		}

		_.hooks.run('wrap', env);

		var attributes = Object.keys(env.attributes).map(function (name) {
			return name + '="' + (env.attributes[name] || '').replace(/"/g, '&quot;') + '"';
		}).join(' ');

		return '<' + env.tag + ' class="' + env.classes.join(' ') + '"' + (attributes ? ' ' + attributes : '') + '>' + env.content + '</' + env.tag + '>';

	};

	if (!_self.document) {
		if (!_self.addEventListener) {
			// in Node.js
			return _self.Prism;
		}
		// In worker
		_self.addEventListener('message', function (evt) {
			var message = JSON.parse(evt.data),
			lang = message.language,
			code = message.code,
			immediateClose = message.immediateClose;

			_self.postMessage(_.highlight(code, _.languages[lang], lang));
			if (immediateClose) {
				_self.close();
			}
		}, false);

		return _self.Prism;
	}

	//Get current script and highlight
	var script = document.currentScript || [].slice.call(document.getElementsByTagName("script")).pop();

	if (script) {
		_.filename = script.src;

		if (document.addEventListener && !script.hasAttribute('data-manual')) {
			if (document.readyState !== "loading") {
				if (window.requestAnimationFrame) {
					window.requestAnimationFrame(_.highlightAll);
				} else {
					window.setTimeout(_.highlightAll, 16);
				}
			} else
			{
				document.addEventListener('DOMContentLoaded', _.highlightAll);
			}
		}
	}

	return _self.Prism;

}();

if (typeof module !== 'undefined' && module.exports) {
	module.exports = Prism;
}

// hack for components to work correctly in node.js
if (typeof global !== 'undefined') {
	global.Prism = Prism;
}


/* **********************************************
       Begin prism-markup.js
  ********************************************** */

Prism.languages.markup = {
	'comment': /<!--[\w\W]*?-->/,
	'prolog': /<\?[\w\W]+?\?>/,
	'doctype': /<!DOCTYPE[\w\W]+?>/i,
	'cdata': /<!\[CDATA\[[\w\W]*?]]>/i,
	'tag': {
		pattern: /<\/?(?!\d)[^\s>\/=$<]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\\1|\\?(?!\1)[\w\W])*\1|[^\s'">=]+))?)*\s*\/?>/i,
		inside: {
			'tag': {
				pattern: /^<\/?[^\s>\/]+/i,
				inside: {
					'punctuation': /^<\/?/,
					'namespace': /^[^\s>\/:]+:/ } },


			'attr-value': {
				pattern: /=(?:('|")[\w\W]*?(\1)|[^\s>]+)/i,
				inside: {
					'punctuation': /[=>"']/ } },


			'punctuation': /\/?>/,
			'attr-name': {
				pattern: /[^\s>\/]+/,
				inside: {
					'namespace': /^[^\s>\/:]+:/ } } } },





	'entity': /&#?[\da-z]{1,8};/i };


// Plugin to make entity title show the real entity, idea by Roman Komarov
Prism.hooks.add('wrap', function (env) {

	if (env.type === 'entity') {
		env.attributes['title'] = env.content.replace(/&amp;/, '&');
	}
});

Prism.languages.xml = Prism.languages.markup;
Prism.languages.html = Prism.languages.markup;
Prism.languages.mathml = Prism.languages.markup;
Prism.languages.svg = Prism.languages.markup;


/* **********************************************
                                                   Begin prism-css.js
                                              ********************************************** */

Prism.languages.css = {
	'comment': /\/\*[\w\W]*?\*\//,
	'atrule': {
		pattern: /@[\w-]+?.*?(;|(?=\s*\{))/i,
		inside: {
			'rule': /@[\w-]+/
			// See rest below
		} },

	'url': /url\((?:(["'])(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1|.*?)\)/i,
	'selector': /[^\{\}\s][^\{\};]*?(?=\s*\{)/,
	'string': {
		pattern: /("|')(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1/,
		greedy: true },

	'property': /(\b|\B)[\w-]+(?=\s*:)/i,
	'important': /\B!important\b/i,
	'function': /[-a-z0-9]+(?=\()/i,
	'punctuation': /[(){};:]/ };


Prism.languages.css['atrule'].inside.rest = Prism.util.clone(Prism.languages.css);

if (Prism.languages.markup) {
	Prism.languages.insertBefore('markup', 'tag', {
		'style': {
			pattern: /(<style[\w\W]*?>)[\w\W]*?(?=<\/style>)/i,
			lookbehind: true,
			inside: Prism.languages.css,
			alias: 'language-css' } });



	Prism.languages.insertBefore('inside', 'attr-value', {
		'style-attr': {
			pattern: /\s*style=("|').*?\1/i,
			inside: {
				'attr-name': {
					pattern: /^\s*style/i,
					inside: Prism.languages.markup.tag.inside },

				'punctuation': /^\s*=\s*['"]|['"]\s*$/,
				'attr-value': {
					pattern: /.+/i,
					inside: Prism.languages.css } },


			alias: 'language-css' } },

	Prism.languages.markup.tag);
}

/* **********************************************
       Begin prism-clike.js
  ********************************************** */

Prism.languages.clike = {
	'comment': [
	{
		pattern: /(^|[^\\])\/\*[\w\W]*?\*\//,
		lookbehind: true },

	{
		pattern: /(^|[^\\:])\/\/.*/,
		lookbehind: true }],


	'string': {
		pattern: /(["'])(\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
		greedy: true },

	'class-name': {
		pattern: /((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[a-z0-9_\.\\]+/i,
		lookbehind: true,
		inside: {
			punctuation: /(\.|\\)/ } },


	'keyword': /\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,
	'boolean': /\b(true|false)\b/,
	'function': /[a-z0-9_]+(?=\()/i,
	'number': /\b-?(?:0x[\da-f]+|\d*\.?\d+(?:e[+-]?\d+)?)\b/i,
	'operator': /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,
	'punctuation': /[{}[\];(),.:]/ };



/* **********************************************
                                        Begin prism-javascript.js
                                   ********************************************** */

Prism.languages.javascript = Prism.languages.extend('clike', {
	'keyword': /\b(as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\b/,
	'number': /\b-?(0x[\dA-Fa-f]+|0b[01]+|0o[0-7]+|\d*\.?\d+([Ee][+-]?\d+)?|NaN|Infinity)\b/,
	// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
	'function': /[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*(?=\()/i,
	'operator': /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*\*?|\/|~|\^|%|\.{3}/ });


Prism.languages.insertBefore('javascript', 'keyword', {
	'regex': {
		pattern: /(^|[^/])\/(?!\/)(\[.+?]|\\.|[^/\\\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})]))/,
		lookbehind: true,
		greedy: true } });



Prism.languages.insertBefore('javascript', 'string', {
	'template-string': {
		pattern: /`(?:\\\\|\\?[^\\])*?`/,
		greedy: true,
		inside: {
			'interpolation': {
				pattern: /\$\{[^}]+\}/,
				inside: {
					'interpolation-punctuation': {
						pattern: /^\$\{|\}$/,
						alias: 'punctuation' },

					rest: Prism.languages.javascript } },


			'string': /[\s\S]+/ } } });




if (Prism.languages.markup) {
	Prism.languages.insertBefore('markup', 'tag', {
		'script': {
			pattern: /(<script[\w\W]*?>)[\w\W]*?(?=<\/script>)/i,
			lookbehind: true,
			inside: Prism.languages.javascript,
			alias: 'language-javascript' } });


}

Prism.languages.js = Prism.languages.javascript;

/* **********************************************
                                                      Begin prism-file-highlight.js
                                                 ********************************************** */

(function () {
	if (typeof self === 'undefined' || !self.Prism || !self.document || !document.querySelector) {
		return;
	}

	self.Prism.fileHighlight = function () {

		var Extensions = {
			'js': 'javascript',
			'py': 'python',
			'rb': 'ruby',
			'ps1': 'powershell',
			'psm1': 'powershell',
			'sh': 'bash',
			'bat': 'batch',
			'h': 'c',
			'tex': 'latex' };


		if (Array.prototype.forEach) {// Check to prevent error in IE8
			Array.prototype.slice.call(document.querySelectorAll('pre[data-src]')).forEach(function (pre) {
				var src = pre.getAttribute('data-src');

				var language,parent = pre;
				var lang = /\blang(?:uage)?-(?!\*)(\w+)\b/i;
				while (parent && !lang.test(parent.className)) {
					parent = parent.parentNode;
				}

				if (parent) {
					language = (pre.className.match(lang) || [, ''])[1];
				}

				if (!language) {
					var extension = (src.match(/\.(\w+)$/) || [, ''])[1];
					language = Extensions[extension] || extension;
				}

				var code = document.createElement('code');
				code.className = 'language-' + language;

				pre.textContent = '';

				code.textContent = 'Loading…';

				pre.appendChild(code);

				var xhr = new XMLHttpRequest();

				xhr.open('GET', src, true);

				xhr.onreadystatechange = function () {
					if (xhr.readyState == 4) {

						if (xhr.status < 400 && xhr.responseText) {
							code.textContent = xhr.responseText;

							Prism.highlightElement(code);
						} else
						if (xhr.status >= 400) {
							code.textContent = '✖ Error ' + xhr.status + ' while fetching file: ' + xhr.statusText;
						} else
						{
							code.textContent = '✖ Error: File does not exist or is empty';
						}
					}
				};

				xhr.send(null);
			});
		}

	};

	document.addEventListener('DOMContentLoaded', self.Prism.fileHighlight);

})();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(36)))

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 /* -*- Mode: js; js-indent-level: 2; -*- */
/*
                                                           * Copyright 2011 Mozilla Foundation and contributors
                                                           * Licensed under the New BSD license. See LICENSE or:
                                                           * http://opensource.org/licenses/BSD-3-Clause
                                                           */

var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

/**
                                                                                                  * Encode an integer in the range of 0 to 63 to a single base 64 digit.
                                                                                                  */
exports.encode = function (number) {
  if (0 <= number && number < intToCharMap.length) {
    return intToCharMap[number];
  }
  throw new TypeError("Must be between 0 and 63: " + number);
};

/**
    * Decode a single base 64 character code digit to an integer. Returns -1 on
    * failure.
    */
exports.decode = function (charCode) {
  var bigA = 65; // 'A'
  var bigZ = 90; // 'Z'

  var littleA = 97; // 'a'
  var littleZ = 122; // 'z'

  var zero = 48; // '0'
  var nine = 57; // '9'

  var plus = 43; // '+'
  var slash = 47; // '/'

  var littleOffset = 26;
  var numberOffset = 52;

  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
  if (bigA <= charCode && charCode <= bigZ) {
    return charCode - bigA;
  }

  // 26 - 51: abcdefghijklmnopqrstuvwxyz
  if (littleA <= charCode && charCode <= littleZ) {
    return charCode - littleA + littleOffset;
  }

  // 52 - 61: 0123456789
  if (zero <= charCode && charCode <= nine) {
    return charCode - zero + numberOffset;
  }

  // 62: +
  if (charCode == plus) {
    return 62;
  }

  // 63: /
  if (charCode == slash) {
    return 63;
  }

  // Invalid base64 digit.
  return -1;
};

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 /* -*- Mode: js; js-indent-level: 2; -*- */
/*
                                                           * Copyright 2011 Mozilla Foundation and contributors
                                                           * Licensed under the New BSD license. See LICENSE or:
                                                           * http://opensource.org/licenses/BSD-3-Clause
                                                           */

exports.GREATEST_LOWER_BOUND = 1;
exports.LEAST_UPPER_BOUND = 2;

/**
                                * Recursive implementation of binary search.
                                *
                                * @param aLow Indices here and lower do not contain the needle.
                                * @param aHigh Indices here and higher do not contain the needle.
                                * @param aNeedle The element being searched for.
                                * @param aHaystack The non-empty array being searched.
                                * @param aCompare Function which takes two elements and returns -1, 0, or 1.
                                * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
                                *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
                                *     closest element that is smaller than or greater than the one we are
                                *     searching for, respectively, if the exact element cannot be found.
                                */
function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
  // This function terminates when one of the following is true:
  //
  //   1. We find the exact element we are looking for.
  //
  //   2. We did not find the exact element, but we can return the index of
  //      the next-closest element.
  //
  //   3. We did not find the exact element, and there is no next-closest
  //      element than the one we are searching for, so we return -1.
  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
  var cmp = aCompare(aNeedle, aHaystack[mid], true);
  if (cmp === 0) {
    // Found the element we are looking for.
    return mid;
  } else
  if (cmp > 0) {
    // Our needle is greater than aHaystack[mid].
    if (aHigh - mid > 1) {
      // The element is in the upper half.
      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
    }

    // The exact needle element was not found in this haystack. Determine if
    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return aHigh < aHaystack.length ? aHigh : -1;
    } else {
      return mid;
    }
  } else
  {
    // Our needle is less than aHaystack[mid].
    if (mid - aLow > 1) {
      // The element is in the lower half.
      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
    }

    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return mid;
    } else {
      return aLow < 0 ? -1 : aLow;
    }
  }
}

/**
   * This is an implementation of binary search which will always try and return
   * the index of the closest element if there is no exact hit. This is because
   * mappings between original and generated line/col pairs are single points,
   * and there is an implicit region between each of them, so a miss just means
   * that you aren't on the very start of a region.
   *
   * @param aNeedle The element you are looking for.
   * @param aHaystack The array that is being searched.
   * @param aCompare A function which takes the needle and an element in the
   *     array and returns -1, 0, or 1 depending on whether the needle is less
   *     than, equal to, or greater than the element, respectively.
   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
   */
exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
  if (aHaystack.length === 0) {
    return -1;
  }

  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
  aCompare, aBias || exports.GREATEST_LOWER_BOUND);
  if (index < 0) {
    return -1;
  }

  // We have found either the exact element, or the next-closest element than
  // the one we are searching for. However, there may be more than one such
  // element. Make sure we always return the smallest of these.
  while (index - 1 >= 0) {
    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
      break;
    }
    --index;
  }

  return index;
};

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 /* -*- Mode: js; js-indent-level: 2; -*- */
/*
                                                           * Copyright 2014 Mozilla Foundation and contributors
                                                           * Licensed under the New BSD license. See LICENSE or:
                                                           * http://opensource.org/licenses/BSD-3-Clause
                                                           */

var util = __webpack_require__(3);

/**
                               * Determine whether mappingB is after mappingA with respect to generated
                               * position.
                               */
function generatedPositionAfter(mappingA, mappingB) {
  // Optimized for most common case
  var lineA = mappingA.generatedLine;
  var lineB = mappingB.generatedLine;
  var columnA = mappingA.generatedColumn;
  var columnB = mappingB.generatedColumn;
  return lineB > lineA || lineB == lineA && columnB >= columnA ||
  util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
}

/**
   * A data structure to provide a sorted view of accumulated mappings in a
   * performance conscious manner. It trades a neglibable overhead in general
   * case for a large speedup in case of mappings being added in order.
   */
function MappingList() {
  this._array = [];
  this._sorted = true;
  // Serves as infimum
  this._last = { generatedLine: -1, generatedColumn: 0 };
}

/**
   * Iterate through internal items. This method takes the same arguments that
   * `Array.prototype.forEach` takes.
   *
   * NOTE: The order of the mappings is NOT guaranteed.
   */
MappingList.prototype.unsortedForEach =
function MappingList_forEach(aCallback, aThisArg) {
  this._array.forEach(aCallback, aThisArg);
};

/**
    * Add the given source mapping.
    *
    * @param Object aMapping
    */
MappingList.prototype.add = function MappingList_add(aMapping) {
  if (generatedPositionAfter(this._last, aMapping)) {
    this._last = aMapping;
    this._array.push(aMapping);
  } else {
    this._sorted = false;
    this._array.push(aMapping);
  }
};

/**
    * Returns the flat, sorted array of mappings. The mappings are sorted by
    * generated position.
    *
    * WARNING: This method returns internal data without copying, for
    * performance. The return value must NOT be mutated, and should be treated as
    * an immutable borrow. If you want to take ownership, you must make your own
    * copy.
    */
MappingList.prototype.toArray = function MappingList_toArray() {
  if (!this._sorted) {
    this._array.sort(util.compareByGeneratedPositionsInflated);
    this._sorted = true;
  }
  return this._array;
};

exports.MappingList = MappingList;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 /* -*- Mode: js; js-indent-level: 2; -*- */
/*
                                                           * Copyright 2011 Mozilla Foundation and contributors
                                                           * Licensed under the New BSD license. See LICENSE or:
                                                           * http://opensource.org/licenses/BSD-3-Clause
                                                           */

// It turns out that some (most?) JavaScript engines don't self-host
// `Array.prototype.sort`. This makes sense because C++ will likely remain
// faster than JS when doing raw CPU-intensive sorting. However, when using a
// custom comparator function, calling back and forth between the VM's C++ and
// JIT'd JS is rather slow *and* loses JIT type information, resulting in
// worse generated code for the comparator function than would be optimal. In
// fact, when sorting with a comparator, these costs outweigh the benefits of
// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
// a ~3500ms mean speed-up in `bench/bench.html`.

/**
 * Swap the elements indexed by `x` and `y` in the array `ary`.
 *
 * @param {Array} ary
 *        The array.
 * @param {Number} x
 *        The index of the first item.
 * @param {Number} y
 *        The index of the second item.
 */
function swap(ary, x, y) {
  var temp = ary[x];
  ary[x] = ary[y];
  ary[y] = temp;
}

/**
   * Returns a random integer within the range `low .. high` inclusive.
   *
   * @param {Number} low
   *        The lower bound on the range.
   * @param {Number} high
   *        The upper bound on the range.
   */
function randomIntInRange(low, high) {
  return Math.round(low + Math.random() * (high - low));
}

/**
   * The Quick Sort algorithm.
   *
   * @param {Array} ary
   *        An array to sort.
   * @param {function} comparator
   *        Function to use to compare two items.
   * @param {Number} p
   *        Start index of the array
   * @param {Number} r
   *        End index of the array
   */
function doQuickSort(ary, comparator, p, r) {
  // If our lower bound is less than our upper bound, we (1) partition the
  // array into two pieces and (2) recurse on each half. If it is not, this is
  // the empty array and our base case.

  if (p < r) {
    // (1) Partitioning.
    //
    // The partitioning chooses a pivot between `p` and `r` and moves all
    // elements that are less than or equal to the pivot to the before it, and
    // all the elements that are greater than it after it. The effect is that
    // once partition is done, the pivot is in the exact place it will be when
    // the array is put in sorted order, and it will not need to be moved
    // again. This runs in O(n) time.

    // Always choose a random pivot so that an input array which is reverse
    // sorted does not cause O(n^2) running time.
    var pivotIndex = randomIntInRange(p, r);
    var i = p - 1;

    swap(ary, pivotIndex, r);
    var pivot = ary[r];

    // Immediately after `j` is incremented in this loop, the following hold
    // true:
    //
    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
    //
    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
    for (var j = p; j < r; j++) {
      if (comparator(ary[j], pivot) <= 0) {
        i += 1;
        swap(ary, i, j);
      }
    }

    swap(ary, i + 1, j);
    var q = i + 1;

    // (2) Recurse on each half.

    doQuickSort(ary, comparator, p, q - 1);
    doQuickSort(ary, comparator, q + 1, r);
  }
}

/**
   * Sort the given array in-place with the given comparator function.
   *
   * @param {Array} ary
   *        An array to sort.
   * @param {function} comparator
   *        Function to use to compare two items.
   */
exports.quickSort = function (ary, comparator) {
  doQuickSort(ary, comparator, 0, ary.length - 1);
};

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 /* -*- Mode: js; js-indent-level: 2; -*- */
/*
                                                           * Copyright 2011 Mozilla Foundation and contributors
                                                           * Licensed under the New BSD license. See LICENSE or:
                                                           * http://opensource.org/licenses/BSD-3-Clause
                                                           */

var util = __webpack_require__(3);
var binarySearch = __webpack_require__(27);
var ArraySet = __webpack_require__(8).ArraySet;
var base64VLQ = __webpack_require__(9);
var quickSort = __webpack_require__(29).quickSort;

function SourceMapConsumer(aSourceMap) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
  }

  return sourceMap.sections != null ?
  new IndexedSourceMapConsumer(sourceMap) :
  new BasicSourceMapConsumer(sourceMap);
}

SourceMapConsumer.fromSourceMap = function (aSourceMap) {
  return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
};

/**
    * The version of the source mapping spec that we are consuming.
    */
SourceMapConsumer.prototype._version = 3;

// `__generatedMappings` and `__originalMappings` are arrays that hold the
// parsed mapping coordinates from the source map's "mappings" attribute. They
// are lazily instantiated, accessed via the `_generatedMappings` and
// `_originalMappings` getters respectively, and we only parse the mappings
// and create these arrays once queried for a source location. We jump through
// these hoops because there can be many thousands of mappings, and parsing
// them is expensive, so we only want to do it if we must.
//
// Each object in the arrays is of the form:
//
//     {
//       generatedLine: The line number in the generated code,
//       generatedColumn: The column number in the generated code,
//       source: The path to the original source file that generated this
//               chunk of code,
//       originalLine: The line number in the original source that
//                     corresponds to this chunk of generated code,
//       originalColumn: The column number in the original source that
//                       corresponds to this chunk of generated code,
//       name: The name of the original symbol which generated this chunk of
//             code.
//     }
//
// All properties except for `generatedLine` and `generatedColumn` can be
// `null`.
//
// `_generatedMappings` is ordered by the generated positions.
//
// `_originalMappings` is ordered by the original positions.

SourceMapConsumer.prototype.__generatedMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
  get: function get() {
    if (!this.__generatedMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__generatedMappings;
  } });


SourceMapConsumer.prototype.__originalMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
  get: function get() {
    if (!this.__originalMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__originalMappings;
  } });


SourceMapConsumer.prototype._charIsMappingSeparator =
function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
  var c = aStr.charAt(index);
  return c === ";" || c === ",";
};

/**
    * Parse the mappings in a string in to a data structure which we can easily
    * query (the ordered arrays in the `this.__generatedMappings` and
    * `this.__originalMappings` properties).
    */
SourceMapConsumer.prototype._parseMappings =
function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
  throw new Error("Subclasses must implement _parseMappings");
};

SourceMapConsumer.GENERATED_ORDER = 1;
SourceMapConsumer.ORIGINAL_ORDER = 2;

SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
SourceMapConsumer.LEAST_UPPER_BOUND = 2;

/**
                                          * Iterate over each mapping between an original source/line/column and a
                                          * generated line/column in this source map.
                                          *
                                          * @param Function aCallback
                                          *        The function that is called with each mapping.
                                          * @param Object aContext
                                          *        Optional. If specified, this object will be the value of `this` every
                                          *        time that `aCallback` is called.
                                          * @param aOrder
                                          *        Either `SourceMapConsumer.GENERATED_ORDER` or
                                          *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
                                          *        iterate over the mappings sorted by the generated file's line/column
                                          *        order or the original's source/line/column order, respectively. Defaults to
                                          *        `SourceMapConsumer.GENERATED_ORDER`.
                                          */
SourceMapConsumer.prototype.eachMapping =
function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
  var context = aContext || null;
  var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

  var mappings;
  switch (order) {
    case SourceMapConsumer.GENERATED_ORDER:
      mappings = this._generatedMappings;
      break;
    case SourceMapConsumer.ORIGINAL_ORDER:
      mappings = this._originalMappings;
      break;
    default:
      throw new Error("Unknown order of iteration.");}


  var sourceRoot = this.sourceRoot;
  mappings.map(function (mapping) {
    var source = mapping.source === null ? null : this._sources.at(mapping.source);
    if (source != null && sourceRoot != null) {
      source = util.join(sourceRoot, source);
    }
    return {
      source: source,
      generatedLine: mapping.generatedLine,
      generatedColumn: mapping.generatedColumn,
      originalLine: mapping.originalLine,
      originalColumn: mapping.originalColumn,
      name: mapping.name === null ? null : this._names.at(mapping.name) };

  }, this).forEach(aCallback, context);
};

/**
    * Returns all generated line and column information for the original source,
    * line, and column provided. If no column is provided, returns all mappings
    * corresponding to a either the line we are searching for or the next
    * closest line that has any mappings. Otherwise, returns all mappings
    * corresponding to the given line and either the column we are searching for
    * or the next closest column that has any offsets.
    *
    * The only argument is an object with the following properties:
    *
    *   - source: The filename of the original source.
    *   - line: The line number in the original source.
    *   - column: Optional. the column number in the original source.
    *
    * and an array of objects is returned, each with the following properties:
    *
    *   - line: The line number in the generated source, or null.
    *   - column: The column number in the generated source, or null.
    */
SourceMapConsumer.prototype.allGeneratedPositionsFor =
function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
  var line = util.getArg(aArgs, 'line');

  // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
  // returns the index of the closest mapping less than the needle. By
  // setting needle.originalColumn to 0, we thus find the last mapping for
  // the given line, provided such a mapping exists.
  var needle = {
    source: util.getArg(aArgs, 'source'),
    originalLine: line,
    originalColumn: util.getArg(aArgs, 'column', 0) };


  if (this.sourceRoot != null) {
    needle.source = util.relative(this.sourceRoot, needle.source);
  }
  if (!this._sources.has(needle.source)) {
    return [];
  }
  needle.source = this._sources.indexOf(needle.source);

  var mappings = [];

  var index = this._findMapping(needle,
  this._originalMappings,
  "originalLine",
  "originalColumn",
  util.compareByOriginalPositions,
  binarySearch.LEAST_UPPER_BOUND);
  if (index >= 0) {
    var mapping = this._originalMappings[index];

    if (aArgs.column === undefined) {
      var originalLine = mapping.originalLine;

      // Iterate until either we run out of mappings, or we run into
      // a mapping for a different line than the one we found. Since
      // mappings are sorted, this is guaranteed to find all mappings for
      // the line we found.
      while (mapping && mapping.originalLine === originalLine) {
        mappings.push({
          line: util.getArg(mapping, 'generatedLine', null),
          column: util.getArg(mapping, 'generatedColumn', null),
          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null) });


        mapping = this._originalMappings[++index];
      }
    } else {
      var originalColumn = mapping.originalColumn;

      // Iterate until either we run out of mappings, or we run into
      // a mapping for a different line than the one we were searching for.
      // Since mappings are sorted, this is guaranteed to find all mappings for
      // the line we are searching for.
      while (mapping &&
      mapping.originalLine === line &&
      mapping.originalColumn == originalColumn) {
        mappings.push({
          line: util.getArg(mapping, 'generatedLine', null),
          column: util.getArg(mapping, 'generatedColumn', null),
          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null) });


        mapping = this._originalMappings[++index];
      }
    }
  }

  return mappings;
};

exports.SourceMapConsumer = SourceMapConsumer;

/**
                                                * A BasicSourceMapConsumer instance represents a parsed source map which we can
                                                * query for information about the original file positions by giving it a file
                                                * position in the generated source.
                                                *
                                                * The only parameter is the raw source map (either as a JSON string, or
                                                * already parsed to an object). According to the spec, source maps have the
                                                * following attributes:
                                                *
                                                *   - version: Which version of the source map spec this map is following.
                                                *   - sources: An array of URLs to the original source files.
                                                *   - names: An array of identifiers which can be referrenced by individual mappings.
                                                *   - sourceRoot: Optional. The URL root from which all sources are relative.
                                                *   - sourcesContent: Optional. An array of contents of the original source files.
                                                *   - mappings: A string of base64 VLQs which contain the actual mappings.
                                                *   - file: Optional. The generated file this source map is associated with.
                                                *
                                                * Here is an example source map, taken from the source map spec[0]:
                                                *
                                                *     {
                                                *       version : 3,
                                                *       file: "out.js",
                                                *       sourceRoot : "",
                                                *       sources: ["foo.js", "bar.js"],
                                                *       names: ["src", "maps", "are", "fun"],
                                                *       mappings: "AA,AB;;ABCDE;"
                                                *     }
                                                *
                                                * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
                                                */
function BasicSourceMapConsumer(aSourceMap) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
  }

  var version = util.getArg(sourceMap, 'version');
  var sources = util.getArg(sourceMap, 'sources');
  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
  // requires the array) to play nice here.
  var names = util.getArg(sourceMap, 'names', []);
  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
  var mappings = util.getArg(sourceMap, 'mappings');
  var file = util.getArg(sourceMap, 'file', null);

  // Once again, Sass deviates from the spec and supplies the version as a
  // string rather than a number, so we use loose equality checking here.
  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  sources = sources.
  map(String
  // Some source maps produce relative source paths like "./foo.js" instead of
  // "foo.js".  Normalize these first so that future comparisons will succeed.
  // See bugzil.la/1090768.
  ).map(util.normalize
  // Always ensure that absolute sources are internally stored relative to
  // the source root, if the source root is absolute. Not doing this would
  // be particularly problematic when the source root is a prefix of the
  // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
  ).map(function (source) {
    return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ?
    util.relative(sourceRoot, source) :
    source;
  });

  // Pass `true` below to allow duplicate names and sources. While source maps
  // are intended to be compressed and deduplicated, the TypeScript compiler
  // sometimes generates source maps with duplicates in them. See Github issue
  // #72 and bugzil.la/889492.
  this._names = ArraySet.fromArray(names.map(String), true);
  this._sources = ArraySet.fromArray(sources, true);

  this.sourceRoot = sourceRoot;
  this.sourcesContent = sourcesContent;
  this._mappings = mappings;
  this.file = file;
}

BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

/**
                                                                * Create a BasicSourceMapConsumer from a SourceMapGenerator.
                                                                *
                                                                * @param SourceMapGenerator aSourceMap
                                                                *        The source map that will be consumed.
                                                                * @returns BasicSourceMapConsumer
                                                                */
BasicSourceMapConsumer.fromSourceMap =
function SourceMapConsumer_fromSourceMap(aSourceMap) {
  var smc = Object.create(BasicSourceMapConsumer.prototype);

  var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
  var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
  smc.sourceRoot = aSourceMap._sourceRoot;
  smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
  smc.sourceRoot);
  smc.file = aSourceMap._file;

  // Because we are modifying the entries (by converting string sources and
  // names to indices into the sources and names ArraySets), we have to make
  // a copy of the entry or else bad things happen. Shared mutable state
  // strikes again! See github issue #191.

  var generatedMappings = aSourceMap._mappings.toArray().slice();
  var destGeneratedMappings = smc.__generatedMappings = [];
  var destOriginalMappings = smc.__originalMappings = [];

  for (var i = 0, length = generatedMappings.length; i < length; i++) {
    var srcMapping = generatedMappings[i];
    var destMapping = new Mapping();
    destMapping.generatedLine = srcMapping.generatedLine;
    destMapping.generatedColumn = srcMapping.generatedColumn;

    if (srcMapping.source) {
      destMapping.source = sources.indexOf(srcMapping.source);
      destMapping.originalLine = srcMapping.originalLine;
      destMapping.originalColumn = srcMapping.originalColumn;

      if (srcMapping.name) {
        destMapping.name = names.indexOf(srcMapping.name);
      }

      destOriginalMappings.push(destMapping);
    }

    destGeneratedMappings.push(destMapping);
  }

  quickSort(smc.__originalMappings, util.compareByOriginalPositions);

  return smc;
};

/**
    * The version of the source mapping spec that we are consuming.
    */
BasicSourceMapConsumer.prototype._version = 3;

/**
                                                * The list of original sources.
                                                */
Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
  get: function get() {
    return this._sources.toArray().map(function (s) {
      return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
    }, this);
  } });


/**
         * Provide the JIT with a nice shape / hidden class.
         */
function Mapping() {
  this.generatedLine = 0;
  this.generatedColumn = 0;
  this.source = null;
  this.originalLine = null;
  this.originalColumn = null;
  this.name = null;
}

/**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
BasicSourceMapConsumer.prototype._parseMappings =
function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
  var generatedLine = 1;
  var previousGeneratedColumn = 0;
  var previousOriginalLine = 0;
  var previousOriginalColumn = 0;
  var previousSource = 0;
  var previousName = 0;
  var length = aStr.length;
  var index = 0;
  var cachedSegments = {};
  var temp = {};
  var originalMappings = [];
  var generatedMappings = [];
  var mapping, str, segment, end, value;

  while (index < length) {
    if (aStr.charAt(index) === ';') {
      generatedLine++;
      index++;
      previousGeneratedColumn = 0;
    } else
    if (aStr.charAt(index) === ',') {
      index++;
    } else
    {
      mapping = new Mapping();
      mapping.generatedLine = generatedLine;

      // Because each offset is encoded relative to the previous one,
      // many segments often have the same encoding. We can exploit this
      // fact by caching the parsed variable length fields of each segment,
      // allowing us to avoid a second parse if we encounter the same
      // segment again.
      for (end = index; end < length; end++) {
        if (this._charIsMappingSeparator(aStr, end)) {
          break;
        }
      }
      str = aStr.slice(index, end);

      segment = cachedSegments[str];
      if (segment) {
        index += str.length;
      } else {
        segment = [];
        while (index < end) {
          base64VLQ.decode(aStr, index, temp);
          value = temp.value;
          index = temp.rest;
          segment.push(value);
        }

        if (segment.length === 2) {
          throw new Error('Found a source, but no line and column');
        }

        if (segment.length === 3) {
          throw new Error('Found a source and line, but no column');
        }

        cachedSegments[str] = segment;
      }

      // Generated column.
      mapping.generatedColumn = previousGeneratedColumn + segment[0];
      previousGeneratedColumn = mapping.generatedColumn;

      if (segment.length > 1) {
        // Original source.
        mapping.source = previousSource + segment[1];
        previousSource += segment[1];

        // Original line.
        mapping.originalLine = previousOriginalLine + segment[2];
        previousOriginalLine = mapping.originalLine;
        // Lines are stored 0-based
        mapping.originalLine += 1;

        // Original column.
        mapping.originalColumn = previousOriginalColumn + segment[3];
        previousOriginalColumn = mapping.originalColumn;

        if (segment.length > 4) {
          // Original name.
          mapping.name = previousName + segment[4];
          previousName += segment[4];
        }
      }

      generatedMappings.push(mapping);
      if (typeof mapping.originalLine === 'number') {
        originalMappings.push(mapping);
      }
    }
  }

  quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
  this.__generatedMappings = generatedMappings;

  quickSort(originalMappings, util.compareByOriginalPositions);
  this.__originalMappings = originalMappings;
};

/**
    * Find the mapping that best matches the hypothetical "needle" mapping that
    * we are searching for in the given "haystack" of mappings.
    */
BasicSourceMapConsumer.prototype._findMapping =
function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
aColumnName, aComparator, aBias) {
  // To return the position we are searching for, we must first find the
  // mapping for the given position and then return the opposite position it
  // points to. Because the mappings are sorted, we can use binary search to
  // find the best mapping.

  if (aNeedle[aLineName] <= 0) {
    throw new TypeError('Line must be greater than or equal to 1, got ' +
    aNeedle[aLineName]);
  }
  if (aNeedle[aColumnName] < 0) {
    throw new TypeError('Column must be greater than or equal to 0, got ' +
    aNeedle[aColumnName]);
  }

  return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
};

/**
    * Compute the last column for each generated mapping. The last column is
    * inclusive.
    */
BasicSourceMapConsumer.prototype.computeColumnSpans =
function SourceMapConsumer_computeColumnSpans() {
  for (var index = 0; index < this._generatedMappings.length; ++index) {
    var mapping = this._generatedMappings[index];

    // Mappings do not contain a field for the last generated columnt. We
    // can come up with an optimistic estimate, however, by assuming that
    // mappings are contiguous (i.e. given two consecutive mappings, the
    // first mapping ends where the second one starts).
    if (index + 1 < this._generatedMappings.length) {
      var nextMapping = this._generatedMappings[index + 1];

      if (mapping.generatedLine === nextMapping.generatedLine) {
        mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
        continue;
      }
    }

    // The last mapping for each line spans the entire line.
    mapping.lastGeneratedColumn = Infinity;
  }
};

/**
    * Returns the original source, line, and column information for the generated
    * source's line and column positions provided. The only argument is an object
    * with the following properties:
    *
    *   - line: The line number in the generated source.
    *   - column: The column number in the generated source.
    *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
    *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
    *     closest element that is smaller than or greater than the one we are
    *     searching for, respectively, if the exact element cannot be found.
    *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
    *
    * and an object is returned with the following properties:
    *
    *   - source: The original source file, or null.
    *   - line: The line number in the original source, or null.
    *   - column: The column number in the original source, or null.
    *   - name: The original identifier, or null.
    */
BasicSourceMapConsumer.prototype.originalPositionFor =
function SourceMapConsumer_originalPositionFor(aArgs) {
  var needle = {
    generatedLine: util.getArg(aArgs, 'line'),
    generatedColumn: util.getArg(aArgs, 'column') };


  var index = this._findMapping(
  needle,
  this._generatedMappings,
  "generatedLine",
  "generatedColumn",
  util.compareByGeneratedPositionsDeflated,
  util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));


  if (index >= 0) {
    var mapping = this._generatedMappings[index];

    if (mapping.generatedLine === needle.generatedLine) {
      var source = util.getArg(mapping, 'source', null);
      if (source !== null) {
        source = this._sources.at(source);
        if (this.sourceRoot != null) {
          source = util.join(this.sourceRoot, source);
        }
      }
      var name = util.getArg(mapping, 'name', null);
      if (name !== null) {
        name = this._names.at(name);
      }
      return {
        source: source,
        line: util.getArg(mapping, 'originalLine', null),
        column: util.getArg(mapping, 'originalColumn', null),
        name: name };

    }
  }

  return {
    source: null,
    line: null,
    column: null,
    name: null };

};

/**
    * Return true if we have the source content for every source in the source
    * map, false otherwise.
    */
BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
function BasicSourceMapConsumer_hasContentsOfAllSources() {
  if (!this.sourcesContent) {
    return false;
  }
  return this.sourcesContent.length >= this._sources.size() &&
  !this.sourcesContent.some(function (sc) {return sc == null;});
};

/**
    * Returns the original source content. The only argument is the url of the
    * original source file. Returns null if no original source content is
    * available.
    */
BasicSourceMapConsumer.prototype.sourceContentFor =
function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
  if (!this.sourcesContent) {
    return null;
  }

  if (this.sourceRoot != null) {
    aSource = util.relative(this.sourceRoot, aSource);
  }

  if (this._sources.has(aSource)) {
    return this.sourcesContent[this._sources.indexOf(aSource)];
  }

  var url;
  if (this.sourceRoot != null && (
  url = util.urlParse(this.sourceRoot))) {
    // XXX: file:// URIs and absolute paths lead to unexpected behavior for
    // many users. We can help them out when they expect file:// URIs to
    // behave like it would if they were running a local HTTP server. See
    // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
    var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
    if (url.scheme == "file" &&
    this._sources.has(fileUriAbsPath)) {
      return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
    }

    if ((!url.path || url.path == "/") &&
    this._sources.has("/" + aSource)) {
      return this.sourcesContent[this._sources.indexOf("/" + aSource)];
    }
  }

  // This function is used recursively from
  // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
  // don't want to throw if we can't find the source - we just want to
  // return null, so we provide a flag to exit gracefully.
  if (nullOnMissing) {
    return null;
  } else
  {
    throw new Error('"' + aSource + '" is not in the SourceMap.');
  }
};

/**
    * Returns the generated line and column information for the original source,
    * line, and column positions provided. The only argument is an object with
    * the following properties:
    *
    *   - source: The filename of the original source.
    *   - line: The line number in the original source.
    *   - column: The column number in the original source.
    *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
    *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
    *     closest element that is smaller than or greater than the one we are
    *     searching for, respectively, if the exact element cannot be found.
    *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
    *
    * and an object is returned with the following properties:
    *
    *   - line: The line number in the generated source, or null.
    *   - column: The column number in the generated source, or null.
    */
BasicSourceMapConsumer.prototype.generatedPositionFor =
function SourceMapConsumer_generatedPositionFor(aArgs) {
  var source = util.getArg(aArgs, 'source');
  if (this.sourceRoot != null) {
    source = util.relative(this.sourceRoot, source);
  }
  if (!this._sources.has(source)) {
    return {
      line: null,
      column: null,
      lastColumn: null };

  }
  source = this._sources.indexOf(source);

  var needle = {
    source: source,
    originalLine: util.getArg(aArgs, 'line'),
    originalColumn: util.getArg(aArgs, 'column') };


  var index = this._findMapping(
  needle,
  this._originalMappings,
  "originalLine",
  "originalColumn",
  util.compareByOriginalPositions,
  util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));


  if (index >= 0) {
    var mapping = this._originalMappings[index];

    if (mapping.source === needle.source) {
      return {
        line: util.getArg(mapping, 'generatedLine', null),
        column: util.getArg(mapping, 'generatedColumn', null),
        lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null) };

    }
  }

  return {
    line: null,
    column: null,
    lastColumn: null };

};

exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

/**
                                                          * An IndexedSourceMapConsumer instance represents a parsed source map which
                                                          * we can query for information. It differs from BasicSourceMapConsumer in
                                                          * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
                                                          * input.
                                                          *
                                                          * The only parameter is a raw source map (either as a JSON string, or already
                                                          * parsed to an object). According to the spec for indexed source maps, they
                                                          * have the following attributes:
                                                          *
                                                          *   - version: Which version of the source map spec this map is following.
                                                          *   - file: Optional. The generated file this source map is associated with.
                                                          *   - sections: A list of section definitions.
                                                          *
                                                          * Each value under the "sections" field has two fields:
                                                          *   - offset: The offset into the original specified at which this section
                                                          *       begins to apply, defined as an object with a "line" and "column"
                                                          *       field.
                                                          *   - map: A source map definition. This source map could also be indexed,
                                                          *       but doesn't have to be.
                                                          *
                                                          * Instead of the "map" field, it's also possible to have a "url" field
                                                          * specifying a URL to retrieve a source map from, but that's currently
                                                          * unsupported.
                                                          *
                                                          * Here's an example source map, taken from the source map spec[0], but
                                                          * modified to omit a section which uses the "url" field.
                                                          *
                                                          *  {
                                                          *    version : 3,
                                                          *    file: "app.js",
                                                          *    sections: [{
                                                          *      offset: {line:100, column:10},
                                                          *      map: {
                                                          *        version : 3,
                                                          *        file: "section.js",
                                                          *        sources: ["foo.js", "bar.js"],
                                                          *        names: ["src", "maps", "are", "fun"],
                                                          *        mappings: "AAAA,E;;ABCDE;"
                                                          *      }
                                                          *    }],
                                                          *  }
                                                          *
                                                          * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
                                                          */
function IndexedSourceMapConsumer(aSourceMap) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
  }

  var version = util.getArg(sourceMap, 'version');
  var sections = util.getArg(sourceMap, 'sections');

  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  this._sources = new ArraySet();
  this._names = new ArraySet();

  var lastOffset = {
    line: -1,
    column: 0 };

  this._sections = sections.map(function (s) {
    if (s.url) {
      // The url field will require support for asynchronicity.
      // See https://github.com/mozilla/source-map/issues/16
      throw new Error('Support for url field in sections not implemented.');
    }
    var offset = util.getArg(s, 'offset');
    var offsetLine = util.getArg(offset, 'line');
    var offsetColumn = util.getArg(offset, 'column');

    if (offsetLine < lastOffset.line ||
    offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
      throw new Error('Section offsets must be ordered and non-overlapping.');
    }
    lastOffset = offset;

    return {
      generatedOffset: {
        // The offset fields are 0-based, but we use 1-based indices when
        // encoding/decoding from VLQ.
        generatedLine: offsetLine + 1,
        generatedColumn: offsetColumn + 1 },

      consumer: new SourceMapConsumer(util.getArg(s, 'map')) };

  });
}

IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

/**
                                                                     * The version of the source mapping spec that we are consuming.
                                                                     */
IndexedSourceMapConsumer.prototype._version = 3;

/**
                                                  * The list of original sources.
                                                  */
Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
  get: function get() {
    var sources = [];
    for (var i = 0; i < this._sections.length; i++) {
      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
        sources.push(this._sections[i].consumer.sources[j]);
      }
    }
    return sources;
  } });


/**
         * Returns the original source, line, and column information for the generated
         * source's line and column positions provided. The only argument is an object
         * with the following properties:
         *
         *   - line: The line number in the generated source.
         *   - column: The column number in the generated source.
         *
         * and an object is returned with the following properties:
         *
         *   - source: The original source file, or null.
         *   - line: The line number in the original source, or null.
         *   - column: The column number in the original source, or null.
         *   - name: The original identifier, or null.
         */
IndexedSourceMapConsumer.prototype.originalPositionFor =
function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
  var needle = {
    generatedLine: util.getArg(aArgs, 'line'),
    generatedColumn: util.getArg(aArgs, 'column') };


  // Find the section containing the generated position we're trying to map
  // to an original position.
  var sectionIndex = binarySearch.search(needle, this._sections,
  function (needle, section) {
    var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
    if (cmp) {
      return cmp;
    }

    return needle.generatedColumn -
    section.generatedOffset.generatedColumn;
  });
  var section = this._sections[sectionIndex];

  if (!section) {
    return {
      source: null,
      line: null,
      column: null,
      name: null };

  }

  return section.consumer.originalPositionFor({
    line: needle.generatedLine - (
    section.generatedOffset.generatedLine - 1),
    column: needle.generatedColumn - (
    section.generatedOffset.generatedLine === needle.generatedLine ?
    section.generatedOffset.generatedColumn - 1 :
    0),
    bias: aArgs.bias });

};

/**
    * Return true if we have the source content for every source in the source
    * map, false otherwise.
    */
IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
function IndexedSourceMapConsumer_hasContentsOfAllSources() {
  return this._sections.every(function (s) {
    return s.consumer.hasContentsOfAllSources();
  });
};

/**
    * Returns the original source content. The only argument is the url of the
    * original source file. Returns null if no original source content is
    * available.
    */
IndexedSourceMapConsumer.prototype.sourceContentFor =
function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
  for (var i = 0; i < this._sections.length; i++) {
    var section = this._sections[i];

    var content = section.consumer.sourceContentFor(aSource, true);
    if (content) {
      return content;
    }
  }
  if (nullOnMissing) {
    return null;
  } else
  {
    throw new Error('"' + aSource + '" is not in the SourceMap.');
  }
};

/**
    * Returns the generated line and column information for the original source,
    * line, and column positions provided. The only argument is an object with
    * the following properties:
    *
    *   - source: The filename of the original source.
    *   - line: The line number in the original source.
    *   - column: The column number in the original source.
    *
    * and an object is returned with the following properties:
    *
    *   - line: The line number in the generated source, or null.
    *   - column: The column number in the generated source, or null.
    */
IndexedSourceMapConsumer.prototype.generatedPositionFor =
function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
  for (var i = 0; i < this._sections.length; i++) {
    var section = this._sections[i];

    // Only consider this section if the requested source is in the list of
    // sources of the consumer.
    if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
      continue;
    }
    var generatedPosition = section.consumer.generatedPositionFor(aArgs);
    if (generatedPosition) {
      var ret = {
        line: generatedPosition.line + (
        section.generatedOffset.generatedLine - 1),
        column: generatedPosition.column + (
        section.generatedOffset.generatedLine === generatedPosition.line ?
        section.generatedOffset.generatedColumn - 1 :
        0) };

      return ret;
    }
  }

  return {
    line: null,
    column: null };

};

/**
    * Parse the mappings in a string in to a data structure which we can easily
    * query (the ordered arrays in the `this.__generatedMappings` and
    * `this.__originalMappings` properties).
    */
IndexedSourceMapConsumer.prototype._parseMappings =
function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
  this.__generatedMappings = [];
  this.__originalMappings = [];
  for (var i = 0; i < this._sections.length; i++) {
    var section = this._sections[i];
    var sectionMappings = section.consumer._generatedMappings;
    for (var j = 0; j < sectionMappings.length; j++) {
      var mapping = sectionMappings[j];

      var source = section.consumer._sources.at(mapping.source);
      if (section.consumer.sourceRoot !== null) {
        source = util.join(section.consumer.sourceRoot, source);
      }
      this._sources.add(source);
      source = this._sources.indexOf(source);

      var name = section.consumer._names.at(mapping.name);
      this._names.add(name);
      name = this._names.indexOf(name);

      // The mappings coming from the consumer for the section have
      // generated positions relative to the start of the section, so we
      // need to offset them to be relative to the start of the concatenated
      // generated file.
      var adjustedMapping = {
        source: source,
        generatedLine: mapping.generatedLine + (
        section.generatedOffset.generatedLine - 1),
        generatedColumn: mapping.generatedColumn + (
        section.generatedOffset.generatedLine === mapping.generatedLine ?
        section.generatedOffset.generatedColumn - 1 :
        0),
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name: name };


      this.__generatedMappings.push(adjustedMapping);
      if (typeof adjustedMapping.originalLine === 'number') {
        this.__originalMappings.push(adjustedMapping);
      }
    }
  }

  quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
  quickSort(this.__originalMappings, util.compareByOriginalPositions);
};

exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 /* -*- Mode: js; js-indent-level: 2; -*- */
/*
                                                           * Copyright 2011 Mozilla Foundation and contributors
                                                           * Licensed under the New BSD license. See LICENSE or:
                                                           * http://opensource.org/licenses/BSD-3-Clause
                                                           */

var SourceMapGenerator = __webpack_require__(10).SourceMapGenerator;
var util = __webpack_require__(3);

// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
// operating systems these days (capturing the result).
var REGEX_NEWLINE = /(\r?\n)/;

// Newline character code for charCodeAt() comparisons
var NEWLINE_CODE = 10;

// Private symbol for identifying `SourceNode`s when multiple versions of
// the source-map library are loaded. This MUST NOT CHANGE across
// versions!
var isSourceNode = "$$$isSourceNode$$$";

/**
                                          * SourceNodes provide a way to abstract over interpolating/concatenating
                                          * snippets of generated JavaScript source code while maintaining the line and
                                          * column information associated with the original source code.
                                          *
                                          * @param aLine The original line number.
                                          * @param aColumn The original column number.
                                          * @param aSource The original source's filename.
                                          * @param aChunks Optional. An array of strings which are snippets of
                                          *        generated JS, or other SourceNodes.
                                          * @param aName The original identifier.
                                          */
function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
  this.children = [];
  this.sourceContents = {};
  this.line = aLine == null ? null : aLine;
  this.column = aColumn == null ? null : aColumn;
  this.source = aSource == null ? null : aSource;
  this.name = aName == null ? null : aName;
  this[isSourceNode] = true;
  if (aChunks != null) this.add(aChunks);
}

/**
   * Creates a SourceNode from generated code and a SourceMapConsumer.
   *
   * @param aGeneratedCode The generated code
   * @param aSourceMapConsumer The SourceMap for the generated code
   * @param aRelativePath Optional. The path that relative sources in the
   *        SourceMapConsumer should be relative to.
   */
SourceNode.fromStringWithSourceMap =
function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
  // The SourceNode we want to fill with the generated code
  // and the SourceMap
  var node = new SourceNode();

  // All even indices of this array are one line of the generated code,
  // while all odd indices are the newlines between two adjacent lines
  // (since `REGEX_NEWLINE` captures its match).
  // Processed fragments are removed from this array, by calling `shiftNextLine`.
  var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
  var shiftNextLine = function shiftNextLine() {
    var lineContents = remainingLines.shift();
    // The last line of a file might not have a newline.
    var newLine = remainingLines.shift() || "";
    return lineContents + newLine;
  };

  // We need to remember the position of "remainingLines"
  var lastGeneratedLine = 1,lastGeneratedColumn = 0;

  // The generate SourceNodes we need a code range.
  // To extract it current and last mapping is used.
  // Here we store the last mapping.
  var lastMapping = null;

  aSourceMapConsumer.eachMapping(function (mapping) {
    if (lastMapping !== null) {
      // We add the code from "lastMapping" to "mapping":
      // First check if there is a new line in between.
      if (lastGeneratedLine < mapping.generatedLine) {
        // Associate first line with "lastMapping"
        addMappingWithCode(lastMapping, shiftNextLine());
        lastGeneratedLine++;
        lastGeneratedColumn = 0;
        // The remaining code is added without mapping
      } else {
        // There is no new line in between.
        // Associate the code between "lastGeneratedColumn" and
        // "mapping.generatedColumn" with "lastMapping"
        var nextLine = remainingLines[0];
        var code = nextLine.substr(0, mapping.generatedColumn -
        lastGeneratedColumn);
        remainingLines[0] = nextLine.substr(mapping.generatedColumn -
        lastGeneratedColumn);
        lastGeneratedColumn = mapping.generatedColumn;
        addMappingWithCode(lastMapping, code);
        // No more remaining code, continue
        lastMapping = mapping;
        return;
      }
    }
    // We add the generated code until the first mapping
    // to the SourceNode without any mapping.
    // Each line is added as separate string.
    while (lastGeneratedLine < mapping.generatedLine) {
      node.add(shiftNextLine());
      lastGeneratedLine++;
    }
    if (lastGeneratedColumn < mapping.generatedColumn) {
      var nextLine = remainingLines[0];
      node.add(nextLine.substr(0, mapping.generatedColumn));
      remainingLines[0] = nextLine.substr(mapping.generatedColumn);
      lastGeneratedColumn = mapping.generatedColumn;
    }
    lastMapping = mapping;
  }, this);
  // We have processed all mappings.
  if (remainingLines.length > 0) {
    if (lastMapping) {
      // Associate the remaining code in the current line with "lastMapping"
      addMappingWithCode(lastMapping, shiftNextLine());
    }
    // and add the remaining lines without any mapping
    node.add(remainingLines.join(""));
  }

  // Copy sourcesContent into SourceNode
  aSourceMapConsumer.sources.forEach(function (sourceFile) {
    var content = aSourceMapConsumer.sourceContentFor(sourceFile);
    if (content != null) {
      if (aRelativePath != null) {
        sourceFile = util.join(aRelativePath, sourceFile);
      }
      node.setSourceContent(sourceFile, content);
    }
  });

  return node;

  function addMappingWithCode(mapping, code) {
    if (mapping === null || mapping.source === undefined) {
      node.add(code);
    } else {
      var source = aRelativePath ?
      util.join(aRelativePath, mapping.source) :
      mapping.source;
      node.add(new SourceNode(mapping.originalLine,
      mapping.originalColumn,
      source,
      code,
      mapping.name));
    }
  }
};

/**
    * Add a chunk of generated JS to this source node.
    *
    * @param aChunk A string snippet of generated JS code, another instance of
    *        SourceNode, or an array where each member is one of those things.
    */
SourceNode.prototype.add = function SourceNode_add(aChunk) {
  if (Array.isArray(aChunk)) {
    aChunk.forEach(function (chunk) {
      this.add(chunk);
    }, this);
  } else
  if (aChunk[isSourceNode] || typeof aChunk === "string") {
    if (aChunk) {
      this.children.push(aChunk);
    }
  } else
  {
    throw new TypeError(
    "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);

  }
  return this;
};

/**
    * Add a chunk of generated JS to the beginning of this source node.
    *
    * @param aChunk A string snippet of generated JS code, another instance of
    *        SourceNode, or an array where each member is one of those things.
    */
SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
  if (Array.isArray(aChunk)) {
    for (var i = aChunk.length - 1; i >= 0; i--) {
      this.prepend(aChunk[i]);
    }
  } else
  if (aChunk[isSourceNode] || typeof aChunk === "string") {
    this.children.unshift(aChunk);
  } else
  {
    throw new TypeError(
    "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);

  }
  return this;
};

/**
    * Walk over the tree of JS snippets in this node and its children. The
    * walking function is called once for each snippet of JS and is passed that
    * snippet and the its original associated source's line/column location.
    *
    * @param aFn The traversal function.
    */
SourceNode.prototype.walk = function SourceNode_walk(aFn) {
  var chunk;
  for (var i = 0, len = this.children.length; i < len; i++) {
    chunk = this.children[i];
    if (chunk[isSourceNode]) {
      chunk.walk(aFn);
    } else
    {
      if (chunk !== '') {
        aFn(chunk, { source: this.source,
          line: this.line,
          column: this.column,
          name: this.name });
      }
    }
  }
};

/**
    * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
    * each of `this.children`.
    *
    * @param aSep The separator.
    */
SourceNode.prototype.join = function SourceNode_join(aSep) {
  var newChildren;
  var i;
  var len = this.children.length;
  if (len > 0) {
    newChildren = [];
    for (i = 0; i < len - 1; i++) {
      newChildren.push(this.children[i]);
      newChildren.push(aSep);
    }
    newChildren.push(this.children[i]);
    this.children = newChildren;
  }
  return this;
};

/**
    * Call String.prototype.replace on the very right-most source snippet. Useful
    * for trimming whitespace from the end of a source node, etc.
    *
    * @param aPattern The pattern to replace.
    * @param aReplacement The thing to replace the pattern with.
    */
SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
  var lastChild = this.children[this.children.length - 1];
  if (lastChild[isSourceNode]) {
    lastChild.replaceRight(aPattern, aReplacement);
  } else
  if (typeof lastChild === 'string') {
    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
  } else
  {
    this.children.push(''.replace(aPattern, aReplacement));
  }
  return this;
};

/**
    * Set the source content for a source file. This will be added to the SourceMapGenerator
    * in the sourcesContent field.
    *
    * @param aSourceFile The filename of the source file
    * @param aSourceContent The content of the source file
    */
SourceNode.prototype.setSourceContent =
function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
  this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
};

/**
    * Walk over the tree of SourceNodes. The walking function is called for each
    * source file content and is passed the filename and source content.
    *
    * @param aFn The traversal function.
    */
SourceNode.prototype.walkSourceContents =
function SourceNode_walkSourceContents(aFn) {
  for (var i = 0, len = this.children.length; i < len; i++) {
    if (this.children[i][isSourceNode]) {
      this.children[i].walkSourceContents(aFn);
    }
  }

  var sources = Object.keys(this.sourceContents);
  for (var i = 0, len = sources.length; i < len; i++) {
    aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
  }
};

/**
    * Return the string representation of this source node. Walks over the tree
    * and concatenates all the various snippets together to one string.
    */
SourceNode.prototype.toString = function SourceNode_toString() {
  var str = "";
  this.walk(function (chunk) {
    str += chunk;
  });
  return str;
};

/**
    * Returns the string representation of this source node along with a source
    * map.
    */
SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
  var generated = {
    code: "",
    line: 1,
    column: 0 };

  var map = new SourceMapGenerator(aArgs);
  var sourceMappingActive = false;
  var lastOriginalSource = null;
  var lastOriginalLine = null;
  var lastOriginalColumn = null;
  var lastOriginalName = null;
  this.walk(function (chunk, original) {
    generated.code += chunk;
    if (original.source !== null &&
    original.line !== null &&
    original.column !== null) {
      if (lastOriginalSource !== original.source ||
      lastOriginalLine !== original.line ||
      lastOriginalColumn !== original.column ||
      lastOriginalName !== original.name) {
        map.addMapping({
          source: original.source,
          original: {
            line: original.line,
            column: original.column },

          generated: {
            line: generated.line,
            column: generated.column },

          name: original.name });

      }
      lastOriginalSource = original.source;
      lastOriginalLine = original.line;
      lastOriginalColumn = original.column;
      lastOriginalName = original.name;
      sourceMappingActive = true;
    } else if (sourceMappingActive) {
      map.addMapping({
        generated: {
          line: generated.line,
          column: generated.column } });


      lastOriginalSource = null;
      sourceMappingActive = false;
    }
    for (var idx = 0, length = chunk.length; idx < length; idx++) {
      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
        generated.line++;
        generated.column = 0;
        // Mappings end at eol
        if (idx + 1 === length) {
          lastOriginalSource = null;
          sourceMappingActive = false;
        } else if (sourceMappingActive) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column },

            generated: {
              line: generated.line,
              column: generated.column },

            name: original.name });

        }
      } else {
        generated.column++;
      }
    }
  });
  this.walkSourceContents(function (sourceFile, sourceContent) {
    map.setSourceContent(sourceFile, sourceContent);
  });

  return { code: generated.code, map: map };
};

exports.SourceNode = SourceNode;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 /*
               * Copyright 2009-2011 Mozilla Foundation and contributors
               * Licensed under the New BSD license. See LICENSE.txt or:
               * http://opensource.org/licenses/BSD-3-Clause
               */
exports.SourceMapGenerator = __webpack_require__(10).SourceMapGenerator;
exports.SourceMapConsumer = __webpack_require__(30).SourceMapConsumer;
exports.SourceNode = __webpack_require__(31).SourceNode;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};(function (root, factory) {
    'use strict';
    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

    /* istanbul ignore next */
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
        module.exports = factory(require('stackframe'));
    } else {
        root.StackGenerator = factory(root.StackFrame);
    }
})(undefined, function (StackFrame) {
    return {
        backtrace: function StackGenerator$$backtrace(opts) {
            var stack = [];
            var maxStackSize = 10;

            if ((typeof opts === 'undefined' ? 'undefined' : _typeof(opts)) === 'object' && typeof opts.maxStackSize === 'number') {
                maxStackSize = opts.maxStackSize;
            }

            var curr = arguments.callee;
            while (curr && stack.length < maxStackSize) {
                // Allow V8 optimizations
                var args = new Array(curr['arguments'].length);
                for (var i = 0; i < args.length; ++i) {
                    args[i] = curr['arguments'][i];
                }
                if (/function(?:\s+([\w$]+))+\s*\(/.test(curr.toString())) {
                    stack.push(new StackFrame({ functionName: RegExp.$1 || undefined, args: args }));
                } else {
                    stack.push(new StackFrame({ args: args }));
                }

                try {
                    curr = curr.caller;
                } catch (e) {
                    break;
                }
            }
            return stack;
        } };

});

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};(function (root, factory) {
    'use strict';
    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

    /* istanbul ignore next */
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(32), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
        module.exports = factory(require('source-map/lib/source-map-consumer'), require('stackframe'));
    } else {
        root.StackTraceGPS = factory(root.SourceMap || root.sourceMap, root.StackFrame);
    }
})(undefined, function (SourceMap, StackFrame) {
    'use strict';

    /**
                   * Make a X-Domain request to url and callback.
                   *
                   * @param {String} url
                   * @returns {Promise} with response text if fulfilled
                   */
    function _xdr(url) {
        return new Promise(function (resolve, reject) {
            var req = new XMLHttpRequest();
            req.open('get', url);
            req.onerror = reject;
            req.onreadystatechange = function onreadystatechange() {
                if (req.readyState === 4) {
                    if (req.status >= 200 && req.status < 300 ||
                    url.substr(0, 7) === 'file://' && req.responseText) {
                        resolve(req.responseText);
                    } else {
                        reject(new Error('HTTP status: ' + req.status + ' retrieving ' + url));
                    }
                }
            };
            req.send();
        });

    }

    /**
       * Convert a Base64-encoded string into its original representation.
       * Used for inline sourcemaps.
       *
       * @param {String} b64str Base-64 encoded string
       * @returns {String} original representation of the base64-encoded string.
       */
    function _atob(b64str) {
        if (typeof window !== 'undefined' && window.atob) {
            return window.atob(b64str);
        } else {
            throw new Error('You must supply a polyfill for window.atob in this environment');
        }
    }

    function _parseJson(string) {
        if (typeof JSON !== 'undefined' && JSON.parse) {
            return JSON.parse(string);
        } else {
            throw new Error('You must supply a polyfill for JSON.parse in this environment');
        }
    }

    function _findFunctionName(source, lineNumber /*, columnNumber*/) {
        var syntaxes = [
        // {name} = function ({args}) TODO args capture
        /['"]?([$_A-Za-z][$_A-Za-z0-9]*)['"]?\s*[:=]\s*function\b/,
        // function {name}({args}) m[1]=name m[2]=args
        /function\s+([^('"`]*?)\s*\(([^)]*)\)/,
        // {name} = eval()
        /['"]?([$_A-Za-z][$_A-Za-z0-9]*)['"]?\s*[:=]\s*(?:eval|new Function)\b/,
        // fn_name() {
        /\b(?!(?:if|for|switch|while|with|catch)\b)(?:(?:static)\s+)?(\S+)\s*\(.*?\)\s*\{/,
        // {name} = () => {
        /['"]?([$_A-Za-z][$_A-Za-z0-9]*)['"]?\s*[:=]\s*\(.*?\)\s*=>/];

        var lines = source.split('\n');

        // Walk backwards in the source lines until we find the line which matches one of the patterns above
        var code = '';
        var maxLines = Math.min(lineNumber, 20);
        for (var i = 0; i < maxLines; ++i) {
            // lineNo is 1-based, source[] is 0-based
            var line = lines[lineNumber - i - 1];
            var commentPos = line.indexOf('//');
            if (commentPos >= 0) {
                line = line.substr(0, commentPos);
            }

            if (line) {
                code = line + code;
                var len = syntaxes.length;
                for (var index = 0; index < len; index++) {
                    var m = syntaxes[index].exec(code);
                    if (m && m[1]) {
                        return m[1];
                    }
                }
            }
        }
        return undefined;
    }

    function _ensureSupportedEnvironment() {
        if (typeof Object.defineProperty !== 'function' || typeof Object.create !== 'function') {
            throw new Error('Unable to consume source maps in older browsers');
        }
    }

    function _ensureStackFrameIsLegit(stackframe) {
        if ((typeof stackframe === 'undefined' ? 'undefined' : _typeof(stackframe)) !== 'object') {
            throw new TypeError('Given StackFrame is not an object');
        } else if (typeof stackframe.fileName !== 'string') {
            throw new TypeError('Given file name is not a String');
        } else if (typeof stackframe.lineNumber !== 'number' ||
        stackframe.lineNumber % 1 !== 0 ||
        stackframe.lineNumber < 1) {
            throw new TypeError('Given line number must be a positive integer');
        } else if (typeof stackframe.columnNumber !== 'number' ||
        stackframe.columnNumber % 1 !== 0 ||
        stackframe.columnNumber < 0) {
            throw new TypeError('Given column number must be a non-negative integer');
        }
        return true;
    }

    function _findSourceMappingURL(source) {
        var m = /\/\/[#@] ?sourceMappingURL=([^\s'"]+)\s*$/m.exec(source);
        if (m && m[1]) {
            return m[1];
        } else {
            throw new Error('sourceMappingURL not found');
        }
    }

    function _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache) {
        return new Promise(function (resolve, reject) {
            var loc = sourceMapConsumer.originalPositionFor({
                line: stackframe.lineNumber,
                column: stackframe.columnNumber });


            if (loc.source) {
                // cache mapped sources
                var mappedSource = sourceMapConsumer.sourceContentFor(loc.source);
                if (mappedSource) {
                    sourceCache[loc.source] = mappedSource;
                }

                resolve(
                // given stackframe and source location, update stackframe
                new StackFrame({
                    functionName: loc.name || stackframe.functionName,
                    args: stackframe.args,
                    fileName: loc.source,
                    lineNumber: loc.line,
                    columnNumber: loc.column }));

            } else {
                reject(new Error('Could not get original source for given stackframe and source map'));
            }
        });
    }

    /**
       * @constructor
       * @param {Object} opts
       *      opts.sourceCache = {url: "Source String"} => preload source cache
       *      opts.sourceMapConsumerCache = {/path/file.js.map: SourceMapConsumer}
       *      opts.offline = True to prevent network requests.
       *              Best effort without sources or source maps.
       *      opts.ajax = Promise returning function to make X-Domain requests
       */
    return function StackTraceGPS(opts) {
        if (!(this instanceof StackTraceGPS)) {
            return new StackTraceGPS(opts);
        }
        opts = opts || {};

        this.sourceCache = opts.sourceCache || {};
        this.sourceMapConsumerCache = opts.sourceMapConsumerCache || {};

        this.ajax = opts.ajax || _xdr;

        this._atob = opts.atob || _atob;

        this._get = function _get(location) {
            return new Promise(function (resolve, reject) {
                var isDataUrl = location.substr(0, 5) === 'data:';
                if (this.sourceCache[location]) {
                    resolve(this.sourceCache[location]);
                } else if (opts.offline && !isDataUrl) {
                    reject(new Error('Cannot make network requests in offline mode'));
                } else {
                    if (isDataUrl) {
                        // data URLs can have parameters.
                        // see http://tools.ietf.org/html/rfc2397
                        var supportedEncodingRegexp =
                        /^data:application\/json;([\w=:"-]+;)*base64,/;
                        var match = location.match(supportedEncodingRegexp);
                        if (match) {
                            var sourceMapStart = match[0].length;
                            var encodedSource = location.substr(sourceMapStart);
                            var source = this._atob(encodedSource);
                            this.sourceCache[location] = source;
                            resolve(source);
                        } else {
                            reject(new Error('The encoding of the inline sourcemap is not supported'));
                        }
                    } else {
                        var xhrPromise = this.ajax(location, { method: 'get' });
                        // Cache the Promise to prevent duplicate in-flight requests
                        this.sourceCache[location] = xhrPromise;
                        xhrPromise.then(resolve, reject);
                    }
                }
            }.bind(this));
        };

        /**
            * Creating SourceMapConsumers is expensive, so this wraps the creation of a
            * SourceMapConsumer in a per-instance cache.
            *
            * @param sourceMappingURL = {String} URL to fetch source map from
            * @param defaultSourceRoot = Default source root for source map if undefined
            * @returns {Promise} that resolves a SourceMapConsumer
            */
        this._getSourceMapConsumer = function _getSourceMapConsumer(sourceMappingURL, defaultSourceRoot) {
            return new Promise(function (resolve, reject) {
                if (this.sourceMapConsumerCache[sourceMappingURL]) {
                    resolve(this.sourceMapConsumerCache[sourceMappingURL]);
                } else {
                    var sourceMapConsumerPromise = new Promise(function (resolve, reject) {
                        return this._get(sourceMappingURL).then(function (sourceMapSource) {
                            if (typeof sourceMapSource === 'string') {
                                sourceMapSource = _parseJson(sourceMapSource.replace(/^\)\]\}'/, ''));
                            }
                            if (typeof sourceMapSource.sourceRoot === 'undefined') {
                                sourceMapSource.sourceRoot = defaultSourceRoot;
                            }

                            resolve(new SourceMap.SourceMapConsumer(sourceMapSource));
                        }, reject);
                    }.bind(this));
                    this.sourceMapConsumerCache[sourceMappingURL] = sourceMapConsumerPromise;
                    resolve(sourceMapConsumerPromise);
                }
            }.bind(this));
        };

        /**
            * Given a StackFrame, enhance function name and use source maps for a
            * better StackFrame.
            *
            * @param {StackFrame} stackframe object
            * @returns {Promise} that resolves with with source-mapped StackFrame
            */
        this.pinpoint = function StackTraceGPS$$pinpoint(stackframe) {
            return new Promise(function (resolve, reject) {
                this.getMappedLocation(stackframe).then(function (mappedStackFrame) {
                    function resolveMappedStackFrame() {
                        resolve(mappedStackFrame);
                    }

                    this.findFunctionName(mappedStackFrame).
                    then(resolve, resolveMappedStackFrame)[
                    'catch'](resolveMappedStackFrame);
                }.bind(this), reject);
            }.bind(this));
        };

        /**
            * Given a StackFrame, guess function name from location information.
            *
            * @param {StackFrame} stackframe
            * @returns {Promise} that resolves with enhanced StackFrame.
            */
        this.findFunctionName = function StackTraceGPS$$findFunctionName(stackframe) {
            return new Promise(function (resolve, reject) {
                _ensureStackFrameIsLegit(stackframe);
                this._get(stackframe.fileName).then(function getSourceCallback(source) {
                    var lineNumber = stackframe.lineNumber;
                    var columnNumber = stackframe.columnNumber;
                    var guessedFunctionName = _findFunctionName(source, lineNumber, columnNumber);
                    // Only replace functionName if we found something
                    if (guessedFunctionName) {
                        resolve(new StackFrame({
                            functionName: guessedFunctionName,
                            args: stackframe.args,
                            fileName: stackframe.fileName,
                            lineNumber: lineNumber,
                            columnNumber: columnNumber }));

                    } else {
                        resolve(stackframe);
                    }
                }, reject)['catch'](reject);
            }.bind(this));
        };

        /**
            * Given a StackFrame, seek source-mapped location and return new enhanced StackFrame.
            *
            * @param {StackFrame} stackframe
            * @returns {Promise} that resolves with enhanced StackFrame.
            */
        this.getMappedLocation = function StackTraceGPS$$getMappedLocation(stackframe) {
            return new Promise(function (resolve, reject) {
                _ensureSupportedEnvironment();
                _ensureStackFrameIsLegit(stackframe);

                var sourceCache = this.sourceCache;
                var fileName = stackframe.fileName;
                this._get(fileName).then(function (source) {
                    var sourceMappingURL = _findSourceMappingURL(source);
                    var isDataUrl = sourceMappingURL.substr(0, 5) === 'data:';
                    var defaultSourceRoot = fileName.substring(0, fileName.lastIndexOf('/') + 1);

                    if (sourceMappingURL[0] !== '/' && !isDataUrl && !/^https?:\/\/|^\/\//i.test(sourceMappingURL)) {
                        sourceMappingURL = defaultSourceRoot + sourceMappingURL;
                    }

                    return this._getSourceMapConsumer(sourceMappingURL, defaultSourceRoot).then(function (sourceMapConsumer) {
                        return _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache).
                        then(resolve)['catch'](function () {
                            resolve(stackframe);
                        });
                    });
                }.bind(this), reject)['catch'](reject);
            }.bind(this));
        };
    };
});

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};(function (root, factory) {
    'use strict';
    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

    /* istanbul ignore next */
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(23), __webpack_require__(33), __webpack_require__(34)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
        module.exports = factory(require('error-stack-parser'), require('stack-generator'), require('stacktrace-gps'));
    } else {
        root.StackTrace = factory(root.ErrorStackParser, root.StackGenerator, root.StackTraceGPS);
    }
})(undefined, function StackTrace(ErrorStackParser, StackGenerator, StackTraceGPS) {
    var _options = {
        filter: function filter(stackframe) {
            // Filter out stackframes for this library by default
            return (stackframe.functionName || '').indexOf('StackTrace$$') === -1 &&
            (stackframe.functionName || '').indexOf('ErrorStackParser$$') === -1 &&
            (stackframe.functionName || '').indexOf('StackTraceGPS$$') === -1 &&
            (stackframe.functionName || '').indexOf('StackGenerator$$') === -1;
        },
        sourceCache: {} };


    var _generateError = function StackTrace$$GenerateError() {
        try {
            // Error must be thrown to get stack in IE
            throw new Error();
        } catch (err) {
            return err;
        }
    };

    /**
        * Merge 2 given Objects. If a conflict occurs the second object wins.
        * Does not do deep merges.
        *
        * @param {Object} first base object
        * @param {Object} second overrides
        * @returns {Object} merged first and second
        * @private
        */
    function _merge(first, second) {
        var target = {};

        [first, second].forEach(function (obj) {
            for (var prop in obj) {
                if (obj.hasOwnProperty(prop)) {
                    target[prop] = obj[prop];
                }
            }
            return target;
        });

        return target;
    }

    function _isShapedLikeParsableError(err) {
        return err.stack || err['opera#sourceloc'];
    }

    function _filtered(stackframes, filter) {
        if (typeof filter === 'function') {
            return stackframes.filter(filter);
        }
        return stackframes;
    }

    return {
        /**
              * Get a backtrace from invocation point.
              *
              * @param {Object} opts
              * @returns {Array} of StackFrame
              */
        get: function StackTrace$$get(opts) {
            var err = _generateError();
            return _isShapedLikeParsableError(err) ? this.fromError(err, opts) : this.generateArtificially(opts);
        },

        /**
            * Get a backtrace from invocation point.
            * IMPORTANT: Does not handle source maps or guess function names!
            *
            * @param {Object} opts
            * @returns {Array} of StackFrame
            */
        getSync: function StackTrace$$getSync(opts) {
            opts = _merge(_options, opts);
            var err = _generateError();
            var stack = _isShapedLikeParsableError(err) ? ErrorStackParser.parse(err) : StackGenerator.backtrace(opts);
            return _filtered(stack, opts.filter);
        },

        /**
            * Given an error object, parse it.
            *
            * @param {Error} error object
            * @param {Object} opts
            * @returns {Promise} for Array[StackFrame}
            */
        fromError: function StackTrace$$fromError(error, opts) {
            opts = _merge(_options, opts);
            var gps = new StackTraceGPS(opts);
            return new Promise(function (resolve) {
                var stackframes = _filtered(ErrorStackParser.parse(error), opts.filter);
                resolve(Promise.all(stackframes.map(function (sf) {
                    return new Promise(function (resolve) {
                        function resolveOriginal() {
                            resolve(sf);
                        }

                        gps.pinpoint(sf).then(resolve, resolveOriginal)['catch'](resolveOriginal);
                    });
                })));
            }.bind(this));
        },

        /**
            * Use StackGenerator to generate a backtrace.
            *
            * @param {Object} opts
            * @returns {Promise} of Array[StackFrame]
            */
        generateArtificially: function StackTrace$$generateArtificially(opts) {
            opts = _merge(_options, opts);
            var stackFrames = StackGenerator.backtrace(opts);
            if (typeof opts.filter === 'function') {
                stackFrames = stackFrames.filter(opts.filter);
            }
            return Promise.resolve(stackFrames);
        },

        /**
            * Given a function, wrap it such that invocations trigger a callback that
            * is called with a stack trace.
            *
            * @param {Function} fn to be instrumented
            * @param {Function} callback function to call with a stack trace on invocation
            * @param {Function} errback optional function to call with error if unable to get stack trace.
            * @param {Object} thisArg optional context object (e.g. window)
            */
        instrument: function StackTrace$$instrument(fn, callback, errback, thisArg) {
            if (typeof fn !== 'function') {
                throw new Error('Cannot instrument non-function object');
            } else if (typeof fn.__stacktraceOriginalFn === 'function') {
                // Already instrumented, return given Function
                return fn;
            }

            var instrumented = function StackTrace$$instrumented() {
                try {
                    this.get().then(callback, errback)['catch'](errback);
                    return fn.apply(thisArg || this, arguments);
                } catch (e) {
                    if (_isShapedLikeParsableError(e)) {
                        this.fromError(e).then(callback, errback)['catch'](errback);
                    }
                    throw e;
                }
            }.bind(this);
            instrumented.__stacktraceOriginalFn = fn;

            return instrumented;
        },

        /**
            * Given a function that has been instrumented,
            * revert the function to it's original (non-instrumented) state.
            *
            * @param {Function} fn to de-instrument
            */
        deinstrument: function StackTrace$$deinstrument(fn) {
            if (typeof fn !== 'function') {
                throw new Error('Cannot de-instrument non-function object');
            } else if (typeof fn.__stacktraceOriginalFn === 'function') {
                return fn.__stacktraceOriginalFn;
            } else {
                // Function not instrumented, return original
                return fn;
            }
        },

        /**
            * Given an error message and Array of StackFrames, serialize and POST to given URL.
            *
            * @param {Array} stackframes
            * @param {String} url
            * @param {String} errorMsg
            * @param {Object} requestOptions
            */
        report: function StackTrace$$report(stackframes, url, errorMsg, requestOptions) {
            return new Promise(function (resolve, reject) {
                var req = new XMLHttpRequest();
                req.onerror = reject;
                req.onreadystatechange = function onreadystatechange() {
                    if (req.readyState === 4) {
                        if (req.status >= 200 && req.status < 400) {
                            resolve(req.responseText);
                        } else {
                            reject(new Error('POST to ' + url + ' failed with status: ' + req.status));
                        }
                    }
                };
                req.open('post', url);

                // Set request headers
                req.setRequestHeader('Content-Type', 'application/json');
                if (requestOptions && _typeof(requestOptions.headers) === 'object') {
                    var headers = requestOptions.headers;
                    for (var header in headers) {
                        if (headers.hasOwnProperty(header)) {
                            req.setRequestHeader(header, headers[header]);
                        }
                    }
                }

                var reportPayload = { stack: stackframes };
                if (errorMsg !== undefined && errorMsg !== null) {
                    reportPayload.message = errorMsg;
                }

                req.send(JSON.stringify(reportPayload));
            });
        } };

});

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object")
	g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();exports.













































































Router = Router;exports.





























initRouter = initRouter;var _ = __webpack_require__(6);function interceptLinks(routerState$) {// intercepts clicks on links
    // if the link is local '/...' we change the location hash instead
    function interceptClickEvent(e) {var target = e.target || e.srcElement;if (target.tagName === 'A') {var href = target.getAttribute('href');var isLocal = href != null && href.startsWith('/');var isAnchor = href != null && href.startsWith('#');if (isLocal || isAnchor) {var _parseLink = parseLink(href),anchor = _parseLink.anchor,route = _parseLink.route,query = _parseLink.query;if (route === undefined) {route = routerState$.value.route;}goTo(routerState$, anchor, route, query); //tell the browser not to respond to the link click
                e.preventDefault();}}} // react to HTML5 go back and forward events
    window.onpopstate = function (event) {if (event.state) {var _event$state = event.state,route = _event$state.route,query = _event$state.query;dispatchRouteChange(routerState$, route, query);}}; // listen for link click events at the document level
    document.addEventListener('click', interceptClickEvent); // react to initial routing info
    if (location.pathname !== '/' || location.search !== "") {// construct initial routing link
        var href = location.pathname + location.search + location.hash;var _parseLink2 = parseLink(location.pathname + location.search + location.hash),route = _parseLink2.route,query = _parseLink2.query;dispatchRouteChange(routerState$, route, query);}} // TODO refactor
function getUrlParams(hash, search) {// match query params in urls like:
    // http://localhost:8080/?code=e4a4f94f008a92f12221&code2=abc#/location?code=e4a4f94f008a92f12221&code2=abc
    // the query could be set internaly; then it would be behind the #
    // the query could be set at start; then it would be before the #
    var urlRegex = /(#\/\w*)?(\?(\w+=\w*)(&\w+=\w*)*)+(#\w+)?/g;var regExResultHash = RegExp(urlRegex).exec(hash);var regExResultSearch = RegExp(urlRegex).exec(search); // merge all query params before and after the hash
    var vars = regExResultHash && regExResultHash[3] != null ? regExResultHash[3].split('&') : [];vars = regExResultSearch && regExResultSearch[3] != null ? vars.concat(regExResultSearch[3].split('&')) : vars;var params = {};for (var i = 0; i < vars.length; i++) {var pair = vars[i].split("="); // If first entry with this name
        if (typeof params[pair[0]] === "undefined") {params[pair[0]] = decodeURIComponent(pair[1]); // If second entry with this name
        } else if (typeof params[pair[0]] === "string") {var arr = [params[pair[0]], decodeURIComponent(pair[1])];params[pair[0]] = arr; // If third or later entry with this name
        } else {params[pair[0]].push(decodeURIComponent(pair[1]));}}return params;} // this is an element that shows it's content only if the expected route is met
function Router(_ref, children$) {var router$ = _ref.router$,route = _ref.route;if (router$ == null) {console.log('The Router component needs the routerState$ as attribute.');return null;}if (route == null) {console.log('The Router component needs the route as attribute.');return null;} // Register the route
    // this is necessary to decide on a default route
    router$.$('routes' // routes can be attached async so we check if the route exists and if not add it
    ).map(function (routes) {return routes.indexOf(route) === -1 && router$.patch({ routes: routes.concat(route) });}); // check if no registered route was hit and set default if so
    var sanitizedRoute$ = router$.map(function (_ref2) {var route = _ref2.route,routes = _ref2.routes;if (routes.indexOf(route) === -1) {return '/';}return route;});var routeWasHit$ = sanitizedRoute$.is(route).distinct();return (0, _.merge$)([routeWasHit$, children$]).map(function (_ref3) {var _ref4 = _slicedToArray(_ref3, 2),wasHit = _ref4[0],children = _ref4[1];return wasHit ? children : [];});}function initRouter() {var routerState$ = (0, _.stream)({ route: '', params: {}, routes: ['/'] });interceptLinks(routerState$);return routerState$;} // matching links in the form of /route/subroute?param1=a&param2=b#anchor
function parseLink(link) {var regexp = /((\/\w*)*)?(\?((\w+=\w*)(&(\w+=\w*)+)*))?(#(\w+))?/;var matchArr = regexp.exec(link);return { anchor: matchArr[9], route: matchArr[1], query: matchArr[4] };}
// callback for HTML5 navigation events
// save the routing info in the routerState
function dispatchRouteChange(routerState$, route, query) {
    // remove hash
    var href = location.hash.substr(1);
    routerState$.patch({
        route: route || '',
        params: getUrlParams(href, location.search) });

}

function goTo(routerState$, anchor, route, query) {
    history.pushState({ anchor: anchor, route: route, query: query }, '', '/' + (route ? route.substr(1) : '') + (query ? '?' + query : ''));
    if (anchor) {
        location.hash = '#' + anchor;
    }
    dispatchRouteChange(routerState$, route, query);
}

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.






shrink_stacktrace = shrink_stacktrace;var _stacktraceJs = __webpack_require__(35);var _stacktraceJs2 = _interopRequireDefault(_stacktraceJs);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} /*
                                                                                                                                                                                                                                            * ATTENTION: Enable sourcemaps in Chrome!!
                                                                                                                                                                                                                                            * ATTENTION: Use "devtool: '#inline-source-map'" for webpack -> only config that worked
                                                                                                                                                                                                                                            */function shrink_stacktrace() {window.onerror = function (msg, file, line, col, error) {_stacktraceJs2.default.fromError(error).then(function (frames) {return console.error(formatFrames(frames, msg));}).
        catch(console.error);

        return true;
    };

    function formatFrames(stackFrames, errorMessage) {
        var formatedFrames = stackFrames.
        filter(function (_ref) {var fileName = _ref.fileName;return fileName.startsWith('webpack://');}).
        map(function (_ref2) {var functionName = _ref2.functionName,columnNumber = _ref2.columnNumber,fileName = _ref2.fileName,lineNumber = _ref2.lineNumber;
            // chrome does not redirect to the sources with the default webpack sourcemap url in the console
            var chromeFileDirection = fileName.replace('webpack://', 'webpack:///.');

            return '\t' + (functionName !== undefined ? functionName : '(anonymous)') + ' \t\tat ' + chromeFileDirection + ':' + lineNumber + ':' + columnNumber;
        });

        return ['(ZLIQ) ' + errorMessage].concat(formatedFrames).join('\n');
    }
}

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.promise$ = undefined;exports.


























if$ = if$;exports.





join$ = join$;var _ = __webpack_require__(6); // wrapper around promises to provide an indicator if the promise is running
var promise$ = exports.promise$ = function promise$(promise) {var output$ = (0, _.stream)({ loading: true, error: null, data: null });promise.then(function (result) {output$.patch({ loading: false, data: result });}, function (error) {output$.patch({ loading: false, error: error });});return output$;}; // provide easy switched on boolean streams
// example use case: <button onclick={()=>open$(!open$())}>{if$(open$, 'Close', 'Open')}</button>
function if$(stream, onTrue, onFalse) {return stream.map(function (x) {return x ? onTrue || null : onFalse || null;});} // join a mixed array of strings and streams of strings
// example use case: <div class={join$('container', if$(open$, 'open', 'closed'))} />
function join$() {for (var _len = arguments.length, arr = Array(_len), _key = 0; _key < _len; _key++) {arr[_key] = arguments[_key];}var $arr = arr.map(function (item) {if (item === null || item === undefined) {return (0, _.stream)('');}if (item.IS_STREAM) {
			return item;
		}
		return (0, _.stream)(item);
	});
	return (0, _.merge$)($arr).map(function (arr) {return arr.join(' ');});
}

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.h = undefined;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();exports.

















































































































flatten = flatten;var _streamy = __webpack_require__(7);var _streamyDom = __webpack_require__(11);function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}} /*
                                                                                                                                                                                                                                                                                            * wrap hyperscript elements in reactive streams dependent on their children streams
                                                                                                                                                                                                                                                                                            */var h = exports.h = function h(tag, props) {for (var _len = arguments.length, children = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {children[_key - 2] = arguments[_key];}var deleted$ = (0, _streamy.stream)(false);var component = void 0;var version = -1;var mergedChildren$ = mergeChildren$(flatten(children)); // jsx usually resolves known tags as strings and unknown tags as functions
	// if it is a sub component, resolve that component
	if (typeof tag === 'function') {return tag(props, mergedChildren$, deleted$);} // add detachers to props
	if (props !== null) {Object.keys(props).map(function (propName, index) {if ((0, _streamy.isStream)(props[propName])) {props[propName] = props[propName].until(deleted$);}});}return { vdom$: (0, _streamy.merge$)([wrapProps$(props, deleted$), mergedChildren$.map(flatten)]).map(function (_ref) {var _ref2 = _slicedToArray(_ref, 2),props = _ref2[0],children = _ref2[1];return { tag: tag, props: props, children: children, version: ++version };}) };}; // input has format [stream | {vdom$}]
function mergeChildren$(children) {if (!Array.isArray(children)) {children = [children];}children = flatten(children);var childrenVdom$arr = children.map(function (child) {if ((0, _streamy.isStream)(child)) {return child.flatMap(mergeChildren$);}return child.vdom$ || child;});return (0, _streamy.merge$)(childrenVdom$arr);} /*
                                                                                                                                                                                                                                                                                                                                     * wrap all children in streams and merge those
                                                                                                                                                                                                                                                                                                                                     * we make sure that all children streams are flat arrays to make processing uniform
                                                                                                                                                                                                                                                                                                                                     * output: stream([stream([])])
                                                                                                                                                                                                                                                                                                                                     */function getChildrenVdom$arr(childrenArr, deleted$) {var _ref3; // flatten children arr
	// needed to make react style hyperscript (children as arguments) working parallel to preact style hyperscript (children as array)
	childrenArr = (_ref3 = []).concat.apply(_ref3, _toConsumableArray(childrenArr)); // only handle vdom for now
	var children$Arr = childrenArr.map(function (component) {// if there is no vdom$ it is a string or number
		if (component.vdom$ === undefined) {return (0, _streamy.stream)(component);}return component.vdom$;});return children$Arr // unsubscribe on the child when deleted
	.map(function (vdom$) {return vdom$.until(deleted$);} // make sure children are arrays and not nest
	).map(function (_) {return makeArray(_).map(flatten);} // so we can easily merge them
	).map(function (vdom$) {return vdom$.flatMap(function (vdomArr) {return (0, _streamy.merge$)(vdomArr);});});} // make sure all children are handled as streams
// so we can later easily merge them
function makeStreams(childrenArr) {return childrenArr.map(function (child) {if (child === null || !(0, _streamy.isStream)(child)) {return (0, _streamy.stream)(child);}return child;});} // converts an input into an array
function makeArray(stream) {return stream.map(function (value) {if (value == null) {return [];}if (!Array.isArray(value)) {return [value];}return value;});} // flattens an array
function flatten(array, mutable) {var toString = Object.prototype.toString;var arrayTypeStr = '[object Array]';var result = [];var nodes = mutable && array || array.slice();var node;if (!array.length) {return result;}node = nodes.pop();do {if (toString.call(node) === arrayTypeStr) {nodes.push.apply(nodes, node);} else {result.push(node);}} while (nodes.length && (node = nodes.pop()) !== undefined);
	result.reverse(); // we reverse result to restore the original order
	return result;
}

/*
  * Wrap props into one stream
  */
function wrapProps$(props, deleted$) {
	if (props === null) return (0, _streamy.stream)({});
	if ((0, _streamy.isStream)(props)) {
		return props.until(deleted$);
	}

	var nestedStreams = extractNestedStreams(props);
	var updateStreams = nestedStreams.map(function makeNestedStreamUpdateProps(_ref4) {var parent = _ref4.parent,key = _ref4.key,stream = _ref4.stream;
		return stream.
		until(deleted$).
		distinct
		// here we produce a sideeffect on the props object -> low GC
		// to trigger the merge we also need to return sth (as undefined does not trigger listeners)
		().map(function (value) {
			parent[key] = value;
			return value;
		});
	});
	return (0, _streamy.merge$)(updateStreams).map(function (_) {return props;});
}

// to react to nested streams in an object, we extract the streams and a reference to their position
// returns [{parentObject, propertyName, stream}]
function extractNestedStreams(obj) {
	return flatten(Object.keys(obj).map(function (key) {
		if (_typeof(obj[key]) === 'object') {
			return extractNestedStreams(obj[key]);
		}
		if ((0, _streamy.isStream)(obj[key])) {
			return [{
				parent: obj,
				key: key,
				stream: obj[key] }];

		}
		return [];
	}));
}

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.

test = test;var _src = __webpack_require__(0);function test(_ref, schedule, done) {var vdom$ = _ref.vdom$;
    (0, _src.render)({ vdom$: vdom$ }).$('element').reduce(function (iteration, newElement) {
        if (schedule[iteration] === undefined) {
            throw new Error('Unexpected Update!');
        }
        schedule[iteration](newElement);
        if (schedule.length === iteration + 1 && done) {
            done();
        }

        return iteration + 1;
    }, 0);
}

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(1)();
// imports


// module
exports.push([module.i, ".big-header, img, h3 {\n  transition: all 0.5s; }\n\n.big-header {\n  padding-top: 2rem;\n  cursor: pointer; }\n  .big-header h1 {\n    font-family: 'Rubik Mono One', sans-serif;\n    font-size: 10rem; }\n  .big-header img {\n    height: 17rem; }\n  @media all and (max-width: 569px) {\n    .big-header h1 {\n      font-size: 6rem; }\n    .big-header img {\n      height: 10rem; }\n    .big-header h3 {\n      font-size: 1.8rem; } }\n\n.link-list {\n  padding-top: 2rem;\n  padding-bottom: 1rem; }\n  .link-list a {\n    color: #188C71;\n    padding: 0 1rem;\n    line-height: 2rem;\n    font-weight: bold;\n    display: inline-block; }\n  @media all and (max-width: 569px) {\n    .link-list {\n      display: none; } }\n\n.hidden {\n  position: fixed;\n  z-index: 100;\n  padding: 0;\n  width: 100%; }\n  .hidden * {\n    margin-top: 0;\n    margin-bottom: 0; }\n  .hidden h3, .hidden img {\n    height: 0;\n    overflow: hidden; }\n  .hidden + .container {\n    padding-top: 37rem; }\n    @media all and (max-width: 569px) {\n      .hidden + .container {\n        padding-top: 30rem; } }\n  .hidden.big-header h1 {\n    font-size: 4rem; }\n  .hidden .link-list {\n    padding-top: 0.5rem;\n    padding-bottom: 0.5rem; }\n", ""]);

// exports


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(1)();
// imports


// module
exports.push([module.i, "iframe {\n  height: 270px; }\n", ""]);

// exports


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(1)();
// imports


// module
exports.push([module.i, "body {\n  margin-bottom: 4rem; }\n\n.anchor {\n  visibility: hidden;\n  position: relative;\n  top: -8rem; }\n\n.highlight {\n  color: #07684F !important; }\n\n.highlight-less {\n  color: #188C71 !important; }\n\n.highlight-background {\n  background-color: #FBD9BC !important; }\n\n.caption {\n  margin-bottom: 10px; }\n\npre {\n  padding-top: 2rem !important;\n  background-color: initial !important;\n  border-color: #FBD9BC; }\n  pre:before {\n    background: #FBD9BC !important;\n    color: #07684F !important; }\n", ""]);

// exports


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(1)();
// imports


// module
exports.push([module.i, ".tutorial h6 {\n  text-decoration: underline;\n  margin-top: 3rem; }\n", ""]);

// exports


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(1)();
// imports


// module
exports.push([module.i, ".materialize-red {\n  background-color: #e51c23 !important; }\n\n.materialize-red-text {\n  color: #e51c23 !important; }\n\n.materialize-red.lighten-5 {\n  background-color: #fdeaeb !important; }\n\n.materialize-red-text.text-lighten-5 {\n  color: #fdeaeb !important; }\n\n.materialize-red.lighten-4 {\n  background-color: #f8c1c3 !important; }\n\n.materialize-red-text.text-lighten-4 {\n  color: #f8c1c3 !important; }\n\n.materialize-red.lighten-3 {\n  background-color: #f3989b !important; }\n\n.materialize-red-text.text-lighten-3 {\n  color: #f3989b !important; }\n\n.materialize-red.lighten-2 {\n  background-color: #ee6e73 !important; }\n\n.materialize-red-text.text-lighten-2 {\n  color: #ee6e73 !important; }\n\n.materialize-red.lighten-1 {\n  background-color: #ea454b !important; }\n\n.materialize-red-text.text-lighten-1 {\n  color: #ea454b !important; }\n\n.materialize-red.darken-1 {\n  background-color: #d0181e !important; }\n\n.materialize-red-text.text-darken-1 {\n  color: #d0181e !important; }\n\n.materialize-red.darken-2 {\n  background-color: #b9151b !important; }\n\n.materialize-red-text.text-darken-2 {\n  color: #b9151b !important; }\n\n.materialize-red.darken-3 {\n  background-color: #a21318 !important; }\n\n.materialize-red-text.text-darken-3 {\n  color: #a21318 !important; }\n\n.materialize-red.darken-4 {\n  background-color: #8b1014 !important; }\n\n.materialize-red-text.text-darken-4 {\n  color: #8b1014 !important; }\n\n.red {\n  background-color: #F44336 !important; }\n\n.red-text {\n  color: #F44336 !important; }\n\n.red.lighten-5 {\n  background-color: #FFEBEE !important; }\n\n.red-text.text-lighten-5 {\n  color: #FFEBEE !important; }\n\n.red.lighten-4 {\n  background-color: #FFCDD2 !important; }\n\n.red-text.text-lighten-4 {\n  color: #FFCDD2 !important; }\n\n.red.lighten-3 {\n  background-color: #EF9A9A !important; }\n\n.red-text.text-lighten-3 {\n  color: #EF9A9A !important; }\n\n.red.lighten-2 {\n  background-color: #E57373 !important; }\n\n.red-text.text-lighten-2 {\n  color: #E57373 !important; }\n\n.red.lighten-1 {\n  background-color: #EF5350 !important; }\n\n.red-text.text-lighten-1 {\n  color: #EF5350 !important; }\n\n.red.darken-1 {\n  background-color: #E53935 !important; }\n\n.red-text.text-darken-1 {\n  color: #E53935 !important; }\n\n.red.darken-2 {\n  background-color: #D32F2F !important; }\n\n.red-text.text-darken-2 {\n  color: #D32F2F !important; }\n\n.red.darken-3 {\n  background-color: #C62828 !important; }\n\n.red-text.text-darken-3 {\n  color: #C62828 !important; }\n\n.red.darken-4 {\n  background-color: #B71C1C !important; }\n\n.red-text.text-darken-4 {\n  color: #B71C1C !important; }\n\n.red.accent-1 {\n  background-color: #FF8A80 !important; }\n\n.red-text.text-accent-1 {\n  color: #FF8A80 !important; }\n\n.red.accent-2 {\n  background-color: #FF5252 !important; }\n\n.red-text.text-accent-2 {\n  color: #FF5252 !important; }\n\n.red.accent-3 {\n  background-color: #FF1744 !important; }\n\n.red-text.text-accent-3 {\n  color: #FF1744 !important; }\n\n.red.accent-4 {\n  background-color: #D50000 !important; }\n\n.red-text.text-accent-4 {\n  color: #D50000 !important; }\n\n.pink {\n  background-color: #e91e63 !important; }\n\n.pink-text {\n  color: #e91e63 !important; }\n\n.pink.lighten-5 {\n  background-color: #fce4ec !important; }\n\n.pink-text.text-lighten-5 {\n  color: #fce4ec !important; }\n\n.pink.lighten-4 {\n  background-color: #f8bbd0 !important; }\n\n.pink-text.text-lighten-4 {\n  color: #f8bbd0 !important; }\n\n.pink.lighten-3 {\n  background-color: #f48fb1 !important; }\n\n.pink-text.text-lighten-3 {\n  color: #f48fb1 !important; }\n\n.pink.lighten-2 {\n  background-color: #f06292 !important; }\n\n.pink-text.text-lighten-2 {\n  color: #f06292 !important; }\n\n.pink.lighten-1 {\n  background-color: #ec407a !important; }\n\n.pink-text.text-lighten-1 {\n  color: #ec407a !important; }\n\n.pink.darken-1 {\n  background-color: #d81b60 !important; }\n\n.pink-text.text-darken-1 {\n  color: #d81b60 !important; }\n\n.pink.darken-2 {\n  background-color: #c2185b !important; }\n\n.pink-text.text-darken-2 {\n  color: #c2185b !important; }\n\n.pink.darken-3 {\n  background-color: #ad1457 !important; }\n\n.pink-text.text-darken-3 {\n  color: #ad1457 !important; }\n\n.pink.darken-4 {\n  background-color: #880e4f !important; }\n\n.pink-text.text-darken-4 {\n  color: #880e4f !important; }\n\n.pink.accent-1 {\n  background-color: #ff80ab !important; }\n\n.pink-text.text-accent-1 {\n  color: #ff80ab !important; }\n\n.pink.accent-2 {\n  background-color: #ff4081 !important; }\n\n.pink-text.text-accent-2 {\n  color: #ff4081 !important; }\n\n.pink.accent-3 {\n  background-color: #f50057 !important; }\n\n.pink-text.text-accent-3 {\n  color: #f50057 !important; }\n\n.pink.accent-4 {\n  background-color: #c51162 !important; }\n\n.pink-text.text-accent-4 {\n  color: #c51162 !important; }\n\n.purple {\n  background-color: #9c27b0 !important; }\n\n.purple-text {\n  color: #9c27b0 !important; }\n\n.purple.lighten-5 {\n  background-color: #f3e5f5 !important; }\n\n.purple-text.text-lighten-5 {\n  color: #f3e5f5 !important; }\n\n.purple.lighten-4 {\n  background-color: #e1bee7 !important; }\n\n.purple-text.text-lighten-4 {\n  color: #e1bee7 !important; }\n\n.purple.lighten-3 {\n  background-color: #ce93d8 !important; }\n\n.purple-text.text-lighten-3 {\n  color: #ce93d8 !important; }\n\n.purple.lighten-2 {\n  background-color: #ba68c8 !important; }\n\n.purple-text.text-lighten-2 {\n  color: #ba68c8 !important; }\n\n.purple.lighten-1 {\n  background-color: #ab47bc !important; }\n\n.purple-text.text-lighten-1 {\n  color: #ab47bc !important; }\n\n.purple.darken-1 {\n  background-color: #8e24aa !important; }\n\n.purple-text.text-darken-1 {\n  color: #8e24aa !important; }\n\n.purple.darken-2 {\n  background-color: #7b1fa2 !important; }\n\n.purple-text.text-darken-2 {\n  color: #7b1fa2 !important; }\n\n.purple.darken-3 {\n  background-color: #6a1b9a !important; }\n\n.purple-text.text-darken-3 {\n  color: #6a1b9a !important; }\n\n.purple.darken-4 {\n  background-color: #4a148c !important; }\n\n.purple-text.text-darken-4 {\n  color: #4a148c !important; }\n\n.purple.accent-1 {\n  background-color: #ea80fc !important; }\n\n.purple-text.text-accent-1 {\n  color: #ea80fc !important; }\n\n.purple.accent-2 {\n  background-color: #e040fb !important; }\n\n.purple-text.text-accent-2 {\n  color: #e040fb !important; }\n\n.purple.accent-3 {\n  background-color: #d500f9 !important; }\n\n.purple-text.text-accent-3 {\n  color: #d500f9 !important; }\n\n.purple.accent-4 {\n  background-color: #a0f !important; }\n\n.purple-text.text-accent-4 {\n  color: #a0f !important; }\n\n.deep-purple {\n  background-color: #673ab7 !important; }\n\n.deep-purple-text {\n  color: #673ab7 !important; }\n\n.deep-purple.lighten-5 {\n  background-color: #ede7f6 !important; }\n\n.deep-purple-text.text-lighten-5 {\n  color: #ede7f6 !important; }\n\n.deep-purple.lighten-4 {\n  background-color: #d1c4e9 !important; }\n\n.deep-purple-text.text-lighten-4 {\n  color: #d1c4e9 !important; }\n\n.deep-purple.lighten-3 {\n  background-color: #b39ddb !important; }\n\n.deep-purple-text.text-lighten-3 {\n  color: #b39ddb !important; }\n\n.deep-purple.lighten-2 {\n  background-color: #9575cd !important; }\n\n.deep-purple-text.text-lighten-2 {\n  color: #9575cd !important; }\n\n.deep-purple.lighten-1 {\n  background-color: #7e57c2 !important; }\n\n.deep-purple-text.text-lighten-1 {\n  color: #7e57c2 !important; }\n\n.deep-purple.darken-1 {\n  background-color: #5e35b1 !important; }\n\n.deep-purple-text.text-darken-1 {\n  color: #5e35b1 !important; }\n\n.deep-purple.darken-2 {\n  background-color: #512da8 !important; }\n\n.deep-purple-text.text-darken-2 {\n  color: #512da8 !important; }\n\n.deep-purple.darken-3 {\n  background-color: #4527a0 !important; }\n\n.deep-purple-text.text-darken-3 {\n  color: #4527a0 !important; }\n\n.deep-purple.darken-4 {\n  background-color: #311b92 !important; }\n\n.deep-purple-text.text-darken-4 {\n  color: #311b92 !important; }\n\n.deep-purple.accent-1 {\n  background-color: #b388ff !important; }\n\n.deep-purple-text.text-accent-1 {\n  color: #b388ff !important; }\n\n.deep-purple.accent-2 {\n  background-color: #7c4dff !important; }\n\n.deep-purple-text.text-accent-2 {\n  color: #7c4dff !important; }\n\n.deep-purple.accent-3 {\n  background-color: #651fff !important; }\n\n.deep-purple-text.text-accent-3 {\n  color: #651fff !important; }\n\n.deep-purple.accent-4 {\n  background-color: #6200ea !important; }\n\n.deep-purple-text.text-accent-4 {\n  color: #6200ea !important; }\n\n.indigo {\n  background-color: #3f51b5 !important; }\n\n.indigo-text {\n  color: #3f51b5 !important; }\n\n.indigo.lighten-5 {\n  background-color: #e8eaf6 !important; }\n\n.indigo-text.text-lighten-5 {\n  color: #e8eaf6 !important; }\n\n.indigo.lighten-4 {\n  background-color: #c5cae9 !important; }\n\n.indigo-text.text-lighten-4 {\n  color: #c5cae9 !important; }\n\n.indigo.lighten-3 {\n  background-color: #9fa8da !important; }\n\n.indigo-text.text-lighten-3 {\n  color: #9fa8da !important; }\n\n.indigo.lighten-2 {\n  background-color: #7986cb !important; }\n\n.indigo-text.text-lighten-2 {\n  color: #7986cb !important; }\n\n.indigo.lighten-1 {\n  background-color: #5c6bc0 !important; }\n\n.indigo-text.text-lighten-1 {\n  color: #5c6bc0 !important; }\n\n.indigo.darken-1 {\n  background-color: #3949ab !important; }\n\n.indigo-text.text-darken-1 {\n  color: #3949ab !important; }\n\n.indigo.darken-2 {\n  background-color: #303f9f !important; }\n\n.indigo-text.text-darken-2 {\n  color: #303f9f !important; }\n\n.indigo.darken-3 {\n  background-color: #283593 !important; }\n\n.indigo-text.text-darken-3 {\n  color: #283593 !important; }\n\n.indigo.darken-4 {\n  background-color: #1a237e !important; }\n\n.indigo-text.text-darken-4 {\n  color: #1a237e !important; }\n\n.indigo.accent-1 {\n  background-color: #8c9eff !important; }\n\n.indigo-text.text-accent-1 {\n  color: #8c9eff !important; }\n\n.indigo.accent-2 {\n  background-color: #536dfe !important; }\n\n.indigo-text.text-accent-2 {\n  color: #536dfe !important; }\n\n.indigo.accent-3 {\n  background-color: #3d5afe !important; }\n\n.indigo-text.text-accent-3 {\n  color: #3d5afe !important; }\n\n.indigo.accent-4 {\n  background-color: #304ffe !important; }\n\n.indigo-text.text-accent-4 {\n  color: #304ffe !important; }\n\n.blue {\n  background-color: #2196F3 !important; }\n\n.blue-text {\n  color: #2196F3 !important; }\n\n.blue.lighten-5 {\n  background-color: #E3F2FD !important; }\n\n.blue-text.text-lighten-5 {\n  color: #E3F2FD !important; }\n\n.blue.lighten-4 {\n  background-color: #BBDEFB !important; }\n\n.blue-text.text-lighten-4 {\n  color: #BBDEFB !important; }\n\n.blue.lighten-3 {\n  background-color: #90CAF9 !important; }\n\n.blue-text.text-lighten-3 {\n  color: #90CAF9 !important; }\n\n.blue.lighten-2 {\n  background-color: #64B5F6 !important; }\n\n.blue-text.text-lighten-2 {\n  color: #64B5F6 !important; }\n\n.blue.lighten-1 {\n  background-color: #42A5F5 !important; }\n\n.blue-text.text-lighten-1 {\n  color: #42A5F5 !important; }\n\n.blue.darken-1 {\n  background-color: #1E88E5 !important; }\n\n.blue-text.text-darken-1 {\n  color: #1E88E5 !important; }\n\n.blue.darken-2 {\n  background-color: #1976D2 !important; }\n\n.blue-text.text-darken-2 {\n  color: #1976D2 !important; }\n\n.blue.darken-3 {\n  background-color: #1565C0 !important; }\n\n.blue-text.text-darken-3 {\n  color: #1565C0 !important; }\n\n.blue.darken-4 {\n  background-color: #0D47A1 !important; }\n\n.blue-text.text-darken-4 {\n  color: #0D47A1 !important; }\n\n.blue.accent-1 {\n  background-color: #82B1FF !important; }\n\n.blue-text.text-accent-1 {\n  color: #82B1FF !important; }\n\n.blue.accent-2 {\n  background-color: #448AFF !important; }\n\n.blue-text.text-accent-2 {\n  color: #448AFF !important; }\n\n.blue.accent-3 {\n  background-color: #2979FF !important; }\n\n.blue-text.text-accent-3 {\n  color: #2979FF !important; }\n\n.blue.accent-4 {\n  background-color: #2962FF !important; }\n\n.blue-text.text-accent-4 {\n  color: #2962FF !important; }\n\n.light-blue {\n  background-color: #03a9f4 !important; }\n\n.light-blue-text {\n  color: #03a9f4 !important; }\n\n.light-blue.lighten-5 {\n  background-color: #e1f5fe !important; }\n\n.light-blue-text.text-lighten-5 {\n  color: #e1f5fe !important; }\n\n.light-blue.lighten-4 {\n  background-color: #b3e5fc !important; }\n\n.light-blue-text.text-lighten-4 {\n  color: #b3e5fc !important; }\n\n.light-blue.lighten-3 {\n  background-color: #81d4fa !important; }\n\n.light-blue-text.text-lighten-3 {\n  color: #81d4fa !important; }\n\n.light-blue.lighten-2 {\n  background-color: #4fc3f7 !important; }\n\n.light-blue-text.text-lighten-2 {\n  color: #4fc3f7 !important; }\n\n.light-blue.lighten-1 {\n  background-color: #29b6f6 !important; }\n\n.light-blue-text.text-lighten-1 {\n  color: #29b6f6 !important; }\n\n.light-blue.darken-1 {\n  background-color: #039be5 !important; }\n\n.light-blue-text.text-darken-1 {\n  color: #039be5 !important; }\n\n.light-blue.darken-2 {\n  background-color: #0288d1 !important; }\n\n.light-blue-text.text-darken-2 {\n  color: #0288d1 !important; }\n\n.light-blue.darken-3 {\n  background-color: #0277bd !important; }\n\n.light-blue-text.text-darken-3 {\n  color: #0277bd !important; }\n\n.light-blue.darken-4 {\n  background-color: #01579b !important; }\n\n.light-blue-text.text-darken-4 {\n  color: #01579b !important; }\n\n.light-blue.accent-1 {\n  background-color: #80d8ff !important; }\n\n.light-blue-text.text-accent-1 {\n  color: #80d8ff !important; }\n\n.light-blue.accent-2 {\n  background-color: #40c4ff !important; }\n\n.light-blue-text.text-accent-2 {\n  color: #40c4ff !important; }\n\n.light-blue.accent-3 {\n  background-color: #00b0ff !important; }\n\n.light-blue-text.text-accent-3 {\n  color: #00b0ff !important; }\n\n.light-blue.accent-4 {\n  background-color: #0091ea !important; }\n\n.light-blue-text.text-accent-4 {\n  color: #0091ea !important; }\n\n.cyan {\n  background-color: #00bcd4 !important; }\n\n.cyan-text {\n  color: #00bcd4 !important; }\n\n.cyan.lighten-5 {\n  background-color: #e0f7fa !important; }\n\n.cyan-text.text-lighten-5 {\n  color: #e0f7fa !important; }\n\n.cyan.lighten-4 {\n  background-color: #b2ebf2 !important; }\n\n.cyan-text.text-lighten-4 {\n  color: #b2ebf2 !important; }\n\n.cyan.lighten-3 {\n  background-color: #80deea !important; }\n\n.cyan-text.text-lighten-3 {\n  color: #80deea !important; }\n\n.cyan.lighten-2 {\n  background-color: #4dd0e1 !important; }\n\n.cyan-text.text-lighten-2 {\n  color: #4dd0e1 !important; }\n\n.cyan.lighten-1 {\n  background-color: #26c6da !important; }\n\n.cyan-text.text-lighten-1 {\n  color: #26c6da !important; }\n\n.cyan.darken-1 {\n  background-color: #00acc1 !important; }\n\n.cyan-text.text-darken-1 {\n  color: #00acc1 !important; }\n\n.cyan.darken-2 {\n  background-color: #0097a7 !important; }\n\n.cyan-text.text-darken-2 {\n  color: #0097a7 !important; }\n\n.cyan.darken-3 {\n  background-color: #00838f !important; }\n\n.cyan-text.text-darken-3 {\n  color: #00838f !important; }\n\n.cyan.darken-4 {\n  background-color: #006064 !important; }\n\n.cyan-text.text-darken-4 {\n  color: #006064 !important; }\n\n.cyan.accent-1 {\n  background-color: #84ffff !important; }\n\n.cyan-text.text-accent-1 {\n  color: #84ffff !important; }\n\n.cyan.accent-2 {\n  background-color: #18ffff !important; }\n\n.cyan-text.text-accent-2 {\n  color: #18ffff !important; }\n\n.cyan.accent-3 {\n  background-color: #00e5ff !important; }\n\n.cyan-text.text-accent-3 {\n  color: #00e5ff !important; }\n\n.cyan.accent-4 {\n  background-color: #00b8d4 !important; }\n\n.cyan-text.text-accent-4 {\n  color: #00b8d4 !important; }\n\n.teal {\n  background-color: #009688 !important; }\n\n.teal-text {\n  color: #009688 !important; }\n\n.teal.lighten-5 {\n  background-color: #e0f2f1 !important; }\n\n.teal-text.text-lighten-5 {\n  color: #e0f2f1 !important; }\n\n.teal.lighten-4 {\n  background-color: #b2dfdb !important; }\n\n.teal-text.text-lighten-4 {\n  color: #b2dfdb !important; }\n\n.teal.lighten-3 {\n  background-color: #80cbc4 !important; }\n\n.teal-text.text-lighten-3 {\n  color: #80cbc4 !important; }\n\n.teal.lighten-2 {\n  background-color: #4db6ac !important; }\n\n.teal-text.text-lighten-2 {\n  color: #4db6ac !important; }\n\n.teal.lighten-1 {\n  background-color: #26a69a !important; }\n\n.teal-text.text-lighten-1 {\n  color: #26a69a !important; }\n\n.teal.darken-1 {\n  background-color: #00897b !important; }\n\n.teal-text.text-darken-1 {\n  color: #00897b !important; }\n\n.teal.darken-2 {\n  background-color: #00796b !important; }\n\n.teal-text.text-darken-2 {\n  color: #00796b !important; }\n\n.teal.darken-3 {\n  background-color: #00695c !important; }\n\n.teal-text.text-darken-3 {\n  color: #00695c !important; }\n\n.teal.darken-4 {\n  background-color: #004d40 !important; }\n\n.teal-text.text-darken-4 {\n  color: #004d40 !important; }\n\n.teal.accent-1 {\n  background-color: #a7ffeb !important; }\n\n.teal-text.text-accent-1 {\n  color: #a7ffeb !important; }\n\n.teal.accent-2 {\n  background-color: #64ffda !important; }\n\n.teal-text.text-accent-2 {\n  color: #64ffda !important; }\n\n.teal.accent-3 {\n  background-color: #1de9b6 !important; }\n\n.teal-text.text-accent-3 {\n  color: #1de9b6 !important; }\n\n.teal.accent-4 {\n  background-color: #00bfa5 !important; }\n\n.teal-text.text-accent-4 {\n  color: #00bfa5 !important; }\n\n.green {\n  background-color: #4CAF50 !important; }\n\n.green-text {\n  color: #4CAF50 !important; }\n\n.green.lighten-5 {\n  background-color: #E8F5E9 !important; }\n\n.green-text.text-lighten-5 {\n  color: #E8F5E9 !important; }\n\n.green.lighten-4 {\n  background-color: #C8E6C9 !important; }\n\n.green-text.text-lighten-4 {\n  color: #C8E6C9 !important; }\n\n.green.lighten-3 {\n  background-color: #A5D6A7 !important; }\n\n.green-text.text-lighten-3 {\n  color: #A5D6A7 !important; }\n\n.green.lighten-2 {\n  background-color: #81C784 !important; }\n\n.green-text.text-lighten-2 {\n  color: #81C784 !important; }\n\n.green.lighten-1 {\n  background-color: #66BB6A !important; }\n\n.green-text.text-lighten-1 {\n  color: #66BB6A !important; }\n\n.green.darken-1 {\n  background-color: #43A047 !important; }\n\n.green-text.text-darken-1 {\n  color: #43A047 !important; }\n\n.green.darken-2 {\n  background-color: #388E3C !important; }\n\n.green-text.text-darken-2 {\n  color: #388E3C !important; }\n\n.green.darken-3 {\n  background-color: #2E7D32 !important; }\n\n.green-text.text-darken-3 {\n  color: #2E7D32 !important; }\n\n.green.darken-4 {\n  background-color: #1B5E20 !important; }\n\n.green-text.text-darken-4 {\n  color: #1B5E20 !important; }\n\n.green.accent-1 {\n  background-color: #B9F6CA !important; }\n\n.green-text.text-accent-1 {\n  color: #B9F6CA !important; }\n\n.green.accent-2 {\n  background-color: #69F0AE !important; }\n\n.green-text.text-accent-2 {\n  color: #69F0AE !important; }\n\n.green.accent-3 {\n  background-color: #00E676 !important; }\n\n.green-text.text-accent-3 {\n  color: #00E676 !important; }\n\n.green.accent-4 {\n  background-color: #00C853 !important; }\n\n.green-text.text-accent-4 {\n  color: #00C853 !important; }\n\n.light-green {\n  background-color: #8bc34a !important; }\n\n.light-green-text {\n  color: #8bc34a !important; }\n\n.light-green.lighten-5 {\n  background-color: #f1f8e9 !important; }\n\n.light-green-text.text-lighten-5 {\n  color: #f1f8e9 !important; }\n\n.light-green.lighten-4 {\n  background-color: #dcedc8 !important; }\n\n.light-green-text.text-lighten-4 {\n  color: #dcedc8 !important; }\n\n.light-green.lighten-3 {\n  background-color: #c5e1a5 !important; }\n\n.light-green-text.text-lighten-3 {\n  color: #c5e1a5 !important; }\n\n.light-green.lighten-2 {\n  background-color: #aed581 !important; }\n\n.light-green-text.text-lighten-2 {\n  color: #aed581 !important; }\n\n.light-green.lighten-1 {\n  background-color: #9ccc65 !important; }\n\n.light-green-text.text-lighten-1 {\n  color: #9ccc65 !important; }\n\n.light-green.darken-1 {\n  background-color: #7cb342 !important; }\n\n.light-green-text.text-darken-1 {\n  color: #7cb342 !important; }\n\n.light-green.darken-2 {\n  background-color: #689f38 !important; }\n\n.light-green-text.text-darken-2 {\n  color: #689f38 !important; }\n\n.light-green.darken-3 {\n  background-color: #558b2f !important; }\n\n.light-green-text.text-darken-3 {\n  color: #558b2f !important; }\n\n.light-green.darken-4 {\n  background-color: #33691e !important; }\n\n.light-green-text.text-darken-4 {\n  color: #33691e !important; }\n\n.light-green.accent-1 {\n  background-color: #ccff90 !important; }\n\n.light-green-text.text-accent-1 {\n  color: #ccff90 !important; }\n\n.light-green.accent-2 {\n  background-color: #b2ff59 !important; }\n\n.light-green-text.text-accent-2 {\n  color: #b2ff59 !important; }\n\n.light-green.accent-3 {\n  background-color: #76ff03 !important; }\n\n.light-green-text.text-accent-3 {\n  color: #76ff03 !important; }\n\n.light-green.accent-4 {\n  background-color: #64dd17 !important; }\n\n.light-green-text.text-accent-4 {\n  color: #64dd17 !important; }\n\n.lime {\n  background-color: #cddc39 !important; }\n\n.lime-text {\n  color: #cddc39 !important; }\n\n.lime.lighten-5 {\n  background-color: #f9fbe7 !important; }\n\n.lime-text.text-lighten-5 {\n  color: #f9fbe7 !important; }\n\n.lime.lighten-4 {\n  background-color: #f0f4c3 !important; }\n\n.lime-text.text-lighten-4 {\n  color: #f0f4c3 !important; }\n\n.lime.lighten-3 {\n  background-color: #e6ee9c !important; }\n\n.lime-text.text-lighten-3 {\n  color: #e6ee9c !important; }\n\n.lime.lighten-2 {\n  background-color: #dce775 !important; }\n\n.lime-text.text-lighten-2 {\n  color: #dce775 !important; }\n\n.lime.lighten-1 {\n  background-color: #d4e157 !important; }\n\n.lime-text.text-lighten-1 {\n  color: #d4e157 !important; }\n\n.lime.darken-1 {\n  background-color: #c0ca33 !important; }\n\n.lime-text.text-darken-1 {\n  color: #c0ca33 !important; }\n\n.lime.darken-2 {\n  background-color: #afb42b !important; }\n\n.lime-text.text-darken-2 {\n  color: #afb42b !important; }\n\n.lime.darken-3 {\n  background-color: #9e9d24 !important; }\n\n.lime-text.text-darken-3 {\n  color: #9e9d24 !important; }\n\n.lime.darken-4 {\n  background-color: #827717 !important; }\n\n.lime-text.text-darken-4 {\n  color: #827717 !important; }\n\n.lime.accent-1 {\n  background-color: #f4ff81 !important; }\n\n.lime-text.text-accent-1 {\n  color: #f4ff81 !important; }\n\n.lime.accent-2 {\n  background-color: #eeff41 !important; }\n\n.lime-text.text-accent-2 {\n  color: #eeff41 !important; }\n\n.lime.accent-3 {\n  background-color: #c6ff00 !important; }\n\n.lime-text.text-accent-3 {\n  color: #c6ff00 !important; }\n\n.lime.accent-4 {\n  background-color: #aeea00 !important; }\n\n.lime-text.text-accent-4 {\n  color: #aeea00 !important; }\n\n.yellow {\n  background-color: #ffeb3b !important; }\n\n.yellow-text {\n  color: #ffeb3b !important; }\n\n.yellow.lighten-5 {\n  background-color: #fffde7 !important; }\n\n.yellow-text.text-lighten-5 {\n  color: #fffde7 !important; }\n\n.yellow.lighten-4 {\n  background-color: #fff9c4 !important; }\n\n.yellow-text.text-lighten-4 {\n  color: #fff9c4 !important; }\n\n.yellow.lighten-3 {\n  background-color: #fff59d !important; }\n\n.yellow-text.text-lighten-3 {\n  color: #fff59d !important; }\n\n.yellow.lighten-2 {\n  background-color: #fff176 !important; }\n\n.yellow-text.text-lighten-2 {\n  color: #fff176 !important; }\n\n.yellow.lighten-1 {\n  background-color: #ffee58 !important; }\n\n.yellow-text.text-lighten-1 {\n  color: #ffee58 !important; }\n\n.yellow.darken-1 {\n  background-color: #fdd835 !important; }\n\n.yellow-text.text-darken-1 {\n  color: #fdd835 !important; }\n\n.yellow.darken-2 {\n  background-color: #fbc02d !important; }\n\n.yellow-text.text-darken-2 {\n  color: #fbc02d !important; }\n\n.yellow.darken-3 {\n  background-color: #f9a825 !important; }\n\n.yellow-text.text-darken-3 {\n  color: #f9a825 !important; }\n\n.yellow.darken-4 {\n  background-color: #f57f17 !important; }\n\n.yellow-text.text-darken-4 {\n  color: #f57f17 !important; }\n\n.yellow.accent-1 {\n  background-color: #ffff8d !important; }\n\n.yellow-text.text-accent-1 {\n  color: #ffff8d !important; }\n\n.yellow.accent-2 {\n  background-color: #ff0 !important; }\n\n.yellow-text.text-accent-2 {\n  color: #ff0 !important; }\n\n.yellow.accent-3 {\n  background-color: #ffea00 !important; }\n\n.yellow-text.text-accent-3 {\n  color: #ffea00 !important; }\n\n.yellow.accent-4 {\n  background-color: #ffd600 !important; }\n\n.yellow-text.text-accent-4 {\n  color: #ffd600 !important; }\n\n.amber {\n  background-color: #ffc107 !important; }\n\n.amber-text {\n  color: #ffc107 !important; }\n\n.amber.lighten-5 {\n  background-color: #fff8e1 !important; }\n\n.amber-text.text-lighten-5 {\n  color: #fff8e1 !important; }\n\n.amber.lighten-4 {\n  background-color: #ffecb3 !important; }\n\n.amber-text.text-lighten-4 {\n  color: #ffecb3 !important; }\n\n.amber.lighten-3 {\n  background-color: #ffe082 !important; }\n\n.amber-text.text-lighten-3 {\n  color: #ffe082 !important; }\n\n.amber.lighten-2 {\n  background-color: #ffd54f !important; }\n\n.amber-text.text-lighten-2 {\n  color: #ffd54f !important; }\n\n.amber.lighten-1 {\n  background-color: #ffca28 !important; }\n\n.amber-text.text-lighten-1 {\n  color: #ffca28 !important; }\n\n.amber.darken-1 {\n  background-color: #ffb300 !important; }\n\n.amber-text.text-darken-1 {\n  color: #ffb300 !important; }\n\n.amber.darken-2 {\n  background-color: #ffa000 !important; }\n\n.amber-text.text-darken-2 {\n  color: #ffa000 !important; }\n\n.amber.darken-3 {\n  background-color: #ff8f00 !important; }\n\n.amber-text.text-darken-3 {\n  color: #ff8f00 !important; }\n\n.amber.darken-4 {\n  background-color: #ff6f00 !important; }\n\n.amber-text.text-darken-4 {\n  color: #ff6f00 !important; }\n\n.amber.accent-1 {\n  background-color: #ffe57f !important; }\n\n.amber-text.text-accent-1 {\n  color: #ffe57f !important; }\n\n.amber.accent-2 {\n  background-color: #ffd740 !important; }\n\n.amber-text.text-accent-2 {\n  color: #ffd740 !important; }\n\n.amber.accent-3 {\n  background-color: #ffc400 !important; }\n\n.amber-text.text-accent-3 {\n  color: #ffc400 !important; }\n\n.amber.accent-4 {\n  background-color: #ffab00 !important; }\n\n.amber-text.text-accent-4 {\n  color: #ffab00 !important; }\n\n.orange {\n  background-color: #ff9800 !important; }\n\n.orange-text {\n  color: #ff9800 !important; }\n\n.orange.lighten-5 {\n  background-color: #fff3e0 !important; }\n\n.orange-text.text-lighten-5 {\n  color: #fff3e0 !important; }\n\n.orange.lighten-4 {\n  background-color: #ffe0b2 !important; }\n\n.orange-text.text-lighten-4 {\n  color: #ffe0b2 !important; }\n\n.orange.lighten-3 {\n  background-color: #ffcc80 !important; }\n\n.orange-text.text-lighten-3 {\n  color: #ffcc80 !important; }\n\n.orange.lighten-2 {\n  background-color: #ffb74d !important; }\n\n.orange-text.text-lighten-2 {\n  color: #ffb74d !important; }\n\n.orange.lighten-1 {\n  background-color: #ffa726 !important; }\n\n.orange-text.text-lighten-1 {\n  color: #ffa726 !important; }\n\n.orange.darken-1 {\n  background-color: #fb8c00 !important; }\n\n.orange-text.text-darken-1 {\n  color: #fb8c00 !important; }\n\n.orange.darken-2 {\n  background-color: #f57c00 !important; }\n\n.orange-text.text-darken-2 {\n  color: #f57c00 !important; }\n\n.orange.darken-3 {\n  background-color: #ef6c00 !important; }\n\n.orange-text.text-darken-3 {\n  color: #ef6c00 !important; }\n\n.orange.darken-4 {\n  background-color: #e65100 !important; }\n\n.orange-text.text-darken-4 {\n  color: #e65100 !important; }\n\n.orange.accent-1 {\n  background-color: #ffd180 !important; }\n\n.orange-text.text-accent-1 {\n  color: #ffd180 !important; }\n\n.orange.accent-2 {\n  background-color: #ffab40 !important; }\n\n.orange-text.text-accent-2 {\n  color: #ffab40 !important; }\n\n.orange.accent-3 {\n  background-color: #ff9100 !important; }\n\n.orange-text.text-accent-3 {\n  color: #ff9100 !important; }\n\n.orange.accent-4 {\n  background-color: #ff6d00 !important; }\n\n.orange-text.text-accent-4 {\n  color: #ff6d00 !important; }\n\n.deep-orange {\n  background-color: #ff5722 !important; }\n\n.deep-orange-text {\n  color: #ff5722 !important; }\n\n.deep-orange.lighten-5 {\n  background-color: #fbe9e7 !important; }\n\n.deep-orange-text.text-lighten-5 {\n  color: #fbe9e7 !important; }\n\n.deep-orange.lighten-4 {\n  background-color: #ffccbc !important; }\n\n.deep-orange-text.text-lighten-4 {\n  color: #ffccbc !important; }\n\n.deep-orange.lighten-3 {\n  background-color: #ffab91 !important; }\n\n.deep-orange-text.text-lighten-3 {\n  color: #ffab91 !important; }\n\n.deep-orange.lighten-2 {\n  background-color: #ff8a65 !important; }\n\n.deep-orange-text.text-lighten-2 {\n  color: #ff8a65 !important; }\n\n.deep-orange.lighten-1 {\n  background-color: #ff7043 !important; }\n\n.deep-orange-text.text-lighten-1 {\n  color: #ff7043 !important; }\n\n.deep-orange.darken-1 {\n  background-color: #f4511e !important; }\n\n.deep-orange-text.text-darken-1 {\n  color: #f4511e !important; }\n\n.deep-orange.darken-2 {\n  background-color: #e64a19 !important; }\n\n.deep-orange-text.text-darken-2 {\n  color: #e64a19 !important; }\n\n.deep-orange.darken-3 {\n  background-color: #d84315 !important; }\n\n.deep-orange-text.text-darken-3 {\n  color: #d84315 !important; }\n\n.deep-orange.darken-4 {\n  background-color: #bf360c !important; }\n\n.deep-orange-text.text-darken-4 {\n  color: #bf360c !important; }\n\n.deep-orange.accent-1 {\n  background-color: #ff9e80 !important; }\n\n.deep-orange-text.text-accent-1 {\n  color: #ff9e80 !important; }\n\n.deep-orange.accent-2 {\n  background-color: #ff6e40 !important; }\n\n.deep-orange-text.text-accent-2 {\n  color: #ff6e40 !important; }\n\n.deep-orange.accent-3 {\n  background-color: #ff3d00 !important; }\n\n.deep-orange-text.text-accent-3 {\n  color: #ff3d00 !important; }\n\n.deep-orange.accent-4 {\n  background-color: #dd2c00 !important; }\n\n.deep-orange-text.text-accent-4 {\n  color: #dd2c00 !important; }\n\n.brown {\n  background-color: #795548 !important; }\n\n.brown-text {\n  color: #795548 !important; }\n\n.brown.lighten-5 {\n  background-color: #efebe9 !important; }\n\n.brown-text.text-lighten-5 {\n  color: #efebe9 !important; }\n\n.brown.lighten-4 {\n  background-color: #d7ccc8 !important; }\n\n.brown-text.text-lighten-4 {\n  color: #d7ccc8 !important; }\n\n.brown.lighten-3 {\n  background-color: #bcaaa4 !important; }\n\n.brown-text.text-lighten-3 {\n  color: #bcaaa4 !important; }\n\n.brown.lighten-2 {\n  background-color: #a1887f !important; }\n\n.brown-text.text-lighten-2 {\n  color: #a1887f !important; }\n\n.brown.lighten-1 {\n  background-color: #8d6e63 !important; }\n\n.brown-text.text-lighten-1 {\n  color: #8d6e63 !important; }\n\n.brown.darken-1 {\n  background-color: #6d4c41 !important; }\n\n.brown-text.text-darken-1 {\n  color: #6d4c41 !important; }\n\n.brown.darken-2 {\n  background-color: #5d4037 !important; }\n\n.brown-text.text-darken-2 {\n  color: #5d4037 !important; }\n\n.brown.darken-3 {\n  background-color: #4e342e !important; }\n\n.brown-text.text-darken-3 {\n  color: #4e342e !important; }\n\n.brown.darken-4 {\n  background-color: #3e2723 !important; }\n\n.brown-text.text-darken-4 {\n  color: #3e2723 !important; }\n\n.blue-grey {\n  background-color: #607d8b !important; }\n\n.blue-grey-text {\n  color: #607d8b !important; }\n\n.blue-grey.lighten-5 {\n  background-color: #eceff1 !important; }\n\n.blue-grey-text.text-lighten-5 {\n  color: #eceff1 !important; }\n\n.blue-grey.lighten-4 {\n  background-color: #cfd8dc !important; }\n\n.blue-grey-text.text-lighten-4 {\n  color: #cfd8dc !important; }\n\n.blue-grey.lighten-3 {\n  background-color: #b0bec5 !important; }\n\n.blue-grey-text.text-lighten-3 {\n  color: #b0bec5 !important; }\n\n.blue-grey.lighten-2 {\n  background-color: #90a4ae !important; }\n\n.blue-grey-text.text-lighten-2 {\n  color: #90a4ae !important; }\n\n.blue-grey.lighten-1 {\n  background-color: #78909c !important; }\n\n.blue-grey-text.text-lighten-1 {\n  color: #78909c !important; }\n\n.blue-grey.darken-1 {\n  background-color: #546e7a !important; }\n\n.blue-grey-text.text-darken-1 {\n  color: #546e7a !important; }\n\n.blue-grey.darken-2 {\n  background-color: #455a64 !important; }\n\n.blue-grey-text.text-darken-2 {\n  color: #455a64 !important; }\n\n.blue-grey.darken-3 {\n  background-color: #37474f !important; }\n\n.blue-grey-text.text-darken-3 {\n  color: #37474f !important; }\n\n.blue-grey.darken-4 {\n  background-color: #263238 !important; }\n\n.blue-grey-text.text-darken-4 {\n  color: #263238 !important; }\n\n.grey {\n  background-color: #9e9e9e !important; }\n\n.grey-text {\n  color: #9e9e9e !important; }\n\n.grey.lighten-5 {\n  background-color: #fafafa !important; }\n\n.grey-text.text-lighten-5 {\n  color: #fafafa !important; }\n\n.grey.lighten-4 {\n  background-color: #f5f5f5 !important; }\n\n.grey-text.text-lighten-4 {\n  color: #f5f5f5 !important; }\n\n.grey.lighten-3 {\n  background-color: #eee !important; }\n\n.grey-text.text-lighten-3 {\n  color: #eee !important; }\n\n.grey.lighten-2 {\n  background-color: #e0e0e0 !important; }\n\n.grey-text.text-lighten-2 {\n  color: #e0e0e0 !important; }\n\n.grey.lighten-1 {\n  background-color: #bdbdbd !important; }\n\n.grey-text.text-lighten-1 {\n  color: #bdbdbd !important; }\n\n.grey.darken-1 {\n  background-color: #757575 !important; }\n\n.grey-text.text-darken-1 {\n  color: #757575 !important; }\n\n.grey.darken-2 {\n  background-color: #616161 !important; }\n\n.grey-text.text-darken-2 {\n  color: #616161 !important; }\n\n.grey.darken-3 {\n  background-color: #424242 !important; }\n\n.grey-text.text-darken-3 {\n  color: #424242 !important; }\n\n.grey.darken-4 {\n  background-color: #212121 !important; }\n\n.grey-text.text-darken-4 {\n  color: #212121 !important; }\n\n.black {\n  background-color: #000 !important; }\n\n.black-text {\n  color: #000 !important; }\n\n.white {\n  background-color: #fff !important; }\n\n.white-text {\n  color: #fff !important; }\n\n.transparent {\n  background-color: transparent !important; }\n\n.transparent-text {\n  color: transparent !important; }\n\n/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */\nhtml {\n  font-family: sans-serif;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%; }\n\nbody {\n  margin: 0; }\n\narticle, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary {\n  display: block; }\n\naudio, canvas, progress, video {\n  display: inline-block;\n  vertical-align: baseline; }\n\naudio:not([controls]) {\n  display: none;\n  height: 0; }\n\n[hidden], template {\n  display: none; }\n\na {\n  background-color: transparent; }\n\na:active, a:hover {\n  outline: 0; }\n\nabbr[title] {\n  border-bottom: 1px dotted; }\n\nb, strong {\n  font-weight: bold; }\n\ndfn {\n  font-style: italic; }\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0; }\n\nmark {\n  background: #ff0;\n  color: #000; }\n\nsmall {\n  font-size: 80%; }\n\nsub, sup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline; }\n\nsup {\n  top: -0.5em; }\n\nsub {\n  bottom: -0.25em; }\n\nimg {\n  border: 0; }\n\nsvg:not(:root) {\n  overflow: hidden; }\n\nfigure {\n  margin: 1em 40px; }\n\nhr {\n  box-sizing: content-box;\n  height: 0; }\n\npre {\n  overflow: auto; }\n\ncode, kbd, pre, samp {\n  font-family: monospace, monospace;\n  font-size: 1em; }\n\nbutton, input, optgroup, select, textarea {\n  color: inherit;\n  font: inherit;\n  margin: 0; }\n\nbutton {\n  overflow: visible; }\n\nbutton, select {\n  text-transform: none; }\n\nbutton, html input[type=\"button\"], input[type=\"reset\"], input[type=\"submit\"] {\n  -webkit-appearance: button;\n  cursor: pointer; }\n\nbutton[disabled], html input[disabled] {\n  cursor: default; }\n\nbutton::-moz-focus-inner, input::-moz-focus-inner {\n  border: 0;\n  padding: 0; }\n\ninput {\n  line-height: normal; }\n\ninput[type=\"checkbox\"], input[type=\"radio\"] {\n  box-sizing: border-box;\n  padding: 0; }\n\ninput[type=\"number\"]::-webkit-inner-spin-button, input[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto; }\n\ninput[type=\"search\"] {\n  -webkit-appearance: textfield;\n  box-sizing: content-box; }\n\ninput[type=\"search\"]::-webkit-search-cancel-button, input[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none; }\n\nfieldset {\n  border: 1px solid #c0c0c0;\n  margin: 0 2px;\n  padding: 0.35em 0.625em 0.75em; }\n\nlegend {\n  border: 0;\n  padding: 0; }\n\ntextarea {\n  overflow: auto; }\n\noptgroup {\n  font-weight: bold; }\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0; }\n\ntd, th {\n  padding: 0; }\n\nhtml {\n  box-sizing: border-box; }\n\n*, *:before, *:after {\n  box-sizing: inherit; }\n\nul:not(.browser-default) {\n  padding-left: 0;\n  list-style-type: none; }\n\nul:not(.browser-default) li {\n  list-style-type: none; }\n\na {\n  color: #039be5;\n  text-decoration: none;\n  -webkit-tap-highlight-color: transparent; }\n\n.valign-wrapper, body.themes .themes-section {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-align-items: center;\n  -ms-flex-align: center;\n  align-items: center; }\n\n.clearfix {\n  clear: both; }\n\n.z-depth-0 {\n  box-shadow: none !important; }\n\n.z-depth-1, nav, .card-panel, .card, .toast, .btn, .btn-large, .btn-floating, .dropdown-content, .collapsible, .side-nav {\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2); }\n\n.z-depth-1-half, .btn:hover, .btn-large:hover, .btn-floating:hover {\n  box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.14), 0 1px 7px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -1px rgba(0, 0, 0, 0.2); }\n\n.z-depth-2 {\n  box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12), 0 2px 4px -1px rgba(0, 0, 0, 0.3); }\n\n.z-depth-3 {\n  box-shadow: 0 6px 10px 0 rgba(0, 0, 0, 0.14), 0 1px 18px 0 rgba(0, 0, 0, 0.12), 0 3px 5px -1px rgba(0, 0, 0, 0.3); }\n\n.z-depth-4, .modal {\n  box-shadow: 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12), 0 5px 5px -3px rgba(0, 0, 0, 0.3); }\n\n.z-depth-5 {\n  box-shadow: 0 16px 24px 2px rgba(0, 0, 0, 0.14), 0 6px 30px 5px rgba(0, 0, 0, 0.12), 0 8px 10px -5px rgba(0, 0, 0, 0.3); }\n\n.hoverable {\n  transition: box-shadow .25s;\n  box-shadow: 0; }\n\n.hoverable:hover {\n  transition: box-shadow .25s;\n  box-shadow: 0 8px 17px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19); }\n\n.divider {\n  height: 1px;\n  overflow: hidden;\n  background-color: #e0e0e0; }\n\nblockquote {\n  margin: 20px 0;\n  padding-left: 1.5rem;\n  border-left: 5px solid #ee6e73; }\n\ni {\n  line-height: inherit; }\n\ni.left {\n  float: left;\n  margin-right: 15px; }\n\ni.right {\n  float: right;\n  margin-left: 15px; }\n\ni.tiny {\n  font-size: 1rem; }\n\ni.small {\n  font-size: 2rem; }\n\ni.medium {\n  font-size: 4rem; }\n\ni.large {\n  font-size: 6rem; }\n\nimg.responsive-img, video.responsive-video {\n  max-width: 100%;\n  height: auto; }\n\n.pagination li {\n  display: inline-block;\n  border-radius: 2px;\n  text-align: center;\n  vertical-align: top;\n  height: 30px; }\n\n.pagination li a {\n  color: #444;\n  display: inline-block;\n  font-size: 1.2rem;\n  padding: 0 10px;\n  line-height: 30px; }\n\n.pagination li.active a {\n  color: #fff; }\n\n.pagination li.active {\n  background-color: #ee6e73; }\n\n.pagination li.disabled a {\n  cursor: default;\n  color: #999; }\n\n.pagination li i {\n  font-size: 2rem; }\n\n.pagination li.pages ul li {\n  display: inline-block;\n  float: none; }\n\n@media only screen and (max-width: 992px) {\n  .pagination {\n    width: 100%; }\n  .pagination li.prev, .pagination li.next {\n    width: 10%; }\n  .pagination li.pages {\n    width: 80%;\n    overflow: hidden;\n    white-space: nowrap; } }\n\n.breadcrumb {\n  font-size: 18px;\n  color: rgba(255, 255, 255, 0.7); }\n\n.breadcrumb i, .breadcrumb [class^=\"mdi-\"], .breadcrumb [class*=\"mdi-\"], .breadcrumb i.material-icons {\n  display: inline-block;\n  float: left;\n  font-size: 24px; }\n\n.breadcrumb:before {\n  content: '\\E5CC';\n  color: rgba(255, 255, 255, 0.7);\n  vertical-align: top;\n  display: inline-block;\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 25px;\n  margin: 0 10px 0 8px;\n  -webkit-font-smoothing: antialiased; }\n\n.breadcrumb:first-child:before {\n  display: none; }\n\n.breadcrumb:last-child {\n  color: #fff; }\n\n.parallax-container {\n  position: relative;\n  overflow: hidden;\n  height: 500px; }\n\n.parallax {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: -1; }\n\n.parallax img {\n  display: none;\n  position: absolute;\n  left: 50%;\n  bottom: 0;\n  min-width: 100%;\n  min-height: 100%;\n  -webkit-transform: translate3d(0, 0, 0);\n  transform: translate3d(0, 0, 0);\n  -webkit-transform: translateX(-50%);\n  transform: translateX(-50%); }\n\n.pin-top, .pin-bottom {\n  position: relative; }\n\n.pinned {\n  position: fixed !important; }\n\nul.staggered-list li {\n  opacity: 0; }\n\n.fade-in {\n  opacity: 0;\n  -webkit-transform-origin: 0 50%;\n  transform-origin: 0 50%; }\n\n@media only screen and (max-width: 600px) {\n  .hide-on-small-only, .tabs-wrapper, .hide-on-small-and-down {\n    display: none !important; } }\n\n@media only screen and (max-width: 992px) {\n  .hide-on-med-and-down {\n    display: none !important; } }\n\n@media only screen and (min-width: 601px) {\n  .hide-on-med-and-up {\n    display: none !important; } }\n\n@media only screen and (min-width: 600px) and (max-width: 992px) {\n  .hide-on-med-only {\n    display: none !important; } }\n\n@media only screen and (min-width: 993px) {\n  .hide-on-large-only {\n    display: none !important; } }\n\n@media only screen and (min-width: 993px) {\n  .show-on-large {\n    display: block !important; } }\n\n@media only screen and (min-width: 600px) and (max-width: 992px) {\n  .show-on-medium {\n    display: block !important; } }\n\n@media only screen and (max-width: 600px) {\n  .show-on-small {\n    display: block !important; } }\n\n@media only screen and (min-width: 601px) {\n  .show-on-medium-and-up {\n    display: block !important; } }\n\n@media only screen and (max-width: 992px) {\n  .show-on-medium-and-down {\n    display: block !important; } }\n\n@media only screen and (max-width: 600px) {\n  .center-on-small-only {\n    text-align: center; } }\n\n.page-footer {\n  padding-top: 20px;\n  background-color: #ee6e73; }\n\n.page-footer .footer-copyright {\n  overflow: hidden;\n  min-height: 50px;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-align-items: center;\n  -ms-flex-align: center;\n  align-items: center;\n  padding: 10px 0px;\n  color: rgba(255, 255, 255, 0.8);\n  background-color: rgba(51, 51, 51, 0.08); }\n\ntable, th, td {\n  border: none; }\n\ntable {\n  width: 100%;\n  display: table; }\n\ntable.bordered > thead > tr, table.bordered > tbody > tr {\n  border-bottom: 1px solid #d0d0d0; }\n\ntable.striped > tbody > tr:nth-child(odd) {\n  background-color: #f2f2f2; }\n\ntable.striped > tbody > tr > td {\n  border-radius: 0; }\n\ntable.highlight > tbody > tr {\n  transition: background-color .25s ease; }\n\ntable.highlight > tbody > tr:hover {\n  background-color: #f2f2f2; }\n\ntable.centered thead tr th, table.centered tbody tr td {\n  text-align: center; }\n\nthead {\n  border-bottom: 1px solid #d0d0d0; }\n\ntd, th {\n  padding: 15px 5px;\n  display: table-cell;\n  text-align: left;\n  vertical-align: middle;\n  border-radius: 2px; }\n\n@media only screen and (max-width: 992px) {\n  table.responsive-table {\n    width: 100%;\n    border-collapse: collapse;\n    border-spacing: 0;\n    display: block;\n    position: relative; }\n  table.responsive-table td:empty:before {\n    content: '\\A0'; }\n  table.responsive-table th, table.responsive-table td {\n    margin: 0;\n    vertical-align: top; }\n  table.responsive-table th {\n    text-align: left; }\n  table.responsive-table thead {\n    display: block;\n    float: left; }\n  table.responsive-table thead tr {\n    display: block;\n    padding: 0 10px 0 0; }\n  table.responsive-table thead tr th::before {\n    content: \"\\A0\"; }\n  table.responsive-table tbody {\n    display: block;\n    width: auto;\n    position: relative;\n    overflow-x: auto;\n    white-space: nowrap; }\n  table.responsive-table tbody tr {\n    display: inline-block;\n    vertical-align: top; }\n  table.responsive-table th {\n    display: block;\n    text-align: right; }\n  table.responsive-table td {\n    display: block;\n    min-height: 1.25em;\n    text-align: left; }\n  table.responsive-table tr {\n    padding: 0 10px; }\n  table.responsive-table thead {\n    border: 0;\n    border-right: 1px solid #d0d0d0; }\n  table.responsive-table.bordered th {\n    border-bottom: 0;\n    border-left: 0; }\n  table.responsive-table.bordered td {\n    border-left: 0;\n    border-right: 0;\n    border-bottom: 0; }\n  table.responsive-table.bordered tr {\n    border: 0; }\n  table.responsive-table.bordered tbody tr {\n    border-right: 1px solid #d0d0d0; } }\n\n.collection {\n  margin: .5rem 0 1rem 0;\n  border: 1px solid #e0e0e0;\n  border-radius: 2px;\n  overflow: hidden;\n  position: relative; }\n\n.collection .collection-item {\n  background-color: #fff;\n  line-height: 1.5rem;\n  padding: 10px 20px;\n  margin: 0;\n  border-bottom: 1px solid #e0e0e0; }\n\n.collection .collection-item.avatar {\n  min-height: 84px;\n  padding-left: 72px;\n  position: relative; }\n\n.collection .collection-item.avatar .circle {\n  position: absolute;\n  width: 42px;\n  height: 42px;\n  overflow: hidden;\n  left: 15px;\n  display: inline-block;\n  vertical-align: middle; }\n\n.collection .collection-item.avatar i.circle {\n  font-size: 18px;\n  line-height: 42px;\n  color: #fff;\n  background-color: #999;\n  text-align: center; }\n\n.collection .collection-item.avatar .title {\n  font-size: 16px; }\n\n.collection .collection-item.avatar p {\n  margin: 0; }\n\n.collection .collection-item.avatar .secondary-content {\n  position: absolute;\n  top: 16px;\n  right: 16px; }\n\n.collection .collection-item:last-child {\n  border-bottom: none; }\n\n.collection .collection-item.active {\n  background-color: #26a69a;\n  color: #eafaf9; }\n\n.collection .collection-item.active .secondary-content {\n  color: #fff; }\n\n.collection a.collection-item {\n  display: block;\n  transition: .25s;\n  color: #26a69a; }\n\n.collection a.collection-item:not(.active):hover {\n  background-color: #ddd; }\n\n.collection.with-header .collection-header {\n  background-color: #fff;\n  border-bottom: 1px solid #e0e0e0;\n  padding: 10px 20px; }\n\n.collection.with-header .collection-item {\n  padding-left: 30px; }\n\n.collection.with-header .collection-item.avatar {\n  padding-left: 72px; }\n\n.secondary-content {\n  float: right;\n  color: #26a69a; }\n\n.collapsible .collection {\n  margin: 0;\n  border: none; }\n\n.video-container {\n  position: relative;\n  padding-bottom: 56.25%;\n  height: 0;\n  overflow: hidden; }\n\n.video-container iframe, .video-container object, .video-container embed {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%; }\n\n.progress {\n  position: relative;\n  height: 4px;\n  display: block;\n  width: 100%;\n  background-color: #acece6;\n  border-radius: 2px;\n  margin: .5rem 0 1rem 0;\n  overflow: hidden; }\n\n.progress .determinate {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  background-color: #26a69a;\n  transition: width .3s linear; }\n\n.progress .indeterminate {\n  background-color: #26a69a; }\n\n.progress .indeterminate:before {\n  content: '';\n  position: absolute;\n  background-color: inherit;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  will-change: left, right;\n  -webkit-animation: indeterminate 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;\n  animation: indeterminate 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite; }\n\n.progress .indeterminate:after {\n  content: '';\n  position: absolute;\n  background-color: inherit;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  will-change: left, right;\n  -webkit-animation: indeterminate-short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;\n  animation: indeterminate-short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;\n  -webkit-animation-delay: 1.15s;\n  animation-delay: 1.15s; }\n\n@-webkit-keyframes indeterminate {\n  0% {\n    left: -35%;\n    right: 100%; }\n  60% {\n    left: 100%;\n    right: -90%; }\n  100% {\n    left: 100%;\n    right: -90%; } }\n\n@keyframes indeterminate {\n  0% {\n    left: -35%;\n    right: 100%; }\n  60% {\n    left: 100%;\n    right: -90%; }\n  100% {\n    left: 100%;\n    right: -90%; } }\n\n@-webkit-keyframes indeterminate-short {\n  0% {\n    left: -200%;\n    right: 100%; }\n  60% {\n    left: 107%;\n    right: -8%; }\n  100% {\n    left: 107%;\n    right: -8%; } }\n\n@keyframes indeterminate-short {\n  0% {\n    left: -200%;\n    right: 100%; }\n  60% {\n    left: 107%;\n    right: -8%; }\n  100% {\n    left: 107%;\n    right: -8%; } }\n\n.hide {\n  display: none !important; }\n\n.left-align {\n  text-align: left; }\n\n.right-align {\n  text-align: right; }\n\n.center, .center-align {\n  text-align: center; }\n\n.left {\n  float: left !important; }\n\n.right {\n  float: right !important; }\n\n.no-select, input[type=range], input[type=range] + .thumb {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n.circle {\n  border-radius: 50%; }\n\n.center-block {\n  display: block;\n  margin-left: auto;\n  margin-right: auto; }\n\n.truncate {\n  display: block;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis; }\n\n.no-padding {\n  padding: 0 !important; }\n\nspan.badge {\n  min-width: 3rem;\n  padding: 0 6px;\n  margin-left: 14px;\n  text-align: center;\n  font-size: 1rem;\n  line-height: 22px;\n  height: 22px;\n  color: #757575;\n  float: right;\n  box-sizing: border-box; }\n\nspan.badge.new {\n  font-weight: 300;\n  font-size: 0.8rem;\n  color: #fff;\n  background-color: #26a69a;\n  border-radius: 2px; }\n\nspan.badge.new:after {\n  content: \" new\"; }\n\nspan.badge[data-badge-caption]::after {\n  content: \" \" attr(data-badge-caption); }\n\nnav ul a span.badge {\n  display: inline-block;\n  float: none;\n  margin-left: 4px;\n  line-height: 22px;\n  height: 22px; }\n\n.collection-item span.badge {\n  margin-top: calc(.75rem - 11px); }\n\n.collapsible span.badge {\n  margin-top: calc(1.5rem - 11px); }\n\n.side-nav span.badge {\n  margin-top: calc(24px - 11px); }\n\n.material-icons {\n  text-rendering: optimizeLegibility;\n  -webkit-font-feature-settings: 'liga';\n  -moz-font-feature-settings: 'liga';\n  font-feature-settings: 'liga'; }\n\n.container {\n  margin: 0 auto;\n  max-width: 1280px;\n  width: 90%; }\n\n@media only screen and (min-width: 601px) {\n  .container {\n    width: 85%; } }\n\n@media only screen and (min-width: 993px) {\n  .container {\n    width: 70%; } }\n\n.container .row {\n  margin-left: -.75rem;\n  margin-right: -.75rem; }\n\n.section {\n  padding-top: 1rem;\n  padding-bottom: 1rem; }\n\n.section.no-pad {\n  padding: 0; }\n\n.section.no-pad-bot {\n  padding-bottom: 0; }\n\n.section.no-pad-top {\n  padding-top: 0; }\n\n.row {\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 20px; }\n\n.row:after {\n  content: \"\";\n  display: table;\n  clear: both; }\n\n.row .col {\n  float: left;\n  box-sizing: border-box;\n  padding: 0 .75rem;\n  min-height: 1px; }\n\n.row .col[class*=\"push-\"], .row .col[class*=\"pull-\"] {\n  position: relative; }\n\n.row .col.s1 {\n  width: 8.3333333333%;\n  margin-left: auto;\n  left: auto;\n  right: auto; }\n\n.row .col.s2 {\n  width: 16.6666666667%;\n  margin-left: auto;\n  left: auto;\n  right: auto; }\n\n.row .col.s3 {\n  width: 25%;\n  margin-left: auto;\n  left: auto;\n  right: auto; }\n\n.row .col.s4 {\n  width: 33.3333333333%;\n  margin-left: auto;\n  left: auto;\n  right: auto; }\n\n.row .col.s5 {\n  width: 41.6666666667%;\n  margin-left: auto;\n  left: auto;\n  right: auto; }\n\n.row .col.s6 {\n  width: 50%;\n  margin-left: auto;\n  left: auto;\n  right: auto; }\n\n.row .col.s7 {\n  width: 58.3333333333%;\n  margin-left: auto;\n  left: auto;\n  right: auto; }\n\n.row .col.s8 {\n  width: 66.6666666667%;\n  margin-left: auto;\n  left: auto;\n  right: auto; }\n\n.row .col.s9 {\n  width: 75%;\n  margin-left: auto;\n  left: auto;\n  right: auto; }\n\n.row .col.s10 {\n  width: 83.3333333333%;\n  margin-left: auto;\n  left: auto;\n  right: auto; }\n\n.row .col.s11 {\n  width: 91.6666666667%;\n  margin-left: auto;\n  left: auto;\n  right: auto; }\n\n.row .col.s12 {\n  width: 100%;\n  margin-left: auto;\n  left: auto;\n  right: auto; }\n\n.row .col.offset-s1 {\n  margin-left: 8.3333333333%; }\n\n.row .col.pull-s1 {\n  right: 8.3333333333%; }\n\n.row .col.push-s1 {\n  left: 8.3333333333%; }\n\n.row .col.offset-s2 {\n  margin-left: 16.6666666667%; }\n\n.row .col.pull-s2 {\n  right: 16.6666666667%; }\n\n.row .col.push-s2 {\n  left: 16.6666666667%; }\n\n.row .col.offset-s3 {\n  margin-left: 25%; }\n\n.row .col.pull-s3 {\n  right: 25%; }\n\n.row .col.push-s3 {\n  left: 25%; }\n\n.row .col.offset-s4 {\n  margin-left: 33.3333333333%; }\n\n.row .col.pull-s4 {\n  right: 33.3333333333%; }\n\n.row .col.push-s4 {\n  left: 33.3333333333%; }\n\n.row .col.offset-s5 {\n  margin-left: 41.6666666667%; }\n\n.row .col.pull-s5 {\n  right: 41.6666666667%; }\n\n.row .col.push-s5 {\n  left: 41.6666666667%; }\n\n.row .col.offset-s6 {\n  margin-left: 50%; }\n\n.row .col.pull-s6 {\n  right: 50%; }\n\n.row .col.push-s6 {\n  left: 50%; }\n\n.row .col.offset-s7 {\n  margin-left: 58.3333333333%; }\n\n.row .col.pull-s7 {\n  right: 58.3333333333%; }\n\n.row .col.push-s7 {\n  left: 58.3333333333%; }\n\n.row .col.offset-s8 {\n  margin-left: 66.6666666667%; }\n\n.row .col.pull-s8 {\n  right: 66.6666666667%; }\n\n.row .col.push-s8 {\n  left: 66.6666666667%; }\n\n.row .col.offset-s9 {\n  margin-left: 75%; }\n\n.row .col.pull-s9 {\n  right: 75%; }\n\n.row .col.push-s9 {\n  left: 75%; }\n\n.row .col.offset-s10 {\n  margin-left: 83.3333333333%; }\n\n.row .col.pull-s10 {\n  right: 83.3333333333%; }\n\n.row .col.push-s10 {\n  left: 83.3333333333%; }\n\n.row .col.offset-s11 {\n  margin-left: 91.6666666667%; }\n\n.row .col.pull-s11 {\n  right: 91.6666666667%; }\n\n.row .col.push-s11 {\n  left: 91.6666666667%; }\n\n.row .col.offset-s12 {\n  margin-left: 100%; }\n\n.row .col.pull-s12 {\n  right: 100%; }\n\n.row .col.push-s12 {\n  left: 100%; }\n\n@media only screen and (min-width: 601px) {\n  .row .col.m1 {\n    width: 8.3333333333%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.m2 {\n    width: 16.6666666667%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.m3 {\n    width: 25%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.m4 {\n    width: 33.3333333333%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.m5 {\n    width: 41.6666666667%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.m6 {\n    width: 50%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.m7 {\n    width: 58.3333333333%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.m8 {\n    width: 66.6666666667%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.m9 {\n    width: 75%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.m10 {\n    width: 83.3333333333%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.m11 {\n    width: 91.6666666667%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.m12 {\n    width: 100%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.offset-m1 {\n    margin-left: 8.3333333333%; }\n  .row .col.pull-m1 {\n    right: 8.3333333333%; }\n  .row .col.push-m1 {\n    left: 8.3333333333%; }\n  .row .col.offset-m2 {\n    margin-left: 16.6666666667%; }\n  .row .col.pull-m2 {\n    right: 16.6666666667%; }\n  .row .col.push-m2 {\n    left: 16.6666666667%; }\n  .row .col.offset-m3 {\n    margin-left: 25%; }\n  .row .col.pull-m3 {\n    right: 25%; }\n  .row .col.push-m3 {\n    left: 25%; }\n  .row .col.offset-m4 {\n    margin-left: 33.3333333333%; }\n  .row .col.pull-m4 {\n    right: 33.3333333333%; }\n  .row .col.push-m4 {\n    left: 33.3333333333%; }\n  .row .col.offset-m5 {\n    margin-left: 41.6666666667%; }\n  .row .col.pull-m5 {\n    right: 41.6666666667%; }\n  .row .col.push-m5 {\n    left: 41.6666666667%; }\n  .row .col.offset-m6 {\n    margin-left: 50%; }\n  .row .col.pull-m6 {\n    right: 50%; }\n  .row .col.push-m6 {\n    left: 50%; }\n  .row .col.offset-m7 {\n    margin-left: 58.3333333333%; }\n  .row .col.pull-m7 {\n    right: 58.3333333333%; }\n  .row .col.push-m7 {\n    left: 58.3333333333%; }\n  .row .col.offset-m8 {\n    margin-left: 66.6666666667%; }\n  .row .col.pull-m8 {\n    right: 66.6666666667%; }\n  .row .col.push-m8 {\n    left: 66.6666666667%; }\n  .row .col.offset-m9 {\n    margin-left: 75%; }\n  .row .col.pull-m9 {\n    right: 75%; }\n  .row .col.push-m9 {\n    left: 75%; }\n  .row .col.offset-m10 {\n    margin-left: 83.3333333333%; }\n  .row .col.pull-m10 {\n    right: 83.3333333333%; }\n  .row .col.push-m10 {\n    left: 83.3333333333%; }\n  .row .col.offset-m11 {\n    margin-left: 91.6666666667%; }\n  .row .col.pull-m11 {\n    right: 91.6666666667%; }\n  .row .col.push-m11 {\n    left: 91.6666666667%; }\n  .row .col.offset-m12 {\n    margin-left: 100%; }\n  .row .col.pull-m12 {\n    right: 100%; }\n  .row .col.push-m12 {\n    left: 100%; } }\n\n@media only screen and (min-width: 993px) {\n  .row .col.l1 {\n    width: 8.3333333333%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.l2 {\n    width: 16.6666666667%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.l3 {\n    width: 25%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.l4 {\n    width: 33.3333333333%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.l5 {\n    width: 41.6666666667%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.l6 {\n    width: 50%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.l7 {\n    width: 58.3333333333%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.l8 {\n    width: 66.6666666667%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.l9 {\n    width: 75%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.l10 {\n    width: 83.3333333333%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.l11 {\n    width: 91.6666666667%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.l12 {\n    width: 100%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.offset-l1 {\n    margin-left: 8.3333333333%; }\n  .row .col.pull-l1 {\n    right: 8.3333333333%; }\n  .row .col.push-l1 {\n    left: 8.3333333333%; }\n  .row .col.offset-l2 {\n    margin-left: 16.6666666667%; }\n  .row .col.pull-l2 {\n    right: 16.6666666667%; }\n  .row .col.push-l2 {\n    left: 16.6666666667%; }\n  .row .col.offset-l3 {\n    margin-left: 25%; }\n  .row .col.pull-l3 {\n    right: 25%; }\n  .row .col.push-l3 {\n    left: 25%; }\n  .row .col.offset-l4 {\n    margin-left: 33.3333333333%; }\n  .row .col.pull-l4 {\n    right: 33.3333333333%; }\n  .row .col.push-l4 {\n    left: 33.3333333333%; }\n  .row .col.offset-l5 {\n    margin-left: 41.6666666667%; }\n  .row .col.pull-l5 {\n    right: 41.6666666667%; }\n  .row .col.push-l5 {\n    left: 41.6666666667%; }\n  .row .col.offset-l6 {\n    margin-left: 50%; }\n  .row .col.pull-l6 {\n    right: 50%; }\n  .row .col.push-l6 {\n    left: 50%; }\n  .row .col.offset-l7 {\n    margin-left: 58.3333333333%; }\n  .row .col.pull-l7 {\n    right: 58.3333333333%; }\n  .row .col.push-l7 {\n    left: 58.3333333333%; }\n  .row .col.offset-l8 {\n    margin-left: 66.6666666667%; }\n  .row .col.pull-l8 {\n    right: 66.6666666667%; }\n  .row .col.push-l8 {\n    left: 66.6666666667%; }\n  .row .col.offset-l9 {\n    margin-left: 75%; }\n  .row .col.pull-l9 {\n    right: 75%; }\n  .row .col.push-l9 {\n    left: 75%; }\n  .row .col.offset-l10 {\n    margin-left: 83.3333333333%; }\n  .row .col.pull-l10 {\n    right: 83.3333333333%; }\n  .row .col.push-l10 {\n    left: 83.3333333333%; }\n  .row .col.offset-l11 {\n    margin-left: 91.6666666667%; }\n  .row .col.pull-l11 {\n    right: 91.6666666667%; }\n  .row .col.push-l11 {\n    left: 91.6666666667%; }\n  .row .col.offset-l12 {\n    margin-left: 100%; }\n  .row .col.pull-l12 {\n    right: 100%; }\n  .row .col.push-l12 {\n    left: 100%; } }\n\n@media only screen and (min-width: 1201px) {\n  .row .col.xl1 {\n    width: 8.3333333333%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.xl2 {\n    width: 16.6666666667%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.xl3 {\n    width: 25%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.xl4 {\n    width: 33.3333333333%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.xl5 {\n    width: 41.6666666667%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.xl6 {\n    width: 50%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.xl7 {\n    width: 58.3333333333%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.xl8 {\n    width: 66.6666666667%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.xl9 {\n    width: 75%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.xl10 {\n    width: 83.3333333333%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.xl11 {\n    width: 91.6666666667%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.xl12 {\n    width: 100%;\n    margin-left: auto;\n    left: auto;\n    right: auto; }\n  .row .col.offset-xl1 {\n    margin-left: 8.3333333333%; }\n  .row .col.pull-xl1 {\n    right: 8.3333333333%; }\n  .row .col.push-xl1 {\n    left: 8.3333333333%; }\n  .row .col.offset-xl2 {\n    margin-left: 16.6666666667%; }\n  .row .col.pull-xl2 {\n    right: 16.6666666667%; }\n  .row .col.push-xl2 {\n    left: 16.6666666667%; }\n  .row .col.offset-xl3 {\n    margin-left: 25%; }\n  .row .col.pull-xl3 {\n    right: 25%; }\n  .row .col.push-xl3 {\n    left: 25%; }\n  .row .col.offset-xl4 {\n    margin-left: 33.3333333333%; }\n  .row .col.pull-xl4 {\n    right: 33.3333333333%; }\n  .row .col.push-xl4 {\n    left: 33.3333333333%; }\n  .row .col.offset-xl5 {\n    margin-left: 41.6666666667%; }\n  .row .col.pull-xl5 {\n    right: 41.6666666667%; }\n  .row .col.push-xl5 {\n    left: 41.6666666667%; }\n  .row .col.offset-xl6 {\n    margin-left: 50%; }\n  .row .col.pull-xl6 {\n    right: 50%; }\n  .row .col.push-xl6 {\n    left: 50%; }\n  .row .col.offset-xl7 {\n    margin-left: 58.3333333333%; }\n  .row .col.pull-xl7 {\n    right: 58.3333333333%; }\n  .row .col.push-xl7 {\n    left: 58.3333333333%; }\n  .row .col.offset-xl8 {\n    margin-left: 66.6666666667%; }\n  .row .col.pull-xl8 {\n    right: 66.6666666667%; }\n  .row .col.push-xl8 {\n    left: 66.6666666667%; }\n  .row .col.offset-xl9 {\n    margin-left: 75%; }\n  .row .col.pull-xl9 {\n    right: 75%; }\n  .row .col.push-xl9 {\n    left: 75%; }\n  .row .col.offset-xl10 {\n    margin-left: 83.3333333333%; }\n  .row .col.pull-xl10 {\n    right: 83.3333333333%; }\n  .row .col.push-xl10 {\n    left: 83.3333333333%; }\n  .row .col.offset-xl11 {\n    margin-left: 91.6666666667%; }\n  .row .col.pull-xl11 {\n    right: 91.6666666667%; }\n  .row .col.push-xl11 {\n    left: 91.6666666667%; }\n  .row .col.offset-xl12 {\n    margin-left: 100%; }\n  .row .col.pull-xl12 {\n    right: 100%; }\n  .row .col.push-xl12 {\n    left: 100%; } }\n\nnav {\n  color: #fff;\n  background-color: #ee6e73;\n  width: 100%;\n  height: 56px;\n  line-height: 56px; }\n\nnav.nav-extended {\n  height: auto; }\n\nnav.nav-extended .nav-wrapper {\n  min-height: 56px;\n  height: auto; }\n\nnav.nav-extended .nav-content {\n  position: relative;\n  line-height: normal; }\n\nnav a {\n  color: #fff; }\n\nnav i, nav [class^=\"mdi-\"], nav [class*=\"mdi-\"], nav i.material-icons {\n  display: block;\n  font-size: 24px;\n  height: 56px;\n  line-height: 56px; }\n\nnav .nav-wrapper {\n  position: relative;\n  height: 100%; }\n\n@media only screen and (min-width: 993px) {\n  nav a.button-collapse {\n    display: none; } }\n\nnav .button-collapse {\n  float: left;\n  position: relative;\n  z-index: 1;\n  height: 56px;\n  margin: 0 18px; }\n\nnav .button-collapse i {\n  height: 56px;\n  line-height: 56px; }\n\nnav .brand-logo {\n  position: absolute;\n  color: #fff;\n  display: inline-block;\n  font-size: 2.1rem;\n  padding: 0;\n  white-space: nowrap; }\n\nnav .brand-logo.center {\n  left: 50%;\n  -webkit-transform: translateX(-50%);\n  transform: translateX(-50%); }\n\n@media only screen and (max-width: 992px) {\n  nav .brand-logo {\n    left: 50%;\n    -webkit-transform: translateX(-50%);\n    transform: translateX(-50%); }\n  nav .brand-logo.left, nav .brand-logo.right {\n    padding: 0;\n    -webkit-transform: none;\n    transform: none; }\n  nav .brand-logo.left {\n    left: 0.5rem; }\n  nav .brand-logo.right {\n    right: 0.5rem;\n    left: auto; } }\n\nnav .brand-logo.right {\n  right: 0.5rem;\n  padding: 0; }\n\nnav .brand-logo i, nav .brand-logo [class^=\"mdi-\"], nav .brand-logo [class*=\"mdi-\"], nav .brand-logo i.material-icons {\n  float: left;\n  margin-right: 15px; }\n\nnav .nav-title {\n  display: inline-block;\n  font-size: 32px;\n  padding: 28px 0; }\n\nnav ul {\n  margin: 0; }\n\nnav ul li {\n  transition: background-color .3s;\n  float: left;\n  padding: 0; }\n\nnav ul li.active {\n  background-color: rgba(0, 0, 0, 0.1); }\n\nnav ul a {\n  transition: background-color .3s;\n  font-size: 1rem;\n  color: #fff;\n  display: block;\n  padding: 0 15px;\n  cursor: pointer; }\n\nnav ul a.btn, nav ul a.btn-large, nav ul a.btn-large, nav ul a.btn-flat, nav ul a.btn-floating {\n  margin-top: -2px;\n  margin-left: 15px;\n  margin-right: 15px; }\n\nnav ul a.btn > .material-icons, nav ul a.btn-large > .material-icons, nav ul a.btn-large > .material-icons, nav ul a.btn-flat > .material-icons, nav ul a.btn-floating > .material-icons {\n  height: inherit;\n  line-height: inherit; }\n\nnav ul a:hover {\n  background-color: rgba(0, 0, 0, 0.1); }\n\nnav ul.left {\n  float: left; }\n\nnav form {\n  height: 100%; }\n\nnav .input-field {\n  margin: 0;\n  height: 100%; }\n\nnav .input-field input {\n  height: 100%;\n  font-size: 1.2rem;\n  border: none;\n  padding-left: 2rem; }\n\nnav .input-field input:focus, nav .input-field input[type=text]:valid, nav .input-field input[type=password]:valid, nav .input-field input[type=email]:valid, nav .input-field input[type=url]:valid, nav .input-field input[type=date]:valid {\n  border: none;\n  box-shadow: none; }\n\nnav .input-field label {\n  top: 0;\n  left: 0; }\n\nnav .input-field label i {\n  color: rgba(255, 255, 255, 0.7);\n  transition: color .3s; }\n\nnav .input-field label.active i {\n  color: #fff; }\n\n.navbar-fixed {\n  position: relative;\n  height: 56px;\n  z-index: 997; }\n\n.navbar-fixed nav {\n  position: fixed; }\n\n@media only screen and (min-width: 601px) {\n  nav.nav-extended .nav-wrapper {\n    min-height: 64px; }\n  nav, nav .nav-wrapper i, nav a.button-collapse, nav a.button-collapse i {\n    height: 64px;\n    line-height: 64px; }\n  .navbar-fixed {\n    height: 64px; } }\n\n@font-face {\n  font-family: \"Roboto\";\n  src: local(Roboto Thin), url(" + __webpack_require__(57) + ") format(\"woff2\"), url(" + __webpack_require__(56) + ") format(\"woff\");\n  font-weight: 100; }\n\n@font-face {\n  font-family: \"Roboto\";\n  src: local(Roboto Light), url(" + __webpack_require__(51) + ") format(\"woff2\"), url(" + __webpack_require__(50) + ") format(\"woff\");\n  font-weight: 300; }\n\n@font-face {\n  font-family: \"Roboto\";\n  src: local(Roboto Regular), url(" + __webpack_require__(55) + ") format(\"woff2\"), url(" + __webpack_require__(54) + ") format(\"woff\");\n  font-weight: 400; }\n\n@font-face {\n  font-family: \"Roboto\";\n  src: local(Roboto Medium), url(" + __webpack_require__(53) + ") format(\"woff2\"), url(" + __webpack_require__(52) + ") format(\"woff\");\n  font-weight: 500; }\n\n@font-face {\n  font-family: \"Roboto\";\n  src: local(Roboto Bold), url(" + __webpack_require__(49) + ") format(\"woff2\"), url(" + __webpack_require__(48) + ") format(\"woff\");\n  font-weight: 700; }\n\na {\n  text-decoration: none; }\n\nhtml {\n  line-height: 1.5;\n  font-family: \"Roboto\", sans-serif;\n  font-weight: normal;\n  color: rgba(0, 0, 0, 0.87); }\n\n@media only screen and (min-width: 0) {\n  html {\n    font-size: 14px; } }\n\n@media only screen and (min-width: 992px) {\n  html {\n    font-size: 14.5px; } }\n\n@media only screen and (min-width: 1200px) {\n  html {\n    font-size: 15px; } }\n\nh1, h2, h3, h4, h5, h6 {\n  font-weight: 400;\n  line-height: 1.1; }\n\nh1 a, h2 a, h3 a, h4 a, h5 a, h6 a {\n  font-weight: inherit; }\n\nh1 {\n  font-size: 4.2rem;\n  line-height: 110%;\n  margin: 2.1rem 0 1.68rem 0; }\n\nh2 {\n  font-size: 3.56rem;\n  line-height: 110%;\n  margin: 1.78rem 0 1.424rem 0; }\n\nh3 {\n  font-size: 2.92rem;\n  line-height: 110%;\n  margin: 1.46rem 0 1.168rem 0; }\n\nh4 {\n  font-size: 2.28rem;\n  line-height: 110%;\n  margin: 1.14rem 0 .912rem 0; }\n\nh5 {\n  font-size: 1.64rem;\n  line-height: 110%;\n  margin: .82rem 0 .656rem 0; }\n\nh6 {\n  font-size: 1rem;\n  line-height: 110%;\n  margin: .5rem 0 .4rem 0; }\n\nem {\n  font-style: italic; }\n\nstrong {\n  font-weight: 500; }\n\nsmall {\n  font-size: 75%; }\n\n.light, .page-footer .footer-copyright {\n  font-weight: 300; }\n\n.thin {\n  font-weight: 200; }\n\n.flow-text {\n  font-weight: 300; }\n\n@media only screen and (min-width: 360px) {\n  .flow-text {\n    font-size: 1.2rem; } }\n\n@media only screen and (min-width: 390px) {\n  .flow-text {\n    font-size: 1.224rem; } }\n\n@media only screen and (min-width: 420px) {\n  .flow-text {\n    font-size: 1.248rem; } }\n\n@media only screen and (min-width: 450px) {\n  .flow-text {\n    font-size: 1.272rem; } }\n\n@media only screen and (min-width: 480px) {\n  .flow-text {\n    font-size: 1.296rem; } }\n\n@media only screen and (min-width: 510px) {\n  .flow-text {\n    font-size: 1.32rem; } }\n\n@media only screen and (min-width: 540px) {\n  .flow-text {\n    font-size: 1.344rem; } }\n\n@media only screen and (min-width: 570px) {\n  .flow-text {\n    font-size: 1.368rem; } }\n\n@media only screen and (min-width: 600px) {\n  .flow-text {\n    font-size: 1.392rem; } }\n\n@media only screen and (min-width: 630px) {\n  .flow-text {\n    font-size: 1.416rem; } }\n\n@media only screen and (min-width: 660px) {\n  .flow-text {\n    font-size: 1.44rem; } }\n\n@media only screen and (min-width: 690px) {\n  .flow-text {\n    font-size: 1.464rem; } }\n\n@media only screen and (min-width: 720px) {\n  .flow-text {\n    font-size: 1.488rem; } }\n\n@media only screen and (min-width: 750px) {\n  .flow-text {\n    font-size: 1.512rem; } }\n\n@media only screen and (min-width: 780px) {\n  .flow-text {\n    font-size: 1.536rem; } }\n\n@media only screen and (min-width: 810px) {\n  .flow-text {\n    font-size: 1.56rem; } }\n\n@media only screen and (min-width: 840px) {\n  .flow-text {\n    font-size: 1.584rem; } }\n\n@media only screen and (min-width: 870px) {\n  .flow-text {\n    font-size: 1.608rem; } }\n\n@media only screen and (min-width: 900px) {\n  .flow-text {\n    font-size: 1.632rem; } }\n\n@media only screen and (min-width: 930px) {\n  .flow-text {\n    font-size: 1.656rem; } }\n\n@media only screen and (min-width: 960px) {\n  .flow-text {\n    font-size: 1.68rem; } }\n\n@media only screen and (max-width: 360px) {\n  .flow-text {\n    font-size: 1.2rem; } }\n\n.scale-transition {\n  transition: -webkit-transform 0.3s cubic-bezier(0.53, 0.01, 0.36, 1.63) !important;\n  transition: transform 0.3s cubic-bezier(0.53, 0.01, 0.36, 1.63) !important;\n  transition: transform 0.3s cubic-bezier(0.53, 0.01, 0.36, 1.63), -webkit-transform 0.3s cubic-bezier(0.53, 0.01, 0.36, 1.63) !important; }\n\n.scale-transition.scale-out {\n  -webkit-transform: scale(0);\n  transform: scale(0);\n  transition: -webkit-transform .2s !important;\n  transition: transform .2s !important;\n  transition: transform .2s, -webkit-transform .2s !important; }\n\n.scale-transition.scale-in {\n  -webkit-transform: scale(1);\n  transform: scale(1); }\n\n.card-panel {\n  transition: box-shadow .25s;\n  padding: 24px;\n  margin: .5rem 0 1rem 0;\n  border-radius: 2px;\n  background-color: #fff; }\n\n.card {\n  position: relative;\n  margin: .5rem 0 1rem 0;\n  background-color: #fff;\n  transition: box-shadow .25s;\n  border-radius: 2px; }\n\n.card .card-title {\n  font-size: 24px;\n  font-weight: 300; }\n\n.card .card-title.activator {\n  cursor: pointer; }\n\n.card.small, .card.medium, .card.large {\n  position: relative; }\n\n.card.small .card-image, .card.medium .card-image, .card.large .card-image {\n  max-height: 60%;\n  overflow: hidden; }\n\n.card.small .card-image + .card-content, .card.medium .card-image + .card-content, .card.large .card-image + .card-content {\n  max-height: 40%; }\n\n.card.small .card-content, .card.medium .card-content, .card.large .card-content {\n  max-height: 100%;\n  overflow: hidden; }\n\n.card.small .card-action, .card.medium .card-action, .card.large .card-action {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0; }\n\n.card.small {\n  height: 300px; }\n\n.card.medium {\n  height: 400px; }\n\n.card.large {\n  height: 500px; }\n\n.card.horizontal {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex; }\n\n.card.horizontal.small .card-image, .card.horizontal.medium .card-image, .card.horizontal.large .card-image {\n  height: 100%;\n  max-height: none;\n  overflow: visible; }\n\n.card.horizontal.small .card-image img, .card.horizontal.medium .card-image img, .card.horizontal.large .card-image img {\n  height: 100%; }\n\n.card.horizontal .card-image {\n  max-width: 50%; }\n\n.card.horizontal .card-image img {\n  border-radius: 2px 0 0 2px;\n  max-width: 100%;\n  width: auto; }\n\n.card.horizontal .card-stacked {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-direction: column;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  -webkit-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  position: relative; }\n\n.card.horizontal .card-stacked .card-content {\n  -webkit-flex-grow: 1;\n  -ms-flex-positive: 1;\n  flex-grow: 1; }\n\n.card.sticky-action .card-action {\n  z-index: 2; }\n\n.card.sticky-action .card-reveal {\n  z-index: 1;\n  padding-bottom: 64px; }\n\n.card .card-image {\n  position: relative; }\n\n.card .card-image img {\n  display: block;\n  border-radius: 2px 2px 0 0;\n  position: relative;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  width: 100%; }\n\n.card .card-image .card-title {\n  color: #fff;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  max-width: 100%;\n  padding: 24px; }\n\n.card .card-content {\n  padding: 24px;\n  border-radius: 0 0 2px 2px; }\n\n.card .card-content p {\n  margin: 0;\n  color: inherit; }\n\n.card .card-content .card-title {\n  display: block;\n  line-height: 32px;\n  margin-bottom: 8px; }\n\n.card .card-content .card-title i {\n  line-height: 32px; }\n\n.card .card-action {\n  position: relative;\n  background-color: inherit;\n  border-top: 1px solid rgba(160, 160, 160, 0.2);\n  padding: 16px 24px; }\n\n.card .card-action:last-child {\n  border-radius: 0 0 2px 2px; }\n\n.card .card-action a:not(.btn):not(.btn-large):not(.btn-large):not(.btn-floating) {\n  color: #ffab40;\n  margin-right: 24px;\n  transition: color .3s ease;\n  text-transform: uppercase; }\n\n.card .card-action a:not(.btn):not(.btn-large):not(.btn-large):not(.btn-floating):hover {\n  color: #ffd8a6; }\n\n.card .card-reveal {\n  padding: 24px;\n  position: absolute;\n  background-color: #fff;\n  width: 100%;\n  overflow-y: auto;\n  left: 0;\n  top: 100%;\n  height: 100%;\n  z-index: 3;\n  display: none; }\n\n.card .card-reveal .card-title {\n  cursor: pointer;\n  display: block; }\n\n#toast-container {\n  display: block;\n  position: fixed;\n  z-index: 10000; }\n\n@media only screen and (max-width: 600px) {\n  #toast-container {\n    min-width: 100%;\n    bottom: 0%; } }\n\n@media only screen and (min-width: 601px) and (max-width: 992px) {\n  #toast-container {\n    left: 5%;\n    bottom: 7%;\n    max-width: 90%; } }\n\n@media only screen and (min-width: 993px) {\n  #toast-container {\n    top: 10%;\n    right: 7%;\n    max-width: 86%; } }\n\n.toast {\n  border-radius: 2px;\n  top: 35px;\n  width: auto;\n  clear: both;\n  margin-top: 10px;\n  position: relative;\n  max-width: 100%;\n  height: auto;\n  min-height: 48px;\n  line-height: 1.5em;\n  word-break: break-all;\n  background-color: #323232;\n  padding: 10px 25px;\n  font-size: 1.1rem;\n  font-weight: 300;\n  color: #fff;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-align-items: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-justify-content: space-between;\n  -ms-flex-pack: justify;\n  justify-content: space-between; }\n\n.toast .btn, .toast .btn-large, .toast .btn-flat {\n  margin: 0;\n  margin-left: 3rem; }\n\n.toast.rounded {\n  border-radius: 24px; }\n\n@media only screen and (max-width: 600px) {\n  .toast {\n    width: 100%;\n    border-radius: 0; } }\n\n@media only screen and (min-width: 601px) and (max-width: 992px) {\n  .toast {\n    float: left; } }\n\n@media only screen and (min-width: 993px) {\n  .toast {\n    float: right; } }\n\n.tabs {\n  position: relative;\n  overflow-x: auto;\n  overflow-y: hidden;\n  height: 48px;\n  width: 100%;\n  background-color: #fff;\n  margin: 0 auto;\n  white-space: nowrap; }\n\n.tabs.tabs-transparent {\n  background-color: transparent; }\n\n.tabs.tabs-transparent .tab a, .tabs.tabs-transparent .tab.disabled a, .tabs.tabs-transparent .tab.disabled a:hover {\n  color: rgba(255, 255, 255, 0.7); }\n\n.tabs.tabs-transparent .tab a:hover, .tabs.tabs-transparent .tab a.active {\n  color: #fff; }\n\n.tabs.tabs-transparent .indicator {\n  background-color: #fff; }\n\n.tabs.tabs-fixed-width {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex; }\n\n.tabs.tabs-fixed-width .tab {\n  -webkit-flex-grow: 1;\n  -ms-flex-positive: 1;\n  flex-grow: 1; }\n\n.tabs .tab {\n  display: inline-block;\n  text-align: center;\n  line-height: 48px;\n  height: 48px;\n  padding: 0;\n  margin: 0;\n  text-transform: uppercase; }\n\n.tabs .tab a {\n  color: rgba(238, 110, 115, 0.7);\n  display: block;\n  width: 100%;\n  height: 100%;\n  padding: 0 24px;\n  font-size: 14px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  transition: color .28s ease; }\n\n.tabs .tab a:hover, .tabs .tab a.active {\n  background-color: transparent;\n  color: #ee6e73; }\n\n.tabs .tab.disabled a, .tabs .tab.disabled a:hover {\n  color: rgba(238, 110, 115, 0.7);\n  cursor: default; }\n\n.tabs .indicator {\n  position: absolute;\n  bottom: 0;\n  height: 2px;\n  background-color: #f6b2b5;\n  will-change: left, right; }\n\n@media only screen and (max-width: 992px) {\n  .tabs {\n    display: -webkit-flex;\n    display: -ms-flexbox;\n    display: flex; }\n  .tabs .tab {\n    -webkit-flex-grow: 1;\n    -ms-flex-positive: 1;\n    flex-grow: 1; }\n  .tabs .tab a {\n    padding: 0 12px; } }\n\n.material-tooltip {\n  padding: 10px 8px;\n  font-size: 1rem;\n  z-index: 2000;\n  background-color: transparent;\n  border-radius: 2px;\n  color: #fff;\n  min-height: 36px;\n  line-height: 120%;\n  opacity: 0;\n  position: absolute;\n  text-align: center;\n  max-width: calc(100% - 4px);\n  overflow: hidden;\n  left: 0;\n  top: 0;\n  pointer-events: none;\n  visibility: hidden; }\n\n.backdrop {\n  position: absolute;\n  opacity: 0;\n  height: 7px;\n  width: 14px;\n  border-radius: 0 0 50% 50%;\n  background-color: #323232;\n  z-index: -1;\n  -webkit-transform-origin: 50% 0%;\n  transform-origin: 50% 0%;\n  visibility: hidden; }\n\n.btn, .btn-large, .btn-flat {\n  border: none;\n  border-radius: 2px;\n  display: inline-block;\n  height: 36px;\n  line-height: 36px;\n  padding: 0 2rem;\n  text-transform: uppercase;\n  vertical-align: middle;\n  -webkit-tap-highlight-color: transparent; }\n\n.btn.disabled, .disabled.btn-large, .btn-floating.disabled, .btn-large.disabled, .btn-flat.disabled, .btn:disabled, .btn-large:disabled, .btn-floating:disabled, .btn-large:disabled, .btn-flat:disabled, .btn[disabled], [disabled].btn-large, .btn-floating[disabled], .btn-large[disabled], .btn-flat[disabled] {\n  pointer-events: none;\n  background-color: #DFDFDF !important;\n  box-shadow: none;\n  color: #9F9F9F !important;\n  cursor: default; }\n\n.btn.disabled:hover, .disabled.btn-large:hover, .btn-floating.disabled:hover, .btn-large.disabled:hover, .btn-flat.disabled:hover, .btn:disabled:hover, .btn-large:disabled:hover, .btn-floating:disabled:hover, .btn-large:disabled:hover, .btn-flat:disabled:hover, .btn[disabled]:hover, [disabled].btn-large:hover, .btn-floating[disabled]:hover, .btn-large[disabled]:hover, .btn-flat[disabled]:hover {\n  background-color: #DFDFDF !important;\n  color: #9F9F9F !important; }\n\n.btn, .btn-large, .btn-floating, .btn-large, .btn-flat {\n  font-size: 1rem;\n  outline: 0; }\n\n.btn i, .btn-large i, .btn-floating i, .btn-large i, .btn-flat i {\n  font-size: 1.3rem;\n  line-height: inherit; }\n\n.btn:focus, .btn-large:focus, .btn-floating:focus {\n  background-color: #1d7d74; }\n\n.btn, .btn-large {\n  text-decoration: none;\n  color: #fff;\n  background-color: #26a69a;\n  text-align: center;\n  letter-spacing: .5px;\n  transition: .2s ease-out;\n  cursor: pointer; }\n\n.btn:hover, .btn-large:hover {\n  background-color: #2bbbad; }\n\n.btn-floating {\n  display: inline-block;\n  color: #fff;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n  width: 40px;\n  height: 40px;\n  line-height: 40px;\n  padding: 0;\n  background-color: #26a69a;\n  border-radius: 50%;\n  transition: .3s;\n  cursor: pointer;\n  vertical-align: middle; }\n\n.btn-floating:hover {\n  background-color: #26a69a; }\n\n.btn-floating:before {\n  border-radius: 0; }\n\n.btn-floating.btn-large {\n  width: 56px;\n  height: 56px; }\n\n.btn-floating.btn-large.halfway-fab {\n  bottom: -28px; }\n\n.btn-floating.btn-large i {\n  line-height: 56px; }\n\n.btn-floating.halfway-fab {\n  position: absolute;\n  right: 24px;\n  bottom: -20px; }\n\n.btn-floating.halfway-fab.left {\n  right: auto;\n  left: 24px; }\n\n.btn-floating i {\n  width: inherit;\n  display: inline-block;\n  text-align: center;\n  color: #fff;\n  font-size: 1.6rem;\n  line-height: 40px; }\n\nbutton.btn-floating {\n  border: none; }\n\n.fixed-action-btn {\n  position: fixed;\n  right: 23px;\n  bottom: 23px;\n  padding-top: 15px;\n  margin-bottom: 0;\n  z-index: 998; }\n\n.fixed-action-btn.active ul {\n  visibility: visible; }\n\n.fixed-action-btn.horizontal {\n  padding: 0 0 0 15px; }\n\n.fixed-action-btn.horizontal ul {\n  text-align: right;\n  right: 64px;\n  top: 50%;\n  -webkit-transform: translateY(-50%);\n  transform: translateY(-50%);\n  height: 100%;\n  left: auto;\n  width: 500px; }\n\n.fixed-action-btn.horizontal ul li {\n  display: inline-block;\n  margin: 15px 15px 0 0; }\n\n.fixed-action-btn.toolbar {\n  padding: 0;\n  height: 56px; }\n\n.fixed-action-btn.toolbar.active > a i {\n  opacity: 0; }\n\n.fixed-action-btn.toolbar ul {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  top: 0;\n  bottom: 0; }\n\n.fixed-action-btn.toolbar ul li {\n  -webkit-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  display: inline-block;\n  margin: 0;\n  height: 100%;\n  transition: none; }\n\n.fixed-action-btn.toolbar ul li a {\n  display: block;\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  background-color: transparent;\n  box-shadow: none;\n  color: #fff;\n  line-height: 56px;\n  z-index: 1; }\n\n.fixed-action-btn.toolbar ul li a i {\n  line-height: inherit; }\n\n.fixed-action-btn ul {\n  left: 0;\n  right: 0;\n  text-align: center;\n  position: absolute;\n  bottom: 64px;\n  margin: 0;\n  visibility: hidden; }\n\n.fixed-action-btn ul li {\n  margin-bottom: 15px; }\n\n.fixed-action-btn ul a.btn-floating {\n  opacity: 0; }\n\n.fixed-action-btn .fab-backdrop {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: -1;\n  width: 40px;\n  height: 40px;\n  background-color: #26a69a;\n  border-radius: 50%;\n  -webkit-transform: scale(0);\n  transform: scale(0); }\n\n.btn-flat {\n  box-shadow: none;\n  background-color: transparent;\n  color: #343434;\n  cursor: pointer;\n  transition: background-color .2s; }\n\n.btn-flat:focus, .btn-flat:active {\n  background-color: transparent; }\n\n.btn-flat:focus, .btn-flat:hover {\n  background-color: rgba(0, 0, 0, 0.1);\n  box-shadow: none; }\n\n.btn-flat:active {\n  background-color: rgba(0, 0, 0, 0.2); }\n\n.btn-flat.disabled {\n  background-color: transparent !important;\n  color: #b3b3b3 !important;\n  cursor: default; }\n\n.btn-large {\n  height: 54px;\n  line-height: 54px; }\n\n.btn-large i {\n  font-size: 1.6rem; }\n\n.btn-block {\n  display: block; }\n\n.dropdown-content {\n  background-color: #fff;\n  margin: 0;\n  display: none;\n  min-width: 100px;\n  max-height: 650px;\n  overflow-y: auto;\n  opacity: 0;\n  position: absolute;\n  z-index: 999;\n  will-change: width, height; }\n\n.dropdown-content li {\n  clear: both;\n  color: rgba(0, 0, 0, 0.87);\n  cursor: pointer;\n  min-height: 50px;\n  line-height: 1.5rem;\n  width: 100%;\n  text-align: left;\n  text-transform: none; }\n\n.dropdown-content li:hover, .dropdown-content li.active, .dropdown-content li.selected {\n  background-color: #eee; }\n\n.dropdown-content li.active.selected {\n  background-color: #e1e1e1; }\n\n.dropdown-content li.divider {\n  min-height: 0;\n  height: 1px; }\n\n.dropdown-content li > a, .dropdown-content li > span {\n  font-size: 16px;\n  color: #26a69a;\n  display: block;\n  line-height: 22px;\n  padding: 14px 16px; }\n\n.dropdown-content li > span > label {\n  top: 1px;\n  left: 0;\n  height: 18px; }\n\n.dropdown-content li > a > i {\n  height: inherit;\n  line-height: inherit;\n  float: left;\n  margin: 0 24px 0 0;\n  width: 24px; }\n\n.input-field.col .dropdown-content [type=\"checkbox\"] + label {\n  top: 1px;\n  left: 0;\n  height: 18px; }\n\n/*!\n * Waves v0.6.0\n * http://fian.my.id/Waves\n *\n * Copyright 2014 Alfiana E. Sibuea and other contributors\n * Released under the MIT license\n * https://github.com/fians/Waves/blob/master/LICENSE\n */\n.waves-effect {\n  position: relative;\n  cursor: pointer;\n  display: inline-block;\n  overflow: hidden;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  -webkit-tap-highlight-color: transparent;\n  vertical-align: middle;\n  z-index: 1;\n  transition: .3s ease-out; }\n\n.waves-effect .waves-ripple {\n  position: absolute;\n  border-radius: 50%;\n  width: 20px;\n  height: 20px;\n  margin-top: -10px;\n  margin-left: -10px;\n  opacity: 0;\n  background: rgba(0, 0, 0, 0.2);\n  transition: all 0.7s ease-out;\n  transition-property: opacity, -webkit-transform;\n  transition-property: transform, opacity;\n  transition-property: transform, opacity, -webkit-transform;\n  -webkit-transform: scale(0);\n  transform: scale(0);\n  pointer-events: none; }\n\n.waves-effect.waves-light .waves-ripple {\n  background-color: rgba(255, 255, 255, 0.45); }\n\n.waves-effect.waves-red .waves-ripple {\n  background-color: rgba(244, 67, 54, 0.7); }\n\n.waves-effect.waves-yellow .waves-ripple {\n  background-color: rgba(255, 235, 59, 0.7); }\n\n.waves-effect.waves-orange .waves-ripple {\n  background-color: rgba(255, 152, 0, 0.7); }\n\n.waves-effect.waves-purple .waves-ripple {\n  background-color: rgba(156, 39, 176, 0.7); }\n\n.waves-effect.waves-green .waves-ripple {\n  background-color: rgba(76, 175, 80, 0.7); }\n\n.waves-effect.waves-teal .waves-ripple {\n  background-color: rgba(0, 150, 136, 0.7); }\n\n.waves-effect input[type=\"button\"], .waves-effect input[type=\"reset\"], .waves-effect input[type=\"submit\"] {\n  border: 0;\n  font-style: normal;\n  font-size: inherit;\n  text-transform: inherit;\n  background: none; }\n\n.waves-effect img {\n  position: relative;\n  z-index: -1; }\n\n.waves-notransition {\n  transition: none !important; }\n\n.waves-circle {\n  -webkit-transform: translateZ(0);\n  transform: translateZ(0);\n  -webkit-mask-image: -webkit-radial-gradient(circle, #fff 100%, #000 100%); }\n\n.waves-input-wrapper {\n  border-radius: 0.2em;\n  vertical-align: bottom; }\n\n.waves-input-wrapper .waves-button-input {\n  position: relative;\n  top: 0;\n  left: 0;\n  z-index: 1; }\n\n.waves-circle {\n  text-align: center;\n  width: 2.5em;\n  height: 2.5em;\n  line-height: 2.5em;\n  border-radius: 50%;\n  -webkit-mask-image: none; }\n\n.waves-block {\n  display: block; }\n\n.waves-effect .waves-ripple {\n  z-index: -1; }\n\n.modal {\n  display: none;\n  position: fixed;\n  left: 0;\n  right: 0;\n  background-color: #fafafa;\n  padding: 0;\n  max-height: 70%;\n  width: 55%;\n  margin: auto;\n  overflow-y: auto;\n  border-radius: 2px;\n  will-change: top, opacity; }\n\n@media only screen and (max-width: 992px) {\n  .modal {\n    width: 80%; } }\n\n.modal h1, .modal h2, .modal h3, .modal h4 {\n  margin-top: 0; }\n\n.modal .modal-content {\n  padding: 24px; }\n\n.modal .modal-close {\n  cursor: pointer; }\n\n.modal .modal-footer {\n  border-radius: 0 0 2px 2px;\n  background-color: #fafafa;\n  padding: 4px 6px;\n  height: 56px;\n  width: 100%; }\n\n.modal .modal-footer .btn, .modal .modal-footer .btn-large, .modal .modal-footer .btn-flat {\n  float: right;\n  margin: 6px 0; }\n\n.modal-overlay {\n  position: fixed;\n  z-index: 999;\n  top: -100px;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  height: 125%;\n  width: 100%;\n  background: #000;\n  display: none;\n  will-change: opacity; }\n\n.modal.modal-fixed-footer {\n  padding: 0;\n  height: 70%; }\n\n.modal.modal-fixed-footer .modal-content {\n  position: absolute;\n  height: calc(100% - 56px);\n  max-height: 100%;\n  width: 100%;\n  overflow-y: auto; }\n\n.modal.modal-fixed-footer .modal-footer {\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\n  position: absolute;\n  bottom: 0; }\n\n.modal.bottom-sheet {\n  top: auto;\n  bottom: -100%;\n  margin: 0;\n  width: 100%;\n  max-height: 45%;\n  border-radius: 0;\n  will-change: bottom, opacity; }\n\n.collapsible {\n  border-top: 1px solid #ddd;\n  border-right: 1px solid #ddd;\n  border-left: 1px solid #ddd;\n  margin: .5rem 0 1rem 0; }\n\n.collapsible-header {\n  display: block;\n  cursor: pointer;\n  min-height: 3rem;\n  line-height: 3rem;\n  padding: 0 1rem;\n  background-color: #fff;\n  border-bottom: 1px solid #ddd; }\n\n.collapsible-header i {\n  width: 2rem;\n  font-size: 1.6rem;\n  line-height: 3rem;\n  display: block;\n  float: left;\n  text-align: center;\n  margin-right: 1rem; }\n\n.collapsible-body {\n  display: none;\n  border-bottom: 1px solid #ddd;\n  box-sizing: border-box;\n  padding: 2rem; }\n\n.side-nav .collapsible, .side-nav.fixed .collapsible {\n  border: none;\n  box-shadow: none; }\n\n.side-nav .collapsible li, .side-nav.fixed .collapsible li {\n  padding: 0; }\n\n.side-nav .collapsible-header, .side-nav.fixed .collapsible-header {\n  background-color: transparent;\n  border: none;\n  line-height: inherit;\n  height: inherit;\n  padding: 0 16px; }\n\n.side-nav .collapsible-header:hover, .side-nav.fixed .collapsible-header:hover {\n  background-color: rgba(0, 0, 0, 0.05); }\n\n.side-nav .collapsible-header i, .side-nav.fixed .collapsible-header i {\n  line-height: inherit; }\n\n.side-nav .collapsible-body, .side-nav.fixed .collapsible-body {\n  border: 0;\n  background-color: #fff; }\n\n.side-nav .collapsible-body li a, .side-nav.fixed .collapsible-body li a {\n  padding: 0 23.5px 0 31px; }\n\n.collapsible.popout {\n  border: none;\n  box-shadow: none; }\n\n.collapsible.popout > li {\n  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);\n  margin: 0 24px;\n  transition: margin 0.35s cubic-bezier(0.25, 0.46, 0.45, 0.94); }\n\n.collapsible.popout > li.active {\n  box-shadow: 0 5px 11px 0 rgba(0, 0, 0, 0.18), 0 4px 15px 0 rgba(0, 0, 0, 0.15);\n  margin: 16px 0; }\n\n.chip {\n  display: inline-block;\n  height: 32px;\n  font-size: 13px;\n  font-weight: 500;\n  color: rgba(0, 0, 0, 0.6);\n  line-height: 32px;\n  padding: 0 12px;\n  border-radius: 16px;\n  background-color: #e4e4e4;\n  margin-bottom: 5px;\n  margin-right: 5px; }\n\n.chip > img {\n  float: left;\n  margin: 0 8px 0 -12px;\n  height: 32px;\n  width: 32px;\n  border-radius: 50%; }\n\n.chip .close {\n  cursor: pointer;\n  float: right;\n  font-size: 16px;\n  line-height: 32px;\n  padding-left: 8px; }\n\n.chips {\n  border: none;\n  border-bottom: 1px solid #9e9e9e;\n  box-shadow: none;\n  margin: 0 0 20px 0;\n  min-height: 45px;\n  outline: none;\n  transition: all .3s; }\n\n.chips.focus {\n  border-bottom: 1px solid #26a69a;\n  box-shadow: 0 1px 0 0 #26a69a; }\n\n.chips:hover {\n  cursor: text; }\n\n.chips .chip.selected {\n  background-color: #26a69a;\n  color: #fff; }\n\n.chips .input {\n  background: none;\n  border: 0;\n  color: rgba(0, 0, 0, 0.6);\n  display: inline-block;\n  font-size: 1rem;\n  height: 3rem;\n  line-height: 32px;\n  outline: 0;\n  margin: 0;\n  padding: 0 !important;\n  width: 120px !important; }\n\n.chips .input:focus {\n  border: 0 !important;\n  box-shadow: none !important; }\n\n.chips .autocomplete-content {\n  margin-top: 0; }\n\n.prefix ~ .chips {\n  margin-left: 3rem;\n  width: 92%;\n  width: calc(100% - 3rem); }\n\n.chips:empty ~ label {\n  font-size: 0.8rem;\n  -webkit-transform: translateY(-140%);\n  transform: translateY(-140%); }\n\n.materialboxed {\n  display: block;\n  cursor: -webkit-zoom-in;\n  cursor: zoom-in;\n  position: relative;\n  transition: opacity .4s;\n  -webkit-backface-visibility: hidden; }\n\n.materialboxed:hover:not(.active) {\n  opacity: .8; }\n\n.materialboxed.active {\n  cursor: -webkit-zoom-out;\n  cursor: zoom-out; }\n\n#materialbox-overlay {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: #292929;\n  z-index: 1000;\n  will-change: opacity; }\n\n.materialbox-caption {\n  position: fixed;\n  display: none;\n  color: #fff;\n  line-height: 50px;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  text-align: center;\n  padding: 0% 15%;\n  height: 50px;\n  z-index: 1000;\n  -webkit-font-smoothing: antialiased; }\n\nselect:focus {\n  outline: 1px solid #c9f3ef; }\n\nbutton:focus {\n  outline: none;\n  background-color: #2ab7a9; }\n\nlabel {\n  font-size: .8rem;\n  color: #9e9e9e; }\n\n::-webkit-input-placeholder {\n  color: #d1d1d1; }\n\n:-moz-placeholder {\n  color: #d1d1d1; }\n\n::-moz-placeholder {\n  color: #d1d1d1; }\n\n:-ms-input-placeholder {\n  color: #d1d1d1; }\n\ninput:not([type]), input[type=text], input[type=password], input[type=email], input[type=url], input[type=time], input[type=date], input[type=datetime], input[type=datetime-local], input[type=tel], input[type=number], input[type=search], textarea.materialize-textarea {\n  background-color: transparent;\n  border: none;\n  border-bottom: 1px solid #9e9e9e;\n  border-radius: 0;\n  outline: none;\n  height: 3rem;\n  width: 100%;\n  font-size: 1rem;\n  margin: 0 0 20px 0;\n  padding: 0;\n  box-shadow: none;\n  box-sizing: content-box;\n  transition: all 0.3s; }\n\ninput:not([type]):disabled, input:not([type])[readonly=\"readonly\"], input[type=text]:disabled, input[type=text][readonly=\"readonly\"], input[type=password]:disabled, input[type=password][readonly=\"readonly\"], input[type=email]:disabled, input[type=email][readonly=\"readonly\"], input[type=url]:disabled, input[type=url][readonly=\"readonly\"], input[type=time]:disabled, input[type=time][readonly=\"readonly\"], input[type=date]:disabled, input[type=date][readonly=\"readonly\"], input[type=datetime]:disabled, input[type=datetime][readonly=\"readonly\"], input[type=datetime-local]:disabled, input[type=datetime-local][readonly=\"readonly\"], input[type=tel]:disabled, input[type=tel][readonly=\"readonly\"], input[type=number]:disabled, input[type=number][readonly=\"readonly\"], input[type=search]:disabled, input[type=search][readonly=\"readonly\"], textarea.materialize-textarea:disabled, textarea.materialize-textarea[readonly=\"readonly\"] {\n  color: rgba(0, 0, 0, 0.26);\n  border-bottom: 1px dotted rgba(0, 0, 0, 0.26); }\n\ninput:not([type]):disabled + label, input:not([type])[readonly=\"readonly\"] + label, input[type=text]:disabled + label, input[type=text][readonly=\"readonly\"] + label, input[type=password]:disabled + label, input[type=password][readonly=\"readonly\"] + label, input[type=email]:disabled + label, input[type=email][readonly=\"readonly\"] + label, input[type=url]:disabled + label, input[type=url][readonly=\"readonly\"] + label, input[type=time]:disabled + label, input[type=time][readonly=\"readonly\"] + label, input[type=date]:disabled + label, input[type=date][readonly=\"readonly\"] + label, input[type=datetime]:disabled + label, input[type=datetime][readonly=\"readonly\"] + label, input[type=datetime-local]:disabled + label, input[type=datetime-local][readonly=\"readonly\"] + label, input[type=tel]:disabled + label, input[type=tel][readonly=\"readonly\"] + label, input[type=number]:disabled + label, input[type=number][readonly=\"readonly\"] + label, input[type=search]:disabled + label, input[type=search][readonly=\"readonly\"] + label, textarea.materialize-textarea:disabled + label, textarea.materialize-textarea[readonly=\"readonly\"] + label {\n  color: rgba(0, 0, 0, 0.26); }\n\ninput:not([type]):focus:not([readonly]), input[type=text]:focus:not([readonly]), input[type=password]:focus:not([readonly]), input[type=email]:focus:not([readonly]), input[type=url]:focus:not([readonly]), input[type=time]:focus:not([readonly]), input[type=date]:focus:not([readonly]), input[type=datetime]:focus:not([readonly]), input[type=datetime-local]:focus:not([readonly]), input[type=tel]:focus:not([readonly]), input[type=number]:focus:not([readonly]), input[type=search]:focus:not([readonly]), textarea.materialize-textarea:focus:not([readonly]) {\n  border-bottom: 1px solid #26a69a;\n  box-shadow: 0 1px 0 0 #26a69a; }\n\ninput:not([type]):focus:not([readonly]) + label, input[type=text]:focus:not([readonly]) + label, input[type=password]:focus:not([readonly]) + label, input[type=email]:focus:not([readonly]) + label, input[type=url]:focus:not([readonly]) + label, input[type=time]:focus:not([readonly]) + label, input[type=date]:focus:not([readonly]) + label, input[type=datetime]:focus:not([readonly]) + label, input[type=datetime-local]:focus:not([readonly]) + label, input[type=tel]:focus:not([readonly]) + label, input[type=number]:focus:not([readonly]) + label, input[type=search]:focus:not([readonly]) + label, textarea.materialize-textarea:focus:not([readonly]) + label {\n  color: #26a69a; }\n\ninput:not([type]).valid, input:not([type]):focus.valid, input[type=text].valid, input[type=text]:focus.valid, input[type=password].valid, input[type=password]:focus.valid, input[type=email].valid, input[type=email]:focus.valid, input[type=url].valid, input[type=url]:focus.valid, input[type=time].valid, input[type=time]:focus.valid, input[type=date].valid, input[type=date]:focus.valid, input[type=datetime].valid, input[type=datetime]:focus.valid, input[type=datetime-local].valid, input[type=datetime-local]:focus.valid, input[type=tel].valid, input[type=tel]:focus.valid, input[type=number].valid, input[type=number]:focus.valid, input[type=search].valid, input[type=search]:focus.valid, textarea.materialize-textarea.valid, textarea.materialize-textarea:focus.valid {\n  border-bottom: 1px solid #4CAF50;\n  box-shadow: 0 1px 0 0 #4CAF50; }\n\ninput:not([type]).valid + label:after, input:not([type]):focus.valid + label:after, input[type=text].valid + label:after, input[type=text]:focus.valid + label:after, input[type=password].valid + label:after, input[type=password]:focus.valid + label:after, input[type=email].valid + label:after, input[type=email]:focus.valid + label:after, input[type=url].valid + label:after, input[type=url]:focus.valid + label:after, input[type=time].valid + label:after, input[type=time]:focus.valid + label:after, input[type=date].valid + label:after, input[type=date]:focus.valid + label:after, input[type=datetime].valid + label:after, input[type=datetime]:focus.valid + label:after, input[type=datetime-local].valid + label:after, input[type=datetime-local]:focus.valid + label:after, input[type=tel].valid + label:after, input[type=tel]:focus.valid + label:after, input[type=number].valid + label:after, input[type=number]:focus.valid + label:after, input[type=search].valid + label:after, input[type=search]:focus.valid + label:after, textarea.materialize-textarea.valid + label:after, textarea.materialize-textarea:focus.valid + label:after {\n  content: attr(data-success);\n  color: #4CAF50;\n  opacity: 1; }\n\ninput:not([type]).invalid, input:not([type]):focus.invalid, input[type=text].invalid, input[type=text]:focus.invalid, input[type=password].invalid, input[type=password]:focus.invalid, input[type=email].invalid, input[type=email]:focus.invalid, input[type=url].invalid, input[type=url]:focus.invalid, input[type=time].invalid, input[type=time]:focus.invalid, input[type=date].invalid, input[type=date]:focus.invalid, input[type=datetime].invalid, input[type=datetime]:focus.invalid, input[type=datetime-local].invalid, input[type=datetime-local]:focus.invalid, input[type=tel].invalid, input[type=tel]:focus.invalid, input[type=number].invalid, input[type=number]:focus.invalid, input[type=search].invalid, input[type=search]:focus.invalid, textarea.materialize-textarea.invalid, textarea.materialize-textarea:focus.invalid {\n  border-bottom: 1px solid #F44336;\n  box-shadow: 0 1px 0 0 #F44336; }\n\ninput:not([type]).invalid + label:after, input:not([type]):focus.invalid + label:after, input[type=text].invalid + label:after, input[type=text]:focus.invalid + label:after, input[type=password].invalid + label:after, input[type=password]:focus.invalid + label:after, input[type=email].invalid + label:after, input[type=email]:focus.invalid + label:after, input[type=url].invalid + label:after, input[type=url]:focus.invalid + label:after, input[type=time].invalid + label:after, input[type=time]:focus.invalid + label:after, input[type=date].invalid + label:after, input[type=date]:focus.invalid + label:after, input[type=datetime].invalid + label:after, input[type=datetime]:focus.invalid + label:after, input[type=datetime-local].invalid + label:after, input[type=datetime-local]:focus.invalid + label:after, input[type=tel].invalid + label:after, input[type=tel]:focus.invalid + label:after, input[type=number].invalid + label:after, input[type=number]:focus.invalid + label:after, input[type=search].invalid + label:after, input[type=search]:focus.invalid + label:after, textarea.materialize-textarea.invalid + label:after, textarea.materialize-textarea:focus.invalid + label:after {\n  content: attr(data-error);\n  color: #F44336;\n  opacity: 1; }\n\ninput:not([type]).validate + label, input[type=text].validate + label, input[type=password].validate + label, input[type=email].validate + label, input[type=url].validate + label, input[type=time].validate + label, input[type=date].validate + label, input[type=datetime].validate + label, input[type=datetime-local].validate + label, input[type=tel].validate + label, input[type=number].validate + label, input[type=search].validate + label, textarea.materialize-textarea.validate + label {\n  width: 100%;\n  pointer-events: none; }\n\ninput:not([type]) + label:after, input[type=text] + label:after, input[type=password] + label:after, input[type=email] + label:after, input[type=url] + label:after, input[type=time] + label:after, input[type=date] + label:after, input[type=datetime] + label:after, input[type=datetime-local] + label:after, input[type=tel] + label:after, input[type=number] + label:after, input[type=search] + label:after, textarea.materialize-textarea + label:after {\n  display: block;\n  content: \"\";\n  position: absolute;\n  top: 60px;\n  opacity: 0;\n  transition: .2s opacity ease-out, .2s color ease-out; }\n\n.input-field {\n  position: relative;\n  margin-top: 1rem; }\n\n.input-field.inline {\n  display: inline-block;\n  vertical-align: middle;\n  margin-left: 5px; }\n\n.input-field.inline input, .input-field.inline .select-dropdown {\n  margin-bottom: 1rem; }\n\n.input-field.col label {\n  left: .75rem; }\n\n.input-field.col .prefix ~ label, .input-field.col .prefix ~ .validate ~ label {\n  width: calc(100% - 3rem - 1.5rem); }\n\n.input-field label {\n  color: #9e9e9e;\n  position: absolute;\n  top: 0.8rem;\n  left: 0;\n  font-size: 1rem;\n  cursor: text;\n  transition: .2s ease-out;\n  text-align: initial; }\n\n.input-field label:not(.label-icon).active {\n  font-size: .8rem;\n  -webkit-transform: translateY(-140%);\n  transform: translateY(-140%); }\n\n.input-field .prefix {\n  position: absolute;\n  width: 3rem;\n  font-size: 2rem;\n  transition: color .2s; }\n\n.input-field .prefix.active {\n  color: #26a69a; }\n\n.input-field .prefix ~ input, .input-field .prefix ~ textarea, .input-field .prefix ~ label, .input-field .prefix ~ .validate ~ label, .input-field .prefix ~ .autocomplete-content {\n  margin-left: 3rem;\n  width: 92%;\n  width: calc(100% - 3rem); }\n\n.input-field .prefix ~ label {\n  margin-left: 3rem; }\n\n@media only screen and (max-width: 992px) {\n  .input-field .prefix ~ input {\n    width: 86%;\n    width: calc(100% - 3rem); } }\n\n@media only screen and (max-width: 600px) {\n  .input-field .prefix ~ input {\n    width: 80%;\n    width: calc(100% - 3rem); } }\n\n.input-field input[type=search] {\n  display: block;\n  line-height: inherit;\n  padding-left: 4rem;\n  width: calc(100% - 4rem); }\n\n.input-field input[type=search]:focus {\n  background-color: #fff;\n  border: 0;\n  box-shadow: none;\n  color: #444; }\n\n.input-field input[type=search]:focus + label i, .input-field input[type=search]:focus ~ .mdi-navigation-close, .input-field input[type=search]:focus ~ .material-icons {\n  color: #444; }\n\n.input-field input[type=search] + label {\n  left: 1rem; }\n\n.input-field input[type=search] ~ .mdi-navigation-close, .input-field input[type=search] ~ .material-icons {\n  position: absolute;\n  top: 0;\n  right: 1rem;\n  color: transparent;\n  cursor: pointer;\n  font-size: 2rem;\n  transition: .3s color; }\n\ntextarea {\n  width: 100%;\n  height: 3rem;\n  background-color: transparent; }\n\ntextarea.materialize-textarea {\n  overflow-y: hidden;\n  padding: .8rem 0 1.6rem 0;\n  resize: none;\n  min-height: 3rem; }\n\n.hiddendiv {\n  display: none;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  padding-top: 1.2rem;\n  position: absolute;\n  top: 0; }\n\n.autocomplete-content {\n  margin-top: -20px;\n  display: block;\n  opacity: 1;\n  position: static; }\n\n.autocomplete-content li .highlight {\n  color: #444; }\n\n.autocomplete-content li img {\n  height: 40px;\n  width: 40px;\n  margin: 5px 15px; }\n\n[type=\"radio\"]:not(:checked), [type=\"radio\"]:checked {\n  position: absolute;\n  left: -9999px;\n  opacity: 0; }\n\n[type=\"radio\"]:not(:checked) + label, [type=\"radio\"]:checked + label {\n  position: relative;\n  padding-left: 35px;\n  cursor: pointer;\n  display: inline-block;\n  height: 25px;\n  line-height: 25px;\n  font-size: 1rem;\n  transition: .28s ease;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n[type=\"radio\"] + label:before, [type=\"radio\"] + label:after {\n  content: '';\n  position: absolute;\n  left: 0;\n  top: 0;\n  margin: 4px;\n  width: 16px;\n  height: 16px;\n  z-index: 0;\n  transition: .28s ease; }\n\n[type=\"radio\"]:not(:checked) + label:before, [type=\"radio\"]:not(:checked) + label:after, [type=\"radio\"]:checked + label:before, [type=\"radio\"]:checked + label:after, [type=\"radio\"].with-gap:checked + label:before, [type=\"radio\"].with-gap:checked + label:after {\n  border-radius: 50%; }\n\n[type=\"radio\"]:not(:checked) + label:before, [type=\"radio\"]:not(:checked) + label:after {\n  border: 2px solid #5a5a5a; }\n\n[type=\"radio\"]:not(:checked) + label:after {\n  -webkit-transform: scale(0);\n  transform: scale(0); }\n\n[type=\"radio\"]:checked + label:before {\n  border: 2px solid transparent; }\n\n[type=\"radio\"]:checked + label:after, [type=\"radio\"].with-gap:checked + label:before, [type=\"radio\"].with-gap:checked + label:after {\n  border: 2px solid #26a69a; }\n\n[type=\"radio\"]:checked + label:after, [type=\"radio\"].with-gap:checked + label:after {\n  background-color: #26a69a; }\n\n[type=\"radio\"]:checked + label:after {\n  -webkit-transform: scale(1.02);\n  transform: scale(1.02); }\n\n[type=\"radio\"].with-gap:checked + label:after {\n  -webkit-transform: scale(0.5);\n  transform: scale(0.5); }\n\n[type=\"radio\"].tabbed:focus + label:before {\n  box-shadow: 0 0 0 10px rgba(0, 0, 0, 0.1); }\n\n[type=\"radio\"].with-gap:disabled:checked + label:before {\n  border: 2px solid rgba(0, 0, 0, 0.26); }\n\n[type=\"radio\"].with-gap:disabled:checked + label:after {\n  border: none;\n  background-color: rgba(0, 0, 0, 0.26); }\n\n[type=\"radio\"]:disabled:not(:checked) + label:before, [type=\"radio\"]:disabled:checked + label:before {\n  background-color: transparent;\n  border-color: rgba(0, 0, 0, 0.26); }\n\n[type=\"radio\"]:disabled + label {\n  color: rgba(0, 0, 0, 0.26); }\n\n[type=\"radio\"]:disabled:not(:checked) + label:before {\n  border-color: rgba(0, 0, 0, 0.26); }\n\n[type=\"radio\"]:disabled:checked + label:after {\n  background-color: rgba(0, 0, 0, 0.26);\n  border-color: #BDBDBD; }\n\nform p {\n  margin-bottom: 10px;\n  text-align: left; }\n\nform p:last-child {\n  margin-bottom: 0; }\n\n[type=\"checkbox\"]:not(:checked), [type=\"checkbox\"]:checked {\n  position: absolute;\n  left: -9999px;\n  opacity: 0; }\n\n[type=\"checkbox\"] + label {\n  position: relative;\n  padding-left: 35px;\n  cursor: pointer;\n  display: inline-block;\n  height: 25px;\n  line-height: 25px;\n  font-size: 1rem;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -ms-user-select: none; }\n\n[type=\"checkbox\"] + label:before, [type=\"checkbox\"]:not(.filled-in) + label:after {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 18px;\n  height: 18px;\n  z-index: 0;\n  border: 2px solid #5a5a5a;\n  border-radius: 1px;\n  margin-top: 2px;\n  transition: .2s; }\n\n[type=\"checkbox\"]:not(.filled-in) + label:after {\n  border: 0;\n  -webkit-transform: scale(0);\n  transform: scale(0); }\n\n[type=\"checkbox\"]:not(:checked):disabled + label:before {\n  border: none;\n  background-color: rgba(0, 0, 0, 0.26); }\n\n[type=\"checkbox\"].tabbed:focus + label:after {\n  -webkit-transform: scale(1);\n  transform: scale(1);\n  border: 0;\n  border-radius: 50%;\n  box-shadow: 0 0 0 10px rgba(0, 0, 0, 0.1);\n  background-color: rgba(0, 0, 0, 0.1); }\n\n[type=\"checkbox\"]:checked + label:before {\n  top: -4px;\n  left: -5px;\n  width: 12px;\n  height: 22px;\n  border-top: 2px solid transparent;\n  border-left: 2px solid transparent;\n  border-right: 2px solid #26a69a;\n  border-bottom: 2px solid #26a69a;\n  -webkit-transform: rotate(40deg);\n  transform: rotate(40deg);\n  -webkit-backface-visibility: hidden;\n  backface-visibility: hidden;\n  -webkit-transform-origin: 100% 100%;\n  transform-origin: 100% 100%; }\n\n[type=\"checkbox\"]:checked:disabled + label:before {\n  border-right: 2px solid rgba(0, 0, 0, 0.26);\n  border-bottom: 2px solid rgba(0, 0, 0, 0.26); }\n\n[type=\"checkbox\"]:indeterminate + label:before {\n  top: -11px;\n  left: -12px;\n  width: 10px;\n  height: 22px;\n  border-top: none;\n  border-left: none;\n  border-right: 2px solid #26a69a;\n  border-bottom: none;\n  -webkit-transform: rotate(90deg);\n  transform: rotate(90deg);\n  -webkit-backface-visibility: hidden;\n  backface-visibility: hidden;\n  -webkit-transform-origin: 100% 100%;\n  transform-origin: 100% 100%; }\n\n[type=\"checkbox\"]:indeterminate:disabled + label:before {\n  border-right: 2px solid rgba(0, 0, 0, 0.26);\n  background-color: transparent; }\n\n[type=\"checkbox\"].filled-in + label:after {\n  border-radius: 2px; }\n\n[type=\"checkbox\"].filled-in + label:before, [type=\"checkbox\"].filled-in + label:after {\n  content: '';\n  left: 0;\n  position: absolute;\n  transition: border .25s, background-color .25s, width .20s .1s, height .20s .1s, top .20s .1s, left .20s .1s;\n  z-index: 1; }\n\n[type=\"checkbox\"].filled-in:not(:checked) + label:before {\n  width: 0;\n  height: 0;\n  border: 3px solid transparent;\n  left: 6px;\n  top: 10px;\n  -webkit-transform: rotateZ(37deg);\n  transform: rotateZ(37deg);\n  -webkit-transform-origin: 20% 40%;\n  transform-origin: 100% 100%; }\n\n[type=\"checkbox\"].filled-in:not(:checked) + label:after {\n  height: 20px;\n  width: 20px;\n  background-color: transparent;\n  border: 2px solid #5a5a5a;\n  top: 0px;\n  z-index: 0; }\n\n[type=\"checkbox\"].filled-in:checked + label:before {\n  top: 0;\n  left: 1px;\n  width: 8px;\n  height: 13px;\n  border-top: 2px solid transparent;\n  border-left: 2px solid transparent;\n  border-right: 2px solid #fff;\n  border-bottom: 2px solid #fff;\n  -webkit-transform: rotateZ(37deg);\n  transform: rotateZ(37deg);\n  -webkit-transform-origin: 100% 100%;\n  transform-origin: 100% 100%; }\n\n[type=\"checkbox\"].filled-in:checked + label:after {\n  top: 0;\n  width: 20px;\n  height: 20px;\n  border: 2px solid #26a69a;\n  background-color: #26a69a;\n  z-index: 0; }\n\n[type=\"checkbox\"].filled-in.tabbed:focus + label:after {\n  border-radius: 2px;\n  border-color: #5a5a5a;\n  background-color: rgba(0, 0, 0, 0.1); }\n\n[type=\"checkbox\"].filled-in.tabbed:checked:focus + label:after {\n  border-radius: 2px;\n  background-color: #26a69a;\n  border-color: #26a69a; }\n\n[type=\"checkbox\"].filled-in:disabled:not(:checked) + label:before {\n  background-color: transparent;\n  border: 2px solid transparent; }\n\n[type=\"checkbox\"].filled-in:disabled:not(:checked) + label:after {\n  border-color: transparent;\n  background-color: #BDBDBD; }\n\n[type=\"checkbox\"].filled-in:disabled:checked + label:before {\n  background-color: transparent; }\n\n[type=\"checkbox\"].filled-in:disabled:checked + label:after {\n  background-color: #BDBDBD;\n  border-color: #BDBDBD; }\n\n.switch, .switch * {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -ms-user-select: none; }\n\n.switch label {\n  cursor: pointer; }\n\n.switch label input[type=checkbox] {\n  opacity: 0;\n  width: 0;\n  height: 0; }\n\n.switch label input[type=checkbox]:checked + .lever {\n  background-color: #84c7c1; }\n\n.switch label input[type=checkbox]:checked + .lever:after {\n  background-color: #26a69a;\n  left: 24px; }\n\n.switch label .lever {\n  content: \"\";\n  display: inline-block;\n  position: relative;\n  width: 40px;\n  height: 15px;\n  background-color: #818181;\n  border-radius: 15px;\n  margin-right: 10px;\n  transition: background 0.3s ease;\n  vertical-align: middle;\n  margin: 0 16px; }\n\n.switch label .lever:after {\n  content: \"\";\n  position: absolute;\n  display: inline-block;\n  width: 21px;\n  height: 21px;\n  background-color: #F1F1F1;\n  border-radius: 21px;\n  box-shadow: 0 1px 3px 1px rgba(0, 0, 0, 0.4);\n  left: -5px;\n  top: -3px;\n  transition: left 0.3s ease, background .3s ease, box-shadow 0.1s ease; }\n\ninput[type=checkbox]:checked:not(:disabled) ~ .lever:active::after, input[type=checkbox]:checked:not(:disabled).tabbed:focus ~ .lever::after {\n  box-shadow: 0 1px 3px 1px rgba(0, 0, 0, 0.4), 0 0 0 15px rgba(38, 166, 154, 0.1); }\n\ninput[type=checkbox]:not(:disabled) ~ .lever:active:after, input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::after {\n  box-shadow: 0 1px 3px 1px rgba(0, 0, 0, 0.4), 0 0 0 15px rgba(0, 0, 0, 0.08); }\n\n.switch input[type=checkbox][disabled] + .lever {\n  cursor: default; }\n\n.switch label input[type=checkbox][disabled] + .lever:after, .switch label input[type=checkbox][disabled]:checked + .lever:after {\n  background-color: #BDBDBD; }\n\nselect {\n  display: none; }\n\nselect.browser-default {\n  display: block; }\n\nselect {\n  background-color: rgba(255, 255, 255, 0.9);\n  width: 100%;\n  padding: 5px;\n  border: 1px solid #f2f2f2;\n  border-radius: 2px;\n  height: 3rem; }\n\n.select-label {\n  position: absolute; }\n\n.select-wrapper {\n  position: relative; }\n\n.select-wrapper input.select-dropdown {\n  position: relative;\n  cursor: pointer;\n  background-color: transparent;\n  border: none;\n  border-bottom: 1px solid #9e9e9e;\n  outline: none;\n  height: 3rem;\n  line-height: 3rem;\n  width: 100%;\n  font-size: 1rem;\n  margin: 0 0 20px 0;\n  padding: 0;\n  display: block; }\n\n.select-wrapper span.caret {\n  color: initial;\n  position: absolute;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  height: 10px;\n  margin: auto 0;\n  font-size: 10px;\n  line-height: 10px; }\n\n.select-wrapper span.caret.disabled {\n  color: rgba(0, 0, 0, 0.26); }\n\n.select-wrapper + label {\n  position: absolute;\n  top: -14px;\n  font-size: .8rem; }\n\nselect:disabled {\n  color: rgba(0, 0, 0, 0.3); }\n\n.select-wrapper input.select-dropdown:disabled {\n  color: rgba(0, 0, 0, 0.3);\n  cursor: default;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.3); }\n\n.select-wrapper i {\n  color: rgba(0, 0, 0, 0.3); }\n\n.select-dropdown li.disabled, .select-dropdown li.disabled > span, .select-dropdown li.optgroup {\n  color: rgba(0, 0, 0, 0.3);\n  background-color: transparent; }\n\n.prefix ~ .select-wrapper {\n  margin-left: 3rem;\n  width: 92%;\n  width: calc(100% - 3rem); }\n\n.prefix ~ label {\n  margin-left: 3rem; }\n\n.select-dropdown li img {\n  height: 40px;\n  width: 40px;\n  margin: 5px 15px;\n  float: right; }\n\n.select-dropdown li.optgroup {\n  border-top: 1px solid #eee; }\n\n.select-dropdown li.optgroup.selected > span {\n  color: rgba(0, 0, 0, 0.7); }\n\n.select-dropdown li.optgroup > span {\n  color: rgba(0, 0, 0, 0.4); }\n\n.select-dropdown li.optgroup ~ li.optgroup-option {\n  padding-left: 1rem; }\n\n.file-field {\n  position: relative; }\n\n.file-field .file-path-wrapper {\n  overflow: hidden;\n  padding-left: 10px; }\n\n.file-field input.file-path {\n  width: 100%; }\n\n.file-field .btn, .file-field .btn-large {\n  float: left;\n  height: 3rem;\n  line-height: 3rem; }\n\n.file-field span {\n  cursor: pointer; }\n\n.file-field input[type=file] {\n  position: absolute;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  width: 100%;\n  margin: 0;\n  padding: 0;\n  font-size: 20px;\n  cursor: pointer;\n  opacity: 0;\n  filter: alpha(opacity=0); }\n\n.range-field {\n  position: relative; }\n\ninput[type=range], input[type=range] + .thumb {\n  cursor: pointer; }\n\ninput[type=range] {\n  position: relative;\n  background-color: transparent;\n  border: none;\n  outline: none;\n  width: 100%;\n  margin: 15px 0;\n  padding: 0; }\n\ninput[type=range]:focus {\n  outline: none; }\n\ninput[type=range] + .thumb {\n  position: absolute;\n  top: 10px;\n  left: 0;\n  border: none;\n  height: 0;\n  width: 0;\n  border-radius: 50%;\n  background-color: #26a69a;\n  margin-left: 7px;\n  -webkit-transform-origin: 50% 50%;\n  transform-origin: 50% 50%;\n  -webkit-transform: rotate(-45deg);\n  transform: rotate(-45deg); }\n\ninput[type=range] + .thumb .value {\n  display: block;\n  width: 30px;\n  text-align: center;\n  color: #26a69a;\n  font-size: 0;\n  -webkit-transform: rotate(45deg);\n  transform: rotate(45deg); }\n\ninput[type=range] + .thumb.active {\n  border-radius: 50% 50% 50% 0; }\n\ninput[type=range] + .thumb.active .value {\n  color: #fff;\n  margin-left: -1px;\n  margin-top: 8px;\n  font-size: 10px; }\n\ninput[type=range] {\n  -webkit-appearance: none; }\n\ninput[type=range]::-webkit-slider-runnable-track {\n  height: 3px;\n  background: #c2c0c2;\n  border: none; }\n\ninput[type=range]::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  border: none;\n  height: 14px;\n  width: 14px;\n  border-radius: 50%;\n  background-color: #26a69a;\n  -webkit-transform-origin: 50% 50%;\n  transform-origin: 50% 50%;\n  margin: -5px 0 0 0;\n  transition: .3s; }\n\ninput[type=range]:focus::-webkit-slider-runnable-track {\n  background: #ccc; }\n\ninput[type=range] {\n  border: 1px solid white; }\n\ninput[type=range]::-moz-range-track {\n  height: 3px;\n  background: #ddd;\n  border: none; }\n\ninput[type=range]::-moz-range-thumb {\n  border: none;\n  height: 14px;\n  width: 14px;\n  border-radius: 50%;\n  background: #26a69a;\n  margin-top: -5px; }\n\ninput[type=range]:-moz-focusring {\n  outline: 1px solid #fff;\n  outline-offset: -1px; }\n\ninput[type=range]:focus::-moz-range-track {\n  background: #ccc; }\n\ninput[type=range]::-ms-track {\n  height: 3px;\n  background: transparent;\n  border-color: transparent;\n  border-width: 6px 0;\n  color: transparent; }\n\ninput[type=range]::-ms-fill-lower {\n  background: #777; }\n\ninput[type=range]::-ms-fill-upper {\n  background: #ddd; }\n\ninput[type=range]::-ms-thumb {\n  border: none;\n  height: 14px;\n  width: 14px;\n  border-radius: 50%;\n  background: #26a69a; }\n\ninput[type=range]:focus::-ms-fill-lower {\n  background: #888; }\n\ninput[type=range]:focus::-ms-fill-upper {\n  background: #ccc; }\n\n.table-of-contents.fixed {\n  position: fixed; }\n\n.table-of-contents li {\n  padding: 2px 0; }\n\n.table-of-contents a {\n  display: inline-block;\n  font-weight: 300;\n  color: #757575;\n  padding-left: 20px;\n  height: 1.5rem;\n  line-height: 1.5rem;\n  letter-spacing: .4;\n  display: inline-block; }\n\n.table-of-contents a:hover {\n  color: #a8a8a8;\n  padding-left: 19px;\n  border-left: 1px solid #ee6e73; }\n\n.table-of-contents a.active {\n  font-weight: 500;\n  padding-left: 18px;\n  border-left: 2px solid #ee6e73; }\n\n.side-nav {\n  position: fixed;\n  width: 300px;\n  left: 0;\n  top: 0;\n  margin: 0;\n  -webkit-transform: translateX(-100%);\n  transform: translateX(-100%);\n  height: 100%;\n  height: calc(100% + 60px);\n  height: -moz-calc(100%);\n  padding-bottom: 60px;\n  background-color: #fff;\n  z-index: 999;\n  overflow-y: auto;\n  will-change: transform;\n  -webkit-backface-visibility: hidden;\n  backface-visibility: hidden;\n  -webkit-transform: translateX(-105%);\n  transform: translateX(-105%); }\n\n.side-nav.right-aligned {\n  right: 0;\n  -webkit-transform: translateX(105%);\n  transform: translateX(105%);\n  left: auto;\n  -webkit-transform: translateX(100%);\n  transform: translateX(100%); }\n\n.side-nav .collapsible {\n  margin: 0; }\n\n.side-nav li {\n  float: none;\n  line-height: 48px; }\n\n.side-nav li.active {\n  background-color: rgba(0, 0, 0, 0.05); }\n\n.side-nav li > a {\n  color: rgba(0, 0, 0, 0.87);\n  display: block;\n  font-size: 14px;\n  font-weight: 500;\n  height: 48px;\n  line-height: 48px;\n  padding: 0 32px; }\n\n.side-nav li > a:hover {\n  background-color: rgba(0, 0, 0, 0.05); }\n\n.side-nav li > a.btn, .side-nav li > a.btn-large, .side-nav li > a.btn-large, .side-nav li > a.btn-flat, .side-nav li > a.btn-floating {\n  margin: 10px 15px; }\n\n.side-nav li > a.btn, .side-nav li > a.btn-large, .side-nav li > a.btn-large, .side-nav li > a.btn-floating {\n  color: #fff; }\n\n.side-nav li > a.btn-flat {\n  color: #343434; }\n\n.side-nav li > a.btn:hover, .side-nav li > a.btn-large:hover, .side-nav li > a.btn-large:hover {\n  background-color: #2bbbad; }\n\n.side-nav li > a.btn-floating:hover {\n  background-color: #26a69a; }\n\n.side-nav li > a > i, .side-nav li > a > [class^=\"mdi-\"], .side-nav li > a li > a > [class*=\"mdi-\"], .side-nav li > a > i.material-icons {\n  float: left;\n  height: 48px;\n  line-height: 48px;\n  margin: 0 32px 0 0;\n  width: 24px;\n  color: rgba(0, 0, 0, 0.54); }\n\n.side-nav .divider {\n  margin: 8px 0 0 0; }\n\n.side-nav .subheader {\n  cursor: initial;\n  pointer-events: none;\n  color: rgba(0, 0, 0, 0.54);\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 48px; }\n\n.side-nav .subheader:hover {\n  background-color: transparent; }\n\n.side-nav .userView {\n  position: relative;\n  padding: 32px 32px 0;\n  margin-bottom: 8px; }\n\n.side-nav .userView > a {\n  height: auto;\n  padding: 0; }\n\n.side-nav .userView > a:hover {\n  background-color: transparent; }\n\n.side-nav .userView .background {\n  overflow: hidden;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: -1; }\n\n.side-nav .userView .circle, .side-nav .userView .name, .side-nav .userView .email {\n  display: block; }\n\n.side-nav .userView .circle {\n  height: 64px;\n  width: 64px; }\n\n.side-nav .userView .name, .side-nav .userView .email {\n  font-size: 14px;\n  line-height: 24px; }\n\n.side-nav .userView .name {\n  margin-top: 16px;\n  font-weight: 500; }\n\n.side-nav .userView .email {\n  padding-bottom: 16px;\n  font-weight: 400; }\n\n.drag-target {\n  height: 100%;\n  width: 10px;\n  position: fixed;\n  top: 0;\n  z-index: 998; }\n\n.side-nav.fixed {\n  left: 0;\n  -webkit-transform: translateX(0);\n  transform: translateX(0);\n  position: fixed; }\n\n.side-nav.fixed.right-aligned {\n  right: 0;\n  left: auto; }\n\n@media only screen and (max-width: 992px) {\n  .side-nav.fixed {\n    -webkit-transform: translateX(-105%);\n    transform: translateX(-105%); }\n  .side-nav.fixed.right-aligned {\n    -webkit-transform: translateX(105%);\n    transform: translateX(105%); }\n  .side-nav a {\n    padding: 0 16px; }\n  .side-nav .userView {\n    padding: 16px 16px 0; } }\n\n.side-nav .collapsible-body > ul:not(.collapsible) > li.active, .side-nav.fixed .collapsible-body > ul:not(.collapsible) > li.active {\n  background-color: #ee6e73; }\n\n.side-nav .collapsible-body > ul:not(.collapsible) > li.active a, .side-nav.fixed .collapsible-body > ul:not(.collapsible) > li.active a {\n  color: #fff; }\n\n.side-nav .collapsible-body {\n  padding: 0; }\n\n#sidenav-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 120vh;\n  background-color: rgba(0, 0, 0, 0.5);\n  z-index: 997;\n  will-change: opacity; }\n\n.preloader-wrapper {\n  display: inline-block;\n  position: relative;\n  width: 50px;\n  height: 50px; }\n\n.preloader-wrapper.small {\n  width: 36px;\n  height: 36px; }\n\n.preloader-wrapper.big {\n  width: 64px;\n  height: 64px; }\n\n.preloader-wrapper.active {\n  -webkit-animation: container-rotate 1568ms linear infinite;\n  animation: container-rotate 1568ms linear infinite; }\n\n@-webkit-keyframes container-rotate {\n  to {\n    -webkit-transform: rotate(360deg); } }\n\n@keyframes container-rotate {\n  to {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg); } }\n\n.spinner-layer {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  opacity: 0;\n  border-color: #26a69a; }\n\n.spinner-blue, .spinner-blue-only {\n  border-color: #4285f4; }\n\n.spinner-red, .spinner-red-only {\n  border-color: #db4437; }\n\n.spinner-yellow, .spinner-yellow-only {\n  border-color: #f4b400; }\n\n.spinner-green, .spinner-green-only {\n  border-color: #0f9d58; }\n\n.active .spinner-layer.spinner-blue {\n  -webkit-animation: fill-unfill-rotate 5332ms cubic-bezier(0.4, 0, 0.2, 1) infinite both, blue-fade-in-out 5332ms cubic-bezier(0.4, 0, 0.2, 1) infinite both;\n  animation: fill-unfill-rotate 5332ms cubic-bezier(0.4, 0, 0.2, 1) infinite both, blue-fade-in-out 5332ms cubic-bezier(0.4, 0, 0.2, 1) infinite both; }\n\n.active .spinner-layer.spinner-red {\n  -webkit-animation: fill-unfill-rotate 5332ms cubic-bezier(0.4, 0, 0.2, 1) infinite both, red-fade-in-out 5332ms cubic-bezier(0.4, 0, 0.2, 1) infinite both;\n  animation: fill-unfill-rotate 5332ms cubic-bezier(0.4, 0, 0.2, 1) infinite both, red-fade-in-out 5332ms cubic-bezier(0.4, 0, 0.2, 1) infinite both; }\n\n.active .spinner-layer.spinner-yellow {\n  -webkit-animation: fill-unfill-rotate 5332ms cubic-bezier(0.4, 0, 0.2, 1) infinite both, yellow-fade-in-out 5332ms cubic-bezier(0.4, 0, 0.2, 1) infinite both;\n  animation: fill-unfill-rotate 5332ms cubic-bezier(0.4, 0, 0.2, 1) infinite both, yellow-fade-in-out 5332ms cubic-bezier(0.4, 0, 0.2, 1) infinite both; }\n\n.active .spinner-layer.spinner-green {\n  -webkit-animation: fill-unfill-rotate 5332ms cubic-bezier(0.4, 0, 0.2, 1) infinite both, green-fade-in-out 5332ms cubic-bezier(0.4, 0, 0.2, 1) infinite both;\n  animation: fill-unfill-rotate 5332ms cubic-bezier(0.4, 0, 0.2, 1) infinite both, green-fade-in-out 5332ms cubic-bezier(0.4, 0, 0.2, 1) infinite both; }\n\n.active .spinner-layer, .active .spinner-layer.spinner-blue-only, .active .spinner-layer.spinner-red-only, .active .spinner-layer.spinner-yellow-only, .active .spinner-layer.spinner-green-only {\n  opacity: 1;\n  -webkit-animation: fill-unfill-rotate 5332ms cubic-bezier(0.4, 0, 0.2, 1) infinite both;\n  animation: fill-unfill-rotate 5332ms cubic-bezier(0.4, 0, 0.2, 1) infinite both; }\n\n@-webkit-keyframes fill-unfill-rotate {\n  12.5% {\n    -webkit-transform: rotate(135deg); }\n  25% {\n    -webkit-transform: rotate(270deg); }\n  37.5% {\n    -webkit-transform: rotate(405deg); }\n  50% {\n    -webkit-transform: rotate(540deg); }\n  62.5% {\n    -webkit-transform: rotate(675deg); }\n  75% {\n    -webkit-transform: rotate(810deg); }\n  87.5% {\n    -webkit-transform: rotate(945deg); }\n  to {\n    -webkit-transform: rotate(1080deg); } }\n\n@keyframes fill-unfill-rotate {\n  12.5% {\n    -webkit-transform: rotate(135deg);\n    transform: rotate(135deg); }\n  25% {\n    -webkit-transform: rotate(270deg);\n    transform: rotate(270deg); }\n  37.5% {\n    -webkit-transform: rotate(405deg);\n    transform: rotate(405deg); }\n  50% {\n    -webkit-transform: rotate(540deg);\n    transform: rotate(540deg); }\n  62.5% {\n    -webkit-transform: rotate(675deg);\n    transform: rotate(675deg); }\n  75% {\n    -webkit-transform: rotate(810deg);\n    transform: rotate(810deg); }\n  87.5% {\n    -webkit-transform: rotate(945deg);\n    transform: rotate(945deg); }\n  to {\n    -webkit-transform: rotate(1080deg);\n    transform: rotate(1080deg); } }\n\n@-webkit-keyframes blue-fade-in-out {\n  from {\n    opacity: 1; }\n  25% {\n    opacity: 1; }\n  26% {\n    opacity: 0; }\n  89% {\n    opacity: 0; }\n  90% {\n    opacity: 1; }\n  100% {\n    opacity: 1; } }\n\n@keyframes blue-fade-in-out {\n  from {\n    opacity: 1; }\n  25% {\n    opacity: 1; }\n  26% {\n    opacity: 0; }\n  89% {\n    opacity: 0; }\n  90% {\n    opacity: 1; }\n  100% {\n    opacity: 1; } }\n\n@-webkit-keyframes red-fade-in-out {\n  from {\n    opacity: 0; }\n  15% {\n    opacity: 0; }\n  25% {\n    opacity: 1; }\n  50% {\n    opacity: 1; }\n  51% {\n    opacity: 0; } }\n\n@keyframes red-fade-in-out {\n  from {\n    opacity: 0; }\n  15% {\n    opacity: 0; }\n  25% {\n    opacity: 1; }\n  50% {\n    opacity: 1; }\n  51% {\n    opacity: 0; } }\n\n@-webkit-keyframes yellow-fade-in-out {\n  from {\n    opacity: 0; }\n  40% {\n    opacity: 0; }\n  50% {\n    opacity: 1; }\n  75% {\n    opacity: 1; }\n  76% {\n    opacity: 0; } }\n\n@keyframes yellow-fade-in-out {\n  from {\n    opacity: 0; }\n  40% {\n    opacity: 0; }\n  50% {\n    opacity: 1; }\n  75% {\n    opacity: 1; }\n  76% {\n    opacity: 0; } }\n\n@-webkit-keyframes green-fade-in-out {\n  from {\n    opacity: 0; }\n  65% {\n    opacity: 0; }\n  75% {\n    opacity: 1; }\n  90% {\n    opacity: 1; }\n  100% {\n    opacity: 0; } }\n\n@keyframes green-fade-in-out {\n  from {\n    opacity: 0; }\n  65% {\n    opacity: 0; }\n  75% {\n    opacity: 1; }\n  90% {\n    opacity: 1; }\n  100% {\n    opacity: 0; } }\n\n.gap-patch {\n  position: absolute;\n  top: 0;\n  left: 45%;\n  width: 10%;\n  height: 100%;\n  overflow: hidden;\n  border-color: inherit; }\n\n.gap-patch .circle {\n  width: 1000%;\n  left: -450%; }\n\n.circle-clipper {\n  display: inline-block;\n  position: relative;\n  width: 50%;\n  height: 100%;\n  overflow: hidden;\n  border-color: inherit; }\n\n.circle-clipper .circle {\n  width: 200%;\n  height: 100%;\n  border-width: 3px;\n  border-style: solid;\n  border-color: inherit;\n  border-bottom-color: transparent !important;\n  border-radius: 50%;\n  -webkit-animation: none;\n  animation: none;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0; }\n\n.circle-clipper.left .circle {\n  left: 0;\n  border-right-color: transparent !important;\n  -webkit-transform: rotate(129deg);\n  transform: rotate(129deg); }\n\n.circle-clipper.right .circle {\n  left: -100%;\n  border-left-color: transparent !important;\n  -webkit-transform: rotate(-129deg);\n  transform: rotate(-129deg); }\n\n.active .circle-clipper.left .circle {\n  -webkit-animation: left-spin 1333ms cubic-bezier(0.4, 0, 0.2, 1) infinite both;\n  animation: left-spin 1333ms cubic-bezier(0.4, 0, 0.2, 1) infinite both; }\n\n.active .circle-clipper.right .circle {\n  -webkit-animation: right-spin 1333ms cubic-bezier(0.4, 0, 0.2, 1) infinite both;\n  animation: right-spin 1333ms cubic-bezier(0.4, 0, 0.2, 1) infinite both; }\n\n@-webkit-keyframes left-spin {\n  from {\n    -webkit-transform: rotate(130deg); }\n  50% {\n    -webkit-transform: rotate(-5deg); }\n  to {\n    -webkit-transform: rotate(130deg); } }\n\n@keyframes left-spin {\n  from {\n    -webkit-transform: rotate(130deg);\n    transform: rotate(130deg); }\n  50% {\n    -webkit-transform: rotate(-5deg);\n    transform: rotate(-5deg); }\n  to {\n    -webkit-transform: rotate(130deg);\n    transform: rotate(130deg); } }\n\n@-webkit-keyframes right-spin {\n  from {\n    -webkit-transform: rotate(-130deg); }\n  50% {\n    -webkit-transform: rotate(5deg); }\n  to {\n    -webkit-transform: rotate(-130deg); } }\n\n@keyframes right-spin {\n  from {\n    -webkit-transform: rotate(-130deg);\n    transform: rotate(-130deg); }\n  50% {\n    -webkit-transform: rotate(5deg);\n    transform: rotate(5deg); }\n  to {\n    -webkit-transform: rotate(-130deg);\n    transform: rotate(-130deg); } }\n\n#spinnerContainer.cooldown {\n  -webkit-animation: container-rotate 1568ms linear infinite, fade-out 400ms cubic-bezier(0.4, 0, 0.2, 1);\n  animation: container-rotate 1568ms linear infinite, fade-out 400ms cubic-bezier(0.4, 0, 0.2, 1); }\n\n@-webkit-keyframes fade-out {\n  from {\n    opacity: 1; }\n  to {\n    opacity: 0; } }\n\n@keyframes fade-out {\n  from {\n    opacity: 1; }\n  to {\n    opacity: 0; } }\n\n.slider {\n  position: relative;\n  height: 400px;\n  width: 100%; }\n\n.slider.fullscreen {\n  height: 100%;\n  width: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0; }\n\n.slider.fullscreen ul.slides {\n  height: 100%; }\n\n.slider.fullscreen ul.indicators {\n  z-index: 2;\n  bottom: 30px; }\n\n.slider .slides {\n  background-color: #9e9e9e;\n  margin: 0;\n  height: 400px; }\n\n.slider .slides li {\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  width: 100%;\n  height: inherit;\n  overflow: hidden; }\n\n.slider .slides li img {\n  height: 100%;\n  width: 100%;\n  background-size: cover;\n  background-position: center; }\n\n.slider .slides li .caption {\n  color: #fff;\n  position: absolute;\n  top: 15%;\n  left: 15%;\n  width: 70%;\n  opacity: 0; }\n\n.slider .slides li .caption p {\n  color: #e0e0e0; }\n\n.slider .slides li.active {\n  z-index: 2; }\n\n.slider .indicators {\n  position: absolute;\n  text-align: center;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  margin: 0; }\n\n.slider .indicators .indicator-item {\n  display: inline-block;\n  position: relative;\n  cursor: pointer;\n  height: 16px;\n  width: 16px;\n  margin: 0 12px;\n  background-color: #e0e0e0;\n  transition: background-color .3s;\n  border-radius: 50%; }\n\n.slider .indicators .indicator-item.active {\n  background-color: #4CAF50; }\n\n.carousel {\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n  height: 400px;\n  -webkit-perspective: 500px;\n  perspective: 500px;\n  -webkit-transform-style: preserve-3d;\n  transform-style: preserve-3d;\n  -webkit-transform-origin: 0% 50%;\n  transform-origin: 0% 50%; }\n\n.carousel.carousel-slider {\n  top: 0;\n  left: 0;\n  height: 0; }\n\n.carousel.carousel-slider .carousel-fixed-item {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 20px;\n  z-index: 1; }\n\n.carousel.carousel-slider .carousel-fixed-item.with-indicators {\n  bottom: 68px; }\n\n.carousel.carousel-slider .carousel-item {\n  width: 100%;\n  height: 100%;\n  min-height: 400px;\n  position: absolute;\n  top: 0;\n  left: 0; }\n\n.carousel.carousel-slider .carousel-item h2 {\n  font-size: 24px;\n  font-weight: 500;\n  line-height: 32px; }\n\n.carousel.carousel-slider .carousel-item p {\n  font-size: 15px; }\n\n.carousel .carousel-item {\n  display: none;\n  width: 200px;\n  height: 200px;\n  position: absolute;\n  top: 0;\n  left: 0; }\n\n.carousel .carousel-item > img {\n  width: 100%; }\n\n.carousel .indicators {\n  position: absolute;\n  text-align: center;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  margin: 0; }\n\n.carousel .indicators .indicator-item {\n  display: inline-block;\n  position: relative;\n  cursor: pointer;\n  height: 8px;\n  width: 8px;\n  margin: 24px 4px;\n  background-color: rgba(255, 255, 255, 0.5);\n  transition: background-color .3s;\n  border-radius: 50%; }\n\n.carousel .indicators .indicator-item.active {\n  background-color: #fff; }\n\n.carousel.scrolling .carousel-item .materialboxed, .carousel .carousel-item:not(.active) .materialboxed {\n  pointer-events: none; }\n\n.tap-target-wrapper {\n  width: 800px;\n  height: 800px;\n  position: fixed;\n  z-index: 1000;\n  visibility: hidden;\n  transition: visibility 0s .3s; }\n\n.tap-target-wrapper.open {\n  visibility: visible;\n  transition: visibility 0s; }\n\n.tap-target-wrapper.open .tap-target {\n  -webkit-transform: scale(1);\n  transform: scale(1);\n  opacity: .95;\n  transition: opacity 0.3s cubic-bezier(0.42, 0, 0.58, 1), -webkit-transform 0.3s cubic-bezier(0.42, 0, 0.58, 1);\n  transition: transform 0.3s cubic-bezier(0.42, 0, 0.58, 1), opacity 0.3s cubic-bezier(0.42, 0, 0.58, 1);\n  transition: transform 0.3s cubic-bezier(0.42, 0, 0.58, 1), opacity 0.3s cubic-bezier(0.42, 0, 0.58, 1), -webkit-transform 0.3s cubic-bezier(0.42, 0, 0.58, 1); }\n\n.tap-target-wrapper.open .tap-target-wave::before {\n  -webkit-transform: scale(1);\n  transform: scale(1); }\n\n.tap-target-wrapper.open .tap-target-wave::after {\n  visibility: visible;\n  -webkit-animation: pulse-animation 1s cubic-bezier(0.24, 0, 0.38, 1) infinite;\n  animation: pulse-animation 1s cubic-bezier(0.24, 0, 0.38, 1) infinite;\n  transition: opacity .3s, visibility 0s 1s, -webkit-transform .3s;\n  transition: opacity .3s, transform .3s, visibility 0s 1s;\n  transition: opacity .3s, transform .3s, visibility 0s 1s, -webkit-transform .3s; }\n\n.tap-target {\n  position: absolute;\n  font-size: 1rem;\n  border-radius: 50%;\n  background-color: #ee6e73;\n  box-shadow: 0 20px 20px 0 rgba(0, 0, 0, 0.14), 0 10px 50px 0 rgba(0, 0, 0, 0.12), 0 30px 10px -20px rgba(0, 0, 0, 0.2);\n  width: 100%;\n  height: 100%;\n  opacity: 0;\n  -webkit-transform: scale(0);\n  transform: scale(0);\n  transition: opacity 0.3s cubic-bezier(0.42, 0, 0.58, 1), -webkit-transform 0.3s cubic-bezier(0.42, 0, 0.58, 1);\n  transition: transform 0.3s cubic-bezier(0.42, 0, 0.58, 1), opacity 0.3s cubic-bezier(0.42, 0, 0.58, 1);\n  transition: transform 0.3s cubic-bezier(0.42, 0, 0.58, 1), opacity 0.3s cubic-bezier(0.42, 0, 0.58, 1), -webkit-transform 0.3s cubic-bezier(0.42, 0, 0.58, 1); }\n\n.tap-target-content {\n  position: relative;\n  display: table-cell; }\n\n.tap-target-wave {\n  position: absolute;\n  border-radius: 50%;\n  z-index: 10001; }\n\n.tap-target-wave::before, .tap-target-wave::after {\n  content: '';\n  display: block;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  background-color: #ffffff; }\n\n.tap-target-wave::before {\n  -webkit-transform: scale(0);\n  transform: scale(0);\n  transition: -webkit-transform .3s;\n  transition: transform .3s;\n  transition: transform .3s, -webkit-transform .3s; }\n\n.tap-target-wave::after {\n  visibility: hidden;\n  transition: opacity .3s, visibility 0s, -webkit-transform .3s;\n  transition: opacity .3s, transform .3s, visibility 0s;\n  transition: opacity .3s, transform .3s, visibility 0s, -webkit-transform .3s;\n  z-index: -1; }\n\n.tap-target-origin {\n  top: 50%;\n  left: 50%;\n  -webkit-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n  z-index: 10002;\n  position: absolute !important; }\n\n.tap-target-origin:not(.btn):not(.btn-large), .tap-target-origin:not(.btn):not(.btn-large):hover {\n  background: none; }\n\n@media only screen and (max-width: 600px) {\n  .tap-target, .tap-target-wrapper {\n    width: 600px;\n    height: 600px; } }\n\n.pulse {\n  overflow: initial;\n  position: relative; }\n\n.pulse::before {\n  content: '';\n  display: block;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  background-color: inherit;\n  border-radius: inherit;\n  transition: opacity .3s, -webkit-transform .3s;\n  transition: opacity .3s, transform .3s;\n  transition: opacity .3s, transform .3s, -webkit-transform .3s;\n  -webkit-animation: pulse-animation 1s cubic-bezier(0.24, 0, 0.38, 1) infinite;\n  animation: pulse-animation 1s cubic-bezier(0.24, 0, 0.38, 1) infinite;\n  z-index: -1; }\n\n@-webkit-keyframes pulse-animation {\n  0% {\n    opacity: 1;\n    -webkit-transform: scale(1);\n    transform: scale(1); }\n  50% {\n    opacity: 0;\n    -webkit-transform: scale(1.5);\n    transform: scale(1.5); }\n  100% {\n    opacity: 0;\n    -webkit-transform: scale(1.5);\n    transform: scale(1.5); } }\n\n@keyframes pulse-animation {\n  0% {\n    opacity: 1;\n    -webkit-transform: scale(1);\n    transform: scale(1); }\n  50% {\n    opacity: 0;\n    -webkit-transform: scale(1.5);\n    transform: scale(1.5); }\n  100% {\n    opacity: 0;\n    -webkit-transform: scale(1.5);\n    transform: scale(1.5); } }\n\n.picker {\n  font-size: 16px;\n  text-align: left;\n  line-height: 1.2;\n  color: #000000;\n  position: absolute;\n  z-index: 10000;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n.picker__input {\n  cursor: default; }\n\n.picker__input.picker__input--active {\n  border-color: #0089ec; }\n\n.picker__holder {\n  width: 100%;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch; }\n\n/*!\n * Default mobile-first, responsive styling for pickadate.js\n * Demo: http://amsul.github.io/pickadate.js\n */\n.picker__holder, .picker__frame {\n  bottom: 0;\n  left: 0;\n  right: 0;\n  top: 100%; }\n\n.picker__holder {\n  position: fixed;\n  transition: background 0.15s ease-out, top 0s 0.15s;\n  -webkit-backface-visibility: hidden; }\n\n.picker__frame {\n  position: absolute;\n  margin: 0 auto;\n  min-width: 256px;\n  width: 300px;\n  max-height: 350px;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)\";\n  filter: alpha(opacity=0);\n  -moz-opacity: 0;\n  opacity: 0;\n  transition: all 0.15s ease-out; }\n\n@media (min-height: 28.875em) {\n  .picker__frame {\n    overflow: visible;\n    top: auto;\n    bottom: -100%;\n    max-height: 80%; } }\n\n@media (min-height: 40.125em) {\n  .picker__frame {\n    margin-bottom: 7.5%; } }\n\n.picker__wrap {\n  display: table;\n  width: 100%;\n  height: 100%; }\n\n@media (min-height: 28.875em) {\n  .picker__wrap {\n    display: block; } }\n\n.picker__box {\n  background: #ffffff;\n  display: table-cell;\n  vertical-align: middle; }\n\n@media (min-height: 28.875em) {\n  .picker__box {\n    display: block;\n    border: 1px solid #777777;\n    border-top-color: #898989;\n    border-bottom-width: 0;\n    border-radius: 5px 5px 0 0;\n    box-shadow: 0 12px 36px 16px rgba(0, 0, 0, 0.24); } }\n\n.picker--opened .picker__holder {\n  top: 0;\n  background: transparent;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.gradient(startColorstr=#1E000000,endColorstr=#1E000000)\";\n  zoom: 1;\n  background: rgba(0, 0, 0, 0.32);\n  transition: background 0.15s ease-out; }\n\n.picker--opened .picker__frame {\n  top: 0;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=100)\";\n  filter: alpha(opacity=100);\n  -moz-opacity: 1;\n  opacity: 1; }\n\n@media (min-height: 35.875em) {\n  .picker--opened .picker__frame {\n    top: 10%;\n    bottom: auto; } }\n\n.picker__input.picker__input--active {\n  border-color: #E3F2FD; }\n\n.picker__frame {\n  margin: 0 auto;\n  max-width: 325px; }\n\n@media (min-height: 38.875em) {\n  .picker--opened .picker__frame {\n    top: 10%;\n    bottom: auto; } }\n\n.picker__box {\n  padding: 0 1em; }\n\n.picker__header {\n  text-align: center;\n  position: relative;\n  margin-top: .75em; }\n\n.picker__month, .picker__year {\n  display: inline-block;\n  margin-left: .25em;\n  margin-right: .25em; }\n\n.picker__select--month, .picker__select--year {\n  height: 2em;\n  padding: 0;\n  margin-left: .25em;\n  margin-right: .25em; }\n\n.picker__select--month.browser-default {\n  display: inline;\n  background-color: #FFFFFF;\n  width: 40%; }\n\n.picker__select--year.browser-default {\n  display: inline;\n  background-color: #FFFFFF;\n  width: 26%; }\n\n.picker__select--month:focus, .picker__select--year:focus {\n  border-color: rgba(0, 0, 0, 0.05); }\n\n.picker__nav--prev, .picker__nav--next {\n  position: absolute;\n  padding: .5em 1.25em;\n  width: 1em;\n  height: 1em;\n  box-sizing: content-box;\n  top: -0.25em; }\n\n.picker__nav--prev {\n  left: -1em;\n  padding-right: 1.25em; }\n\n.picker__nav--next {\n  right: -1em;\n  padding-left: 1.25em; }\n\n.picker__nav--disabled, .picker__nav--disabled:hover, .picker__nav--disabled:before, .picker__nav--disabled:before:hover {\n  cursor: default;\n  background: none;\n  border-right-color: #f5f5f5;\n  border-left-color: #f5f5f5; }\n\n.picker__table {\n  text-align: center;\n  border-collapse: collapse;\n  border-spacing: 0;\n  table-layout: fixed;\n  font-size: 1rem;\n  width: 100%;\n  margin-top: .75em;\n  margin-bottom: .5em; }\n\n.picker__table th, .picker__table td {\n  text-align: center; }\n\n.picker__table td {\n  margin: 0;\n  padding: 0; }\n\n.picker__weekday {\n  width: 14.285714286%;\n  font-size: .75em;\n  padding-bottom: .25em;\n  color: #999999;\n  font-weight: 500; }\n\n@media (min-height: 33.875em) {\n  .picker__weekday {\n    padding-bottom: .5em; } }\n\n.picker__day--today {\n  position: relative;\n  color: #595959;\n  letter-spacing: -.3;\n  padding: .75rem 0;\n  font-weight: 400;\n  border: 1px solid transparent; }\n\n.picker__day--disabled:before {\n  border-top-color: #aaaaaa; }\n\n.picker__day--infocus:hover {\n  cursor: pointer;\n  color: #000;\n  font-weight: 500; }\n\n.picker__day--outfocus {\n  display: none;\n  padding: .75rem 0;\n  color: #fff; }\n\n.picker__day--outfocus:hover {\n  cursor: pointer;\n  color: #dddddd;\n  font-weight: 500; }\n\n.picker__day--highlighted:hover, .picker--focused .picker__day--highlighted {\n  cursor: pointer; }\n\n.picker__day--selected, .picker__day--selected:hover, .picker--focused .picker__day--selected {\n  border-radius: 50%;\n  -webkit-transform: scale(0.75);\n  transform: scale(0.75);\n  background: #0089ec;\n  color: #ffffff; }\n\n.picker__day--disabled, .picker__day--disabled:hover, .picker--focused .picker__day--disabled {\n  background: #f5f5f5;\n  border-color: #f5f5f5;\n  color: #dddddd;\n  cursor: default; }\n\n.picker__day--highlighted.picker__day--disabled, .picker__day--highlighted.picker__day--disabled:hover {\n  background: #bbbbbb; }\n\n.picker__footer {\n  text-align: center;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-align-items: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-justify-content: space-between;\n  -ms-flex-pack: justify;\n  justify-content: space-between; }\n\n.picker__button--today, .picker__button--clear, .picker__button--close {\n  border: 1px solid #ffffff;\n  background: #ffffff;\n  font-size: .8em;\n  padding: .66em 0;\n  font-weight: bold;\n  width: 33%;\n  display: inline-block;\n  vertical-align: bottom; }\n\n.picker__button--today:hover, .picker__button--clear:hover, .picker__button--close:hover {\n  cursor: pointer;\n  color: #000000;\n  background: #b1dcfb;\n  border-bottom-color: #b1dcfb; }\n\n.picker__button--today:focus, .picker__button--clear:focus, .picker__button--close:focus {\n  background: #b1dcfb;\n  border-color: rgba(0, 0, 0, 0.05);\n  outline: none; }\n\n.picker__button--today:before, .picker__button--clear:before, .picker__button--close:before {\n  position: relative;\n  display: inline-block;\n  height: 0; }\n\n.picker__button--today:before, .picker__button--clear:before {\n  content: \" \";\n  margin-right: .45em; }\n\n.picker__button--today:before {\n  top: -0.05em;\n  width: 0;\n  border-top: 0.66em solid #0059bc;\n  border-left: .66em solid transparent; }\n\n.picker__button--clear:before {\n  top: -0.25em;\n  width: .66em;\n  border-top: 3px solid #ee2200; }\n\n.picker__button--close:before {\n  content: \"\\D7\";\n  top: -0.1em;\n  vertical-align: top;\n  font-size: 1.1em;\n  margin-right: .35em;\n  color: #777777; }\n\n.picker__button--today[disabled], .picker__button--today[disabled]:hover {\n  background: #f5f5f5;\n  border-color: #f5f5f5;\n  color: #dddddd;\n  cursor: default; }\n\n.picker__button--today[disabled]:before {\n  border-top-color: #aaaaaa; }\n\n.picker__box {\n  border-radius: 2px;\n  overflow: hidden; }\n\n.picker__date-display {\n  text-align: center;\n  background-color: #26a69a;\n  color: #fff;\n  padding-bottom: 15px;\n  font-weight: 300; }\n\n.picker__nav--prev:hover, .picker__nav--next:hover {\n  cursor: pointer;\n  color: #000000;\n  background: #a1ded8; }\n\n.picker__weekday-display {\n  background-color: #1f897f;\n  padding: 10px;\n  font-weight: 200;\n  letter-spacing: .5;\n  font-size: 1rem;\n  margin-bottom: 15px; }\n\n.picker__month-display {\n  text-transform: uppercase;\n  font-size: 2rem; }\n\n.picker__day-display {\n  font-size: 4.5rem;\n  font-weight: 400; }\n\n.picker__year-display {\n  font-size: 1.8rem;\n  color: rgba(255, 255, 255, 0.4); }\n\n.picker__box {\n  padding: 0; }\n\n.picker__calendar-container {\n  padding: 0 1rem; }\n\n.picker__calendar-container thead {\n  border: none; }\n\n.picker__table {\n  margin-top: 0;\n  margin-bottom: .5em; }\n\n.picker__day--infocus {\n  color: #595959;\n  letter-spacing: -.3;\n  padding: .75rem 0;\n  font-weight: 400;\n  border: 1px solid transparent; }\n\n.picker__day.picker__day--today {\n  color: #26a69a; }\n\n.picker__day.picker__day--today.picker__day--selected {\n  color: #fff; }\n\n.picker__weekday {\n  font-size: .9rem; }\n\n.picker__day--selected, .picker__day--selected:hover, .picker--focused .picker__day--selected {\n  border-radius: 50%;\n  -webkit-transform: scale(0.9);\n  transform: scale(0.9);\n  background-color: #26a69a;\n  color: #ffffff; }\n\n.picker__day--selected.picker__day--outfocus, .picker__day--selected:hover.picker__day--outfocus, .picker--focused .picker__day--selected.picker__day--outfocus {\n  background-color: #a1ded8; }\n\n.picker__footer {\n  text-align: right;\n  padding: 5px 10px; }\n\n.picker__close, .picker__today {\n  font-size: 1.1rem;\n  padding: 0 1rem;\n  color: #26a69a; }\n\n.picker__nav--prev:before, .picker__nav--next:before {\n  content: \" \";\n  border-top: .5em solid transparent;\n  border-bottom: .5em solid transparent;\n  border-right: 0.75em solid #676767;\n  width: 0;\n  height: 0;\n  display: block;\n  margin: 0 auto; }\n\n.picker__nav--next:before {\n  border-right: 0;\n  border-left: 0.75em solid #676767; }\n\nbutton.picker__today:focus, button.picker__clear:focus, button.picker__close:focus {\n  background-color: #a1ded8; }\n\n.picker__list {\n  list-style: none;\n  padding: 0.75em 0 4.2em;\n  margin: 0; }\n\n.picker__list-item {\n  border-bottom: 1px solid #dddddd;\n  border-top: 1px solid #dddddd;\n  margin-bottom: -1px;\n  position: relative;\n  background: #ffffff;\n  padding: .75em 1.25em; }\n\n@media (min-height: 46.75em) {\n  .picker__list-item {\n    padding: .5em 1em; } }\n\n.picker__list-item:hover {\n  cursor: pointer;\n  color: #000000;\n  background: #b1dcfb;\n  border-color: #0089ec;\n  z-index: 10; }\n\n.picker__list-item--highlighted {\n  border-color: #0089ec;\n  z-index: 10; }\n\n.picker__list-item--highlighted:hover, .picker--focused .picker__list-item--highlighted {\n  cursor: pointer;\n  color: #000000;\n  background: #b1dcfb; }\n\n.picker__list-item--selected, .picker__list-item--selected:hover, .picker--focused .picker__list-item--selected {\n  background: #0089ec;\n  color: #ffffff;\n  z-index: 10; }\n\n.picker__list-item--disabled, .picker__list-item--disabled:hover, .picker--focused .picker__list-item--disabled {\n  background: #f5f5f5;\n  border-color: #f5f5f5;\n  color: #dddddd;\n  cursor: default;\n  border-color: #dddddd;\n  z-index: auto; }\n\n.picker--time .picker__button--clear {\n  display: block;\n  width: 80%;\n  margin: 1em auto 0;\n  padding: 1em 1.25em;\n  background: none;\n  border: 0;\n  font-weight: 500;\n  font-size: .67em;\n  text-align: center;\n  text-transform: uppercase;\n  color: #666; }\n\n.picker--time .picker__button--clear:hover, .picker--time .picker__button--clear:focus {\n  color: #000000;\n  background: #b1dcfb;\n  background: #ee2200;\n  border-color: #ee2200;\n  cursor: pointer;\n  color: #ffffff;\n  outline: none; }\n\n.picker--time .picker__button--clear:before {\n  top: -0.25em;\n  color: #666;\n  font-size: 1.25em;\n  font-weight: bold; }\n\n.picker--time .picker__button--clear:hover:before, .picker--time .picker__button--clear:focus:before {\n  color: #ffffff; }\n\n.picker--time .picker__frame {\n  min-width: 256px;\n  max-width: 320px; }\n\n.picker--time .picker__box {\n  font-size: 1em;\n  background: #f2f2f2;\n  padding: 0; }\n\n@media (min-height: 40.125em) {\n  .picker--time .picker__box {\n    margin-bottom: 5em; } }\n\nbody {\n  background-color: #fcfcfc; }\n\np.box {\n  padding: 20px; }\n\np {\n  color: rgba(0, 0, 0, 0.71);\n  padding: 0;\n  -webkit-font-smoothing: antialiased; }\n\nh1, h2, h3, h4, h5, h6 {\n  -webkit-font-smoothing: antialiased; }\n\nh5 > span {\n  font-size: 14px;\n  margin-left: 15px;\n  color: #777; }\n\nnav a {\n  -webkit-font-smoothing: antialiased; }\n\nnav ul li a:hover, nav ul li.active {\n  background-color: #ea454b; }\n\n.header {\n  color: #ee6e73;\n  font-weight: 300; }\n\n.caption {\n  font-size: 1.25rem;\n  font-weight: 300;\n  margin-bottom: 30px; }\n\n.preview {\n  background-color: #FFF;\n  border: 1px solid #eee;\n  padding: 20px 20px; }\n\nheader, main, footer {\n  padding-left: 300px; }\n\n.parallax-demo header, .parallax-demo main, .parallax-demo footer {\n  padding-left: 0; }\n\nfooter.example {\n  padding-left: 0; }\n\n@media only screen and (max-width: 992px) {\n  header, main, footer {\n    padding-left: 0; }\n  h5 > span {\n    display: block;\n    margin: 0 0 15px 0; } }\n\nul.side-nav.fixed li.logo {\n  text-align: center;\n  margin-top: 32px;\n  margin-bottom: 80px; }\n\nul.side-nav.fixed li.logo:hover, ul.side-nav.fixed li.logo #logo-container:hover {\n  background-color: transparent; }\n\nul.side-nav.fixed {\n  overflow: hidden; }\n\nul.side-nav.fixed li {\n  line-height: 44px; }\n\nul.side-nav.fixed li.active {\n  background-color: rgba(0, 0, 0, 0.05); }\n\nul.side-nav.fixed li a {\n  font-size: 13px;\n  line-height: 44px;\n  height: 44px;\n  padding: 0 30px; }\n\nul.side-nav.fixed ul.collapsible-accordion {\n  background-color: #FFF; }\n\nul.side-nav.fixed ul.collapsible-accordion a.collapsible-header {\n  padding: 0 30px; }\n\nul.side-nav.fixed ul.collapsible-accordion .collapsible-body li a {\n  font-weight: 400;\n  padding: 0 37.5px 0 45px; }\n\nul.side-nav.fixed:hover {\n  overflow-y: auto; }\n\n.bold > a {\n  font-weight: bold; }\n\n#logo-container {\n  height: 57px;\n  margin-bottom: 32px; }\n\nnav.top-nav {\n  height: 122px;\n  box-shadow: none; }\n\nnav.top-nav a.page-title {\n  line-height: 122px;\n  font-size: 48px; }\n\na.button-collapse.top-nav {\n  position: absolute;\n  text-align: center;\n  height: 48px;\n  width: 48px;\n  left: 7.5%;\n  top: 0;\n  float: none;\n  margin-left: 1.5rem;\n  color: #fff;\n  font-size: 36px;\n  z-index: 2; }\n\na.button-collapse.top-nav.full {\n  line-height: 122px; }\n\na.button-collapse.top-nav i {\n  font-size: 32px; }\n\n@media only screen and (max-width: 600px) {\n  a.button-collapse.top-nav {\n    left: 5%; } }\n\n@media only screen and (max-width: 992px) {\n  nav .nav-wrapper {\n    text-align: center; }\n  nav .nav-wrapper a.page-title {\n    font-size: 36px; } }\n\n@media only screen and (min-width: 993px) {\n  .container {\n    width: 85%; } }\n\n#front-page-logo {\n  display: inline-block;\n  height: 100%;\n  pointer-events: none; }\n\n@media only screen and (max-width: 992px) {\n  #front-page-nav ul.side-nav li {\n    float: none;\n    padding: 0 15px; }\n  #front-page-nav ul.side-nav li:hover {\n    background-color: #ddd; }\n  #front-page-nav ul.side-nav li .active {\n    background-color: transparent; }\n  #front-page-nav ul.side-nav a {\n    color: #444; } }\n\n#responsive-img {\n  width: 80%;\n  display: block;\n  margin: 0 auto; }\n\n#index-banner {\n  background-color: #ee6e73; }\n\n#index-banner .container {\n  position: relative; }\n\n#index-banner .header {\n  color: #FFF; }\n\n#index-banner h4 {\n  margin-bottom: 40px; }\n\n#index-banner h1 {\n  margin-top: 16px; }\n\n@media only screen and (max-width: 992px) {\n  #index-banner h1 {\n    margin-top: 60px; }\n  #index-banner h4 {\n    margin-bottom: 15px; } }\n\n@media only screen and (max-width: 600px) {\n  #index-banner h4 {\n    margin-bottom: 0; } }\n\n.github-commit {\n  padding: 14px 0;\n  height: 64px;\n  line-height: 36px;\n  background-color: #5c5757;\n  color: #e6e6e6;\n  font-size: .9rem; }\n\n@media only screen and (max-width: 992px) {\n  .github-commit {\n    text-align: center; } }\n\n#github-button {\n  background-color: #6f6d6d;\n  transition: .25s ease; }\n\n#github-button:hover {\n  background-color: #797777; }\n\n.sha {\n  color: #f0f0f0;\n  margin: 0 6px 0 6px; }\n\n#download-button {\n  background-color: #f3989b;\n  width: 260px;\n  height: 70px;\n  line-height: 70px;\n  font-size: 18px;\n  font-weight: 400; }\n\n#download-button:hover {\n  background-color: #f5a5a8; }\n\n.promo {\n  width: 100%; }\n\n.promo i {\n  margin: 40px 0;\n  color: #ee6e73;\n  font-size: 7rem;\n  display: block; }\n\n.promo-caption {\n  font-size: 1.7rem;\n  font-weight: 500;\n  margin-top: 5px;\n  margin-bottom: 0; }\n\n#front-page-nav {\n  background-color: #FFF;\n  position: relative; }\n\n#front-page-nav a {\n  color: #ee6e73; }\n\n#front-page-nav li:hover {\n  background-color: #fdeaeb; }\n\n#front-page-nav li.active {\n  background-color: #fdeaeb; }\n\n#front-page-nav .container {\n  height: inherit; }\n\n.col.grid-example {\n  border: 1px solid #eee;\n  margin: 7px 0;\n  text-align: center;\n  line-height: 50px;\n  font-size: 28px;\n  background-color: tomato;\n  color: white;\n  padding: 0; }\n\n.col.grid-example span {\n  font-weight: 100;\n  line-height: 50px; }\n\n.promo-example {\n  overflow: hidden; }\n\n#site-layout-example-left {\n  background-color: #90a4ae;\n  height: 300px; }\n\n#site-layout-example-right {\n  background-color: #26a69a;\n  height: 300px; }\n\n#site-layout-example-top {\n  background-color: #E57373;\n  height: 42px; }\n\n.flat-text-header {\n  height: 35px;\n  width: 80%;\n  background-color: rgba(255, 255, 255, 0.15);\n  display: block;\n  margin: 27px auto; }\n\n.flat-text {\n  height: 25px;\n  width: 80%;\n  background-color: rgba(0, 0, 0, 0.15);\n  display: block;\n  margin: 27px auto; }\n\n.flat-text.small {\n  width: 25%;\n  height: 25px;\n  background-color: rgba(0, 0, 0, 0.15); }\n\n.flat-text.full-width {\n  width: 100%; }\n\n.browser-window {\n  text-align: left;\n  width: 100%;\n  height: auto;\n  display: inline-block;\n  border-radius: 5px 5px 2px 2px;\n  background-color: #fff;\n  margin: 20px 0px;\n  overflow: hidden; }\n\n.browser-window .top-bar {\n  height: 30px;\n  border-radius: 5px 5px 0 0;\n  border-top: thin solid #eaeae9;\n  border-bottom: thin solid #dfdfde;\n  background: linear-gradient(#e7e7e6, #E2E2E1); }\n\n.browser-window .circle {\n  height: 10px;\n  width: 10px;\n  display: inline-block;\n  border-radius: 50%;\n  background-color: #fff;\n  margin-right: 1px; }\n\n#close-circle {\n  background-color: #FF5C5A; }\n\n#minimize-circle {\n  background-color: #FFBB50; }\n\n#maximize-circle {\n  background-color: #1BC656; }\n\n.browser-window .circles {\n  margin: 5px 12px; }\n\n.browser-window .content {\n  margin: 0;\n  width: 100%;\n  display: inline-block;\n  border-radius: 0 0 5px 5px;\n  background-color: #fafafa; }\n\n.browser-window .row {\n  margin: 0; }\n\n.clear {\n  clear: both; }\n\n.dynamic-color .red, .dynamic-color .pink, .dynamic-color .purple, .dynamic-color .deep-purple, .dynamic-color .indigo, .dynamic-color .blue, .dynamic-color .light-blue, .dynamic-color .cyan, .dynamic-color .teal, .dynamic-color .green, .dynamic-color .light-green, .dynamic-color .lime, .dynamic-color .yellow, .dynamic-color .amber, .dynamic-color .orange, .dynamic-color .deep-orange, .dynamic-color .brown, .dynamic-color .grey, .dynamic-color .blue-grey, .dynamic-color .black, .dynamic-color .white, .dynamic-color .transparent {\n  height: 55px;\n  width: 100%;\n  padding: 0 15px;\n  line-height: 55px;\n  font-weight: 500;\n  font-size: 12px;\n  display: block;\n  box-sizing: border-box; }\n\n.dynamic-color .col {\n  margin-bottom: 55px; }\n\n.center {\n  text-align: center;\n  vertical-align: middle; }\n\n.material-icons.icon-demo {\n  line-height: 50px; }\n\n.icon-container i {\n  font-size: 3em;\n  margin-bottom: 10px; }\n\n.icon-container .icon-preview {\n  height: 120px;\n  text-align: center; }\n\n.icon-container span {\n  display: block; }\n\n.icon-holder {\n  display: block;\n  text-align: center;\n  width: 150px;\n  height: 115px;\n  float: left;\n  margin: 0 0px 15px 0px; }\n\n.icon-holder p {\n  margin: 0 0; }\n\n.tabs-wrapper {\n  position: relative;\n  height: 48px; }\n\n.tabs-wrapper .row.pinned {\n  position: fixed;\n  width: 100%;\n  top: 0;\n  z-index: 10; }\n\n.shadow-demo {\n  background-color: #26a69a;\n  width: 100px;\n  height: 100px;\n  margin: 20px auto; }\n\n@media only screen and (max-width: 600px) {\n  .shadow-demo {\n    width: 150px;\n    height: 150px; } }\n\n.parallax-container .text-center {\n  position: absolute;\n  top: 50%;\n  left: 0;\n  right: 0;\n  margin-top: -27px; }\n\nul.table-of-contents {\n  margin-top: 0;\n  padding-top: 48px; }\n\ncode, pre {\n  position: relative;\n  font-size: 1.1rem; }\n\n.directory-markup {\n  font-size: 1rem;\n  line-height: 1.1rem !important; }\n\n:not(pre) > code[class*=\"language-\"] {\n  padding: .1em .25em;\n  border: solid 1px rgba(51, 51, 51, 0.12); }\n\npre[class*=\"language-\"] {\n  padding: 25px 12px 7px 12px;\n  border: solid 1px rgba(51, 51, 51, 0.12); }\n\npre[class*=\"language-\"]:before {\n  position: absolute;\n  padding: 1px 5px;\n  background: #e8e6e3;\n  top: 0;\n  left: 0;\n  font-family: \"Roboto\", sans-serif;\n  -webkit-font-smoothing: antialiased;\n  color: #555;\n  content: attr(class);\n  font-size: .9rem;\n  border: solid 1px rgba(51, 51, 51, 0.12);\n  border-top: none;\n  border-left: none; }\n\n.toc-wrapper {\n  position: relative;\n  margin-top: 42px; }\n\n.toc-wrapper.pin-bottom {\n  margin-top: 84px; }\n\n#carbonads {\n  max-width: 150px;\n  display: inline-block;\n  position: relative;\n  text-align: left;\n  -webkit-font-smoothing: antialiased; }\n\n#carbonads > span, #carbonads span.carbon-wrap {\n  height: 100px;\n  display: block; }\n\n#carbonads a.carbon-img {\n  height: 100px;\n  display: inline-block;\n  margin-right: 10px; }\n\n#carbonads a.carbon-text, #carbonads input[type=\"submit\"] {\n  position: relative;\n  top: 0;\n  width: 150px;\n  vertical-align: top;\n  display: inline-block;\n  font-size: 13px;\n  color: #E57373; }\n\n#carbonads a.carbon-poweredby {\n  position: relative;\n  left: 28px;\n  font-size: 11px;\n  color: #EF9A9A; }\n\n.buysellads #carbonads > span, .buysellads #carbonads span.carbon-wrap {\n  height: auto; }\n\n.buysellads #carbonads a.carbon-text {\n  top: 5px;\n  left: 0;\n  width: 130px;\n  display: block;\n  font-size: 13px;\n  -webkit-font-smoothing: antialiased;\n  color: #E57373; }\n\n.buysellads #carbonads a.carbon-poweredby {\n  top: 5px; }\n\n.buysellads-header #carbonads > span, .buysellads-header #carbonads span.carbon-wrap {\n  height: auto; }\n\n.buysellads-header #carbonads a.carbon-text {\n  color: #fff; }\n\n.buysellads-header #carbonads a.carbon-poweredby {\n  color: rgba(255, 255, 255, 0.8); }\n\n.buysellads-homepage #carbonads {\n  display: block;\n  overflow: hidden;\n  margin: 4em auto 0;\n  padding: 1em;\n  max-width: 360px;\n  border-radius: 2px;\n  background-color: rgba(255, 255, 255, 0.13); }\n\n.buysellads-homepage #carbonads span {\n  position: relative;\n  display: block;\n  overflow: hidden; }\n\n.buysellads-homepage #carbonads .carbon-img {\n  float: left;\n  margin-right: 1em; }\n\n.buysellads-homepage #carbonads .carbon-text {\n  max-width: calc(100% - 135px - 1em);\n  width: auto; }\n\n.buysellads-homepage #carbonads .carbon-poweredby {\n  position: absolute;\n  left: auto;\n  right: 0;\n  bottom: -4px; }\n\n.buysellads {\n  -webkit-font-smoothing: antialiased;\n  position: relative; }\n\n.buysellads.buysellads-demo {\n  bottom: 20px;\n  right: 20px;\n  position: fixed;\n  padding: 10px;\n  background-color: rgba(255, 255, 255, 0.9);\n  z-index: 1000; }\n\n.buysellads.buysellads-demo #carbonads a.carbon-img {\n  margin-right: 0; }\n\n.buysellads.buysellads-demo #carbonads a.carbon-text {\n  top: 0; }\n\n.buysellads.buysellads-demo a.close {\n  text-align: center;\n  background-color: #fff;\n  border-radius: 50%;\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1);\n  height: 24px;\n  width: 24px;\n  position: absolute;\n  top: -6px;\n  right: -6px;\n  z-index: 1;\n  transition: background-color .2s; }\n\n.buysellads.buysellads-demo a.close:hover {\n  background-color: #ddd; }\n\n.buysellads.buysellads-demo a.close .material-icons {\n  font-size: 18px;\n  line-height: 24px; }\n\n.buysellads .bsa_it.one {\n  width: 130px;\n  position: absolute;\n  left: 0;\n  top: 50px; }\n\n.buysellads .bsa_it.one .bsa_it_p {\n  left: 0;\n  bottom: -15px; }\n\n.buysellads .bsa_it.one .bsa_it_ad .bsa_it_t {\n  color: #E57373; }\n\n.buysellads .bsa_it.one .bsa_it_ad .bsa_it_d {\n  color: #EF9A9A; }\n\n.buysellads .bsa_it_ad a {\n  display: block;\n  width: 130px; }\n\n.buysellads-header {\n  margin-top: 30px; }\n\n.buysellads-header .bsa_it.one .bsa_it_p {\n  bottom: -20px; }\n\n.bsa_it.one {\n  min-width: 230px;\n  max-width: 270px;\n  display: inline-block;\n  text-align: left; }\n\n.bsa_it.one .bsa_it_ad {\n  border: 0;\n  padding: 0;\n  background-color: transparent; }\n\n.bsa_it.one .bsa_it_ad .bsa_it_t {\n  color: #fff; }\n\n.bsa_it.one .bsa_it_ad .bsa_it_d {\n  color: #FFCDD2; }\n\n.bsa_it.one .bsa_it_p {\n  right: auto;\n  left: 40px;\n  bottom: -5px; }\n\n.bsa_it.one .bsa_it_p a {\n  color: #FFCDD2; }\n\nfooter {\n  font-size: .9rem; }\n\nbody.parallax-demo footer {\n  margin-top: 0; }\n\n.image-container {\n  width: 100%; }\n\n.image-container img {\n  max-width: 100%; }\n\n@media only screen and (max-width: 600px) {\n  .mobile-image {\n    max-width: 100%; } }\n\n.waves-color-demo .collection-item {\n  height: 37px;\n  line-height: 37px;\n  box-sizing: content-box; }\n\n.waves-color-demo .collection-item code {\n  line-height: 37px; }\n\n.waves-color-demo .btn:not(.waves-light), .waves-color-demo .btn-large:not(.waves-light) {\n  background-color: #fff;\n  color: #212121; }\n\n.card-panel span, .card-content p {\n  -webkit-font-smoothing: antialiased; }\n\n#images .card-panel .row {\n  margin-bottom: 0; }\n\n.pushpin-demo {\n  position: relative;\n  height: 100px; }\n\n#pushpin-demo-1 {\n  display: block;\n  height: inherit;\n  background-color: #ddd; }\n\n.valign-demo {\n  height: 400px;\n  background-color: #ddd; }\n\n.talign-demo {\n  height: 100px;\n  background-color: #ddd; }\n\n#staggered-test li, #image-test {\n  opacity: 0; }\n\n#tx-live-lang-container {\n  background-color: #fcfcfc;\n  z-index: 999; }\n\n#tx-live-lang-container #tx-live-lang-picker {\n  background-color: #fcfcfc; }\n\n#tx-live-lang-container #tx-live-lang-picker li {\n  color: rgba(0, 0, 0, 0.87); }\n\n#tx-live-lang-container #tx-live-lang-picker li:hover {\n  color: inherit;\n  background-color: #fdeaeb; }\n\n#tx-live-lang-container .txlive-langselector-toggle {\n  border-bottom: 2px solid #ee6e73; }\n\n#tx-live-lang-container .txlive-langselector-current {\n  color: rgba(0, 0, 0, 0.87); }\n\n#tx-live-lang-container .txlive-langselector-marker {\n  border-bottom: 4px solid rgba(0, 0, 0, 0.61); }\n\n#download-thanks {\n  display: none; }\n\n#twitter-widget-0 {\n  width: 300px !important; }\n\n#nav-mobile li.search {\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 120px;\n  margin-top: 1px;\n  padding: 1px 0 0 0;\n  z-index: 2; }\n\n#nav-mobile li.search:hover {\n  background-color: #fff; }\n\n#nav-mobile li.search .search-wrapper {\n  margin: 0 12px;\n  transition: margin .25s ease; }\n\n#nav-mobile li.search .search-wrapper.focused {\n  margin: 0; }\n\n#nav-mobile li.search .search-wrapper input#search {\n  display: block;\n  font-size: 16px;\n  font-weight: 300;\n  width: 100%;\n  height: 45px;\n  margin: 0;\n  padding: 0 45px 0 15px;\n  border: 0; }\n\n#nav-mobile li.search .search-wrapper input#search:focus {\n  outline: none;\n  box-shadow: none; }\n\n#nav-mobile li.search .search-wrapper i.material-icons {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  cursor: pointer; }\n\n#nav-mobile li.search .search-results {\n  margin: 0;\n  border-top: 1px solid #e9e9e9;\n  background-color: #fff; }\n\n#nav-mobile li.search .search-results a {\n  font-size: 12px;\n  white-space: nowrap;\n  display: block; }\n\n#nav-mobile li.search .search-results a:hover, #nav-mobile li.search .search-results a.focused {\n  background-color: #eee;\n  outline: none; }\n\nbody.themes .themes-section {\n  padding: 60px 0 40px 0; }\n\nbody.themes .themes-section .theme-preview {\n  width: 100%; }\n\nbody.themes .themes-section h4 {\n  margin-top: 0; }\n\n.shopify-buy-frame, .shopify-btn {\n  float: left; }\n\n.shopify-buy-frame {\n  width: 105px; }\n\n.shopify-btn {\n  background-color: #78B657;\n  font-size: 15px;\n  font-family: 'Helvetica Neue';\n  letter-spacing: .3px;\n  border-radius: 2px;\n  color: #fff;\n  padding: 10px 20px;\n  transition: background .2s;\n  margin: 20px 0 0 5px;\n  -webkit-font-smoothing: antialiased; }\n\n.shopify-btn:hover {\n  background-color: #5f9d3e; }\n\n.themes-banner {\n  text-align: center;\n  background-color: #5f5f5f;\n  padding: 30px 0; }\n\n.themes-banner p {\n  font-size: 18px;\n  color: #fff; }\n\n.themes-banner a {\n  color: #baef74; }\n", ""]);

// exports


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(1)();
// imports


// module
exports.push([module.i, "/*\n Solarized Color Schemes originally by Ethan Schoonover\n http://ethanschoonover.com/solarized\n\n Ported for PrismJS by Hector Matos\n Website: https://krakendev.io\n Twitter Handle: https://twitter.com/allonsykraken)\n*/\n/*\nSOLARIZED HEX\n--------- -------\nbase03    #002b36\nbase02    #073642\nbase01    #586e75\nbase00    #657b83\nbase0     #839496\nbase1     #93a1a1\nbase2     #eee8d5\nbase3     #fdf6e3\nyellow    #b58900\norange    #cb4b16\nred       #dc322f\nmagenta   #d33682\nviolet    #6c71c4\nblue      #268bd2\ncyan      #2aa198\ngreen     #859900\n*/\ncode[class*=\"language-\"],\npre[class*=\"language-\"] {\n  color: #657b83;\n  /* base00 */\n  font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\n  text-align: left;\n  white-space: pre;\n  word-spacing: normal;\n  word-break: normal;\n  word-wrap: normal;\n  line-height: 1.5;\n  -moz-tab-size: 4;\n  -o-tab-size: 4;\n  tab-size: 4;\n  -webkit-hyphens: none;\n  -moz-hyphens: none;\n  -ms-hyphens: none;\n  hyphens: none; }\n\npre[class*=\"language-\"]::-moz-selection, pre[class*=\"language-\"] ::-moz-selection,\ncode[class*=\"language-\"]::-moz-selection, code[class*=\"language-\"] ::-moz-selection {\n  background: #073642;\n  /* base02 */ }\n\npre[class*=\"language-\"]::selection, pre[class*=\"language-\"] ::selection,\ncode[class*=\"language-\"]::selection, code[class*=\"language-\"] ::selection {\n  background: #073642;\n  /* base02 */ }\n\n/* Code blocks */\npre[class*=\"language-\"] {\n  padding: 1em;\n  margin: .5em 0;\n  overflow: auto;\n  border-radius: 0.3em; }\n\n:not(pre) > code[class*=\"language-\"],\npre[class*=\"language-\"] {\n  background-color: #fdf6e3;\n  /* base3 */ }\n\n/* Inline code */\n:not(pre) > code[class*=\"language-\"] {\n  padding: .1em;\n  border-radius: .3em; }\n\n.token.comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n  color: #93a1a1;\n  /* base1 */ }\n\n.token.punctuation {\n  color: #586e75;\n  /* base01 */ }\n\n.namespace {\n  opacity: .7; }\n\n.token.property,\n.token.tag,\n.token.boolean,\n.token.number,\n.token.constant,\n.token.symbol,\n.token.deleted {\n  color: #268bd2;\n  /* blue */ }\n\n.token.selector,\n.token.attr-name,\n.token.string,\n.token.char,\n.token.builtin,\n.token.url,\n.token.inserted {\n  color: #2aa198;\n  /* cyan */ }\n\n.token.entity {\n  color: #657b83;\n  /* base00 */\n  background: #eee8d5;\n  /* base2 */ }\n\n.token.atrule,\n.token.attr-value,\n.token.keyword {\n  color: #859900;\n  /* green */ }\n\n.token.function {\n  color: #b58900;\n  /* yellow */ }\n\n.token.regex,\n.token.important,\n.token.variable {\n  color: #cb4b16;\n  /* orange */ }\n\n.token.important,\n.token.bold {\n  font-weight: bold; }\n\n.token.italic {\n  font-style: italic; }\n\n.token.entity {\n  cursor: help; }\n", ""]);

// exports


/***/ }),
/* 48 */
/***/ (function(module, exports) {

// empty (null-loader)

/***/ }),
/* 49 */
/***/ (function(module, exports) {

// empty (null-loader)

/***/ }),
/* 50 */
/***/ (function(module, exports) {

// empty (null-loader)

/***/ }),
/* 51 */
/***/ (function(module, exports) {

// empty (null-loader)

/***/ }),
/* 52 */
/***/ (function(module, exports) {

// empty (null-loader)

/***/ }),
/* 53 */
/***/ (function(module, exports) {

// empty (null-loader)

/***/ }),
/* 54 */
/***/ (function(module, exports) {

// empty (null-loader)

/***/ }),
/* 55 */
/***/ (function(module, exports) {

// empty (null-loader)

/***/ }),
/* 56 */
/***/ (function(module, exports) {

// empty (null-loader)

/***/ }),
/* 57 */
/***/ (function(module, exports) {

// empty (null-loader)

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(42);
if(typeof content === 'string') content = [[module.i, content, '']];
// add the styles to the DOM
var update = __webpack_require__(2)(content, {});
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../node_modules/css-loader/index.js!../node_modules/sass-loader/lib/loader.js!./header.scss", function() {
			var newContent = require("!!../node_modules/css-loader/index.js!../node_modules/sass-loader/lib/loader.js!./header.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(43);
if(typeof content === 'string') content = [[module.i, content, '']];
// add the styles to the DOM
var update = __webpack_require__(2)(content, {});
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../node_modules/css-loader/index.js!../node_modules/sass-loader/lib/loader.js!./playground.scss", function() {
			var newContent = require("!!../node_modules/css-loader/index.js!../node_modules/sass-loader/lib/loader.js!./playground.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(45);
if(typeof content === 'string') content = [[module.i, content, '']];
// add the styles to the DOM
var update = __webpack_require__(2)(content, {});
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../node_modules/css-loader/index.js!../node_modules/sass-loader/lib/loader.js!./tutorial.scss", function() {
			var newContent = require("!!../node_modules/css-loader/index.js!../node_modules/sass-loader/lib/loader.js!./tutorial.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(47);
if(typeof content === 'string') content = [[module.i, content, '']];
// add the styles to the DOM
var update = __webpack_require__(2)(content, {});
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../css-loader/index.js!../../sass-loader/lib/loader.js!./prism-solarizedlight.css", function() {
			var newContent = require("!!../../css-loader/index.js!../../sass-loader/lib/loader.js!./prism-solarizedlight.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNjI5YzljZGRhOTViNDUxNmUwNGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL34vc291cmNlLW1hcC9saWIvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9kZW1vL3N1YmhlYWRlci5qc3giLCJ3ZWJwYWNrOi8vLy4vfi9zdGFja2ZyYW1lL3N0YWNrZnJhbWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9zdHJlYW15LmpzIiwid2VicGFjazovLy8uL34vc291cmNlLW1hcC9saWIvYXJyYXktc2V0LmpzIiwid2VicGFjazovLy8uL34vc291cmNlLW1hcC9saWIvYmFzZTY0LXZscS5qcyIsIndlYnBhY2s6Ly8vLi9+L3NvdXJjZS1tYXAvbGliL3NvdXJjZS1tYXAtZ2VuZXJhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9zdHJlYW15LWRvbS5qcyIsIndlYnBhY2s6Ly8vLi9kZW1vL2hlYWRlci5qc3giLCJ3ZWJwYWNrOi8vLy4vZGVtby9pbmZvcy5qc3giLCJ3ZWJwYWNrOi8vLy4vZGVtby9wbGF5Z3JvdW5kLmpzeCIsIndlYnBhY2s6Ly8vLi9kZW1vL3R1dG9yaWFsLmpzeCIsIndlYnBhY2s6Ly8vLi9kZW1vL3N0eWxlcy5zY3NzPzExODAiLCJ3ZWJwYWNrOi8vLy4vfi9tYXRlcmlhbGl6ZS1jc3MvY3NzL2docGFnZXMtbWF0ZXJpYWxpemUuY3NzPzZjZjciLCJ3ZWJwYWNrOi8vLy4vZGVtby9kZW1vX2FwcC5qc3giLCJ3ZWJwYWNrOi8vLy4vZGVtby91dGlscy5qc3giLCJ3ZWJwYWNrOi8vLy4vfi9kZWVwLWVxdWFsL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vZGVlcC1lcXVhbC9saWIvaXNfYXJndW1lbnRzLmpzIiwid2VicGFjazovLy8uL34vZGVlcC1lcXVhbC9saWIva2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9+L2Vycm9yLXN0YWNrLXBhcnNlci9lcnJvci1zdGFjay1wYXJzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9wcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tanN4LmpzIiwid2VicGFjazovLy8uL34vcHJpc21qcy9wcmlzbS5qcyIsIndlYnBhY2s6Ly8vLi9+L3NvdXJjZS1tYXAvbGliL2Jhc2U2NC5qcyIsIndlYnBhY2s6Ly8vLi9+L3NvdXJjZS1tYXAvbGliL2JpbmFyeS1zZWFyY2guanMiLCJ3ZWJwYWNrOi8vLy4vfi9zb3VyY2UtbWFwL2xpYi9tYXBwaW5nLWxpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zb3VyY2UtbWFwL2xpYi9xdWljay1zb3J0LmpzIiwid2VicGFjazovLy8uL34vc291cmNlLW1hcC9saWIvc291cmNlLW1hcC1jb25zdW1lci5qcyIsIndlYnBhY2s6Ly8vLi9+L3NvdXJjZS1tYXAvbGliL3NvdXJjZS1ub2RlLmpzIiwid2VicGFjazovLy8uL34vc291cmNlLW1hcC9zb3VyY2UtbWFwLmpzIiwid2VicGFjazovLy8uL34vc3RhY2stZ2VuZXJhdG9yL3N0YWNrLWdlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9+L3N0YWNrdHJhY2UtZ3BzL3N0YWNrdHJhY2UtZ3BzLmpzIiwid2VicGFjazovLy8uL34vc3RhY2t0cmFjZS1qcy9zdGFja3RyYWNlLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL3JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvc3RhY2t0cmFjZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvc3RyZWFteS1oZWxwZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9zdHJlYW15LWh5cGVyc2NyaXB0LmpzIiwid2VicGFjazovLy8uL3Rlc3QvaGVscGVycy90ZXN0LWNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9kZW1vL2hlYWRlci5zY3NzIiwid2VicGFjazovLy8uL2RlbW8vcGxheWdyb3VuZC5zY3NzIiwid2VicGFjazovLy8uL2RlbW8vc3R5bGVzLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vZGVtby90dXRvcmlhbC5zY3NzIiwid2VicGFjazovLy8uL34vbWF0ZXJpYWxpemUtY3NzL2Nzcy9naHBhZ2VzLW1hdGVyaWFsaXplLmNzcyIsIndlYnBhY2s6Ly8vLi9+L3ByaXNtanMvdGhlbWVzL3ByaXNtLXNvbGFyaXplZGxpZ2h0LmNzcyIsIndlYnBhY2s6Ly8vLi9+L21hdGVyaWFsaXplLWNzcy9mb250cy9yb2JvdG8vUm9ib3RvLUJvbGQud29mZiIsIndlYnBhY2s6Ly8vLi9+L21hdGVyaWFsaXplLWNzcy9mb250cy9yb2JvdG8vUm9ib3RvLUJvbGQud29mZjIiLCJ3ZWJwYWNrOi8vLy4vfi9tYXRlcmlhbGl6ZS1jc3MvZm9udHMvcm9ib3RvL1JvYm90by1MaWdodC53b2ZmIiwid2VicGFjazovLy8uL34vbWF0ZXJpYWxpemUtY3NzL2ZvbnRzL3JvYm90by9Sb2JvdG8tTGlnaHQud29mZjIiLCJ3ZWJwYWNrOi8vLy4vfi9tYXRlcmlhbGl6ZS1jc3MvZm9udHMvcm9ib3RvL1JvYm90by1NZWRpdW0ud29mZiIsIndlYnBhY2s6Ly8vLi9+L21hdGVyaWFsaXplLWNzcy9mb250cy9yb2JvdG8vUm9ib3RvLU1lZGl1bS53b2ZmMiIsIndlYnBhY2s6Ly8vLi9+L21hdGVyaWFsaXplLWNzcy9mb250cy9yb2JvdG8vUm9ib3RvLVJlZ3VsYXIud29mZiIsIndlYnBhY2s6Ly8vLi9+L21hdGVyaWFsaXplLWNzcy9mb250cy9yb2JvdG8vUm9ib3RvLVJlZ3VsYXIud29mZjIiLCJ3ZWJwYWNrOi8vLy4vfi9tYXRlcmlhbGl6ZS1jc3MvZm9udHMvcm9ib3RvL1JvYm90by1UaGluLndvZmYiLCJ3ZWJwYWNrOi8vLy4vfi9tYXRlcmlhbGl6ZS1jc3MvZm9udHMvcm9ib3RvL1JvYm90by1UaGluLndvZmYyIiwid2VicGFjazovLy8uL2RlbW8vaGVhZGVyLnNjc3M/MDA5MCIsIndlYnBhY2s6Ly8vLi9kZW1vL3BsYXlncm91bmQuc2Nzcz80ZTJiIiwid2VicGFjazovLy8uL2RlbW8vdHV0b3JpYWwuc2Nzcz8wNTcyIiwid2VicGFjazovLy8uL34vcHJpc21qcy90aGVtZXMvcHJpc20tc29sYXJpemVkbGlnaHQuY3NzP2MyN2EiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImxpc3QiLCJ0b1N0cmluZyIsInJlc3VsdCIsImkiLCJsZW5ndGgiLCJpdGVtIiwicHVzaCIsImpvaW4iLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJpZCIsImdldEFyZyIsImFBcmdzIiwiYU5hbWUiLCJhRGVmYXVsdFZhbHVlIiwiYXJndW1lbnRzIiwiRXJyb3IiLCJ1cmxSZWdleHAiLCJkYXRhVXJsUmVnZXhwIiwidXJsUGFyc2UiLCJhVXJsIiwibWF0Y2giLCJzY2hlbWUiLCJhdXRoIiwiaG9zdCIsInBvcnQiLCJwYXRoIiwidXJsR2VuZXJhdGUiLCJhUGFyc2VkVXJsIiwidXJsIiwibm9ybWFsaXplIiwiYVBhdGgiLCJpc0Fic29sdXRlIiwicGFydHMiLCJzcGxpdCIsInBhcnQiLCJ1cCIsInNwbGljZSIsImFSb290IiwiYVBhdGhVcmwiLCJhUm9vdFVybCIsImpvaW5lZCIsImNoYXJBdCIsInJlcGxhY2UiLCJyZWxhdGl2ZSIsImxldmVsIiwiaW5kZXhPZiIsImluZGV4IiwibGFzdEluZGV4T2YiLCJzbGljZSIsIkFycmF5Iiwic3Vic3RyIiwic3VwcG9ydHNOdWxsUHJvdG8iLCJvYmoiLCJPYmplY3QiLCJjcmVhdGUiLCJpZGVudGl0eSIsInMiLCJ0b1NldFN0cmluZyIsImFTdHIiLCJpc1Byb3RvU3RyaW5nIiwiZnJvbVNldFN0cmluZyIsImNoYXJDb2RlQXQiLCJjb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyIsIm1hcHBpbmdBIiwibWFwcGluZ0IiLCJvbmx5Q29tcGFyZU9yaWdpbmFsIiwiY21wIiwic291cmNlIiwib3JpZ2luYWxMaW5lIiwib3JpZ2luYWxDb2x1bW4iLCJnZW5lcmF0ZWRDb2x1bW4iLCJnZW5lcmF0ZWRMaW5lIiwibmFtZSIsImNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkIiwib25seUNvbXBhcmVHZW5lcmF0ZWQiLCJzdHJjbXAiLCJhU3RyMSIsImFTdHIyIiwiY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQiLCJTdWJoZWFkZXIiLCJ0aXRsZSIsInN1YnRpdGxlIiwicm9vdCIsImZhY3RvcnkiLCJkZWZpbmUiLCJTdGFja0ZyYW1lIiwiX2lzTnVtYmVyIiwibiIsImlzTmFOIiwicGFyc2VGbG9hdCIsImlzRmluaXRlIiwiX2NhcGl0YWxpemUiLCJzdHIiLCJ0b1VwcGVyQ2FzZSIsInN1YnN0cmluZyIsIl9nZXR0ZXIiLCJwIiwiYm9vbGVhblByb3BzIiwibnVtZXJpY1Byb3BzIiwic3RyaW5nUHJvcHMiLCJhcnJheVByb3BzIiwicHJvcHMiLCJjb25jYXQiLCJoYXNPd25Qcm9wZXJ0eSIsInVuZGVmaW5lZCIsInByb3RvdHlwZSIsImdldEFyZ3MiLCJhcmdzIiwic2V0QXJncyIsInYiLCJjYWxsIiwiVHlwZUVycm9yIiwiZ2V0RXZhbE9yaWdpbiIsImV2YWxPcmlnaW4iLCJzZXRFdmFsT3JpZ2luIiwiZnVuY3Rpb25OYW1lIiwiZ2V0RnVuY3Rpb25OYW1lIiwiZmlsZU5hbWUiLCJnZXRGaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJnZXRMaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwiZ2V0Q29sdW1uTnVtYmVyIiwiQm9vbGVhbiIsImoiLCJOdW1iZXIiLCJrIiwiU3RyaW5nIiwibWVyZ2UkIiwiaXNTdHJlYW0iLCJzdHJlYW0iLCJpbml0X3ZhbHVlIiwidmFsdWUiLCJ1cGRhdGUiLCJJU19TVFJFQU0iLCJsaXN0ZW5lcnMiLCJtYXAiLCJmbiIsImlzIiwiY3VyIiwiZmxhdE1hcCIsImZpbHRlciIsImRlZXBTZWxlY3QiLCJkaXN0aW5jdCIsIiQiLCJzZWxlY3RvckFyciIsInF1ZXJ5IiwidW50aWwiLCJzdG9wRW1pdCQiLCJwYXRjaCIsInBhcnRpYWxDaGFuZ2UiLCJyZWR1Y2UiLCJzdGFydFZhbHVlIiwidmFsdWVzQ2hhbmdlZCIsIm9sZFZhbHVlIiwibmV3VmFsdWUiLCJwYXJlbnQkIiwibm90aWZ5TGlzdGVuZXJzIiwiZm9yRWFjaCIsIm5vdGlmeUxpc3RlbmVyIiwibGlzdGVuZXIiLCJmb3JrJCIsIm1hcEZ1bmN0aW9uIiwiaW5pdFZhbHVlIiwibmV3U3RyZWFtIiwibWFwVmFsdWUiLCJnZXRDaGlsZFN0cmVhbVZhbHVlIiwiZmxhdE1hcFZhbHVlIiwidXBkYXRlT3V0ZXJTdHJlYW0iLCJmaWx0ZXJWYWx1ZSIsInNlbGVjdG9yIiwic2VsZWN0b3JzIiwic2VsZWN0IiwicGFyZW50IiwiaW5wdXQiLCJkZWVwU2VsZWN0VmFsdWUiLCJpc0FycmF5IiwiYSIsImIiLCJhc3NpZ24iLCJzdG9wRW1pdFZhbHVlcyQiLCJzdWJzY3JpYmVUbyIsInVuc3Vic2NyaWJlRnJvbSIsInN0b3BFbWl0VmFsdWVzIiwiYWdncmVnYXRlIiwicmVkdWNlVmFsdWUiLCJwb3RlbnRpYWxTdHJlYW1zQXJyIiwidmFsdWVzIiwiYWN0dWFsU3RyZWFtcyIsInN0cmVhbXMiLCJwb3RlbnRpYWxTdHJlYW0iLCJ0cmlnZ2VyTWVyZ2VkU3RyZWFtVXBkYXRlIiwidXBkYXRlTWVyZ2VkU3RyZWFtIiwidXRpbCIsInJlcXVpcmUiLCJoYXMiLCJBcnJheVNldCIsIl9hcnJheSIsIl9zZXQiLCJmcm9tQXJyYXkiLCJBcnJheVNldF9mcm9tQXJyYXkiLCJhQXJyYXkiLCJhQWxsb3dEdXBsaWNhdGVzIiwic2V0IiwibGVuIiwiYWRkIiwic2l6ZSIsIkFycmF5U2V0X3NpemUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiQXJyYXlTZXRfYWRkIiwic1N0ciIsImlzRHVwbGljYXRlIiwiaWR4IiwiQXJyYXlTZXRfaGFzIiwiQXJyYXlTZXRfaW5kZXhPZiIsImF0IiwiQXJyYXlTZXRfYXQiLCJhSWR4IiwidG9BcnJheSIsIkFycmF5U2V0X3RvQXJyYXkiLCJiYXNlNjQiLCJWTFFfQkFTRV9TSElGVCIsIlZMUV9CQVNFIiwiVkxRX0JBU0VfTUFTSyIsIlZMUV9DT05USU5VQVRJT05fQklUIiwidG9WTFFTaWduZWQiLCJhVmFsdWUiLCJmcm9tVkxRU2lnbmVkIiwiaXNOZWdhdGl2ZSIsInNoaWZ0ZWQiLCJlbmNvZGUiLCJiYXNlNjRWTFFfZW5jb2RlIiwiZW5jb2RlZCIsImRpZ2l0IiwidmxxIiwiZGVjb2RlIiwiYmFzZTY0VkxRX2RlY29kZSIsImFJbmRleCIsImFPdXRQYXJhbSIsInN0ckxlbiIsInNoaWZ0IiwiY29udGludWF0aW9uIiwicmVzdCIsImJhc2U2NFZMUSIsIk1hcHBpbmdMaXN0IiwiU291cmNlTWFwR2VuZXJhdG9yIiwiX2ZpbGUiLCJfc291cmNlUm9vdCIsIl9za2lwVmFsaWRhdGlvbiIsIl9zb3VyY2VzIiwiX25hbWVzIiwiX21hcHBpbmdzIiwiX3NvdXJjZXNDb250ZW50cyIsIl92ZXJzaW9uIiwiZnJvbVNvdXJjZU1hcCIsIlNvdXJjZU1hcEdlbmVyYXRvcl9mcm9tU291cmNlTWFwIiwiYVNvdXJjZU1hcENvbnN1bWVyIiwic291cmNlUm9vdCIsImdlbmVyYXRvciIsImZpbGUiLCJlYWNoTWFwcGluZyIsIm1hcHBpbmciLCJuZXdNYXBwaW5nIiwiZ2VuZXJhdGVkIiwibGluZSIsImNvbHVtbiIsIm9yaWdpbmFsIiwiYWRkTWFwcGluZyIsInNvdXJjZXMiLCJzb3VyY2VGaWxlIiwiY29udGVudCIsInNvdXJjZUNvbnRlbnRGb3IiLCJzZXRTb3VyY2VDb250ZW50IiwiU291cmNlTWFwR2VuZXJhdG9yX2FkZE1hcHBpbmciLCJfdmFsaWRhdGVNYXBwaW5nIiwiU291cmNlTWFwR2VuZXJhdG9yX3NldFNvdXJjZUNvbnRlbnQiLCJhU291cmNlRmlsZSIsImFTb3VyY2VDb250ZW50Iiwia2V5cyIsImFwcGx5U291cmNlTWFwIiwiU291cmNlTWFwR2VuZXJhdG9yX2FwcGx5U291cmNlTWFwIiwiYVNvdXJjZU1hcFBhdGgiLCJuZXdTb3VyY2VzIiwibmV3TmFtZXMiLCJ1bnNvcnRlZEZvckVhY2giLCJvcmlnaW5hbFBvc2l0aW9uRm9yIiwiU291cmNlTWFwR2VuZXJhdG9yX3ZhbGlkYXRlTWFwcGluZyIsImFHZW5lcmF0ZWQiLCJhT3JpZ2luYWwiLCJhU291cmNlIiwiSlNPTiIsInN0cmluZ2lmeSIsIl9zZXJpYWxpemVNYXBwaW5ncyIsIlNvdXJjZU1hcEdlbmVyYXRvcl9zZXJpYWxpemVNYXBwaW5ncyIsInByZXZpb3VzR2VuZXJhdGVkQ29sdW1uIiwicHJldmlvdXNHZW5lcmF0ZWRMaW5lIiwicHJldmlvdXNPcmlnaW5hbENvbHVtbiIsInByZXZpb3VzT3JpZ2luYWxMaW5lIiwicHJldmlvdXNOYW1lIiwicHJldmlvdXNTb3VyY2UiLCJuZXh0IiwibmFtZUlkeCIsInNvdXJjZUlkeCIsIm1hcHBpbmdzIiwiX2dlbmVyYXRlU291cmNlc0NvbnRlbnQiLCJTb3VyY2VNYXBHZW5lcmF0b3JfZ2VuZXJhdGVTb3VyY2VzQ29udGVudCIsImFTb3VyY2VzIiwiYVNvdXJjZVJvb3QiLCJrZXkiLCJ0b0pTT04iLCJTb3VyY2VNYXBHZW5lcmF0b3JfdG9KU09OIiwidmVyc2lvbiIsIm5hbWVzIiwic291cmNlc0NvbnRlbnQiLCJTb3VyY2VNYXBHZW5lcmF0b3JfdG9TdHJpbmciLCJyZW5kZXIiLCJkaWZmIiwiY3JlYXRlTm9kZSIsIlRFWFRfTk9ERSIsImNvbXBvbmVudCIsInBhcmVudEVsZW1lbnQiLCJ2ZG9tJCIsIm9sZEVsZW1lbnQiLCJlbGVtZW50Iiwib2xkVmVyc2lvbiIsIm9sZENoaWxkcmVuIiwiY2hpbGRyZW4iLCJ0YWciLCJhcHBlbmRDaGlsZCIsInBhcnNlIiwibmV3Q2hpbGRyZW4iLCJuZXdWZXJzaW9uIiwibmV3RWxlbWVudCIsIndpbmRvdyIsIlRleHQiLCJub2RlVmFsdWUiLCJub2RlTmFtZSIsInRvTG93ZXJDYXNlIiwicmVwbGFjZUNoaWxkIiwiZGlmZkF0dHJpYnV0ZXMiLCJkaWZmQ2hpbGRyZW4iLCJhcHBseVByb3BlcnR5VG9FbGVtZW50IiwiYXR0cmlidXRlIiwiYXBwbHlBdHRyaWJ1dGUiLCJjbGVhbnVwQXR0cmlidXRlcyIsImNsYXNzTmFtZSIsInN0eWxlIiwicmVtb3ZlQXR0cmlidXRlIiwidW5pZnlDaGlsZHJlbiIsImNoaWxkIiwib2xkQ2hpbGROb2RlcyIsImNoaWxkTm9kZXMiLCJ1bmlmaWVkQ2hpbGRyZW4iLCJ1bmlmaWVkT2xkQ2hpbGRyZW4iLCJvbGRDaGlsZENoaWxkcmVuIiwicmVtb3ZlQ2hpbGQiLCJsYXN0Q2hpbGQiLCJkb2N1bWVudCIsImNyZWF0ZVRleHROb2RlIiwiY3JlYXRlRWxlbWVudCIsIkhlYWRlciIsInNjcm9sbCQiLCJhZGRFdmVudExpc3RlbmVyIiwiaGVhZGVySGlkZGVuJCIsImhlYWRlciIsImhpZGRlbiIsImUiLCJ0YXJnZXQiLCJ0YWdOYW1lIiwic2Nyb2xsVXAiLCJib2R5Iiwic2Nyb2xsSGVpZ2h0Iiwic2Nyb2xsVG9wIiwic2Nyb2xsWSIsInNjcm9sbFRvIiwidG8iLCJkdXJhdGlvbiIsImRpZmZlcmVuY2UiLCJwZXJUaWNrIiwic2V0VGltZW91dCIsIkluZm9CdWxsZXQiLCJpY29uIiwiSW5mb3MiLCJQbGF5Z3JvdW5kIiwiVHV0b3JpYWwiLCJyb3V0ZXIkIiwiYXBwIiwicGFyYW1zIiwicXVlcnlTZWxlY3RvciIsIk1hcmt1cCIsImNoaWxkcmVuJCIsImNvZGUkIiwiY29kZSIsInN0cmlwcGVkTWFyZ2luQ29kZSIsInRyaW0iLCJodG1sIiwiaGlnaGxpZ2h0IiwibGFuZ3VhZ2VzIiwianN4IiwiT3V0cHV0IiwicFNsaWNlIiwib2JqZWN0S2V5cyIsImlzQXJndW1lbnRzIiwiZGVlcEVxdWFsIiwiYWN0dWFsIiwiZXhwZWN0ZWQiLCJvcHRzIiwiRGF0ZSIsImdldFRpbWUiLCJzdHJpY3QiLCJvYmpFcXVpdiIsImlzVW5kZWZpbmVkT3JOdWxsIiwiaXNCdWZmZXIiLCJ4IiwiY29weSIsImthIiwia2IiLCJzb3J0Iiwic3VwcG9ydHNBcmd1bWVudHNDbGFzcyIsInN1cHBvcnRlZCIsInVuc3VwcG9ydGVkIiwib2JqZWN0IiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzaGltIiwiRXJyb3JTdGFja1BhcnNlciIsIkZJUkVGT1hfU0FGQVJJX1NUQUNLX1JFR0VYUCIsIkNIUk9NRV9JRV9TVEFDS19SRUdFWFAiLCJTQUZBUklfTkFUSVZFX0NPREVfUkVHRVhQIiwiRXJyb3JTdGFja1BhcnNlciQkcGFyc2UiLCJlcnJvciIsInN0YWNrdHJhY2UiLCJwYXJzZU9wZXJhIiwic3RhY2siLCJwYXJzZVY4T3JJRSIsInBhcnNlRkZPclNhZmFyaSIsImV4dHJhY3RMb2NhdGlvbiIsIkVycm9yU3RhY2tQYXJzZXIkJGV4dHJhY3RMb2NhdGlvbiIsInVybExpa2UiLCJyZWdFeHAiLCJleGVjIiwiRXJyb3JTdGFja1BhcnNlciQkcGFyc2VWOE9ySUUiLCJmaWx0ZXJlZCIsInRva2VucyIsImxvY2F0aW9uUGFydHMiLCJwb3AiLCJFcnJvclN0YWNrUGFyc2VyJCRwYXJzZUZGT3JTYWZhcmkiLCJFcnJvclN0YWNrUGFyc2VyJCRwYXJzZU9wZXJhIiwibWVzc2FnZSIsInBhcnNlT3BlcmE5IiwicGFyc2VPcGVyYTEwIiwicGFyc2VPcGVyYTExIiwiRXJyb3JTdGFja1BhcnNlciQkcGFyc2VPcGVyYTkiLCJsaW5lUkUiLCJsaW5lcyIsIkVycm9yU3RhY2tQYXJzZXIkJHBhcnNlT3BlcmExMCIsIkVycm9yU3RhY2tQYXJzZXIkJHBhcnNlT3BlcmExMSIsImZ1bmN0aW9uQ2FsbCIsImFyZ3NSYXciLCJQcmlzbSIsImphdmFzY3JpcHQiLCJjbG9uZSIsImV4dGVuZCIsInBhdHRlcm4iLCJpbnNpZGUiLCJqc3hFeHByZXNzaW9uIiwicHVuY3R1YXRpb24iLCJpbnNlcnRCZWZvcmUiLCJfc2VsZiIsIldvcmtlckdsb2JhbFNjb3BlIiwic2VsZiIsImxhbmciLCJ1bmlxdWVJZCIsIl8iLCJUb2tlbiIsInR5cGUiLCJhbGlhcyIsIm8iLCJvYmpJZCIsImRlZmluZVByb3BlcnR5IiwicmVkZWYiLCJiZWZvcmUiLCJpbnNlcnQiLCJncmFtbWFyIiwibmV3VG9rZW4iLCJyZXQiLCJ0b2tlbiIsIkRGUyIsImNhbGxiYWNrIiwidmlzaXRlZCIsInBsdWdpbnMiLCJoaWdobGlnaHRBbGwiLCJhc3luYyIsImVudiIsImhvb2tzIiwicnVuIiwiZWxlbWVudHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaGlnaGxpZ2h0RWxlbWVudCIsImxhbmd1YWdlIiwidGVzdCIsInBhcmVudE5vZGUiLCJ0ZXh0Q29udGVudCIsIldvcmtlciIsIndvcmtlciIsImZpbGVuYW1lIiwib25tZXNzYWdlIiwiZXZ0IiwiaGlnaGxpZ2h0ZWRDb2RlIiwiZGF0YSIsImlubmVySFRNTCIsInBvc3RNZXNzYWdlIiwiaW1tZWRpYXRlQ2xvc2UiLCJ0ZXh0IiwidG9rZW5pemUiLCJzdHJhcnIiLCJ0b2tlbmxvb3AiLCJwYXR0ZXJucyIsImxvb2tiZWhpbmQiLCJncmVlZHkiLCJsb29rYmVoaW5kTGVuZ3RoIiwiZ2xvYmFsIiwiZmxhZ3MiLCJSZWdFeHAiLCJwb3MiLCJsYXN0SW5kZXgiLCJkZWxOdW0iLCJmcm9tIiwiYWZ0ZXIiLCJ3cmFwcGVkIiwiYXBwbHkiLCJhbGwiLCJjYWxsYmFja3MiLCJtYXRjaGVkU3RyIiwiY2xhc3NlcyIsImF0dHJpYnV0ZXMiLCJhbGlhc2VzIiwiY2xvc2UiLCJzY3JpcHQiLCJjdXJyZW50U2NyaXB0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzcmMiLCJoYXNBdHRyaWJ1dGUiLCJyZWFkeVN0YXRlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibWFya3VwIiwieG1sIiwibWF0aG1sIiwic3ZnIiwiY3NzIiwiY2xpa2UiLCJqcyIsImZpbGVIaWdobGlnaHQiLCJFeHRlbnNpb25zIiwicHJlIiwiZ2V0QXR0cmlidXRlIiwiZXh0ZW5zaW9uIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwib25yZWFkeXN0YXRlY2hhbmdlIiwic3RhdHVzIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsInNlbmQiLCJpbnRUb0NoYXJNYXAiLCJudW1iZXIiLCJjaGFyQ29kZSIsImJpZ0EiLCJiaWdaIiwibGl0dGxlQSIsImxpdHRsZVoiLCJ6ZXJvIiwibmluZSIsInBsdXMiLCJzbGFzaCIsImxpdHRsZU9mZnNldCIsIm51bWJlck9mZnNldCIsIkdSRUFURVNUX0xPV0VSX0JPVU5EIiwiTEVBU1RfVVBQRVJfQk9VTkQiLCJyZWN1cnNpdmVTZWFyY2giLCJhTG93IiwiYUhpZ2giLCJhTmVlZGxlIiwiYUhheXN0YWNrIiwiYUNvbXBhcmUiLCJhQmlhcyIsIm1pZCIsIk1hdGgiLCJmbG9vciIsInNlYXJjaCIsImdlbmVyYXRlZFBvc2l0aW9uQWZ0ZXIiLCJsaW5lQSIsImxpbmVCIiwiY29sdW1uQSIsImNvbHVtbkIiLCJfc29ydGVkIiwiX2xhc3QiLCJNYXBwaW5nTGlzdF9mb3JFYWNoIiwiYUNhbGxiYWNrIiwiYVRoaXNBcmciLCJNYXBwaW5nTGlzdF9hZGQiLCJhTWFwcGluZyIsIk1hcHBpbmdMaXN0X3RvQXJyYXkiLCJzd2FwIiwiYXJ5IiwieSIsInRlbXAiLCJyYW5kb21JbnRJblJhbmdlIiwibG93IiwiaGlnaCIsInJvdW5kIiwicmFuZG9tIiwiZG9RdWlja1NvcnQiLCJjb21wYXJhdG9yIiwiciIsInBpdm90SW5kZXgiLCJwaXZvdCIsInEiLCJxdWlja1NvcnQiLCJiaW5hcnlTZWFyY2giLCJTb3VyY2VNYXBDb25zdW1lciIsImFTb3VyY2VNYXAiLCJzb3VyY2VNYXAiLCJzZWN0aW9ucyIsIkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lciIsIkJhc2ljU291cmNlTWFwQ29uc3VtZXIiLCJfX2dlbmVyYXRlZE1hcHBpbmdzIiwiZ2V0IiwiX3BhcnNlTWFwcGluZ3MiLCJfX29yaWdpbmFsTWFwcGluZ3MiLCJfY2hhcklzTWFwcGluZ1NlcGFyYXRvciIsIlNvdXJjZU1hcENvbnN1bWVyX2NoYXJJc01hcHBpbmdTZXBhcmF0b3IiLCJjIiwiU291cmNlTWFwQ29uc3VtZXJfcGFyc2VNYXBwaW5ncyIsIkdFTkVSQVRFRF9PUkRFUiIsIk9SSUdJTkFMX09SREVSIiwiU291cmNlTWFwQ29uc3VtZXJfZWFjaE1hcHBpbmciLCJhQ29udGV4dCIsImFPcmRlciIsImNvbnRleHQiLCJvcmRlciIsIl9nZW5lcmF0ZWRNYXBwaW5ncyIsIl9vcmlnaW5hbE1hcHBpbmdzIiwiYWxsR2VuZXJhdGVkUG9zaXRpb25zRm9yIiwiU291cmNlTWFwQ29uc3VtZXJfYWxsR2VuZXJhdGVkUG9zaXRpb25zRm9yIiwibmVlZGxlIiwiX2ZpbmRNYXBwaW5nIiwibGFzdENvbHVtbiIsImNvbnN1bWVyIiwiU291cmNlTWFwQ29uc3VtZXJfZnJvbVNvdXJjZU1hcCIsInNtYyIsImdlbmVyYXRlZE1hcHBpbmdzIiwiZGVzdEdlbmVyYXRlZE1hcHBpbmdzIiwiZGVzdE9yaWdpbmFsTWFwcGluZ3MiLCJzcmNNYXBwaW5nIiwiZGVzdE1hcHBpbmciLCJNYXBwaW5nIiwiY2FjaGVkU2VnbWVudHMiLCJvcmlnaW5hbE1hcHBpbmdzIiwic2VnbWVudCIsImVuZCIsIlNvdXJjZU1hcENvbnN1bWVyX2ZpbmRNYXBwaW5nIiwiYU1hcHBpbmdzIiwiYUxpbmVOYW1lIiwiYUNvbHVtbk5hbWUiLCJhQ29tcGFyYXRvciIsImNvbXB1dGVDb2x1bW5TcGFucyIsIlNvdXJjZU1hcENvbnN1bWVyX2NvbXB1dGVDb2x1bW5TcGFucyIsIm5leHRNYXBwaW5nIiwibGFzdEdlbmVyYXRlZENvbHVtbiIsIkluZmluaXR5IiwiU291cmNlTWFwQ29uc3VtZXJfb3JpZ2luYWxQb3NpdGlvbkZvciIsImhhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzIiwiQmFzaWNTb3VyY2VNYXBDb25zdW1lcl9oYXNDb250ZW50c09mQWxsU291cmNlcyIsInNvbWUiLCJzYyIsIlNvdXJjZU1hcENvbnN1bWVyX3NvdXJjZUNvbnRlbnRGb3IiLCJudWxsT25NaXNzaW5nIiwiZmlsZVVyaUFic1BhdGgiLCJnZW5lcmF0ZWRQb3NpdGlvbkZvciIsIlNvdXJjZU1hcENvbnN1bWVyX2dlbmVyYXRlZFBvc2l0aW9uRm9yIiwibGFzdE9mZnNldCIsIl9zZWN0aW9ucyIsIm9mZnNldCIsIm9mZnNldExpbmUiLCJvZmZzZXRDb2x1bW4iLCJnZW5lcmF0ZWRPZmZzZXQiLCJjb25zdHJ1Y3RvciIsIkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcl9vcmlnaW5hbFBvc2l0aW9uRm9yIiwic2VjdGlvbkluZGV4Iiwic2VjdGlvbiIsImJpYXMiLCJJbmRleGVkU291cmNlTWFwQ29uc3VtZXJfaGFzQ29udGVudHNPZkFsbFNvdXJjZXMiLCJldmVyeSIsIkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcl9zb3VyY2VDb250ZW50Rm9yIiwiSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyX2dlbmVyYXRlZFBvc2l0aW9uRm9yIiwiZ2VuZXJhdGVkUG9zaXRpb24iLCJJbmRleGVkU291cmNlTWFwQ29uc3VtZXJfcGFyc2VNYXBwaW5ncyIsInNlY3Rpb25NYXBwaW5ncyIsImFkanVzdGVkTWFwcGluZyIsIlJFR0VYX05FV0xJTkUiLCJORVdMSU5FX0NPREUiLCJpc1NvdXJjZU5vZGUiLCJTb3VyY2VOb2RlIiwiYUxpbmUiLCJhQ29sdW1uIiwiYUNodW5rcyIsInNvdXJjZUNvbnRlbnRzIiwiZnJvbVN0cmluZ1dpdGhTb3VyY2VNYXAiLCJTb3VyY2VOb2RlX2Zyb21TdHJpbmdXaXRoU291cmNlTWFwIiwiYUdlbmVyYXRlZENvZGUiLCJhUmVsYXRpdmVQYXRoIiwibm9kZSIsInJlbWFpbmluZ0xpbmVzIiwic2hpZnROZXh0TGluZSIsImxpbmVDb250ZW50cyIsIm5ld0xpbmUiLCJsYXN0R2VuZXJhdGVkTGluZSIsImxhc3RNYXBwaW5nIiwiYWRkTWFwcGluZ1dpdGhDb2RlIiwibmV4dExpbmUiLCJTb3VyY2VOb2RlX2FkZCIsImFDaHVuayIsImNodW5rIiwicHJlcGVuZCIsIlNvdXJjZU5vZGVfcHJlcGVuZCIsInVuc2hpZnQiLCJ3YWxrIiwiU291cmNlTm9kZV93YWxrIiwiYUZuIiwiU291cmNlTm9kZV9qb2luIiwiYVNlcCIsInJlcGxhY2VSaWdodCIsIlNvdXJjZU5vZGVfcmVwbGFjZVJpZ2h0IiwiYVBhdHRlcm4iLCJhUmVwbGFjZW1lbnQiLCJTb3VyY2VOb2RlX3NldFNvdXJjZUNvbnRlbnQiLCJ3YWxrU291cmNlQ29udGVudHMiLCJTb3VyY2VOb2RlX3dhbGtTb3VyY2VDb250ZW50cyIsIlNvdXJjZU5vZGVfdG9TdHJpbmciLCJ0b1N0cmluZ1dpdGhTb3VyY2VNYXAiLCJTb3VyY2VOb2RlX3RvU3RyaW5nV2l0aFNvdXJjZU1hcCIsInNvdXJjZU1hcHBpbmdBY3RpdmUiLCJsYXN0T3JpZ2luYWxTb3VyY2UiLCJsYXN0T3JpZ2luYWxMaW5lIiwibGFzdE9yaWdpbmFsQ29sdW1uIiwibGFzdE9yaWdpbmFsTmFtZSIsInNvdXJjZUNvbnRlbnQiLCJTdGFja0dlbmVyYXRvciIsImJhY2t0cmFjZSIsIlN0YWNrR2VuZXJhdG9yJCRiYWNrdHJhY2UiLCJtYXhTdGFja1NpemUiLCJjdXJyIiwiY2FsbGVlIiwiJDEiLCJjYWxsZXIiLCJTdGFja1RyYWNlR1BTIiwiU291cmNlTWFwIiwiX3hkciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVxIiwib25lcnJvciIsIl9hdG9iIiwiYjY0c3RyIiwiYXRvYiIsIl9wYXJzZUpzb24iLCJzdHJpbmciLCJfZmluZEZ1bmN0aW9uTmFtZSIsInN5bnRheGVzIiwibWF4TGluZXMiLCJtaW4iLCJjb21tZW50UG9zIiwibSIsIl9lbnN1cmVTdXBwb3J0ZWRFbnZpcm9ubWVudCIsIl9lbnN1cmVTdGFja0ZyYW1lSXNMZWdpdCIsInN0YWNrZnJhbWUiLCJfZmluZFNvdXJjZU1hcHBpbmdVUkwiLCJfZXh0cmFjdExvY2F0aW9uSW5mb0Zyb21Tb3VyY2VNYXBTb3VyY2UiLCJzb3VyY2VNYXBDb25zdW1lciIsInNvdXJjZUNhY2hlIiwibG9jIiwibWFwcGVkU291cmNlIiwic291cmNlTWFwQ29uc3VtZXJDYWNoZSIsImFqYXgiLCJfZ2V0IiwibG9jYXRpb24iLCJpc0RhdGFVcmwiLCJvZmZsaW5lIiwic3VwcG9ydGVkRW5jb2RpbmdSZWdleHAiLCJzb3VyY2VNYXBTdGFydCIsImVuY29kZWRTb3VyY2UiLCJ4aHJQcm9taXNlIiwibWV0aG9kIiwidGhlbiIsImJpbmQiLCJfZ2V0U291cmNlTWFwQ29uc3VtZXIiLCJzb3VyY2VNYXBwaW5nVVJMIiwiZGVmYXVsdFNvdXJjZVJvb3QiLCJzb3VyY2VNYXBDb25zdW1lclByb21pc2UiLCJzb3VyY2VNYXBTb3VyY2UiLCJwaW5wb2ludCIsIlN0YWNrVHJhY2VHUFMkJHBpbnBvaW50IiwiZ2V0TWFwcGVkTG9jYXRpb24iLCJtYXBwZWRTdGFja0ZyYW1lIiwicmVzb2x2ZU1hcHBlZFN0YWNrRnJhbWUiLCJmaW5kRnVuY3Rpb25OYW1lIiwiU3RhY2tUcmFjZUdQUyQkZmluZEZ1bmN0aW9uTmFtZSIsImdldFNvdXJjZUNhbGxiYWNrIiwiZ3Vlc3NlZEZ1bmN0aW9uTmFtZSIsIlN0YWNrVHJhY2VHUFMkJGdldE1hcHBlZExvY2F0aW9uIiwiU3RhY2tUcmFjZSIsIl9vcHRpb25zIiwiX2dlbmVyYXRlRXJyb3IiLCJTdGFja1RyYWNlJCRHZW5lcmF0ZUVycm9yIiwiZXJyIiwiX21lcmdlIiwiZmlyc3QiLCJzZWNvbmQiLCJwcm9wIiwiX2lzU2hhcGVkTGlrZVBhcnNhYmxlRXJyb3IiLCJfZmlsdGVyZWQiLCJzdGFja2ZyYW1lcyIsIlN0YWNrVHJhY2UkJGdldCIsImZyb21FcnJvciIsImdlbmVyYXRlQXJ0aWZpY2lhbGx5IiwiZ2V0U3luYyIsIlN0YWNrVHJhY2UkJGdldFN5bmMiLCJTdGFja1RyYWNlJCRmcm9tRXJyb3IiLCJncHMiLCJzZiIsInJlc29sdmVPcmlnaW5hbCIsIlN0YWNrVHJhY2UkJGdlbmVyYXRlQXJ0aWZpY2lhbGx5Iiwic3RhY2tGcmFtZXMiLCJpbnN0cnVtZW50IiwiU3RhY2tUcmFjZSQkaW5zdHJ1bWVudCIsImVycmJhY2siLCJ0aGlzQXJnIiwiX19zdGFja3RyYWNlT3JpZ2luYWxGbiIsImluc3RydW1lbnRlZCIsIlN0YWNrVHJhY2UkJGluc3RydW1lbnRlZCIsImRlaW5zdHJ1bWVudCIsIlN0YWNrVHJhY2UkJGRlaW5zdHJ1bWVudCIsInJlcG9ydCIsIlN0YWNrVHJhY2UkJHJlcG9ydCIsImVycm9yTXNnIiwicmVxdWVzdE9wdGlvbnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiaGVhZGVycyIsInJlcG9ydFBheWxvYWQiLCJnIiwiRnVuY3Rpb24iLCJldmFsIiwiUm91dGVyIiwiaW5pdFJvdXRlciIsImludGVyY2VwdExpbmtzIiwicm91dGVyU3RhdGUkIiwiaW50ZXJjZXB0Q2xpY2tFdmVudCIsInNyY0VsZW1lbnQiLCJocmVmIiwiaXNMb2NhbCIsInN0YXJ0c1dpdGgiLCJpc0FuY2hvciIsInBhcnNlTGluayIsImFuY2hvciIsInJvdXRlIiwiZ29UbyIsInByZXZlbnREZWZhdWx0Iiwib25wb3BzdGF0ZSIsImV2ZW50Iiwic3RhdGUiLCJkaXNwYXRjaFJvdXRlQ2hhbmdlIiwicGF0aG5hbWUiLCJoYXNoIiwiZ2V0VXJsUGFyYW1zIiwidXJsUmVnZXgiLCJyZWdFeFJlc3VsdEhhc2giLCJyZWdFeFJlc3VsdFNlYXJjaCIsInZhcnMiLCJwYWlyIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiYXJyIiwiY29uc29sZSIsImxvZyIsInJvdXRlcyIsInNhbml0aXplZFJvdXRlJCIsInJvdXRlV2FzSGl0JCIsIndhc0hpdCIsImxpbmsiLCJyZWdleHAiLCJtYXRjaEFyciIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJzaHJpbmtfc3RhY2t0cmFjZSIsIm1zZyIsImNvbCIsImZvcm1hdEZyYW1lcyIsImZyYW1lcyIsImNhdGNoIiwiZXJyb3JNZXNzYWdlIiwiZm9ybWF0ZWRGcmFtZXMiLCJjaHJvbWVGaWxlRGlyZWN0aW9uIiwiaWYkIiwiam9pbiQiLCJwcm9taXNlJCIsInByb21pc2UiLCJvdXRwdXQkIiwibG9hZGluZyIsIm9uVHJ1ZSIsIm9uRmFsc2UiLCIkYXJyIiwiZmxhdHRlbiIsImgiLCJkZWxldGVkJCIsIm1lcmdlZENoaWxkcmVuJCIsIm1lcmdlQ2hpbGRyZW4kIiwicHJvcE5hbWUiLCJ3cmFwUHJvcHMkIiwiY2hpbGRyZW5WZG9tJGFyciIsImdldENoaWxkcmVuVmRvbSRhcnIiLCJjaGlsZHJlbkFyciIsImNoaWxkcmVuJEFyciIsIm1ha2VBcnJheSIsInZkb21BcnIiLCJtYWtlU3RyZWFtcyIsImFycmF5IiwibXV0YWJsZSIsImFycmF5VHlwZVN0ciIsIm5vZGVzIiwicmV2ZXJzZSIsIm5lc3RlZFN0cmVhbXMiLCJleHRyYWN0TmVzdGVkU3RyZWFtcyIsInVwZGF0ZVN0cmVhbXMiLCJtYWtlTmVzdGVkU3RyZWFtVXBkYXRlUHJvcHMiLCJzY2hlZHVsZSIsImRvbmUiLCJpdGVyYXRpb24iXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsbURBQTJDLGNBQWM7O0FBRXpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUNBQTJCLDBCQUEwQixFQUFFO0FBQ3ZELHlDQUFpQyxlQUFlO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhEQUFzRCwrREFBK0Q7O0FBRXJIO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7a0dDaEVBLDBNO0FBQ0EsME47Ozs7Ozs7Q0NEQTs7OztBQUlBO0FBQ0FBLE9BQU9DLE9BQVAsR0FBaUIsWUFBVztBQUMzQixLQUFJQyxPQUFPLEVBQVg7O0FBRUE7QUFDQUEsTUFBS0MsUUFBTCxHQUFnQixTQUFTQSxRQUFULEdBQW9CO0FBQ25DLE1BQUlDLFNBQVMsRUFBYjtBQUNBLE9BQUksSUFBSUMsSUFBSSxDQUFaLEVBQWVBLElBQUksS0FBS0MsTUFBeEIsRUFBZ0NELEdBQWhDLEVBQXFDO0FBQ3BDLE9BQUlFLE9BQU8sS0FBS0YsQ0FBTCxDQUFYO0FBQ0EsT0FBR0UsS0FBSyxDQUFMLENBQUgsRUFBWTtBQUNYSCxXQUFPSSxJQUFQLENBQVksWUFBWUQsS0FBSyxDQUFMLENBQVosR0FBc0IsR0FBdEIsR0FBNEJBLEtBQUssQ0FBTCxDQUE1QixHQUFzQyxHQUFsRDtBQUNBLElBRkQsTUFFTztBQUNOSCxXQUFPSSxJQUFQLENBQVlELEtBQUssQ0FBTCxDQUFaO0FBQ0E7QUFDRDtBQUNELFNBQU9ILE9BQU9LLElBQVAsQ0FBWSxFQUFaLENBQVA7QUFDQSxFQVhEOztBQWFBO0FBQ0FQLE1BQUtHLENBQUwsR0FBUyxVQUFTSyxPQUFULEVBQWtCQyxVQUFsQixFQUE4QjtBQUN0QyxNQUFHLE9BQU9ELE9BQVAsS0FBbUIsUUFBdEI7QUFDQ0EsWUFBVSxDQUFDLENBQUMsSUFBRCxFQUFPQSxPQUFQLEVBQWdCLEVBQWhCLENBQUQsQ0FBVjtBQUNELE1BQUlFLHlCQUF5QixFQUE3QjtBQUNBLE9BQUksSUFBSVAsSUFBSSxDQUFaLEVBQWVBLElBQUksS0FBS0MsTUFBeEIsRUFBZ0NELEdBQWhDLEVBQXFDO0FBQ3BDLE9BQUlRLEtBQUssS0FBS1IsQ0FBTCxFQUFRLENBQVIsQ0FBVDtBQUNBLE9BQUcsT0FBT1EsRUFBUCxLQUFjLFFBQWpCO0FBQ0NELDBCQUF1QkMsRUFBdkIsSUFBNkIsSUFBN0I7QUFDRDtBQUNELE9BQUlSLElBQUksQ0FBUixFQUFXQSxJQUFJSyxRQUFRSixNQUF2QixFQUErQkQsR0FBL0IsRUFBb0M7QUFDbkMsT0FBSUUsT0FBT0csUUFBUUwsQ0FBUixDQUFYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFHLE9BQU9FLEtBQUssQ0FBTCxDQUFQLEtBQW1CLFFBQW5CLElBQStCLENBQUNLLHVCQUF1QkwsS0FBSyxDQUFMLENBQXZCLENBQW5DLEVBQW9FO0FBQ25FLFFBQUdJLGNBQWMsQ0FBQ0osS0FBSyxDQUFMLENBQWxCLEVBQTJCO0FBQzFCQSxVQUFLLENBQUwsSUFBVUksVUFBVjtBQUNBLEtBRkQsTUFFTyxJQUFHQSxVQUFILEVBQWU7QUFDckJKLFVBQUssQ0FBTCxJQUFVLE1BQU1BLEtBQUssQ0FBTCxDQUFOLEdBQWdCLFNBQWhCLEdBQTRCSSxVQUE1QixHQUF5QyxHQUFuRDtBQUNBO0FBQ0RULFNBQUtNLElBQUwsQ0FBVUQsSUFBVjtBQUNBO0FBQ0Q7QUFDRCxFQXhCRDtBQXlCQSxRQUFPTCxJQUFQO0FBQ0EsQ0E1Q0QsQzs7Ozs7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsbUJBQW1CO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixzQkFBc0I7QUFDdEM7QUFDQTtBQUNBLGtCQUFrQiwyQkFBMkI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxtQkFBbUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsMkJBQTJCO0FBQzVDO0FBQ0E7QUFDQSxRQUFRLHVCQUF1QjtBQUMvQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsaUJBQWlCLHVCQUF1QjtBQUN4QztBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlCQUFpQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsZ0NBQWdDLHNCQUFzQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZEOztBQUVBLDZCQUE2QixtQkFBbUI7O0FBRWhEOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7Q0NyUEE7QUFDQTs7Ozs7O0FBTUE7Ozs7Ozs7Ozs7QUFVQSxTQUFTWSxNQUFULENBQWdCQyxLQUFoQixFQUF1QkMsS0FBdkIsRUFBOEJDLGFBQTlCLEVBQTZDO0FBQzNDLE1BQUlELFNBQVNELEtBQWIsRUFBb0I7QUFDbEIsV0FBT0EsTUFBTUMsS0FBTixDQUFQO0FBQ0QsR0FGRCxNQUVPLElBQUlFLFVBQVVaLE1BQVYsS0FBcUIsQ0FBekIsRUFBNEI7QUFDakMsV0FBT1csYUFBUDtBQUNELEdBRk0sTUFFQTtBQUNMLFVBQU0sSUFBSUUsS0FBSixDQUFVLE1BQU1ILEtBQU4sR0FBYywyQkFBeEIsQ0FBTjtBQUNEO0FBQ0Y7QUFDRGYsUUFBUWEsTUFBUixHQUFpQkEsTUFBakI7O0FBRUEsSUFBSU0sWUFBWSxnRUFBaEI7QUFDQSxJQUFJQyxnQkFBZ0IsZUFBcEI7O0FBRUEsU0FBU0MsUUFBVCxDQUFrQkMsSUFBbEIsRUFBd0I7QUFDdEIsTUFBSUMsUUFBUUQsS0FBS0MsS0FBTCxDQUFXSixTQUFYLENBQVo7QUFDQSxNQUFJLENBQUNJLEtBQUwsRUFBWTtBQUNWLFdBQU8sSUFBUDtBQUNEO0FBQ0QsU0FBTztBQUNMQyxZQUFRRCxNQUFNLENBQU4sQ0FESDtBQUVMRSxVQUFNRixNQUFNLENBQU4sQ0FGRDtBQUdMRyxVQUFNSCxNQUFNLENBQU4sQ0FIRDtBQUlMSSxVQUFNSixNQUFNLENBQU4sQ0FKRDtBQUtMSyxVQUFNTCxNQUFNLENBQU4sQ0FMRCxFQUFQOztBQU9EO0FBQ0R2QixRQUFRcUIsUUFBUixHQUFtQkEsUUFBbkI7O0FBRUEsU0FBU1EsV0FBVCxDQUFxQkMsVUFBckIsRUFBaUM7QUFDL0IsTUFBSUMsTUFBTSxFQUFWO0FBQ0EsTUFBSUQsV0FBV04sTUFBZixFQUF1QjtBQUNyQk8sV0FBT0QsV0FBV04sTUFBWCxHQUFvQixHQUEzQjtBQUNEO0FBQ0RPLFNBQU8sSUFBUDtBQUNBLE1BQUlELFdBQVdMLElBQWYsRUFBcUI7QUFDbkJNLFdBQU9ELFdBQVdMLElBQVgsR0FBa0IsR0FBekI7QUFDRDtBQUNELE1BQUlLLFdBQVdKLElBQWYsRUFBcUI7QUFDbkJLLFdBQU9ELFdBQVdKLElBQWxCO0FBQ0Q7QUFDRCxNQUFJSSxXQUFXSCxJQUFmLEVBQXFCO0FBQ25CSSxXQUFPLE1BQU1ELFdBQVdILElBQXhCO0FBQ0Q7QUFDRCxNQUFJRyxXQUFXRixJQUFmLEVBQXFCO0FBQ25CRyxXQUFPRCxXQUFXRixJQUFsQjtBQUNEO0FBQ0QsU0FBT0csR0FBUDtBQUNEO0FBQ0QvQixRQUFRNkIsV0FBUixHQUFzQkEsV0FBdEI7O0FBRUE7Ozs7Ozs7Ozs7O0FBV0EsU0FBU0csU0FBVCxDQUFtQkMsS0FBbkIsRUFBMEI7QUFDeEIsTUFBSUwsT0FBT0ssS0FBWDtBQUNBLE1BQUlGLE1BQU1WLFNBQVNZLEtBQVQsQ0FBVjtBQUNBLE1BQUlGLEdBQUosRUFBUztBQUNQLFFBQUksQ0FBQ0EsSUFBSUgsSUFBVCxFQUFlO0FBQ2IsYUFBT0ssS0FBUDtBQUNEO0FBQ0RMLFdBQU9HLElBQUlILElBQVg7QUFDRDtBQUNELE1BQUlNLGFBQWFsQyxRQUFRa0MsVUFBUixDQUFtQk4sSUFBbkIsQ0FBakI7O0FBRUEsTUFBSU8sUUFBUVAsS0FBS1EsS0FBTCxDQUFXLEtBQVgsQ0FBWjtBQUNBLE9BQUssSUFBSUMsSUFBSixFQUFVQyxLQUFLLENBQWYsRUFBa0JsQyxJQUFJK0IsTUFBTTlCLE1BQU4sR0FBZSxDQUExQyxFQUE2Q0QsS0FBSyxDQUFsRCxFQUFxREEsR0FBckQsRUFBMEQ7QUFDeERpQyxXQUFPRixNQUFNL0IsQ0FBTixDQUFQO0FBQ0EsUUFBSWlDLFNBQVMsR0FBYixFQUFrQjtBQUNoQkYsWUFBTUksTUFBTixDQUFhbkMsQ0FBYixFQUFnQixDQUFoQjtBQUNELEtBRkQsTUFFTyxJQUFJaUMsU0FBUyxJQUFiLEVBQW1CO0FBQ3hCQztBQUNELEtBRk0sTUFFQSxJQUFJQSxLQUFLLENBQVQsRUFBWTtBQUNqQixVQUFJRCxTQUFTLEVBQWIsRUFBaUI7QUFDZjtBQUNBO0FBQ0E7QUFDQUYsY0FBTUksTUFBTixDQUFhbkMsSUFBSSxDQUFqQixFQUFvQmtDLEVBQXBCO0FBQ0FBLGFBQUssQ0FBTDtBQUNELE9BTkQsTUFNTztBQUNMSCxjQUFNSSxNQUFOLENBQWFuQyxDQUFiLEVBQWdCLENBQWhCO0FBQ0FrQztBQUNEO0FBQ0Y7QUFDRjtBQUNEVixTQUFPTyxNQUFNM0IsSUFBTixDQUFXLEdBQVgsQ0FBUDs7QUFFQSxNQUFJb0IsU0FBUyxFQUFiLEVBQWlCO0FBQ2ZBLFdBQU9NLGFBQWEsR0FBYixHQUFtQixHQUExQjtBQUNEOztBQUVELE1BQUlILEdBQUosRUFBUztBQUNQQSxRQUFJSCxJQUFKLEdBQVdBLElBQVg7QUFDQSxXQUFPQyxZQUFZRSxHQUFaLENBQVA7QUFDRDtBQUNELFNBQU9ILElBQVA7QUFDRDtBQUNENUIsUUFBUWdDLFNBQVIsR0FBb0JBLFNBQXBCOztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JBLFNBQVN4QixJQUFULENBQWNnQyxLQUFkLEVBQXFCUCxLQUFyQixFQUE0QjtBQUMxQixNQUFJTyxVQUFVLEVBQWQsRUFBa0I7QUFDaEJBLFlBQVEsR0FBUjtBQUNEO0FBQ0QsTUFBSVAsVUFBVSxFQUFkLEVBQWtCO0FBQ2hCQSxZQUFRLEdBQVI7QUFDRDtBQUNELE1BQUlRLFdBQVdwQixTQUFTWSxLQUFULENBQWY7QUFDQSxNQUFJUyxXQUFXckIsU0FBU21CLEtBQVQsQ0FBZjtBQUNBLE1BQUlFLFFBQUosRUFBYztBQUNaRixZQUFRRSxTQUFTZCxJQUFULElBQWlCLEdBQXpCO0FBQ0Q7O0FBRUQ7QUFDQSxNQUFJYSxZQUFZLENBQUNBLFNBQVNqQixNQUExQixFQUFrQztBQUNoQyxRQUFJa0IsUUFBSixFQUFjO0FBQ1pELGVBQVNqQixNQUFULEdBQWtCa0IsU0FBU2xCLE1BQTNCO0FBQ0Q7QUFDRCxXQUFPSyxZQUFZWSxRQUFaLENBQVA7QUFDRDs7QUFFRCxNQUFJQSxZQUFZUixNQUFNVixLQUFOLENBQVlILGFBQVosQ0FBaEIsRUFBNEM7QUFDMUMsV0FBT2EsS0FBUDtBQUNEOztBQUVEO0FBQ0EsTUFBSVMsWUFBWSxDQUFDQSxTQUFTaEIsSUFBdEIsSUFBOEIsQ0FBQ2dCLFNBQVNkLElBQTVDLEVBQWtEO0FBQ2hEYyxhQUFTaEIsSUFBVCxHQUFnQk8sS0FBaEI7QUFDQSxXQUFPSixZQUFZYSxRQUFaLENBQVA7QUFDRDs7QUFFRCxNQUFJQyxTQUFTVixNQUFNVyxNQUFOLENBQWEsQ0FBYixNQUFvQixHQUFwQjtBQUNUWCxPQURTO0FBRVRELFlBQVVRLE1BQU1LLE9BQU4sQ0FBYyxNQUFkLEVBQXNCLEVBQXRCLElBQTRCLEdBQTVCLEdBQWtDWixLQUE1QyxDQUZKOztBQUlBLE1BQUlTLFFBQUosRUFBYztBQUNaQSxhQUFTZCxJQUFULEdBQWdCZSxNQUFoQjtBQUNBLFdBQU9kLFlBQVlhLFFBQVosQ0FBUDtBQUNEO0FBQ0QsU0FBT0MsTUFBUDtBQUNEO0FBQ0QzQyxRQUFRUSxJQUFSLEdBQWVBLElBQWY7O0FBRUFSLFFBQVFrQyxVQUFSLEdBQXFCLFVBQVVELEtBQVYsRUFBaUI7QUFDcEMsU0FBT0EsTUFBTVcsTUFBTixDQUFhLENBQWIsTUFBb0IsR0FBcEIsSUFBMkIsQ0FBQyxDQUFDWCxNQUFNVixLQUFOLENBQVlKLFNBQVosQ0FBcEM7QUFDRCxDQUZEOztBQUlBOzs7Ozs7QUFNQSxTQUFTMkIsUUFBVCxDQUFrQk4sS0FBbEIsRUFBeUJQLEtBQXpCLEVBQWdDO0FBQzlCLE1BQUlPLFVBQVUsRUFBZCxFQUFrQjtBQUNoQkEsWUFBUSxHQUFSO0FBQ0Q7O0FBRURBLFVBQVFBLE1BQU1LLE9BQU4sQ0FBYyxLQUFkLEVBQXFCLEVBQXJCLENBQVI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFJRSxRQUFRLENBQVo7QUFDQSxTQUFPZCxNQUFNZSxPQUFOLENBQWNSLFFBQVEsR0FBdEIsTUFBK0IsQ0FBdEMsRUFBeUM7QUFDdkMsUUFBSVMsUUFBUVQsTUFBTVUsV0FBTixDQUFrQixHQUFsQixDQUFaO0FBQ0EsUUFBSUQsUUFBUSxDQUFaLEVBQWU7QUFDYixhQUFPaEIsS0FBUDtBQUNEOztBQUVEO0FBQ0E7QUFDQTtBQUNBTyxZQUFRQSxNQUFNVyxLQUFOLENBQVksQ0FBWixFQUFlRixLQUFmLENBQVI7QUFDQSxRQUFJVCxNQUFNakIsS0FBTixDQUFZLG1CQUFaLENBQUosRUFBc0M7QUFDcEMsYUFBT1UsS0FBUDtBQUNEOztBQUVELE1BQUVjLEtBQUY7QUFDRDs7QUFFRDtBQUNBLFNBQU9LLE1BQU1MLFFBQVEsQ0FBZCxFQUFpQnZDLElBQWpCLENBQXNCLEtBQXRCLElBQStCeUIsTUFBTW9CLE1BQU4sQ0FBYWIsTUFBTW5DLE1BQU4sR0FBZSxDQUE1QixDQUF0QztBQUNEO0FBQ0RMLFFBQVE4QyxRQUFSLEdBQW1CQSxRQUFuQjs7QUFFQSxJQUFJUSxvQkFBcUIsWUFBWTtBQUNuQyxNQUFJQyxNQUFNQyxPQUFPQyxNQUFQLENBQWMsSUFBZCxDQUFWO0FBQ0EsU0FBTyxFQUFFLGVBQWVGLEdBQWpCLENBQVA7QUFDRCxDQUh3QixFQUF6Qjs7QUFLQSxTQUFTRyxRQUFULENBQW1CQyxDQUFuQixFQUFzQjtBQUNwQixTQUFPQSxDQUFQO0FBQ0Q7O0FBRUQ7Ozs7Ozs7OztBQVNBLFNBQVNDLFdBQVQsQ0FBcUJDLElBQXJCLEVBQTJCO0FBQ3pCLE1BQUlDLGNBQWNELElBQWQsQ0FBSixFQUF5QjtBQUN2QixXQUFPLE1BQU1BLElBQWI7QUFDRDs7QUFFRCxTQUFPQSxJQUFQO0FBQ0Q7QUFDRDdELFFBQVE0RCxXQUFSLEdBQXNCTixvQkFBb0JJLFFBQXBCLEdBQStCRSxXQUFyRDs7QUFFQSxTQUFTRyxhQUFULENBQXVCRixJQUF2QixFQUE2QjtBQUMzQixNQUFJQyxjQUFjRCxJQUFkLENBQUosRUFBeUI7QUFDdkIsV0FBT0EsS0FBS1YsS0FBTCxDQUFXLENBQVgsQ0FBUDtBQUNEOztBQUVELFNBQU9VLElBQVA7QUFDRDtBQUNEN0QsUUFBUStELGFBQVIsR0FBd0JULG9CQUFvQkksUUFBcEIsR0FBK0JLLGFBQXZEOztBQUVBLFNBQVNELGFBQVQsQ0FBdUJILENBQXZCLEVBQTBCO0FBQ3hCLE1BQUksQ0FBQ0EsQ0FBTCxFQUFRO0FBQ04sV0FBTyxLQUFQO0FBQ0Q7O0FBRUQsTUFBSXRELFNBQVNzRCxFQUFFdEQsTUFBZjs7QUFFQSxNQUFJQSxTQUFTLENBQWIsQ0FBZSx3QkFBZixFQUF5QztBQUN2QyxhQUFPLEtBQVA7QUFDRDs7QUFFRCxNQUFJc0QsRUFBRUssVUFBRixDQUFhM0QsU0FBUyxDQUF0QixNQUE2QixFQUE3QixDQUFpQyxTQUFqQztBQUNBc0QsSUFBRUssVUFBRixDQUFhM0QsU0FBUyxDQUF0QixNQUE2QixFQUQ3QixDQUNpQyxTQURqQztBQUVBc0QsSUFBRUssVUFBRixDQUFhM0QsU0FBUyxDQUF0QixNQUE2QixHQUY3QixDQUVpQyxTQUZqQztBQUdBc0QsSUFBRUssVUFBRixDQUFhM0QsU0FBUyxDQUF0QixNQUE2QixHQUg3QixDQUdpQyxTQUhqQztBQUlBc0QsSUFBRUssVUFBRixDQUFhM0QsU0FBUyxDQUF0QixNQUE2QixHQUo3QixDQUlpQyxTQUpqQztBQUtBc0QsSUFBRUssVUFBRixDQUFhM0QsU0FBUyxDQUF0QixNQUE2QixHQUw3QixDQUtpQyxTQUxqQztBQU1Bc0QsSUFBRUssVUFBRixDQUFhM0QsU0FBUyxDQUF0QixNQUE2QixHQU43QixDQU1pQyxTQU5qQztBQU9Bc0QsSUFBRUssVUFBRixDQUFhM0QsU0FBUyxDQUF0QixNQUE2QixFQVA3QixDQU9pQyxTQVBqQztBQVFBc0QsSUFBRUssVUFBRixDQUFhM0QsU0FBUyxDQUF0QixNQUE2QixFQVJqQyxDQVFxQyxTQVJyQyxFQVFnRDtBQUM5QyxhQUFPLEtBQVA7QUFDRDs7QUFFRCxPQUFLLElBQUlELElBQUlDLFNBQVMsRUFBdEIsRUFBMEJELEtBQUssQ0FBL0IsRUFBa0NBLEdBQWxDLEVBQXVDO0FBQ3JDLFFBQUl1RCxFQUFFSyxVQUFGLENBQWE1RCxDQUFiLE1BQW9CLEVBQXhCLENBQTJCLFNBQTNCLEVBQXNDO0FBQ3BDLGVBQU8sS0FBUDtBQUNEO0FBQ0Y7O0FBRUQsU0FBTyxJQUFQO0FBQ0Q7O0FBRUQ7Ozs7Ozs7O0FBUUEsU0FBUzZELDBCQUFULENBQW9DQyxRQUFwQyxFQUE4Q0MsUUFBOUMsRUFBd0RDLG1CQUF4RCxFQUE2RTtBQUMzRSxNQUFJQyxNQUFNSCxTQUFTSSxNQUFULEdBQWtCSCxTQUFTRyxNQUFyQztBQUNBLE1BQUlELFFBQVEsQ0FBWixFQUFlO0FBQ2IsV0FBT0EsR0FBUDtBQUNEOztBQUVEQSxRQUFNSCxTQUFTSyxZQUFULEdBQXdCSixTQUFTSSxZQUF2QztBQUNBLE1BQUlGLFFBQVEsQ0FBWixFQUFlO0FBQ2IsV0FBT0EsR0FBUDtBQUNEOztBQUVEQSxRQUFNSCxTQUFTTSxjQUFULEdBQTBCTCxTQUFTSyxjQUF6QztBQUNBLE1BQUlILFFBQVEsQ0FBUixJQUFhRCxtQkFBakIsRUFBc0M7QUFDcEMsV0FBT0MsR0FBUDtBQUNEOztBQUVEQSxRQUFNSCxTQUFTTyxlQUFULEdBQTJCTixTQUFTTSxlQUExQztBQUNBLE1BQUlKLFFBQVEsQ0FBWixFQUFlO0FBQ2IsV0FBT0EsR0FBUDtBQUNEOztBQUVEQSxRQUFNSCxTQUFTUSxhQUFULEdBQXlCUCxTQUFTTyxhQUF4QztBQUNBLE1BQUlMLFFBQVEsQ0FBWixFQUFlO0FBQ2IsV0FBT0EsR0FBUDtBQUNEOztBQUVELFNBQU9ILFNBQVNTLElBQVQsR0FBZ0JSLFNBQVNRLElBQWhDO0FBQ0Q7QUFDRDNFLFFBQVFpRSwwQkFBUixHQUFxQ0EsMEJBQXJDOztBQUVBOzs7Ozs7Ozs7QUFTQSxTQUFTVyxtQ0FBVCxDQUE2Q1YsUUFBN0MsRUFBdURDLFFBQXZELEVBQWlFVSxvQkFBakUsRUFBdUY7QUFDckYsTUFBSVIsTUFBTUgsU0FBU1EsYUFBVCxHQUF5QlAsU0FBU08sYUFBNUM7QUFDQSxNQUFJTCxRQUFRLENBQVosRUFBZTtBQUNiLFdBQU9BLEdBQVA7QUFDRDs7QUFFREEsUUFBTUgsU0FBU08sZUFBVCxHQUEyQk4sU0FBU00sZUFBMUM7QUFDQSxNQUFJSixRQUFRLENBQVIsSUFBYVEsb0JBQWpCLEVBQXVDO0FBQ3JDLFdBQU9SLEdBQVA7QUFDRDs7QUFFREEsUUFBTUgsU0FBU0ksTUFBVCxHQUFrQkgsU0FBU0csTUFBakM7QUFDQSxNQUFJRCxRQUFRLENBQVosRUFBZTtBQUNiLFdBQU9BLEdBQVA7QUFDRDs7QUFFREEsUUFBTUgsU0FBU0ssWUFBVCxHQUF3QkosU0FBU0ksWUFBdkM7QUFDQSxNQUFJRixRQUFRLENBQVosRUFBZTtBQUNiLFdBQU9BLEdBQVA7QUFDRDs7QUFFREEsUUFBTUgsU0FBU00sY0FBVCxHQUEwQkwsU0FBU0ssY0FBekM7QUFDQSxNQUFJSCxRQUFRLENBQVosRUFBZTtBQUNiLFdBQU9BLEdBQVA7QUFDRDs7QUFFRCxTQUFPSCxTQUFTUyxJQUFULEdBQWdCUixTQUFTUSxJQUFoQztBQUNEO0FBQ0QzRSxRQUFRNEUsbUNBQVIsR0FBOENBLG1DQUE5Qzs7QUFFQSxTQUFTRSxNQUFULENBQWdCQyxLQUFoQixFQUF1QkMsS0FBdkIsRUFBOEI7QUFDNUIsTUFBSUQsVUFBVUMsS0FBZCxFQUFxQjtBQUNuQixXQUFPLENBQVA7QUFDRDs7QUFFRCxNQUFJRCxRQUFRQyxLQUFaLEVBQW1CO0FBQ2pCLFdBQU8sQ0FBUDtBQUNEOztBQUVELFNBQU8sQ0FBQyxDQUFSO0FBQ0Q7O0FBRUQ7Ozs7QUFJQSxTQUFTQyxtQ0FBVCxDQUE2Q2YsUUFBN0MsRUFBdURDLFFBQXZELEVBQWlFO0FBQy9ELE1BQUlFLE1BQU1ILFNBQVNRLGFBQVQsR0FBeUJQLFNBQVNPLGFBQTVDO0FBQ0EsTUFBSUwsUUFBUSxDQUFaLEVBQWU7QUFDYixXQUFPQSxHQUFQO0FBQ0Q7O0FBRURBLFFBQU1ILFNBQVNPLGVBQVQsR0FBMkJOLFNBQVNNLGVBQTFDO0FBQ0EsTUFBSUosUUFBUSxDQUFaLEVBQWU7QUFDYixXQUFPQSxHQUFQO0FBQ0Q7O0FBRURBLFFBQU1TLE9BQU9aLFNBQVNJLE1BQWhCLEVBQXdCSCxTQUFTRyxNQUFqQyxDQUFOO0FBQ0EsTUFBSUQsUUFBUSxDQUFaLEVBQWU7QUFDYixXQUFPQSxHQUFQO0FBQ0Q7O0FBRURBLFFBQU1ILFNBQVNLLFlBQVQsR0FBd0JKLFNBQVNJLFlBQXZDO0FBQ0EsTUFBSUYsUUFBUSxDQUFaLEVBQWU7QUFDYixXQUFPQSxHQUFQO0FBQ0Q7O0FBRURBLFFBQU1ILFNBQVNNLGNBQVQsR0FBMEJMLFNBQVNLLGNBQXpDO0FBQ0EsTUFBSUgsUUFBUSxDQUFaLEVBQWU7QUFDYixXQUFPQSxHQUFQO0FBQ0Q7O0FBRUQsU0FBT1MsT0FBT1osU0FBU1MsSUFBaEIsRUFBc0JSLFNBQVNRLElBQS9CLENBQVA7QUFDRDtBQUNEM0UsUUFBUWlGLG1DQUFSLEdBQThDQSxtQ0FBOUMsQzs7Ozs7Ozs0RkNoYUE7O0FBRU8sSUFBTUMsZ0NBQVksU0FBWkEsU0FBWSxZQUFFQyxLQUFGLFFBQUVBLEtBQUYsQ0FBU0MsUUFBVCxRQUFTQSxRQUFULENBQW1CeEUsRUFBbkIsUUFBbUJBLEVBQW5CO0FBQ3JCLDZCQUFLLFNBQU0sWUFBWDtBQUNJLGlDQUFLLFNBQU0sUUFBWCxFQUFvQixJQUFJQSxFQUF4QixPQURKO0FBRUksZ0NBQUksU0FBTSx3QkFBVixLQUFvQ3VFLEtBQXBDLEVBRko7QUFHSSwrQkFBRyxTQUFNLDhCQUFULEtBQXlDQyxRQUF6QyxFQUhKLEVBRHFCLEdBQWxCLEM7Ozs7Ozs7eVdDRk4sV0FBU0MsSUFBVCxFQUFlQyxPQUFmLEVBQXdCO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQSxRQUFJLElBQUosRUFBZ0Q7QUFDNUNDLFFBQUEsaUNBQXFCLEVBQXJCLG9DQUF5QkQsT0FBekI7QUFBQTtBQUFBO0FBQUE7QUFDSCxLQUZELE1BRU8sSUFBSSxRQUFPdEYsT0FBUCx5Q0FBT0EsT0FBUCxPQUFtQixRQUF2QixFQUFpQztBQUNwQ0QsZUFBT0MsT0FBUCxHQUFpQnNGLFNBQWpCO0FBQ0gsS0FGTSxNQUVBO0FBQ0hELGFBQUtHLFVBQUwsR0FBa0JGLFNBQWxCO0FBQ0g7QUFDSixDQVpBLGFBWU8sWUFBVztBQUNmO0FBQ0EsYUFBU0csU0FBVCxDQUFtQkMsQ0FBbkIsRUFBc0I7QUFDbEIsZUFBTyxDQUFDQyxNQUFNQyxXQUFXRixDQUFYLENBQU4sQ0FBRCxJQUF5QkcsU0FBU0gsQ0FBVCxDQUFoQztBQUNIOztBQUVELGFBQVNJLFdBQVQsQ0FBcUJDLEdBQXJCLEVBQTBCO0FBQ3RCLGVBQU9BLElBQUksQ0FBSixFQUFPQyxXQUFQLEtBQXVCRCxJQUFJRSxTQUFKLENBQWMsQ0FBZCxDQUE5QjtBQUNIOztBQUVELGFBQVNDLE9BQVQsQ0FBaUJDLENBQWpCLEVBQW9CO0FBQ2hCLGVBQU8sWUFBVztBQUNkLG1CQUFPLEtBQUtBLENBQUwsQ0FBUDtBQUNILFNBRkQ7QUFHSDs7QUFFRCxRQUFJQyxlQUFlLENBQUMsZUFBRCxFQUFrQixRQUFsQixFQUE0QixVQUE1QixFQUF3QyxZQUF4QyxDQUFuQjtBQUNBLFFBQUlDLGVBQWUsQ0FBQyxjQUFELEVBQWlCLFlBQWpCLENBQW5CO0FBQ0EsUUFBSUMsY0FBYyxDQUFDLFVBQUQsRUFBYSxjQUFiLEVBQTZCLFFBQTdCLENBQWxCO0FBQ0EsUUFBSUMsYUFBYSxDQUFDLE1BQUQsQ0FBakI7O0FBRUEsUUFBSUMsUUFBUUosYUFBYUssTUFBYixDQUFvQkosWUFBcEIsRUFBa0NDLFdBQWxDLEVBQStDQyxVQUEvQyxDQUFaOztBQUVBLGFBQVNmLFVBQVQsQ0FBb0JqQyxHQUFwQixFQUF5QjtBQUNyQixZQUFJQSxlQUFlQyxNQUFuQixFQUEyQjtBQUN2QixpQkFBSyxJQUFJcEQsSUFBSSxDQUFiLEVBQWdCQSxJQUFJb0csTUFBTW5HLE1BQTFCLEVBQWtDRCxHQUFsQyxFQUF1QztBQUNuQyxvQkFBSW1ELElBQUltRCxjQUFKLENBQW1CRixNQUFNcEcsQ0FBTixDQUFuQixLQUFnQ21ELElBQUlpRCxNQUFNcEcsQ0FBTixDQUFKLE1BQWtCdUcsU0FBdEQsRUFBaUU7QUFDN0QseUJBQUssUUFBUWIsWUFBWVUsTUFBTXBHLENBQU4sQ0FBWixDQUFiLEVBQW9DbUQsSUFBSWlELE1BQU1wRyxDQUFOLENBQUosQ0FBcEM7QUFDSDtBQUNKO0FBQ0o7QUFDSjs7QUFFRG9GLGVBQVdvQixTQUFYLEdBQXVCO0FBQ25CQyxpQkFBUyxtQkFBVztBQUNoQixtQkFBTyxLQUFLQyxJQUFaO0FBQ0gsU0FIa0I7QUFJbkJDLGlCQUFTLGlCQUFTQyxDQUFULEVBQVk7QUFDakIsZ0JBQUl4RCxPQUFPb0QsU0FBUCxDQUFpQjFHLFFBQWpCLENBQTBCK0csSUFBMUIsQ0FBK0JELENBQS9CLE1BQXNDLGdCQUExQyxFQUE0RDtBQUN4RCxzQkFBTSxJQUFJRSxTQUFKLENBQWMsdUJBQWQsQ0FBTjtBQUNIO0FBQ0QsaUJBQUtKLElBQUwsR0FBWUUsQ0FBWjtBQUNILFNBVGtCOztBQVduQkcsdUJBQWUseUJBQVc7QUFDdEIsbUJBQU8sS0FBS0MsVUFBWjtBQUNILFNBYmtCO0FBY25CQyx1QkFBZSx1QkFBU0wsQ0FBVCxFQUFZO0FBQ3ZCLGdCQUFJQSxhQUFheEIsVUFBakIsRUFBNkI7QUFDekIscUJBQUs0QixVQUFMLEdBQWtCSixDQUFsQjtBQUNILGFBRkQsTUFFTyxJQUFJQSxhQUFheEQsTUFBakIsRUFBeUI7QUFDNUIscUJBQUs0RCxVQUFMLEdBQWtCLElBQUk1QixVQUFKLENBQWV3QixDQUFmLENBQWxCO0FBQ0gsYUFGTSxNQUVBO0FBQ0gsc0JBQU0sSUFBSUUsU0FBSixDQUFjLDZDQUFkLENBQU47QUFDSDtBQUNKLFNBdEJrQjs7QUF3Qm5CaEgsa0JBQVUsb0JBQVc7QUFDakIsZ0JBQUlvSCxlQUFlLEtBQUtDLGVBQUwsTUFBMEIsYUFBN0M7QUFDQSxnQkFBSVQsT0FBTyxNQUFNLENBQUMsS0FBS0QsT0FBTCxNQUFrQixFQUFuQixFQUF1QnJHLElBQXZCLENBQTRCLEdBQTVCLENBQU4sR0FBeUMsR0FBcEQ7QUFDQSxnQkFBSWdILFdBQVcsS0FBS0MsV0FBTCxLQUFzQixNQUFNLEtBQUtBLFdBQUwsRUFBNUIsR0FBa0QsRUFBakU7QUFDQSxnQkFBSUMsYUFBYWpDLFVBQVUsS0FBS2tDLGFBQUwsRUFBVixJQUFtQyxNQUFNLEtBQUtBLGFBQUwsRUFBekMsR0FBaUUsRUFBbEY7QUFDQSxnQkFBSUMsZUFBZW5DLFVBQVUsS0FBS29DLGVBQUwsRUFBVixJQUFxQyxNQUFNLEtBQUtBLGVBQUwsRUFBM0MsR0FBcUUsRUFBeEY7QUFDQSxtQkFBT1AsZUFBZVIsSUFBZixHQUFzQlUsUUFBdEIsR0FBaUNFLFVBQWpDLEdBQThDRSxZQUFyRDtBQUNILFNBL0JrQixFQUF2Qjs7O0FBa0NBLFNBQUssSUFBSXhILElBQUksQ0FBYixFQUFnQkEsSUFBSWdHLGFBQWEvRixNQUFqQyxFQUF5Q0QsR0FBekMsRUFBOEM7QUFDMUNvRixtQkFBV29CLFNBQVgsQ0FBcUIsUUFBUWQsWUFBWU0sYUFBYWhHLENBQWIsQ0FBWixDQUE3QixJQUE2RDhGLFFBQVFFLGFBQWFoRyxDQUFiLENBQVIsQ0FBN0Q7QUFDQW9GLG1CQUFXb0IsU0FBWCxDQUFxQixRQUFRZCxZQUFZTSxhQUFhaEcsQ0FBYixDQUFaLENBQTdCLElBQThELFVBQVMrRixDQUFULEVBQVk7QUFDdEUsbUJBQU8sVUFBU2EsQ0FBVCxFQUFZO0FBQ2YscUJBQUtiLENBQUwsSUFBVTJCLFFBQVFkLENBQVIsQ0FBVjtBQUNILGFBRkQ7QUFHSCxTQUo0RCxDQUkxRFosYUFBYWhHLENBQWIsQ0FKMEQsQ0FBN0Q7QUFLSDs7QUFFRCxTQUFLLElBQUkySCxJQUFJLENBQWIsRUFBZ0JBLElBQUkxQixhQUFhaEcsTUFBakMsRUFBeUMwSCxHQUF6QyxFQUE4QztBQUMxQ3ZDLG1CQUFXb0IsU0FBWCxDQUFxQixRQUFRZCxZQUFZTyxhQUFhMEIsQ0FBYixDQUFaLENBQTdCLElBQTZEN0IsUUFBUUcsYUFBYTBCLENBQWIsQ0FBUixDQUE3RDtBQUNBdkMsbUJBQVdvQixTQUFYLENBQXFCLFFBQVFkLFlBQVlPLGFBQWEwQixDQUFiLENBQVosQ0FBN0IsSUFBOEQsVUFBUzVCLENBQVQsRUFBWTtBQUN0RSxtQkFBTyxVQUFTYSxDQUFULEVBQVk7QUFDZixvQkFBSSxDQUFDdkIsVUFBVXVCLENBQVYsQ0FBTCxFQUFtQjtBQUNmLDBCQUFNLElBQUlFLFNBQUosQ0FBY2YsSUFBSSxtQkFBbEIsQ0FBTjtBQUNIO0FBQ0QscUJBQUtBLENBQUwsSUFBVTZCLE9BQU9oQixDQUFQLENBQVY7QUFDSCxhQUxEO0FBTUgsU0FQNEQsQ0FPMURYLGFBQWEwQixDQUFiLENBUDBELENBQTdEO0FBUUg7O0FBRUQsU0FBSyxJQUFJRSxJQUFJLENBQWIsRUFBZ0JBLElBQUkzQixZQUFZakcsTUFBaEMsRUFBd0M0SCxHQUF4QyxFQUE2QztBQUN6Q3pDLG1CQUFXb0IsU0FBWCxDQUFxQixRQUFRZCxZQUFZUSxZQUFZMkIsQ0FBWixDQUFaLENBQTdCLElBQTREL0IsUUFBUUksWUFBWTJCLENBQVosQ0FBUixDQUE1RDtBQUNBekMsbUJBQVdvQixTQUFYLENBQXFCLFFBQVFkLFlBQVlRLFlBQVkyQixDQUFaLENBQVosQ0FBN0IsSUFBNkQsVUFBUzlCLENBQVQsRUFBWTtBQUNyRSxtQkFBTyxVQUFTYSxDQUFULEVBQVk7QUFDZixxQkFBS2IsQ0FBTCxJQUFVK0IsT0FBT2xCLENBQVAsQ0FBVjtBQUNILGFBRkQ7QUFHSCxTQUoyRCxDQUl6RFYsWUFBWTJCLENBQVosQ0FKeUQsQ0FBNUQ7QUFLSDs7QUFFRCxXQUFPekMsVUFBUDtBQUNILENBOUdBLENBQUQsQzs7Ozs7OztvR0NBQSw4TTtBQUNBLG9OO0FBQ0Esb087QUFDQSw0TjtBQUNBLDRNO0FBQ0Esb047Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ21NZ0IyQyxNLEdBQUFBLE07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXFCQUMsUSxHQUFBQSxRLENBN05oQix5QyxtSkFFQTs7OztnTkFLTyxJQUFNQywwQkFBUyxTQUFUQSxNQUFTLENBQVNDLFVBQVQsRUFBcUIsQ0FDMUMsSUFBSTNFLElBQUksU0FBSkEsQ0FBSSxDQUFTNEUsS0FBVCxFQUFnQixDQUN2QixJQUFJQSxVQUFVNUIsU0FBZCxFQUF5QixDQUN4QixPQUFPaEQsRUFBRTRFLEtBQVQsQ0FDQSxDQUNEQyxPQUFPN0UsQ0FBUCxFQUFVNEUsS0FBVixFQUNBLE9BQU81RSxDQUFQLENBQ0EsQ0FORCxDQVFBQSxFQUFFOEUsU0FBRixHQUFjLElBQWQsQ0FDQTlFLEVBQUU0RSxLQUFGLEdBQVVELFVBQVYsQ0FDQTNFLEVBQUUrRSxTQUFGLEdBQWMsRUFBZCxDQUVBL0UsRUFBRWdGLEdBQUYsR0FBUSxVQUFDQyxFQUFELFVBQVFELElBQUloRixDQUFKLEVBQU9pRixFQUFQLENBQVIsRUFBUixDQUNBakYsRUFBRWtGLEVBQUYsR0FBTyxVQUFDTixLQUFELFVBQVdJLElBQUloRixDQUFKLEVBQU8sVUFBQ21GLEdBQUQsVUFBU0EsUUFBUVAsS0FBakIsRUFBUCxDQUFYLEVBQVAsQ0FDQTVFLEVBQUVvRixPQUFGLEdBQVksVUFBQ0gsRUFBRCxVQUFRRyxRQUFRcEYsQ0FBUixFQUFXaUYsRUFBWCxDQUFSLEVBQVosQ0FDQWpGLEVBQUVxRixNQUFGLEdBQVcsVUFBQ0osRUFBRCxVQUFRSSxPQUFPckYsQ0FBUCxFQUFVaUYsRUFBVixDQUFSLEVBQVgsQ0FDQWpGLEVBQUVzRixVQUFGLEdBQWUsVUFBQ0wsRUFBRCxVQUFRSyxXQUFXdEYsQ0FBWCxFQUFjaUYsRUFBZCxDQUFSLEVBQWYsQ0FDQWpGLEVBQUV1RixRQUFGLEdBQWEsVUFBQ04sRUFBRCxVQUFRTSxTQUFTdkYsQ0FBVCxFQUFZaUYsRUFBWixDQUFSLEVBQWIsQ0FDQWpGLEVBQUV3RixDQUFGLEdBQU0sVUFBQ0MsV0FBRCxVQUFpQkMsTUFBTTFGLENBQU4sRUFBU3lGLFdBQVQsQ0FBakIsRUFBTixDQUNBekYsRUFBRTJGLEtBQUYsR0FBVSxVQUFDQyxTQUFELFVBQWVELE1BQU0zRixDQUFOLEVBQVM0RixTQUFULENBQWYsRUFBVixDQUNBNUYsRUFBRTZGLEtBQUYsR0FBVSxVQUFDQyxhQUFELFVBQW1CRCxNQUFNN0YsQ0FBTixFQUFTOEYsYUFBVCxDQUFuQixFQUFWLENBQ0E5RixFQUFFK0YsTUFBRixHQUFXLFVBQUNkLEVBQUQsRUFBS2UsVUFBTCxVQUFvQkQsT0FBTy9GLENBQVAsRUFBVWlGLEVBQVYsRUFBY2UsVUFBZCxDQUFwQixFQUFYLENBRUEsT0FBT2hHLENBQVAsQ0FDQSxDQXpCTSxDLENBMkJQOzt5Z0NBR0EsU0FBU2lHLGFBQVQsQ0FBdUJDLFFBQXZCLEVBQWlDQyxRQUFqQyxFQUEyQyxDQUMxQyxPQUFPLENBQUMseUJBQVVELFFBQVYsRUFBb0JDLFFBQXBCLENBQVIsQ0FDQSxDLENBRUQ7OzhtQ0FHQSxTQUFTdEIsTUFBVCxDQUFnQnVCLE9BQWhCLEVBQXlCRCxRQUF6QixFQUFtQyxDQUNsQ0MsUUFBUXhCLEtBQVIsR0FBZ0J1QixRQUFoQixDQUNBRSxnQkFBZ0JELFFBQVFyQixTQUF4QixFQUFtQ29CLFFBQW5DLEVBQ0EsRSxDQUVEOzs2dENBR0EsU0FBU0UsZUFBVCxDQUF5QnRCLFNBQXpCLEVBQW9DSCxLQUFwQyxFQUEyQyxDQUMxQ0csVUFBVXVCLE9BQVYsQ0FBa0IsU0FBU0MsY0FBVCxDQUF3QkMsUUFBeEIsRUFBa0MsQ0FDbkRBLFNBQVM1QixLQUFULEVBQ0EsQ0FGRCxFQUdBLEMsQ0FFRDs7O3ExQ0FJQSxTQUFTNkIsS0FBVCxDQUFlTCxPQUFmLEVBQXdCTSxXQUF4QixFQUFxQyxDQUNwQyxJQUFJQyxZQUFZUCxRQUFReEIsS0FBUixLQUFrQjVCLFNBQWxCLEdBQThCMEQsWUFBWU4sUUFBUXhCLEtBQXBCLENBQTlCLEdBQTJENUIsU0FBM0UsQ0FDQSxPQUFPMEIsT0FBT2lDLFNBQVAsQ0FBUCxDQUNBLEMsQ0FFRDs7NitDQUdBLFNBQVMzQixHQUFULENBQWFvQixPQUFiLEVBQXNCbkIsRUFBdEIsRUFBMEIsQ0FDekIsSUFBSTJCLFlBQVlILE1BQU1MLE9BQU4sRUFBZW5CLEVBQWYsQ0FBaEIsQ0FDQW1CLFFBQVFyQixTQUFSLENBQWtCbkksSUFBbEIsQ0FBdUIsU0FBU2lLLFFBQVQsQ0FBa0JqQyxLQUFsQixFQUF5QixDQUMvQ2dDLFVBQVUzQixHQUFHTCxLQUFILENBQVYsRUFDQSxDQUZELEVBR0EsT0FBT2dDLFNBQVAsQ0FDQSxDLENBRUQ7O3lvREFHQSxTQUFTeEIsT0FBVCxDQUFpQmdCLE9BQWpCLEVBQTBCbkIsRUFBMUIsRUFBOEIsQ0FDN0IsSUFBSTJCLFlBQVlILE1BQU1MLE9BQU4sRUFBZSxTQUFTVSxtQkFBVCxDQUE2QmxDLEtBQTdCLEVBQW9DLENBQUUsT0FBT0ssR0FBR0wsS0FBSCxFQUFVQSxLQUFqQixDQUF5QixDQUE5RSxDQUFoQixDQUNBd0IsUUFBUXJCLFNBQVIsQ0FBa0JuSSxJQUFsQixDQUF1QixTQUFTbUssWUFBVCxDQUFzQm5DLEtBQXRCLEVBQTZCLENBQ25ESyxHQUFHTCxLQUFILEVBQVVJLEdBQVYsQ0FBYyxTQUFTZ0MsaUJBQVQsQ0FBMkJ4SyxNQUEzQixFQUFtQyxDQUNoRG9LLFVBQVVwSyxNQUFWLEVBQ0EsQ0FGRCxFQUdBLENBSkQsRUFLQSxPQUFPb0ssU0FBUCxDQUNBLEMsQ0FFRDs7OzA1REFJQSxTQUFTdkIsTUFBVCxDQUFnQmUsT0FBaEIsRUFBeUJuQixFQUF6QixFQUE2QixDQUM1QixJQUFJMkIsWUFBWUgsTUFBTUwsT0FBTixFQUFlLFVBQUN4QixLQUFELFVBQVdLLEdBQUdMLEtBQUgsSUFBWUEsS0FBWixHQUFvQjVCLFNBQS9CLEVBQWYsQ0FBaEIsQ0FDQW9ELFFBQVFyQixTQUFSLENBQWtCbkksSUFBbEIsQ0FBdUIsU0FBU3FLLFdBQVQsQ0FBcUJyQyxLQUFyQixFQUE0QixDQUNsRCxJQUFJSyxHQUFHTCxLQUFILENBQUosRUFBZSxDQUNkZ0MsVUFBVWhDLEtBQVYsRUFDQSxDQUNELENBSkQsRUFLQSxPQUFPZ0MsU0FBUCxDQUNBLEMsQ0FFRDs7OytuRUFJQSxTQUFTdEIsVUFBVCxDQUFvQmMsT0FBcEIsRUFBNkJjLFFBQTdCLEVBQXVDLENBQ3RDLElBQUlDLFlBQVlELFNBQVN6SSxLQUFULENBQWUsR0FBZixDQUFoQixDQUVBLFNBQVMySSxNQUFULENBQWdCQyxNQUFoQixFQUF3QkYsU0FBeEIsRUFBbUMsQ0FDbEMsT0FBT0EsVUFBVXBCLE1BQVYsQ0FBaUIsVUFBQ3VCLEtBQUQsRUFBUUosUUFBUixFQUFxQixDQUM1QyxPQUFPSSxNQUFNSixRQUFOLENBQVAsQ0FDQSxDQUZNLEVBRUpHLE1BRkksQ0FBUCxDQUdBLENBRUQsSUFBSVQsWUFBWUgsTUFBTUwsT0FBTixFQUFlLFVBQUN4QixLQUFELFVBQVd3QyxPQUFPeEMsS0FBUCxFQUFjdUMsU0FBZCxDQUFYLEVBQWYsQ0FBaEIsQ0FDQWYsUUFBUXJCLFNBQVIsQ0FBa0JuSSxJQUFsQixDQUF1QixTQUFTMkssZUFBVCxDQUF5QnBCLFFBQXpCLEVBQW1DLENBQ3pEUyxVQUFVUSxPQUFPakIsUUFBUCxFQUFpQmdCLFNBQWpCLENBQVYsRUFDQSxDQUZELEVBR0EsT0FBT1AsU0FBUCxDQUNBLEVBRUQsU0FBU2xCLEtBQVQsQ0FBZVUsT0FBZixFQUF3QlgsV0FBeEIsRUFBcUMsQ0FDcEMsSUFBRyxDQUFDaEcsTUFBTStILE9BQU4sQ0FBYy9CLFdBQWQsQ0FBSixFQUFnQyxDQUMvQixPQUFPSCxXQUFXYyxPQUFYLEVBQW9CWCxXQUFwQixDQUFQLENBQ0EsQ0FDRCxPQUFPakIsT0FBT2lCLFlBQVlULEdBQVosQ0FBZ0IsNEJBQVlNLFdBQVdjLE9BQVgsRUFBb0JjLFFBQXBCLENBQVosRUFBaEIsQ0FBUCxDQUFQLENBQ0EsQyxDQUVEO0FBQ0E7O0VBR0EsU0FBUzNCLFFBQVQsQ0FBa0JhLE9BQWxCLEVBQStELEtBQXBDbkIsRUFBb0MsdUVBQS9CLFVBQUN3QyxDQUFELEVBQUlDLENBQUosVUFBVXpCLGNBQWN3QixDQUFkLEVBQWlCQyxDQUFqQixDQUFWLEVBQStCLENBQzlELElBQUlkLFlBQVlILE1BQU1MLE9BQU4sRUFBZSxVQUFDeEIsS0FBRCxVQUFXQSxLQUFYLEVBQWYsQ0FBaEIsQ0FDQXdCLFFBQVFyQixTQUFSLENBQWtCbkksSUFBbEIsQ0FBdUIsU0FBUzJLLGVBQVQsQ0FBeUIzQyxLQUF6QixFQUFnQyxDQUN0RCxJQUFJSyxHQUFHMkIsVUFBVWhDLEtBQWIsRUFBb0JBLEtBQXBCLENBQUosRUFBZ0MsQ0FDL0JnQyxVQUFVaEMsS0FBVixFQUNBLENBQ0QsQ0FKRCxFQUtBLE9BQU9nQyxTQUFQLENBQ0EsQyxDQUVEOzs7NlZBSUEsU0FBU2YsS0FBVCxDQUFlTyxPQUFmLEVBQXdCTixhQUF4QixFQUF1QyxDQUN0QyxJQUFJTSxRQUFReEIsS0FBUixJQUFpQixJQUFyQixFQUEyQixDQUMxQndCLFFBQVFOLGFBQVIsRUFDQSxPQUNBLENBQ0QsT0FBT00sUUFBUXZHLE9BQU84SCxNQUFQLENBQWMsRUFBZCxFQUFrQnZCLFFBQVF4QixLQUExQixFQUFpQ2tCLGFBQWpDLENBQVIsQ0FBUCxDQUNBLENBRUQsU0FBU0gsS0FBVCxDQUFlUyxPQUFmLEVBQXdCd0IsZUFBeEIsRUFBeUMsQ0FDeEMsSUFBSWhCLFlBQVlsQyxPQUFPa0QsZ0JBQWdCaEQsS0FBaEIsR0FBd0I1QixTQUF4QixHQUFvQ29ELFFBQVF4QixLQUFuRCxDQUFoQixDQUNBLElBQUlpRCxjQUFjLFNBQWRBLFdBQWMsQ0FBQ25ELE1BQUQsRUFBWSxDQUM3QmtDLFVBQVVSLFFBQVF4QixLQUFsQixFQUNBRixPQUFPSyxTQUFQLENBQWlCbkksSUFBakIsQ0FBc0JnSyxTQUF0QixFQUNBLENBSEQsQ0FJQSxJQUFJa0Isa0JBQWtCLFNBQWxCQSxlQUFrQixDQUFDcEQsTUFBRCxFQUFZLENBQ2pDLElBQUlwRixRQUFRb0YsT0FBT0ssU0FBUCxDQUFpQjFGLE9BQWpCLENBQXlCdUgsU0FBekIsQ0FBWixDQUNBLElBQUl0SCxVQUFVLENBQUMsQ0FBZixFQUFrQixDQUNqQm9GLE9BQU9LLFNBQVAsQ0FBaUJuRyxNQUFqQixDQUF3QlUsS0FBeEIsRUFBK0IsQ0FBL0IsRUFDQSxDQUNELENBTEQsQ0FNQXNJLGdCQUFnQjVDLEdBQWhCLENBQW9CLDBCQUFrQixDQUNyQyxJQUFHK0MsY0FBSCxFQUFtQixDQUNsQkQsZ0JBQWdCMUIsT0FBaEIsRUFDQSxDQUZELE1BRU8sQ0FDTnlCLFlBQVl6QixPQUFaLEVBQ0EsQ0FDRCxDQU5ELEVBT0EsT0FBT1EsU0FBUCxDQUNBLEMsQ0FFRDs7OztvaENBS0EsU0FBU2IsTUFBVCxDQUFnQkssT0FBaEIsRUFBeUJuQixFQUF6QixFQUE2QmUsVUFBN0IsRUFBeUMsQ0FDeEMsSUFBSWdDLFlBQVk1QixRQUFReEIsS0FBUixLQUFrQjVCLFNBQWxCLEdBQThCaUMsR0FBR2UsVUFBSCxFQUFlSSxRQUFReEIsS0FBdkIsQ0FBOUIsR0FBOEQ1QixTQUE5RSxDQUNBLElBQUk0RCxZQUFZbEMsT0FBT3NELFNBQVAsQ0FBaEIsQ0FDQTVCLFFBQVFyQixTQUFSLENBQWtCbkksSUFBbEIsQ0FBdUIsU0FBU3FMLFdBQVQsQ0FBcUJyRCxLQUFyQixFQUE0QixDQUNsRG9ELFlBQVkvQyxHQUFHK0MsU0FBSCxFQUFjNUIsUUFBUXhCLEtBQXRCLENBQVosQ0FDQWdDLFVBQVVvQixTQUFWLEVBQ0EsQ0FIRCxFQUlBLE9BQU9wQixTQUFQLENBQ0EsQyxDQUVEOzs7O2swQ0FLTyxTQUFTcEMsTUFBVCxDQUFnQjBELG1CQUFoQixFQUFxQyxDQUMzQyxJQUFJQyxTQUFTRCxvQkFBb0JsRCxHQUFwQixDQUF3QiwyQkFBV29CLFFBQVF0QixTQUFSLEdBQW9Cc0IsUUFBUXhCLEtBQTVCLEdBQW9Dd0IsT0FBL0MsRUFBeEIsQ0FBYixDQUNBLElBQUlnQyxnQkFBZ0JGLG9CQUFvQm5DLE1BQXBCLENBQTJCLFVBQUNzQyxPQUFELEVBQVVDLGVBQVYsRUFBMkJoSixLQUEzQixFQUFxQyxDQUNuRixJQUFJZ0osZ0JBQWdCeEQsU0FBcEIsRUFBK0IsQ0FDOUJ1RCxRQUFRekwsSUFBUixDQUFhLEVBQ1o4SCxRQUFRNEQsZUFESSxFQUVaaEosWUFGWSxFQUFiLEVBSUEsQ0FDRCxPQUFPK0ksT0FBUCxDQUNBLENBUm1CLEVBUWpCLEVBUmlCLENBQXBCLENBU0EsSUFBSXpCLFlBQVlsQyxPQUFPeUQsT0FBTzlJLE9BQVAsQ0FBZTJELFNBQWYsTUFBOEIsQ0FBQyxDQUEvQixHQUFtQ21GLE1BQW5DLEdBQTRDbkYsU0FBbkQsQ0FBaEIsQ0FDQW9GLGNBQWM5QixPQUFkLENBQXNCLFNBQVNpQyx5QkFBVCxPQUFvRCxLQUFoQjdELE1BQWdCLFFBQWhCQSxNQUFnQixDQUFScEYsS0FBUSxRQUFSQSxLQUFRLENBQ3pFb0YsT0FBT0ssU0FBUCxDQUFpQm5JLElBQWpCLENBQXNCLFNBQVM0TCxrQkFBVCxDQUE0QjVELEtBQTVCLEVBQW1DLENBQ3hEdUQsT0FBTzdJLEtBQVAsSUFBZ0JzRixLQUFoQixDQUNBZ0MsVUFBVXVCLE9BQU85SSxPQUFQLENBQWUyRCxTQUFmLE1BQThCLENBQUMsQ0FBL0IsR0FBbUNtRixNQUFuQyxHQUE0Q25GLFNBQXRELEVBQ0EsQ0FIRCxFQUlBLENBTEQsRUFNQSxPQUFPNEQsU0FBUCxDQUNBLENBRU0sU0FBU25DLFFBQVQsQ0FBa0IyQixPQUFsQixFQUEyQixDQUNqQyxPQUFPQSxXQUFXLElBQVgsSUFBbUIsQ0FBQyxDQUFDQSxRQUFRdEIsU0FBcEMsQ0FDQSxDOzs7Ozs7O0NDL05EO0FBQ0E7Ozs7OztBQU1BLElBQUkyRCxPQUFPLG1CQUFBQyxDQUFRLENBQVIsQ0FBWDtBQUNBLElBQUlDLE1BQU05SSxPQUFPb0QsU0FBUCxDQUFpQkYsY0FBM0I7O0FBRUE7Ozs7OztBQU1BLFNBQVM2RixRQUFULEdBQW9CO0FBQ2xCLE9BQUtDLE1BQUwsR0FBYyxFQUFkO0FBQ0EsT0FBS0MsSUFBTCxHQUFZakosT0FBT0MsTUFBUCxDQUFjLElBQWQsQ0FBWjtBQUNEOztBQUVEOzs7QUFHQThJLFNBQVNHLFNBQVQsR0FBcUIsU0FBU0Msa0JBQVQsQ0FBNEJDLE1BQTVCLEVBQW9DQyxnQkFBcEMsRUFBc0Q7QUFDekUsTUFBSUMsTUFBTSxJQUFJUCxRQUFKLEVBQVY7QUFDQSxPQUFLLElBQUluTSxJQUFJLENBQVIsRUFBVzJNLE1BQU1ILE9BQU92TSxNQUE3QixFQUFxQ0QsSUFBSTJNLEdBQXpDLEVBQThDM00sR0FBOUMsRUFBbUQ7QUFDakQwTSxRQUFJRSxHQUFKLENBQVFKLE9BQU94TSxDQUFQLENBQVIsRUFBbUJ5TSxnQkFBbkI7QUFDRDtBQUNELFNBQU9DLEdBQVA7QUFDRCxDQU5EOztBQVFBOzs7Ozs7QUFNQVAsU0FBUzNGLFNBQVQsQ0FBbUJxRyxJQUFuQixHQUEwQixTQUFTQyxhQUFULEdBQXlCO0FBQ2pELFNBQU8xSixPQUFPMkosbUJBQVAsQ0FBMkIsS0FBS1YsSUFBaEMsRUFBc0NwTSxNQUE3QztBQUNELENBRkQ7O0FBSUE7Ozs7O0FBS0FrTSxTQUFTM0YsU0FBVCxDQUFtQm9HLEdBQW5CLEdBQXlCLFNBQVNJLFlBQVQsQ0FBc0J2SixJQUF0QixFQUE0QmdKLGdCQUE1QixFQUE4QztBQUNyRSxNQUFJUSxPQUFPakIsS0FBS3hJLFdBQUwsQ0FBaUJDLElBQWpCLENBQVg7QUFDQSxNQUFJeUosY0FBY2hCLElBQUlyRixJQUFKLENBQVMsS0FBS3dGLElBQWQsRUFBb0JZLElBQXBCLENBQWxCO0FBQ0EsTUFBSUUsTUFBTSxLQUFLZixNQUFMLENBQVluTSxNQUF0QjtBQUNBLE1BQUksQ0FBQ2lOLFdBQUQsSUFBZ0JULGdCQUFwQixFQUFzQztBQUNwQyxTQUFLTCxNQUFMLENBQVlqTSxJQUFaLENBQWlCc0QsSUFBakI7QUFDRDtBQUNELE1BQUksQ0FBQ3lKLFdBQUwsRUFBa0I7QUFDaEIsU0FBS2IsSUFBTCxDQUFVWSxJQUFWLElBQWtCRSxHQUFsQjtBQUNEO0FBQ0YsQ0FWRDs7QUFZQTs7Ozs7QUFLQWhCLFNBQVMzRixTQUFULENBQW1CMEYsR0FBbkIsR0FBeUIsU0FBU2tCLFlBQVQsQ0FBc0IzSixJQUF0QixFQUE0QjtBQUNuRCxNQUFJd0osT0FBT2pCLEtBQUt4SSxXQUFMLENBQWlCQyxJQUFqQixDQUFYO0FBQ0EsU0FBT3lJLElBQUlyRixJQUFKLENBQVMsS0FBS3dGLElBQWQsRUFBb0JZLElBQXBCLENBQVA7QUFDRCxDQUhEOztBQUtBOzs7OztBQUtBZCxTQUFTM0YsU0FBVCxDQUFtQjVELE9BQW5CLEdBQTZCLFNBQVN5SyxnQkFBVCxDQUEwQjVKLElBQTFCLEVBQWdDO0FBQzNELE1BQUl3SixPQUFPakIsS0FBS3hJLFdBQUwsQ0FBaUJDLElBQWpCLENBQVg7QUFDQSxNQUFJeUksSUFBSXJGLElBQUosQ0FBUyxLQUFLd0YsSUFBZCxFQUFvQlksSUFBcEIsQ0FBSixFQUErQjtBQUM3QixXQUFPLEtBQUtaLElBQUwsQ0FBVVksSUFBVixDQUFQO0FBQ0Q7QUFDRCxRQUFNLElBQUluTSxLQUFKLENBQVUsTUFBTTJDLElBQU4sR0FBYSxzQkFBdkIsQ0FBTjtBQUNELENBTkQ7O0FBUUE7Ozs7O0FBS0EwSSxTQUFTM0YsU0FBVCxDQUFtQjhHLEVBQW5CLEdBQXdCLFNBQVNDLFdBQVQsQ0FBcUJDLElBQXJCLEVBQTJCO0FBQ2pELE1BQUlBLFFBQVEsQ0FBUixJQUFhQSxPQUFPLEtBQUtwQixNQUFMLENBQVluTSxNQUFwQyxFQUE0QztBQUMxQyxXQUFPLEtBQUttTSxNQUFMLENBQVlvQixJQUFaLENBQVA7QUFDRDtBQUNELFFBQU0sSUFBSTFNLEtBQUosQ0FBVSwyQkFBMkIwTSxJQUFyQyxDQUFOO0FBQ0QsQ0FMRDs7QUFPQTs7Ozs7QUFLQXJCLFNBQVMzRixTQUFULENBQW1CaUgsT0FBbkIsR0FBNkIsU0FBU0MsZ0JBQVQsR0FBNEI7QUFDdkQsU0FBTyxLQUFLdEIsTUFBTCxDQUFZckosS0FBWixFQUFQO0FBQ0QsQ0FGRDs7QUFJQW5ELFFBQVF1TSxRQUFSLEdBQW1CQSxRQUFuQixDOzs7Ozs7O0NDdkdBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9DQSxJQUFJd0IsU0FBUyxtQkFBQTFCLENBQVEsRUFBUixDQUFiOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSTJCLGlCQUFpQixDQUFyQjs7QUFFQTtBQUNBLElBQUlDLFdBQVcsS0FBS0QsY0FBcEI7O0FBRUE7QUFDQSxJQUFJRSxnQkFBZ0JELFdBQVcsQ0FBL0I7O0FBRUE7QUFDQSxJQUFJRSx1QkFBdUJGLFFBQTNCOztBQUVBOzs7Ozs7QUFNQSxTQUFTRyxXQUFULENBQXFCQyxNQUFyQixFQUE2QjtBQUMzQixTQUFPQSxTQUFTLENBQVQ7QUFDSCxHQUFFLENBQUNBLE1BQUYsSUFBYSxDQUFkLElBQW1CLENBRGhCO0FBRUgsR0FBQ0EsVUFBVSxDQUFYLElBQWdCLENBRnBCO0FBR0Q7O0FBRUQ7Ozs7OztBQU1BLFNBQVNDLGFBQVQsQ0FBdUJELE1BQXZCLEVBQStCO0FBQzdCLE1BQUlFLGFBQWEsQ0FBQ0YsU0FBUyxDQUFWLE1BQWlCLENBQWxDO0FBQ0EsTUFBSUcsVUFBVUgsVUFBVSxDQUF4QjtBQUNBLFNBQU9FO0FBQ0gsR0FBQ0MsT0FERTtBQUVIQSxTQUZKO0FBR0Q7O0FBRUQ7OztBQUdBeE8sUUFBUXlPLE1BQVIsR0FBaUIsU0FBU0MsZ0JBQVQsQ0FBMEJMLE1BQTFCLEVBQWtDO0FBQ2pELE1BQUlNLFVBQVUsRUFBZDtBQUNBLE1BQUlDLEtBQUo7O0FBRUEsTUFBSUMsTUFBTVQsWUFBWUMsTUFBWixDQUFWOztBQUVBLEtBQUc7QUFDRE8sWUFBUUMsTUFBTVgsYUFBZDtBQUNBVyxhQUFTYixjQUFUO0FBQ0EsUUFBSWEsTUFBTSxDQUFWLEVBQWE7QUFDWDtBQUNBO0FBQ0FELGVBQVNULG9CQUFUO0FBQ0Q7QUFDRFEsZUFBV1osT0FBT1UsTUFBUCxDQUFjRyxLQUFkLENBQVg7QUFDRCxHQVRELFFBU1NDLE1BQU0sQ0FUZjs7QUFXQSxTQUFPRixPQUFQO0FBQ0QsQ0FsQkQ7O0FBb0JBOzs7O0FBSUEzTyxRQUFROE8sTUFBUixHQUFpQixTQUFTQyxnQkFBVCxDQUEwQmxMLElBQTFCLEVBQWdDbUwsTUFBaEMsRUFBd0NDLFNBQXhDLEVBQW1EO0FBQ2xFLE1BQUlDLFNBQVNyTCxLQUFLeEQsTUFBbEI7QUFDQSxNQUFJRixTQUFTLENBQWI7QUFDQSxNQUFJZ1AsUUFBUSxDQUFaO0FBQ0EsTUFBSUMsWUFBSixFQUFrQlIsS0FBbEI7O0FBRUEsS0FBRztBQUNELFFBQUlJLFVBQVVFLE1BQWQsRUFBc0I7QUFDcEIsWUFBTSxJQUFJaE8sS0FBSixDQUFVLDRDQUFWLENBQU47QUFDRDs7QUFFRDBOLFlBQVFiLE9BQU9lLE1BQVAsQ0FBY2pMLEtBQUtHLFVBQUwsQ0FBZ0JnTCxRQUFoQixDQUFkLENBQVI7QUFDQSxRQUFJSixVQUFVLENBQUMsQ0FBZixFQUFrQjtBQUNoQixZQUFNLElBQUkxTixLQUFKLENBQVUsMkJBQTJCMkMsS0FBS2pCLE1BQUwsQ0FBWW9NLFNBQVMsQ0FBckIsQ0FBckMsQ0FBTjtBQUNEOztBQUVESSxtQkFBZSxDQUFDLEVBQUVSLFFBQVFULG9CQUFWLENBQWhCO0FBQ0FTLGFBQVNWLGFBQVQ7QUFDQS9OLGFBQVNBLFVBQVV5TyxTQUFTTyxLQUFuQixDQUFUO0FBQ0FBLGFBQVNuQixjQUFUO0FBQ0QsR0FkRCxRQWNTb0IsWUFkVDs7QUFnQkFILFlBQVUxRyxLQUFWLEdBQWtCK0YsY0FBY25PLE1BQWQsQ0FBbEI7QUFDQThPLFlBQVVJLElBQVYsR0FBaUJMLE1BQWpCO0FBQ0QsQ0F4QkQsQzs7Ozs7OztDQ25IQTtBQUNBOzs7Ozs7QUFNQSxJQUFJTSxZQUFZLG1CQUFBakQsQ0FBUSxDQUFSLENBQWhCO0FBQ0EsSUFBSUQsT0FBTyxtQkFBQUMsQ0FBUSxDQUFSLENBQVg7QUFDQSxJQUFJRSxXQUFXLG1CQUFBRixDQUFRLENBQVIsRUFBdUJFLFFBQXRDO0FBQ0EsSUFBSWdELGNBQWMsbUJBQUFsRCxDQUFRLEVBQVIsRUFBMEJrRCxXQUE1Qzs7QUFFQTs7Ozs7Ozs7QUFRQSxTQUFTQyxrQkFBVCxDQUE0QjFPLEtBQTVCLEVBQW1DO0FBQ2pDLE1BQUksQ0FBQ0EsS0FBTCxFQUFZO0FBQ1ZBLFlBQVEsRUFBUjtBQUNEO0FBQ0QsT0FBSzJPLEtBQUwsR0FBYXJELEtBQUt2TCxNQUFMLENBQVlDLEtBQVosRUFBbUIsTUFBbkIsRUFBMkIsSUFBM0IsQ0FBYjtBQUNBLE9BQUs0TyxXQUFMLEdBQW1CdEQsS0FBS3ZMLE1BQUwsQ0FBWUMsS0FBWixFQUFtQixZQUFuQixFQUFpQyxJQUFqQyxDQUFuQjtBQUNBLE9BQUs2TyxlQUFMLEdBQXVCdkQsS0FBS3ZMLE1BQUwsQ0FBWUMsS0FBWixFQUFtQixnQkFBbkIsRUFBcUMsS0FBckMsQ0FBdkI7QUFDQSxPQUFLOE8sUUFBTCxHQUFnQixJQUFJckQsUUFBSixFQUFoQjtBQUNBLE9BQUtzRCxNQUFMLEdBQWMsSUFBSXRELFFBQUosRUFBZDtBQUNBLE9BQUt1RCxTQUFMLEdBQWlCLElBQUlQLFdBQUosRUFBakI7QUFDQSxPQUFLUSxnQkFBTCxHQUF3QixJQUF4QjtBQUNEOztBQUVEUCxtQkFBbUI1SSxTQUFuQixDQUE2Qm9KLFFBQTdCLEdBQXdDLENBQXhDOztBQUVBOzs7OztBQUtBUixtQkFBbUJTLGFBQW5CO0FBQ0UsU0FBU0MsZ0NBQVQsQ0FBMENDLGtCQUExQyxFQUE4RDtBQUM1RCxNQUFJQyxhQUFhRCxtQkFBbUJDLFVBQXBDO0FBQ0EsTUFBSUMsWUFBWSxJQUFJYixrQkFBSixDQUF1QjtBQUNyQ2MsVUFBTUgsbUJBQW1CRyxJQURZO0FBRXJDRixnQkFBWUEsVUFGeUIsRUFBdkIsQ0FBaEI7O0FBSUFELHFCQUFtQkksV0FBbkIsQ0FBK0IsVUFBVUMsT0FBVixFQUFtQjtBQUNoRCxRQUFJQyxhQUFhO0FBQ2ZDLGlCQUFXO0FBQ1RDLGNBQU1ILFFBQVE5TCxhQURMO0FBRVRrTSxnQkFBUUosUUFBUS9MLGVBRlAsRUFESSxFQUFqQjs7OztBQU9BLFFBQUkrTCxRQUFRbE0sTUFBUixJQUFrQixJQUF0QixFQUE0QjtBQUMxQm1NLGlCQUFXbk0sTUFBWCxHQUFvQmtNLFFBQVFsTSxNQUE1QjtBQUNBLFVBQUk4TCxjQUFjLElBQWxCLEVBQXdCO0FBQ3RCSyxtQkFBV25NLE1BQVgsR0FBb0I4SCxLQUFLdEosUUFBTCxDQUFjc04sVUFBZCxFQUEwQkssV0FBV25NLE1BQXJDLENBQXBCO0FBQ0Q7O0FBRURtTSxpQkFBV0ksUUFBWCxHQUFzQjtBQUNwQkYsY0FBTUgsUUFBUWpNLFlBRE07QUFFcEJxTSxnQkFBUUosUUFBUWhNLGNBRkksRUFBdEI7OztBQUtBLFVBQUlnTSxRQUFRN0wsSUFBUixJQUFnQixJQUFwQixFQUEwQjtBQUN4QjhMLG1CQUFXOUwsSUFBWCxHQUFrQjZMLFFBQVE3TCxJQUExQjtBQUNEO0FBQ0Y7O0FBRUQwTCxjQUFVUyxVQUFWLENBQXFCTCxVQUFyQjtBQUNELEdBekJEO0FBMEJBTixxQkFBbUJZLE9BQW5CLENBQTJCOUcsT0FBM0IsQ0FBbUMsVUFBVStHLFVBQVYsRUFBc0I7QUFDdkQsUUFBSUMsVUFBVWQsbUJBQW1CZSxnQkFBbkIsQ0FBb0NGLFVBQXBDLENBQWQ7QUFDQSxRQUFJQyxXQUFXLElBQWYsRUFBcUI7QUFDbkJaLGdCQUFVYyxnQkFBVixDQUEyQkgsVUFBM0IsRUFBdUNDLE9BQXZDO0FBQ0Q7QUFDRixHQUxEO0FBTUEsU0FBT1osU0FBUDtBQUNELENBeENIOztBQTBDQTs7Ozs7Ozs7OztBQVVBYixtQkFBbUI1SSxTQUFuQixDQUE2QmtLLFVBQTdCO0FBQ0UsU0FBU00sNkJBQVQsQ0FBdUN0USxLQUF2QyxFQUE4QztBQUM1QyxNQUFJNFAsWUFBWXRFLEtBQUt2TCxNQUFMLENBQVlDLEtBQVosRUFBbUIsV0FBbkIsQ0FBaEI7QUFDQSxNQUFJK1AsV0FBV3pFLEtBQUt2TCxNQUFMLENBQVlDLEtBQVosRUFBbUIsVUFBbkIsRUFBK0IsSUFBL0IsQ0FBZjtBQUNBLE1BQUl3RCxTQUFTOEgsS0FBS3ZMLE1BQUwsQ0FBWUMsS0FBWixFQUFtQixRQUFuQixFQUE2QixJQUE3QixDQUFiO0FBQ0EsTUFBSTZELE9BQU95SCxLQUFLdkwsTUFBTCxDQUFZQyxLQUFaLEVBQW1CLE1BQW5CLEVBQTJCLElBQTNCLENBQVg7O0FBRUEsTUFBSSxDQUFDLEtBQUs2TyxlQUFWLEVBQTJCO0FBQ3pCLFNBQUswQixnQkFBTCxDQUFzQlgsU0FBdEIsRUFBaUNHLFFBQWpDLEVBQTJDdk0sTUFBM0MsRUFBbURLLElBQW5EO0FBQ0Q7O0FBRUQsTUFBSUwsVUFBVSxJQUFkLEVBQW9CO0FBQ2xCQSxhQUFTNEQsT0FBTzVELE1BQVAsQ0FBVDtBQUNBLFFBQUksQ0FBQyxLQUFLc0wsUUFBTCxDQUFjdEQsR0FBZCxDQUFrQmhJLE1BQWxCLENBQUwsRUFBZ0M7QUFDOUIsV0FBS3NMLFFBQUwsQ0FBYzVDLEdBQWQsQ0FBa0IxSSxNQUFsQjtBQUNEO0FBQ0Y7O0FBRUQsTUFBSUssUUFBUSxJQUFaLEVBQWtCO0FBQ2hCQSxXQUFPdUQsT0FBT3ZELElBQVAsQ0FBUDtBQUNBLFFBQUksQ0FBQyxLQUFLa0wsTUFBTCxDQUFZdkQsR0FBWixDQUFnQjNILElBQWhCLENBQUwsRUFBNEI7QUFDMUIsV0FBS2tMLE1BQUwsQ0FBWTdDLEdBQVosQ0FBZ0JySSxJQUFoQjtBQUNEO0FBQ0Y7O0FBRUQsT0FBS21MLFNBQUwsQ0FBZTlDLEdBQWYsQ0FBbUI7QUFDakJ0SSxtQkFBZWdNLFVBQVVDLElBRFI7QUFFakJsTSxxQkFBaUJpTSxVQUFVRSxNQUZWO0FBR2pCck0sa0JBQWNzTSxZQUFZLElBQVosSUFBb0JBLFNBQVNGLElBSDFCO0FBSWpCbk0sb0JBQWdCcU0sWUFBWSxJQUFaLElBQW9CQSxTQUFTRCxNQUo1QjtBQUtqQnRNLFlBQVFBLE1BTFM7QUFNakJLLFVBQU1BLElBTlcsRUFBbkI7O0FBUUQsQ0FqQ0g7O0FBbUNBOzs7QUFHQTZLLG1CQUFtQjVJLFNBQW5CLENBQTZCdUssZ0JBQTdCO0FBQ0UsU0FBU0csbUNBQVQsQ0FBNkNDLFdBQTdDLEVBQTBEQyxjQUExRCxFQUEwRTtBQUN4RSxNQUFJbE4sU0FBU2lOLFdBQWI7QUFDQSxNQUFJLEtBQUs3QixXQUFMLElBQW9CLElBQXhCLEVBQThCO0FBQzVCcEwsYUFBUzhILEtBQUt0SixRQUFMLENBQWMsS0FBSzRNLFdBQW5CLEVBQWdDcEwsTUFBaEMsQ0FBVDtBQUNEOztBQUVELE1BQUlrTixrQkFBa0IsSUFBdEIsRUFBNEI7QUFDMUI7QUFDQTtBQUNBLFFBQUksQ0FBQyxLQUFLekIsZ0JBQVYsRUFBNEI7QUFDMUIsV0FBS0EsZ0JBQUwsR0FBd0J2TSxPQUFPQyxNQUFQLENBQWMsSUFBZCxDQUF4QjtBQUNEO0FBQ0QsU0FBS3NNLGdCQUFMLENBQXNCM0QsS0FBS3hJLFdBQUwsQ0FBaUJVLE1BQWpCLENBQXRCLElBQWtEa04sY0FBbEQ7QUFDRCxHQVBELE1BT08sSUFBSSxLQUFLekIsZ0JBQVQsRUFBMkI7QUFDaEM7QUFDQTtBQUNBLFdBQU8sS0FBS0EsZ0JBQUwsQ0FBc0IzRCxLQUFLeEksV0FBTCxDQUFpQlUsTUFBakIsQ0FBdEIsQ0FBUDtBQUNBLFFBQUlkLE9BQU9pTyxJQUFQLENBQVksS0FBSzFCLGdCQUFqQixFQUFtQzFQLE1BQW5DLEtBQThDLENBQWxELEVBQXFEO0FBQ25ELFdBQUswUCxnQkFBTCxHQUF3QixJQUF4QjtBQUNEO0FBQ0Y7QUFDRixDQXRCSDs7QUF3QkE7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQkFQLG1CQUFtQjVJLFNBQW5CLENBQTZCOEssY0FBN0I7QUFDRSxTQUFTQyxpQ0FBVCxDQUEyQ3hCLGtCQUEzQyxFQUErRG9CLFdBQS9ELEVBQTRFSyxjQUE1RSxFQUE0RjtBQUMxRixNQUFJWixhQUFhTyxXQUFqQjtBQUNBO0FBQ0EsTUFBSUEsZUFBZSxJQUFuQixFQUF5QjtBQUN2QixRQUFJcEIsbUJBQW1CRyxJQUFuQixJQUEyQixJQUEvQixFQUFxQztBQUNuQyxZQUFNLElBQUlwUCxLQUFKO0FBQ0o7QUFDQSxnRUFGSSxDQUFOOztBQUlEO0FBQ0Q4UCxpQkFBYWIsbUJBQW1CRyxJQUFoQztBQUNEO0FBQ0QsTUFBSUYsYUFBYSxLQUFLVixXQUF0QjtBQUNBO0FBQ0EsTUFBSVUsY0FBYyxJQUFsQixFQUF3QjtBQUN0QlksaUJBQWE1RSxLQUFLdEosUUFBTCxDQUFjc04sVUFBZCxFQUEwQlksVUFBMUIsQ0FBYjtBQUNEO0FBQ0Q7QUFDQTtBQUNBLE1BQUlhLGFBQWEsSUFBSXRGLFFBQUosRUFBakI7QUFDQSxNQUFJdUYsV0FBVyxJQUFJdkYsUUFBSixFQUFmOztBQUVBO0FBQ0EsT0FBS3VELFNBQUwsQ0FBZWlDLGVBQWYsQ0FBK0IsVUFBVXZCLE9BQVYsRUFBbUI7QUFDaEQsUUFBSUEsUUFBUWxNLE1BQVIsS0FBbUIwTSxVQUFuQixJQUFpQ1IsUUFBUWpNLFlBQVIsSUFBd0IsSUFBN0QsRUFBbUU7QUFDakU7QUFDQSxVQUFJc00sV0FBV1YsbUJBQW1CNkIsbUJBQW5CLENBQXVDO0FBQ3BEckIsY0FBTUgsUUFBUWpNLFlBRHNDO0FBRXBEcU0sZ0JBQVFKLFFBQVFoTSxjQUZvQyxFQUF2QyxDQUFmOztBQUlBLFVBQUlxTSxTQUFTdk0sTUFBVCxJQUFtQixJQUF2QixFQUE2QjtBQUMzQjtBQUNBa00sZ0JBQVFsTSxNQUFSLEdBQWlCdU0sU0FBU3ZNLE1BQTFCO0FBQ0EsWUFBSXNOLGtCQUFrQixJQUF0QixFQUE0QjtBQUMxQnBCLGtCQUFRbE0sTUFBUixHQUFpQjhILEtBQUs1TCxJQUFMLENBQVVvUixjQUFWLEVBQTBCcEIsUUFBUWxNLE1BQWxDLENBQWpCO0FBQ0Q7QUFDRCxZQUFJOEwsY0FBYyxJQUFsQixFQUF3QjtBQUN0Qkksa0JBQVFsTSxNQUFSLEdBQWlCOEgsS0FBS3RKLFFBQUwsQ0FBY3NOLFVBQWQsRUFBMEJJLFFBQVFsTSxNQUFsQyxDQUFqQjtBQUNEO0FBQ0RrTSxnQkFBUWpNLFlBQVIsR0FBdUJzTSxTQUFTRixJQUFoQztBQUNBSCxnQkFBUWhNLGNBQVIsR0FBeUJxTSxTQUFTRCxNQUFsQztBQUNBLFlBQUlDLFNBQVNsTSxJQUFULElBQWlCLElBQXJCLEVBQTJCO0FBQ3pCNkwsa0JBQVE3TCxJQUFSLEdBQWVrTSxTQUFTbE0sSUFBeEI7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsUUFBSUwsU0FBU2tNLFFBQVFsTSxNQUFyQjtBQUNBLFFBQUlBLFVBQVUsSUFBVixJQUFrQixDQUFDdU4sV0FBV3ZGLEdBQVgsQ0FBZWhJLE1BQWYsQ0FBdkIsRUFBK0M7QUFDN0N1TixpQkFBVzdFLEdBQVgsQ0FBZTFJLE1BQWY7QUFDRDs7QUFFRCxRQUFJSyxPQUFPNkwsUUFBUTdMLElBQW5CO0FBQ0EsUUFBSUEsUUFBUSxJQUFSLElBQWdCLENBQUNtTixTQUFTeEYsR0FBVCxDQUFhM0gsSUFBYixDQUFyQixFQUF5QztBQUN2Q21OLGVBQVM5RSxHQUFULENBQWFySSxJQUFiO0FBQ0Q7O0FBRUYsR0FsQ0QsRUFrQ0csSUFsQ0g7QUFtQ0EsT0FBS2lMLFFBQUwsR0FBZ0JpQyxVQUFoQjtBQUNBLE9BQUtoQyxNQUFMLEdBQWNpQyxRQUFkOztBQUVBO0FBQ0EzQixxQkFBbUJZLE9BQW5CLENBQTJCOUcsT0FBM0IsQ0FBbUMsVUFBVStHLFVBQVYsRUFBc0I7QUFDdkQsUUFBSUMsVUFBVWQsbUJBQW1CZSxnQkFBbkIsQ0FBb0NGLFVBQXBDLENBQWQ7QUFDQSxRQUFJQyxXQUFXLElBQWYsRUFBcUI7QUFDbkIsVUFBSVcsa0JBQWtCLElBQXRCLEVBQTRCO0FBQzFCWixxQkFBYTVFLEtBQUs1TCxJQUFMLENBQVVvUixjQUFWLEVBQTBCWixVQUExQixDQUFiO0FBQ0Q7QUFDRCxVQUFJWixjQUFjLElBQWxCLEVBQXdCO0FBQ3RCWSxxQkFBYTVFLEtBQUt0SixRQUFMLENBQWNzTixVQUFkLEVBQTBCWSxVQUExQixDQUFiO0FBQ0Q7QUFDRCxXQUFLRyxnQkFBTCxDQUFzQkgsVUFBdEIsRUFBa0NDLE9BQWxDO0FBQ0Q7QUFDRixHQVhELEVBV0csSUFYSDtBQVlELENBM0VIOztBQTZFQTs7Ozs7Ozs7Ozs7QUFXQXpCLG1CQUFtQjVJLFNBQW5CLENBQTZCeUssZ0JBQTdCO0FBQ0UsU0FBU1ksa0NBQVQsQ0FBNENDLFVBQTVDLEVBQXdEQyxTQUF4RCxFQUFtRUMsT0FBbkU7QUFDNENyUixLQUQ1QyxFQUNtRDtBQUNqRCxNQUFJbVIsY0FBYyxVQUFVQSxVQUF4QixJQUFzQyxZQUFZQSxVQUFsRDtBQUNHQSxhQUFXdkIsSUFBWCxHQUFrQixDQURyQixJQUMwQnVCLFdBQVd0QixNQUFYLElBQXFCLENBRC9DO0FBRUcsR0FBQ3VCLFNBRkosSUFFaUIsQ0FBQ0MsT0FGbEIsSUFFNkIsQ0FBQ3JSLEtBRmxDLEVBRXlDO0FBQ3ZDO0FBQ0E7QUFDRCxHQUxEO0FBTUssTUFBSW1SLGNBQWMsVUFBVUEsVUFBeEIsSUFBc0MsWUFBWUEsVUFBbEQ7QUFDR0MsV0FESCxJQUNnQixVQUFVQSxTQUQxQixJQUN1QyxZQUFZQSxTQURuRDtBQUVHRCxhQUFXdkIsSUFBWCxHQUFrQixDQUZyQixJQUUwQnVCLFdBQVd0QixNQUFYLElBQXFCLENBRi9DO0FBR0d1QixZQUFVeEIsSUFBVixHQUFpQixDQUhwQixJQUd5QndCLFVBQVV2QixNQUFWLElBQW9CLENBSDdDO0FBSUd3QixTQUpQLEVBSWdCO0FBQ25CO0FBQ0E7QUFDRCxHQVBJO0FBUUE7QUFDSCxVQUFNLElBQUlsUixLQUFKLENBQVUsc0JBQXNCbVIsS0FBS0MsU0FBTCxDQUFlO0FBQ25ENUIsaUJBQVd3QixVQUR3QztBQUVuRDVOLGNBQVE4TixPQUYyQztBQUduRHZCLGdCQUFVc0IsU0FIeUM7QUFJbkR4TixZQUFNNUQsS0FKNkMsRUFBZixDQUFoQyxDQUFOOztBQU1EO0FBQ0YsQ0F6Qkg7O0FBMkJBOzs7O0FBSUF5TyxtQkFBbUI1SSxTQUFuQixDQUE2QjJMLGtCQUE3QjtBQUNFLFNBQVNDLG9DQUFULEdBQWdEO0FBQzlDLE1BQUlDLDBCQUEwQixDQUE5QjtBQUNBLE1BQUlDLHdCQUF3QixDQUE1QjtBQUNBLE1BQUlDLHlCQUF5QixDQUE3QjtBQUNBLE1BQUlDLHVCQUF1QixDQUEzQjtBQUNBLE1BQUlDLGVBQWUsQ0FBbkI7QUFDQSxNQUFJQyxpQkFBaUIsQ0FBckI7QUFDQSxNQUFJM1MsU0FBUyxFQUFiO0FBQ0EsTUFBSTRTLElBQUo7QUFDQSxNQUFJdkMsT0FBSjtBQUNBLE1BQUl3QyxPQUFKO0FBQ0EsTUFBSUMsU0FBSjs7QUFFQSxNQUFJQyxXQUFXLEtBQUtwRCxTQUFMLENBQWVqQyxPQUFmLEVBQWY7QUFDQSxPQUFLLElBQUl6TixJQUFJLENBQVIsRUFBVzJNLE1BQU1tRyxTQUFTN1MsTUFBL0IsRUFBdUNELElBQUkyTSxHQUEzQyxFQUFnRDNNLEdBQWhELEVBQXFEO0FBQ25Eb1EsY0FBVTBDLFNBQVM5UyxDQUFULENBQVY7QUFDQTJTLFdBQU8sRUFBUDs7QUFFQSxRQUFJdkMsUUFBUTlMLGFBQVIsS0FBMEJnTyxxQkFBOUIsRUFBcUQ7QUFDbkRELGdDQUEwQixDQUExQjtBQUNBLGFBQU9qQyxRQUFROUwsYUFBUixLQUEwQmdPLHFCQUFqQyxFQUF3RDtBQUN0REssZ0JBQVEsR0FBUjtBQUNBTDtBQUNEO0FBQ0YsS0FORDtBQU9LO0FBQ0gsVUFBSXRTLElBQUksQ0FBUixFQUFXO0FBQ1QsWUFBSSxDQUFDZ00sS0FBS25ILG1DQUFMLENBQXlDdUwsT0FBekMsRUFBa0QwQyxTQUFTOVMsSUFBSSxDQUFiLENBQWxELENBQUwsRUFBeUU7QUFDdkU7QUFDRDtBQUNEMlMsZ0JBQVEsR0FBUjtBQUNEO0FBQ0Y7O0FBRURBLFlBQVF6RCxVQUFVYixNQUFWLENBQWlCK0IsUUFBUS9MLGVBQVI7QUFDSWdPLDJCQURyQixDQUFSO0FBRUFBLDhCQUEwQmpDLFFBQVEvTCxlQUFsQzs7QUFFQSxRQUFJK0wsUUFBUWxNLE1BQVIsSUFBa0IsSUFBdEIsRUFBNEI7QUFDMUIyTyxrQkFBWSxLQUFLckQsUUFBTCxDQUFjNU0sT0FBZCxDQUFzQndOLFFBQVFsTSxNQUE5QixDQUFaO0FBQ0F5TyxjQUFRekQsVUFBVWIsTUFBVixDQUFpQndFLFlBQVlILGNBQTdCLENBQVI7QUFDQUEsdUJBQWlCRyxTQUFqQjs7QUFFQTtBQUNBRixjQUFRekQsVUFBVWIsTUFBVixDQUFpQitCLFFBQVFqTSxZQUFSLEdBQXVCLENBQXZCO0FBQ0lxTywwQkFEckIsQ0FBUjtBQUVBQSw2QkFBdUJwQyxRQUFRak0sWUFBUixHQUF1QixDQUE5Qzs7QUFFQXdPLGNBQVF6RCxVQUFVYixNQUFWLENBQWlCK0IsUUFBUWhNLGNBQVI7QUFDSW1PLDRCQURyQixDQUFSO0FBRUFBLCtCQUF5Qm5DLFFBQVFoTSxjQUFqQzs7QUFFQSxVQUFJZ00sUUFBUTdMLElBQVIsSUFBZ0IsSUFBcEIsRUFBMEI7QUFDeEJxTyxrQkFBVSxLQUFLbkQsTUFBTCxDQUFZN00sT0FBWixDQUFvQndOLFFBQVE3TCxJQUE1QixDQUFWO0FBQ0FvTyxnQkFBUXpELFVBQVViLE1BQVYsQ0FBaUJ1RSxVQUFVSCxZQUEzQixDQUFSO0FBQ0FBLHVCQUFlRyxPQUFmO0FBQ0Q7QUFDRjs7QUFFRDdTLGNBQVU0UyxJQUFWO0FBQ0Q7O0FBRUQsU0FBTzVTLE1BQVA7QUFDRCxDQWhFSDs7QUFrRUFxUCxtQkFBbUI1SSxTQUFuQixDQUE2QnVNLHVCQUE3QjtBQUNFLFNBQVNDLHlDQUFULENBQW1EQyxRQUFuRCxFQUE2REMsV0FBN0QsRUFBMEU7QUFDeEUsU0FBT0QsU0FBUzFLLEdBQVQsQ0FBYSxVQUFVckUsTUFBVixFQUFrQjtBQUNwQyxRQUFJLENBQUMsS0FBS3lMLGdCQUFWLEVBQTRCO0FBQzFCLGFBQU8sSUFBUDtBQUNEO0FBQ0QsUUFBSXVELGVBQWUsSUFBbkIsRUFBeUI7QUFDdkJoUCxlQUFTOEgsS0FBS3RKLFFBQUwsQ0FBY3dRLFdBQWQsRUFBMkJoUCxNQUEzQixDQUFUO0FBQ0Q7QUFDRCxRQUFJaVAsTUFBTW5ILEtBQUt4SSxXQUFMLENBQWlCVSxNQUFqQixDQUFWO0FBQ0EsV0FBT2QsT0FBT29ELFNBQVAsQ0FBaUJGLGNBQWpCLENBQWdDTyxJQUFoQyxDQUFxQyxLQUFLOEksZ0JBQTFDLEVBQTREd0QsR0FBNUQ7QUFDSCxTQUFLeEQsZ0JBQUwsQ0FBc0J3RCxHQUF0QixDQURHO0FBRUgsUUFGSjtBQUdELEdBWE0sRUFXSixJQVhJLENBQVA7QUFZRCxDQWRIOztBQWdCQTs7O0FBR0EvRCxtQkFBbUI1SSxTQUFuQixDQUE2QjRNLE1BQTdCO0FBQ0UsU0FBU0MseUJBQVQsR0FBcUM7QUFDbkMsTUFBSTlLLE1BQU07QUFDUitLLGFBQVMsS0FBSzFELFFBRE47QUFFUmUsYUFBUyxLQUFLbkIsUUFBTCxDQUFjL0IsT0FBZCxFQUZEO0FBR1I4RixXQUFPLEtBQUs5RCxNQUFMLENBQVloQyxPQUFaLEVBSEM7QUFJUnFGLGNBQVUsS0FBS1gsa0JBQUwsRUFKRixFQUFWOztBQU1BLE1BQUksS0FBSzlDLEtBQUwsSUFBYyxJQUFsQixFQUF3QjtBQUN0QjlHLFFBQUkySCxJQUFKLEdBQVcsS0FBS2IsS0FBaEI7QUFDRDtBQUNELE1BQUksS0FBS0MsV0FBTCxJQUFvQixJQUF4QixFQUE4QjtBQUM1Qi9HLFFBQUl5SCxVQUFKLEdBQWlCLEtBQUtWLFdBQXRCO0FBQ0Q7QUFDRCxNQUFJLEtBQUtLLGdCQUFULEVBQTJCO0FBQ3pCcEgsUUFBSWlMLGNBQUosR0FBcUIsS0FBS1QsdUJBQUwsQ0FBNkJ4SyxJQUFJb0ksT0FBakMsRUFBMENwSSxJQUFJeUgsVUFBOUMsQ0FBckI7QUFDRDs7QUFFRCxTQUFPekgsR0FBUDtBQUNELENBbkJIOztBQXFCQTs7O0FBR0E2RyxtQkFBbUI1SSxTQUFuQixDQUE2QjFHLFFBQTdCO0FBQ0UsU0FBUzJULDJCQUFULEdBQXVDO0FBQ3JDLFNBQU94QixLQUFLQyxTQUFMLENBQWUsS0FBS2tCLE1BQUwsRUFBZixDQUFQO0FBQ0QsQ0FISDs7QUFLQXhULFFBQVF3UCxrQkFBUixHQUE2QkEsa0JBQTdCLEM7Ozs7Ozs7Ozs7O0FDL1lnQnNFLE0sR0FBQUEsTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUJBQyxJLEdBQUFBLEk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnSEFDLFUsR0FBQUEsVSxDQXpJaEIsc0NBRUEsSUFBTUMsWUFBWSxPQUFsQixDQUVPLFNBQVNILE1BQVQsQ0FBZ0JJLFNBQWhCLEVBQTJCQyxhQUEzQixFQUEwQyxDQUNoRCxPQUFPRCxVQUFVRSxLQUFWLENBQWdCMUssTUFBaEIsQ0FBdUIsdUJBQXFHLEtBQTNGMkssVUFBMkYsUUFBbkdDLE9BQW1HLENBQXZFQyxVQUF1RSxRQUEvRWIsT0FBK0UsQ0FBbERjLFdBQWtELFFBQTNEQyxRQUEyRCxLQUFuQ0MsR0FBbUMsU0FBbkNBLEdBQW1DLENBQTlCbE8sS0FBOEIsU0FBOUJBLEtBQThCLENBQXZCaU8sUUFBdUIsU0FBdkJBLFFBQXVCLENBQWJmLE9BQWEsU0FBYkEsT0FBYSxDQUNsSSxJQUFJVyxlQUFlLElBQW5CLEVBQXlCLENBQ3hCQSxhQUFhTCxXQUFXVSxHQUFYLEVBQWdCRCxRQUFoQixDQUFiLENBQ0EsSUFBSU4sYUFBSixFQUFtQixDQUNsQkEsY0FBY1EsV0FBZCxDQUEwQk4sVUFBMUIsRUFDQSxDQUNELENBQ0ROLEtBQUtNLFVBQUwsRUFBaUJLLEdBQWpCLEVBQXNCbE8sS0FBdEIsRUFBNkJpTyxRQUE3QixFQUF1Q2YsT0FBdkMsRUFBZ0RjLFdBQWhELEVBQTZERCxVQUE3RCxFQUNBLE9BQU8sRUFDTkQsU0FBU0QsVUFESCxFQUVOWCxnQkFGTSxFQUdOZSxVQUFVcEMsS0FBS3VDLEtBQUwsQ0FBV3ZDLEtBQUtDLFNBQUwsQ0FBZW1DLFFBQWYsQ0FBWCxDQUhKLEVBQVAsQ0FLQSxDQWJNLEVBYUosRUFDRkgsU0FBUyxJQURQLEVBRUZaLFNBQVMsQ0FBQyxDQUZSLEVBR0ZlLFVBQVUsRUFIUixFQWJJLENBQVAsQ0FrQkEsQ0FFTSxTQUFTVixJQUFULENBQWNNLFVBQWQsRUFBMEJLLEdBQTFCLEVBQStCbE8sS0FBL0IsRUFBc0NxTyxXQUF0QyxFQUFtREMsVUFBbkQsRUFBK0ROLFdBQS9ELEVBQTRFRCxVQUE1RSxFQUF3RixDQUM5RjtBQUNBLEtBQUlPLGVBQWVuTyxTQUFmLElBQTRCbU8sZUFBZVAsVUFBL0MsRUFBMkQsQ0FDMUQsT0FBT0YsVUFBUCxDQUNBLENBQ0QsSUFBSVUsYUFBYVYsVUFBakIsQ0FFQSxJQUFJQSxzQkFBc0JXLE9BQU9DLElBQTdCLElBQXFDUCxRQUFRVCxTQUE3QyxJQUEwREksV0FBV2EsU0FBWCxLQUF5QkwsWUFBWSxDQUFaLENBQXZGLEVBQXVHLENBQ3RHUixXQUFXYSxTQUFYLEdBQXVCTCxZQUFZLENBQVosQ0FBdkIsQ0FDQSxPQUFPRSxVQUFQLENBQ0EsQ0FFRCxJQUFJVixXQUFXYyxRQUFYLENBQW9CQyxXQUFwQixPQUFzQ1YsR0FBMUMsRUFBK0MsQ0FDOUNLLGFBQWFmLFdBQVdVLEdBQVgsRUFBZ0JHLFdBQWhCLENBQWIsQ0FDQVIsV0FBV0YsYUFBWCxDQUF5QmtCLFlBQXpCLENBQXNDTixVQUF0QyxFQUFrRFYsVUFBbEQsRUFDQUcsY0FBYyxFQUFkLENBQ0FELGFBQWEsQ0FBQyxDQUFkLENBQ0EsQ0FFRGUsZUFBZVAsVUFBZixFQUEyQnZPLEtBQTNCLEVBQ0EsSUFBSWtPLFFBQVFULFNBQVIsSUFBcUIsRUFBRVksWUFBWXhVLE1BQVosS0FBdUIsQ0FBdkIsSUFBNEJtVSxZQUFZblUsTUFBWixLQUF1QixDQUFyRCxDQUF6QixFQUFrRixDQUNqRmtWLGFBQWFSLFVBQWIsRUFBeUJGLFdBQXpCLEVBQXNDTCxXQUF0QyxFQUNBLENBRUQsT0FBT08sVUFBUCxDQUNBLENBRUQsU0FBU08sY0FBVCxDQUF3QmhCLE9BQXhCLEVBQWlDOU4sS0FBakMsRUFBd0MsQ0FDdkMsSUFBSUEsVUFBVUcsU0FBZCxFQUF5QixDQUN4Qm5ELE9BQU8ySixtQkFBUCxDQUEyQjNHLEtBQTNCLEVBQWtDbUMsR0FBbEMsQ0FBc0MsU0FBUzZNLHNCQUFULENBQWdDQyxTQUFoQyxFQUEyQyxDQUNoRkMsZUFBZXBCLE9BQWYsRUFBd0JtQixTQUF4QixFQUFtQ2pQLE1BQU1pUCxTQUFOLENBQW5DLEVBQ0EsQ0FGRCxFQUdBRSxrQkFBa0JyQixPQUFsQixFQUEyQjlOLEtBQTNCLEVBQ0EsQ0FDRCxDQUVELFNBQVNrUCxjQUFULENBQXdCcEIsT0FBeEIsRUFBaUNtQixTQUFqQyxFQUE0Q2xOLEtBQTVDLEVBQW1ELENBQ2xELElBQUlrTixjQUFjLE9BQWQsSUFBeUJBLGNBQWMsV0FBM0MsRUFBd0QsQ0FDdkRuQixRQUFRc0IsU0FBUixHQUFvQnJOLEtBQXBCLENBRHVELENBRXhEO0FBQ0E7QUFDQyxFQUpELE1BSU8sSUFBSWtOLGNBQWMsT0FBZCxJQUF5QixPQUFPbE4sS0FBUCxLQUFpQixRQUE5QyxFQUF5RCxDQUMvRC9FLE9BQU84SCxNQUFQLENBQWNnSixRQUFRdUIsS0FBdEIsRUFBNkJ0TixLQUE3QixFQUQrRCxDQUVoRTtBQUNDLEVBSE0sTUFHQSxDQUNOO0FBQ0E7QUFDQSxNQUFJQSxVQUFVLElBQWQsRUFBb0IsQ0FDbkIrTCxRQUFRbUIsU0FBUixJQUFxQjlPLFNBQXJCLENBQ0EsQ0FGRCxNQUVPLENBQ047QUFDQTJOLFdBQVFtQixTQUFSLElBQXFCbE4sS0FBckIsQ0FDQSxDQUNELENBQ0QsQyxDQUVEO0FBQ0EsU0FBU29OLGlCQUFULENBQTJCckIsT0FBM0IsRUFBb0M5TixLQUFwQyxFQUEyQyxDQUMxQyxJQUFJOE4sUUFBUTlOLEtBQVIsS0FBa0JHLFNBQXRCLEVBQWlDLENBQ2hDLEtBQUksSUFBSThPLFNBQVIsSUFBcUJuQixRQUFROU4sS0FBN0IsRUFBb0MsQ0FDbkMsSUFBSUEsTUFBTWlQLFNBQU4sTUFBcUI5TyxTQUF6QixFQUFvQyxDQUNuQzJOLFFBQVF3QixlQUFSLENBQXdCTCxTQUF4QixFQUNBLENBQ0QsQ0FDRCxDQUNELENBRUQsU0FBU00sYUFBVCxDQUF1QnRCLFFBQXZCLEVBQWlDLENBQ2hDLE9BQU9BLFNBQVM5TCxHQUFULENBQWEsaUJBQVMsQ0FDNUI7QUFDQSxNQUFJLENBQUMsdUJBQVNxTixLQUFULENBQUQsSUFBb0JBLE1BQU10QixHQUFOLEtBQWMvTixTQUF0QyxFQUFpRCxDQUNoRCxPQUFPLEVBQ04rTixLQUFLVCxTQURDLEVBRU5RLFVBQVUsQ0FBQ3VCLEtBQUQsQ0FGSixFQUdOdEMsU0FBUyxDQUhILEVBQVAsQ0FLQSxDQU5ELE1BTU8sQ0FDTixPQUFPc0MsS0FBUCxDQUNBLENBQ0QsQ0FYTSxDQUFQLENBWUEsQ0FFRCxTQUFTVCxZQUFULENBQXNCakIsT0FBdEIsRUFBK0JPLFdBQS9CLEVBQTRDTCxXQUE1QyxFQUF5RCxDQUN4RCxJQUFJeUIsZ0JBQWdCM0IsUUFBUTRCLFVBQTVCLENBQ0EsSUFBSUMsa0JBQWtCSixjQUFjbEIsV0FBZCxDQUF0QixDQUNBLElBQUl1QixxQkFBcUJMLGNBQWN2QixXQUFkLENBQXpCLENBRUEsSUFBSXBVLElBQUksQ0FBUixDQUx3RCxDQU14RDtBQUNBLFFBQU1BLElBQUlnVyxtQkFBbUIvVixNQUF2QixJQUFpQ0QsSUFBSStWLGdCQUFnQjlWLE1BQTNELEVBQW1FRCxHQUFuRSxFQUF3RSxDQUN2RSxJQUFJaVUsYUFBYTRCLGNBQWM3VixDQUFkLENBQWpCLENBRHVFLDRCQUVmZ1csbUJBQW1CaFcsQ0FBbkIsQ0FGZSxDQUV6RG1VLFVBRnlELHlCQUVsRWIsT0FGa0UsQ0FFbkMyQyxnQkFGbUMseUJBRTdDNUIsUUFGNkMsMEJBR2pDMEIsZ0JBQWdCL1YsQ0FBaEIsQ0FIaUMsQ0FHbEVzVSxHQUhrRSxzQkFHbEVBLEdBSGtFLENBRzdEbE8sS0FINkQsc0JBRzdEQSxLQUg2RCxDQUd0RGlPLFFBSHNELHNCQUd0REEsUUFIc0QsQ0FHNUNmLE9BSDRDLHNCQUc1Q0EsT0FINEMsQ0FJdkVLLEtBQUtNLFVBQUwsRUFBaUJLLEdBQWpCLEVBQXNCbE8sS0FBdEIsRUFBNkJpTyxRQUE3QixFQUF1Q2YsT0FBdkMsRUFBZ0QyQyxnQkFBaEQsRUFBa0U5QixVQUFsRSxFQUNBLENBWnVELENBY3hEO0FBQ0EsUUFBTW5VLElBQUlnVyxtQkFBbUIvVixNQUE3QixFQUFxQ0QsR0FBckMsRUFBMEMsQ0FDekNrVSxRQUFRZ0MsV0FBUixDQUFvQmhDLFFBQVFpQyxTQUE1QixFQUNBLENBakJ1RCxDQW1CeEQ7QUFDQSxRQUFNblcsSUFBSStWLGdCQUFnQjlWLE1BQTFCLEVBQWtDRCxHQUFsQyxFQUF1QywyQkFDQStWLGdCQUFnQi9WLENBQWhCLENBREEsQ0FDakNzVSxHQURpQyx1QkFDakNBLEdBRGlDLENBQzVCbE8sS0FENEIsdUJBQzVCQSxLQUQ0QixDQUNyQmlPLFFBRHFCLHVCQUNyQkEsUUFEcUIsQ0FDWGYsT0FEVyx1QkFDWEEsT0FEVyxDQUV0QyxJQUFJcUIsYUFBYWYsV0FBV1UsR0FBWCxFQUFnQkQsUUFBaEIsQ0FBakIsQ0FDQUgsUUFBUUssV0FBUixDQUFvQkksVUFBcEIsRUFDQWhCLEtBQUtnQixVQUFMLEVBQWlCTCxHQUFqQixFQUFzQmxPLEtBQXRCLEVBQTZCaU8sUUFBN0IsRUFBdUNmLE9BQXZDLEVBQWdELEVBQWhELEVBQW9ELENBQUMsQ0FBckQsRUFDQSxDQUNELEMsQ0FFRDtBQUNBO0FBQ08sU0FBU00sVUFBVCxDQUFvQlUsR0FBcEIsRUFBeUJELFFBQXpCLEVBQW1DLENBQ3pDLElBQUlDLFFBQVFULFNBQVosRUFBdUIsQ0FDdEIsT0FBT3VDLFNBQVNDLGNBQVQsQ0FBd0JoQyxTQUFTLENBQVQsQ0FBeEIsQ0FBUCxDQUNBLENBRkQsTUFFTyxDQUNOLE9BQU8rQixTQUFTRSxhQUFULENBQXVCaEMsR0FBdkIsQ0FBUCxDQUNBLENBQ0QsQzs7Ozs7Ozt5RkMvSUQ7QUFDQTs7QUFFTyxJQUFNaUMsMEJBQVMsU0FBVEEsTUFBUyxHQUFNO0FBQ3hCLFFBQUlDLFVBQVUsa0JBQWQ7QUFDQTVCLFdBQU82QixnQkFBUCxDQUF3QixRQUF4QixFQUFrQ0QsT0FBbEM7O0FBRUEsUUFBSUUsZ0JBQWdCLGlCQUFPLEtBQVAsQ0FBcEI7QUFDQSxRQUFJQyxTQUFTO0FBQ0wscUJBQU9ELGNBQWNuTyxHQUFkLENBQWtCLDBCQUFVLDBDQUEwQ3FPLFNBQVMsUUFBVCxHQUFvQixFQUE5RCxDQUFWLEVBQWxCLENBREY7QUFFTCxxQkFBUyxpQkFBQ0MsQ0FBRCxVQUFPQSxFQUFFQyxNQUFGLENBQVNDLE9BQVQsSUFBb0IsR0FBcEIsSUFBMkJDLFVBQWxDLEVBRko7O0FBSUwsNkJBQUssU0FBTSxXQUFYO0FBQ0ksaUNBQUssU0FBTSxLQUFYO0FBQ0kscUNBQUssU0FBTSxnQkFBWDtBQUNJLHlDQUFLLEtBQUksWUFBVCxPQURKLEVBREo7O0FBSUksb0NBQUksU0FBTSwwQkFBVixhQUpKLEVBREo7O0FBT0ksZ0NBQUksU0FBTSx1QkFBVixnRUFQSixFQUpLOztBQWFMLDZCQUFLLFNBQU0sa0JBQVg7QUFDSSwrQkFBRyxNQUFLLGNBQVIsbUJBREo7QUFFSSwrQkFBRyxNQUFLLFlBQVIsaUJBRko7QUFHSSwrQkFBRyxNQUFLLFdBQVIsZ0JBSEo7QUFJSSwrQkFBRyxNQUFLLFNBQVIsY0FKSjtBQUtJLCtCQUFHLE1BQUssV0FBUixnQkFMSjtBQU1JLCtCQUFHLE1BQUssV0FBUixnQkFOSjtBQU9JLCtCQUFHLE1BQUssYUFBUixrQkFQSjtBQVFJLCtCQUFHLE1BQUssV0FBUixnQkFSSixFQWJLLEVBQWI7Ozs7QUF5QkFSLFlBQVFqTyxHQUFSLENBQVksWUFBTTtBQUNkLFlBQUksQ0FBQ21PLGNBQWN2TyxLQUFmLElBQXlCaU8sU0FBU2EsSUFBVCxDQUFjQyxZQUFkLEdBQTZCLEdBQTFELEVBQWdFLE9BQU8sS0FBUDtBQUNoRSxZQUFJQyxZQUFZdkMsT0FBT3dDLE9BQXZCO0FBQ0EsZUFBT0QsWUFBWSxHQUFuQjtBQUNILEtBSkQsRUFJRzVPLEdBSkgsQ0FJT21PLGFBSlA7O0FBTUEsV0FBT0MsTUFBUDtBQUNILENBckNNOztBQXVDUCxTQUFTSyxRQUFULEdBQW9CO0FBQ2hCSyxhQUFTakIsU0FBU2EsSUFBbEIsRUFBd0IsQ0FBeEIsRUFBMkIsR0FBM0I7QUFDSDs7QUFFRCxTQUFTSSxRQUFULENBQWtCbkQsT0FBbEIsRUFBMkJvRCxFQUEzQixFQUErQkMsUUFBL0IsRUFBeUM7QUFDckMsUUFBSUEsWUFBWSxDQUFoQixFQUFtQjtBQUNuQixRQUFJQyxhQUFhRixLQUFLcEQsUUFBUWlELFNBQTlCO0FBQ0EsUUFBSU0sVUFBVUQsYUFBYUQsUUFBYixHQUF3QixFQUF0Qzs7QUFFQUcsZUFBVyxZQUFXO0FBQ2xCeEQsZ0JBQVFpRCxTQUFSLEdBQW9CakQsUUFBUWlELFNBQVIsR0FBb0JNLE9BQXhDO0FBQ0EsWUFBSXZELFFBQVFpRCxTQUFSLEtBQXNCRyxFQUExQixFQUE4QjtBQUM5QkQsaUJBQVNuRCxPQUFULEVBQWtCb0QsRUFBbEIsRUFBc0JDLFdBQVcsRUFBakM7QUFDSCxLQUpELEVBSUcsRUFKSDtBQUtILEM7Ozs7Ozs7d0ZDeEREOztBQUVBLElBQUlJLGFBQWEsU0FBYkEsVUFBYSxPQUFnQnRELFFBQWhCLEVBQTZCLEtBQTNCdUQsSUFBMkIsUUFBM0JBLElBQTJCLENBQXJCN1MsS0FBcUIsUUFBckJBLEtBQXFCO0FBQzFDLFdBQU8scUJBQUssU0FBTSxZQUFYO0FBQ0gsNkJBQUssU0FBTSxjQUFYO0FBQ0ksK0JBQUcsU0FBTSwwQkFBVCxLQUFxQzZTLElBQXJDLEVBREo7QUFFSSwrQkFBRyxTQUFNLDhCQUFULEtBQXlDN1MsS0FBekMsRUFGSjtBQUdJLCtCQUFHLFNBQU0sY0FBVDtBQUNLc1Asd0JBREwsRUFISixFQURHLEVBQVA7Ozs7QUFTSCxDQVZEOztBQVlPLElBQU13RCx3QkFBUSxTQUFSQSxLQUFRO0FBQ2pCLDZCQUFLLFNBQU0sU0FBWDtBQUNJLGlDQUFLLFNBQU0sS0FBWDtBQUNJLDRCQUFDLFVBQUQsSUFBWSxNQUFLLGNBQWpCLEVBQWdDLE9BQU0sY0FBdEM7O0FBRUksK0NBRkosMkJBREo7OztBQU1JLDRCQUFDLFVBQUQsSUFBWSxNQUFLLFlBQWpCLEVBQThCLE9BQU0sa0JBQXBDOztBQUVJLCtDQUZKLG9CQU5KOzs7QUFXSSw0QkFBQyxVQUFELElBQVksTUFBSyxZQUFqQixFQUE4QixPQUFNLGNBQXBDOztBQUVJLCtDQUZKLDJCQVhKLEVBREosRUFEaUIsR0FBZCxDOzs7Ozs7OzZGQ2RQO0FBQ0E7QUFDQTs7QUFFTyxJQUFNQyxrQ0FBYSxTQUFiQSxVQUFhO0FBQ3RCLDZCQUFLLFNBQU0sU0FBWDtBQUNJLGdEQUFXLE9BQU0sWUFBakIsRUFBOEIsVUFBUywrQkFBdkMsT0FESjtBQUVJLG9DQUFRLFdBQVIsRUFBYyxLQUFJLGlEQUFsQixPQUZKLEVBRHNCLEdBQW5CLEM7Ozs7Ozs7MkZDSlA7QUFDQTtBQUNBO0FBQ0E7O0FBRU8sSUFBTUMsOEJBQVcsU0FBWEEsUUFBVztBQUNwQixxQ0FBSyxTQUFNLGtCQUFYO0FBQ0ksNERBQVcsT0FBTSxvQkFBakIsRUFBc0MsVUFBUywwQkFBL0MsRUFBMEUsSUFBRyxVQUE3RSxPQURKOztBQUdJO0FBQ2MsbURBQUcsTUFBSyxpQ0FBUixZQURkLCtJQUhKOztBQU1JLDJGQU5KOztBQVFJLHNUQVJKOzs7Ozs7Ozs7O0FBa0JJLG1GQUFrQyxnQ0FBbEMsNkRBQXVHLGdDQUF2RyxzQ0FsQko7O0FBb0JJLDRXQXBCSjs7Ozs7Ozs7Ozs7O0FBZ0NJLHdYQWhDSjs7O0FBbUNJLDJKQW5DSjs7QUFxQ0ksMlVBckNKOzs7Ozs7Ozs7Ozs7QUFpREksK0dBakRKOztBQW1ESSxxTUFuREo7Ozs7Ozs7O0FBMkRJLCtKQTNESjs7QUE2REksOFhBN0RKOzs7Ozs7Ozs7Ozs7Ozs7QUE0RUkscUdBNUVKOztBQThFSSxtSkE5RUo7OztBQWlGSSw0REFBVyxPQUFNLFNBQWpCLEVBQTJCLFVBQVMsZUFBcEMsRUFBb0QsSUFBRyxTQUF2RCxPQWpGSjs7QUFtRkkscU9BQW1MLG1CQUFHLE1BQUssNkNBQVIsYUFBbkwsd0hBQW1XLG1CQUFHLE1BQUssbUNBQVIsYUFBblcsT0FuRko7O0FBcUZJLGcxQkFyRko7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNEdJLGdHQUErQyxtQ0FBL0MsUUFBa0Usa0NBQWxFLFFBQW9GLHVDQUFwRixRQUEyRyxzQ0FBM0csUUFBaUksMENBQWpJLFFBQTJKLHdDQUEzSixRQUFtTCxpQ0FBbkwsUUFBb00scUNBQXBNLFdBQTROLHNDQUE1TixpQkFBMlAsbURBQTNQLHdCQTVHSjs7QUE4R0ksa0ZBQWlDLG1DQUFqQyw0TkE5R0o7O0FBZ0hJLDJYQWhISjs7Ozs7Ozs7Ozs7OztBQTZISSwyRUFBMEIscUNBQTFCLDBEQTdISjs7QUErSEksc1dBL0hKOzs7Ozs7Ozs7OztBQTBJSSwrSUExSUo7O0FBNElJLHFXQTVJSjs7Ozs7Ozs7OztBQXNKSSwrS0F0Sko7O0FBd0pJLGlZQXhKSjs7Ozs7Ozs7Ozs7QUFtS0ksNERBQVcsT0FBTSxrQkFBakIsRUFBb0MsVUFBUyxpQ0FBN0MsRUFBZ0YsSUFBRyxPQUFuRixPQW5LSjs7QUFxS0ksbVpBcktKOztBQXVLSSwySkF2S0o7O0FBeUtJLDZPQXpLSjs7Ozs7Ozs7O0FBa0xJLG9GQUFtQyxtQkFBRyxNQUFLLHNCQUFSLGNBQW5DLGdGQWxMSjs7QUFvTEksMFVBcExKOzs7Ozs7Ozs7Ozs7QUFnTUksb05BaE1KOztBQWtNSSxxWUFsTUo7Ozs7Ozs7Ozs7Ozs7QUErTUksNERBQVcsT0FBTSxTQUFqQixFQUEyQixVQUFTLDZDQUFwQyxFQUFrRixJQUFHLFNBQXJGLE9BL01KOztBQWlOSSxxU0FqTko7O0FBbU5JLHlFQW5OSjs7QUFxTkksOEdBck5KOztBQXVOSSx1YkF2Tko7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1T0ksbUdBdk9KOztBQXlPSSwwUkF6T0o7Ozs7Ozs7Ozs7OztBQXFQSSx5RUFyUEo7O0FBdVBJLDhHQXZQSjs7QUF5UEksOExBelBKOzs7Ozs7O0FBZ1FJLDhKQWhRSjs7QUFrUUksb0xBbFFKOzs7Ozs7O0FBeVFJLGdGQXpRSjs7QUEyUUksMExBM1FKOztBQTZRSSx5ekNBN1FKOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdUSSw0REFBVyxPQUFNLFNBQWpCLEVBQTJCLFVBQVMsd0NBQXBDLEVBQTZFLElBQUcsU0FBaEYsT0FoVEo7O0FBa1RJLHFNQWxUSjs7QUFvVEksMktBcFRKOzs7Ozs7O0FBMlRJLDROQTNUSjs7QUE2VEksd2hCQTdUSjs7Ozs7Ozs7Ozs7Ozs7O0FBNFVJLHVIQTVVSjs7QUE4VUksa0ZBQWlDLG1CQUFHLE1BQUssa0JBQVIsc0JBQWpDLEVBOVVKOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxWEksNERBQVcsT0FBTSxTQUFqQixFQUEyQixVQUFTLGtDQUFwQyxFQUF1RSxJQUFHLFNBQTFFLE9BclhKOztBQXVYSSwySEF2WEo7O0FBeVhJLHVrQkF6WEo7Ozs7Ozs7Ozs7Ozs7OztBQXdZSSxzSEFBcUUsbUJBQUcsTUFBSyxrQ0FBUixhQUFyRSxtQ0F4WUosRUFEb0IsR0FBakIsQzs7Ozs7O0FDTFA7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBOEU7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxnQ0FBZ0MsVUFBVSxFQUFFO0FBQzVDLEM7Ozs7OztBQ3BCQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUFvRTtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLGdDQUFnQyxVQUFVLEVBQUU7QUFDNUMsQzs7Ozs7Ozs7QUNuQkE7OztBQUdBOzs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSx3QixDQVJBO0FBTkE7QUFOQTtBQXNCQSw4QixDQUhBO0FBVkE7QUFOQTtBQXFCQSxJQUFJQyxVQUFVLHNCQUFkLEMsQ0FFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJQyxNQUFNO0FBQ1Qsc0NBRFM7QUFFVCxzQkFBSyxTQUFNLFdBQVg7QUFDQyxxQkFBRyxNQUFLLGlDQUFSLEtBQTBDLHFCQUFLLE9BQU0sa0RBQVgsRUFBOEQsS0FBSSw4TkFBbEUsRUFBaVMsS0FBSSxtQkFBclMsRUFBeVQsc0JBQW1CLDBFQUE1VSxPQUExQyxFQUREO0FBRUMsNkJBQVEsU0FBU0QsT0FBakIsRUFBMEIsT0FBTyxHQUFqQztBQUNDLHNDQUREO0FBRUMsd0JBQUssU0FBTSxTQUFYO0FBQ08sd0NBQVcsT0FBTSxZQUFqQixFQUE4QixVQUFTLGdDQUF2QyxFQUF3RSxJQUFHLFlBQTNFLE9BRFA7O0FBR0MseUJBQUssU0FBTSxLQUFYO0FBQ0MscUhBQXVGLG1CQUFHLE1BQUssc0RBQVIsWUFBdkYsNlhBREQ7QUFFQyw4TkFGRDtBQUdDLGtNQUFrSyxtQkFBRyxNQUFLLHdCQUFSLGVBQWxLLDhJQUhELEVBSEQsRUFGRDs7O0FBV0MsNENBWEQ7QUFZQyxnREFaRCxFQUZEOztBQWdCQyw2QkFBUSxTQUFTQSxPQUFqQixFQUEwQixPQUFNLFVBQWhDOztBQUVFQSxXQUFRalAsQ0FBUixDQUFVLFFBQVYsRUFBb0JSLEdBQXBCLENBQXdCLDBCQUFVMEosS0FBS0MsU0FBTCxDQUFlZ0csTUFBZixDQUFWLEVBQXhCLENBRkY7QUFHQyxzQkFBRyxNQUFLLFdBQVIsZ0JBSEQsRUFoQkQsRUFGUyxFQUFWOzs7O0FBeUJBLGlCQUFPRCxHQUFQLEVBQVk3QixTQUFTK0IsYUFBVCxDQUF1QixNQUF2QixDQUFaLEU7Ozs7Ozs7MEdDdERBLHVDO0FBQ0E7QUFDQTtBQUNBLGtDOztBQUVPLElBQU1DLDBCQUFTLFNBQVRBLE1BQVMsQ0FBQ2hTLEtBQUQsRUFBUWlTLFNBQVIsRUFBc0I7QUFDeEM7QUFDQSxRQUFJQyxRQUFRLGlCQUFPLEVBQVAsQ0FBWjtBQUNBWixlQUFXLFlBQU07QUFDYlcsa0JBQVU5UCxHQUFWLENBQWMsb0JBQVk7QUFDdEIsZ0JBQUlnUSxPQUFPbEUsU0FBUyxDQUFULENBQVg7QUFDQSxnQkFBSW1FLHFCQUFxQkQ7QUFDcEJ2VyxpQkFEb0IsQ0FDZCxJQURjO0FBRXBCNEcsa0JBRm9CLENBRWIsd0JBQVEySCxLQUFLa0ksSUFBTCxPQUFnQixFQUF4QixFQUZhO0FBR3BCbFEsZUFIb0IsQ0FHaEIsd0JBQVFnSSxLQUFLa0ksSUFBTCxHQUFZeFYsTUFBWixDQUFtQixDQUFuQixDQUFSLEVBSGdCO0FBSXBCN0MsZ0JBSm9CLENBSWYsSUFKZSxDQUF6QjtBQUtBLGdCQUFJc1ksT0FBTyxrQkFBTUMsU0FBTixDQUFnQkgsa0JBQWhCLEVBQW9DLGtCQUFNSSxTQUFOLENBQWdCQyxHQUFwRCxDQUFYO0FBQ0EsbUJBQU9ILElBQVA7QUFDSCxTQVRELEVBU0duUSxHQVRILENBU08rUCxLQVRQO0FBVUgsS0FYRCxFQVdHLEVBWEg7QUFZQSxXQUFPLHFCQUFLLFNBQU0sY0FBWDtBQUNILDhCQUFNLFNBQU0sY0FBWixFQUEyQixXQUFXQSxLQUF0QyxPQURHLEVBQVA7O0FBR0gsQ0FsQk07O0FBb0JBLElBQU1RLDBCQUFTLFNBQVRBLE1BQVMsQ0FBQzFTLEtBQUQsRUFBUWlPLFFBQVIsRUFBcUI7QUFDdkMsV0FBTyxxQkFBSyxTQUFNLGdCQUFYO0FBQ0ZBLGdCQURFLEVBQVA7O0FBR0gsQ0FKTSxDOzs7Ozs7O3lRQ3pCUCxJQUFJMEUsU0FBUy9WLE1BQU13RCxTQUFOLENBQWdCekQsS0FBN0I7QUFDQSxJQUFJaVcsYUFBYSxtQkFBQS9NLENBQVEsRUFBUixDQUFqQjtBQUNBLElBQUlnTixjQUFjLG1CQUFBaE4sQ0FBUSxFQUFSLENBQWxCOztBQUVBLElBQUlpTixZQUFZdlosT0FBT0MsT0FBUCxHQUFpQixVQUFVdVosTUFBVixFQUFrQkMsUUFBbEIsRUFBNEJDLElBQTVCLEVBQWtDO0FBQ2pFLE1BQUksQ0FBQ0EsSUFBTCxFQUFXQSxPQUFPLEVBQVA7QUFDWDtBQUNBLE1BQUlGLFdBQVdDLFFBQWYsRUFBeUI7QUFDdkIsV0FBTyxJQUFQOztBQUVELEdBSEQsTUFHTyxJQUFJRCxrQkFBa0JHLElBQWxCLElBQTBCRixvQkFBb0JFLElBQWxELEVBQXdEO0FBQzdELFdBQU9ILE9BQU9JLE9BQVAsT0FBcUJILFNBQVNHLE9BQVQsRUFBNUI7O0FBRUY7QUFDQTtBQUNDLEdBTE0sTUFLQSxJQUFJLENBQUNKLE1BQUQsSUFBVyxDQUFDQyxRQUFaLElBQXdCLFFBQU9ELE1BQVAseUNBQU9BLE1BQVAsTUFBaUIsUUFBakIsSUFBNkIsUUFBT0MsUUFBUCx5Q0FBT0EsUUFBUCxNQUFtQixRQUE1RSxFQUFzRjtBQUMzRixXQUFPQyxLQUFLRyxNQUFMLEdBQWNMLFdBQVdDLFFBQXpCLEdBQW9DRCxVQUFVQyxRQUFyRDs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQyxHQVRNLE1BU0E7QUFDTCxXQUFPSyxTQUFTTixNQUFULEVBQWlCQyxRQUFqQixFQUEyQkMsSUFBM0IsQ0FBUDtBQUNEO0FBQ0YsQ0F2QkQ7O0FBeUJBLFNBQVNLLGlCQUFULENBQTJCdlIsS0FBM0IsRUFBa0M7QUFDaEMsU0FBT0EsVUFBVSxJQUFWLElBQWtCQSxVQUFVNUIsU0FBbkM7QUFDRDs7QUFFRCxTQUFTb1QsUUFBVCxDQUFtQkMsQ0FBbkIsRUFBc0I7QUFDcEIsTUFBSSxDQUFDQSxDQUFELElBQU0sUUFBT0EsQ0FBUCx5Q0FBT0EsQ0FBUCxPQUFhLFFBQW5CLElBQStCLE9BQU9BLEVBQUUzWixNQUFULEtBQW9CLFFBQXZELEVBQWlFLE9BQU8sS0FBUDtBQUNqRSxNQUFJLE9BQU8yWixFQUFFQyxJQUFULEtBQWtCLFVBQWxCLElBQWdDLE9BQU9ELEVBQUU3VyxLQUFULEtBQW1CLFVBQXZELEVBQW1FO0FBQ2pFLFdBQU8sS0FBUDtBQUNEO0FBQ0QsTUFBSTZXLEVBQUUzWixNQUFGLEdBQVcsQ0FBWCxJQUFnQixPQUFPMlosRUFBRSxDQUFGLENBQVAsS0FBZ0IsUUFBcEMsRUFBOEMsT0FBTyxLQUFQO0FBQzlDLFNBQU8sSUFBUDtBQUNEOztBQUVELFNBQVNILFFBQVQsQ0FBa0J6TyxDQUFsQixFQUFxQkMsQ0FBckIsRUFBd0JvTyxJQUF4QixFQUE4QjtBQUM1QixNQUFJclosQ0FBSixFQUFPbVQsR0FBUDtBQUNBLE1BQUl1RyxrQkFBa0IxTyxDQUFsQixLQUF3QjBPLGtCQUFrQnpPLENBQWxCLENBQTVCO0FBQ0UsU0FBTyxLQUFQO0FBQ0Y7QUFDQSxNQUFJRCxFQUFFeEUsU0FBRixLQUFnQnlFLEVBQUV6RSxTQUF0QixFQUFpQyxPQUFPLEtBQVA7QUFDakM7QUFDQTtBQUNBLE1BQUl5UyxZQUFZak8sQ0FBWixDQUFKLEVBQW9CO0FBQ2xCLFFBQUksQ0FBQ2lPLFlBQVloTyxDQUFaLENBQUwsRUFBcUI7QUFDbkIsYUFBTyxLQUFQO0FBQ0Q7QUFDREQsUUFBSStOLE9BQU9sUyxJQUFQLENBQVltRSxDQUFaLENBQUo7QUFDQUMsUUFBSThOLE9BQU9sUyxJQUFQLENBQVlvRSxDQUFaLENBQUo7QUFDQSxXQUFPaU8sVUFBVWxPLENBQVYsRUFBYUMsQ0FBYixFQUFnQm9PLElBQWhCLENBQVA7QUFDRDtBQUNELE1BQUlNLFNBQVMzTyxDQUFULENBQUosRUFBaUI7QUFDZixRQUFJLENBQUMyTyxTQUFTMU8sQ0FBVCxDQUFMLEVBQWtCO0FBQ2hCLGFBQU8sS0FBUDtBQUNEO0FBQ0QsUUFBSUQsRUFBRS9LLE1BQUYsS0FBYWdMLEVBQUVoTCxNQUFuQixFQUEyQixPQUFPLEtBQVA7QUFDM0IsU0FBS0QsSUFBSSxDQUFULEVBQVlBLElBQUlnTCxFQUFFL0ssTUFBbEIsRUFBMEJELEdBQTFCLEVBQStCO0FBQzdCLFVBQUlnTCxFQUFFaEwsQ0FBRixNQUFTaUwsRUFBRWpMLENBQUYsQ0FBYixFQUFtQixPQUFPLEtBQVA7QUFDcEI7QUFDRCxXQUFPLElBQVA7QUFDRDtBQUNELE1BQUk7QUFDRixRQUFJOFosS0FBS2QsV0FBV2hPLENBQVgsQ0FBVDtBQUNJK08sU0FBS2YsV0FBVy9OLENBQVgsQ0FEVDtBQUVELEdBSEQsQ0FHRSxPQUFPNEwsQ0FBUCxFQUFVLENBQUM7QUFDWCxXQUFPLEtBQVA7QUFDRDtBQUNEO0FBQ0E7QUFDQSxNQUFJaUQsR0FBRzdaLE1BQUgsSUFBYThaLEdBQUc5WixNQUFwQjtBQUNFLFNBQU8sS0FBUDtBQUNGO0FBQ0E2WixLQUFHRSxJQUFIO0FBQ0FELEtBQUdDLElBQUg7QUFDQTtBQUNBLE9BQUtoYSxJQUFJOFosR0FBRzdaLE1BQUgsR0FBWSxDQUFyQixFQUF3QkQsS0FBSyxDQUE3QixFQUFnQ0EsR0FBaEMsRUFBcUM7QUFDbkMsUUFBSThaLEdBQUc5WixDQUFILEtBQVMrWixHQUFHL1osQ0FBSCxDQUFiO0FBQ0UsV0FBTyxLQUFQO0FBQ0g7QUFDRDtBQUNBO0FBQ0EsT0FBS0EsSUFBSThaLEdBQUc3WixNQUFILEdBQVksQ0FBckIsRUFBd0JELEtBQUssQ0FBN0IsRUFBZ0NBLEdBQWhDLEVBQXFDO0FBQ25DbVQsVUFBTTJHLEdBQUc5WixDQUFILENBQU47QUFDQSxRQUFJLENBQUNrWixVQUFVbE8sRUFBRW1JLEdBQUYsQ0FBVixFQUFrQmxJLEVBQUVrSSxHQUFGLENBQWxCLEVBQTBCa0csSUFBMUIsQ0FBTCxFQUFzQyxPQUFPLEtBQVA7QUFDdkM7QUFDRCxTQUFPLFFBQU9yTyxDQUFQLHlDQUFPQSxDQUFQLGVBQW9CQyxDQUFwQix5Q0FBb0JBLENBQXBCLEVBQVA7QUFDRCxDOzs7Ozs7O3lRQzdGRCxJQUFJZ1AseUJBQTBCLFlBQVU7QUFDdEMsU0FBTzdXLE9BQU9vRCxTQUFQLENBQWlCMUcsUUFBakIsQ0FBMEIrRyxJQUExQixDQUErQmhHLFNBQS9CLENBQVA7QUFDRCxDQUY0QixNQUVyQixvQkFGUjs7QUFJQWpCLFVBQVVELE9BQU9DLE9BQVAsR0FBaUJxYSx5QkFBeUJDLFNBQXpCLEdBQXFDQyxXQUFoRTs7QUFFQXZhLFFBQVFzYSxTQUFSLEdBQW9CQSxTQUFwQjtBQUNBLFNBQVNBLFNBQVQsQ0FBbUJFLE1BQW5CLEVBQTJCO0FBQ3pCLFNBQU9oWCxPQUFPb0QsU0FBUCxDQUFpQjFHLFFBQWpCLENBQTBCK0csSUFBMUIsQ0FBK0J1VCxNQUEvQixLQUEwQyxvQkFBakQ7QUFDRDs7QUFFRHhhLFFBQVF1YSxXQUFSLEdBQXNCQSxXQUF0QjtBQUNBLFNBQVNBLFdBQVQsQ0FBcUJDLE1BQXJCLEVBQTRCO0FBQzFCLFNBQU9BO0FBQ0wsVUFBT0EsTUFBUCx5Q0FBT0EsTUFBUCxNQUFpQixRQURaO0FBRUwsU0FBT0EsT0FBT25hLE1BQWQsSUFBd0IsUUFGbkI7QUFHTG1ELFNBQU9vRCxTQUFQLENBQWlCRixjQUFqQixDQUFnQ08sSUFBaEMsQ0FBcUN1VCxNQUFyQyxFQUE2QyxRQUE3QyxDQUhLO0FBSUwsR0FBQ2hYLE9BQU9vRCxTQUFQLENBQWlCNlQsb0JBQWpCLENBQXNDeFQsSUFBdEMsQ0FBMkN1VCxNQUEzQyxFQUFtRCxRQUFuRCxDQUpJO0FBS0wsT0FMRjtBQU1ELEU7Ozs7Ozs7QUNuQkR4YSxVQUFVRCxPQUFPQyxPQUFQLEdBQWlCLE9BQU93RCxPQUFPaU8sSUFBZCxLQUF1QixVQUF2QjtBQUN2QmpPLE9BQU9pTyxJQURnQixHQUNUaUosSUFEbEI7O0FBR0ExYSxRQUFRMGEsSUFBUixHQUFlQSxJQUFmO0FBQ0EsU0FBU0EsSUFBVCxDQUFlblgsR0FBZixFQUFvQjtBQUNsQixNQUFJa08sT0FBTyxFQUFYO0FBQ0EsT0FBSyxJQUFJOEIsR0FBVCxJQUFnQmhRLEdBQWhCLEdBQXFCa08sS0FBS2xSLElBQUwsQ0FBVWdULEdBQVYsRUFBckI7QUFDQSxTQUFPOUIsSUFBUDtBQUNELEM7Ozs7Ozs7eVdDUkEsV0FBU3BNLElBQVQsRUFBZUMsT0FBZixFQUF3QjtBQUNyQjtBQUNBOztBQUVBO0FBQ0EsUUFBSSxJQUFKLEVBQWdEO0FBQzVDQyxRQUFBLGlDQUE2QixDQUFDLHNCQUFELENBQTdCLG9DQUE2Q0QsT0FBN0M7QUFBQTtBQUFBO0FBQUE7QUFDSCxLQUZELE1BRU8sSUFBSSxRQUFPdEYsT0FBUCx5Q0FBT0EsT0FBUCxPQUFtQixRQUF2QixFQUFpQztBQUNwQ0QsZUFBT0MsT0FBUCxHQUFpQnNGLFFBQVErRyxRQUFRLFlBQVIsQ0FBUixDQUFqQjtBQUNILEtBRk0sTUFFQTtBQUNIaEgsYUFBS3NWLGdCQUFMLEdBQXdCclYsUUFBUUQsS0FBS0csVUFBYixDQUF4QjtBQUNIO0FBQ0osQ0FaQSxhQVlPLFNBQVNtVixnQkFBVCxDQUEwQm5WLFVBQTFCLEVBQXNDO0FBQzFDOztBQUVBLFFBQUlvViw4QkFBOEIsZUFBbEM7QUFDQSxRQUFJQyx5QkFBeUIsaUNBQTdCO0FBQ0EsUUFBSUMsNEJBQTRCLDhCQUFoQzs7QUFFQSxXQUFPO0FBQ0g7Ozs7OztBQU1BbEcsZUFBTyxTQUFTbUcsdUJBQVQsQ0FBaUNDLEtBQWpDLEVBQXdDO0FBQzNDLGdCQUFJLE9BQU9BLE1BQU1DLFVBQWIsS0FBNEIsV0FBNUIsSUFBMkMsT0FBT0QsTUFBTSxpQkFBTixDQUFQLEtBQW9DLFdBQW5GLEVBQWdHO0FBQzVGLHVCQUFPLEtBQUtFLFVBQUwsQ0FBZ0JGLEtBQWhCLENBQVA7QUFDSCxhQUZELE1BRU8sSUFBSUEsTUFBTUcsS0FBTixJQUFlSCxNQUFNRyxLQUFOLENBQVk1WixLQUFaLENBQWtCc1osc0JBQWxCLENBQW5CLEVBQThEO0FBQ2pFLHVCQUFPLEtBQUtPLFdBQUwsQ0FBaUJKLEtBQWpCLENBQVA7QUFDSCxhQUZNLE1BRUEsSUFBSUEsTUFBTUcsS0FBVixFQUFpQjtBQUNwQix1QkFBTyxLQUFLRSxlQUFMLENBQXFCTCxLQUFyQixDQUFQO0FBQ0gsYUFGTSxNQUVBO0FBQ0gsc0JBQU0sSUFBSTlaLEtBQUosQ0FBVSxpQ0FBVixDQUFOO0FBQ0g7QUFDSixTQWpCRTs7QUFtQkg7QUFDQW9hLHlCQUFpQixTQUFTQyxpQ0FBVCxDQUEyQ0MsT0FBM0MsRUFBb0Q7QUFDakU7QUFDQSxnQkFBSUEsUUFBUXhZLE9BQVIsQ0FBZ0IsR0FBaEIsTUFBeUIsQ0FBQyxDQUE5QixFQUFpQztBQUM3Qix1QkFBTyxDQUFDd1ksT0FBRCxDQUFQO0FBQ0g7O0FBRUQsZ0JBQUlDLFNBQVMsZ0NBQWI7QUFDQSxnQkFBSXRaLFFBQVFzWixPQUFPQyxJQUFQLENBQVlGLFFBQVEzWSxPQUFSLENBQWdCLFNBQWhCLEVBQTJCLEVBQTNCLENBQVosQ0FBWjtBQUNBLG1CQUFPLENBQUNWLE1BQU0sQ0FBTixDQUFELEVBQVdBLE1BQU0sQ0FBTixLQUFZd0UsU0FBdkIsRUFBa0N4RSxNQUFNLENBQU4sS0FBWXdFLFNBQTlDLENBQVA7QUFDSCxTQTdCRTs7QUErQkh5VSxxQkFBYSxTQUFTTyw2QkFBVCxDQUF1Q1gsS0FBdkMsRUFBOEM7QUFDdkQsZ0JBQUlZLFdBQVdaLE1BQU1HLEtBQU4sQ0FBWS9ZLEtBQVosQ0FBa0IsSUFBbEIsRUFBd0I0RyxNQUF4QixDQUErQixVQUFTMkgsSUFBVCxFQUFlO0FBQ3pELHVCQUFPLENBQUMsQ0FBQ0EsS0FBS3BQLEtBQUwsQ0FBV3NaLHNCQUFYLENBQVQ7QUFDSCxhQUZjLEVBRVosSUFGWSxDQUFmOztBQUlBLG1CQUFPZSxTQUFTalQsR0FBVCxDQUFhLFVBQVNnSSxJQUFULEVBQWU7QUFDL0Isb0JBQUlBLEtBQUszTixPQUFMLENBQWEsUUFBYixJQUF5QixDQUFDLENBQTlCLEVBQWlDO0FBQzdCO0FBQ0EyTiwyQkFBT0EsS0FBSzlOLE9BQUwsQ0FBYSxZQUFiLEVBQTJCLE1BQTNCLEVBQW1DQSxPQUFuQyxDQUEyQyxnQ0FBM0MsRUFBNkUsRUFBN0UsQ0FBUDtBQUNIO0FBQ0Qsb0JBQUlnWixTQUFTbEwsS0FBSzlOLE9BQUwsQ0FBYSxNQUFiLEVBQXFCLEVBQXJCLEVBQXlCQSxPQUF6QixDQUFpQyxjQUFqQyxFQUFpRCxHQUFqRCxFQUFzRFQsS0FBdEQsQ0FBNEQsS0FBNUQsRUFBbUVlLEtBQW5FLENBQXlFLENBQXpFLENBQWI7QUFDQSxvQkFBSTJZLGdCQUFnQixLQUFLUixlQUFMLENBQXFCTyxPQUFPRSxHQUFQLEVBQXJCLENBQXBCO0FBQ0Esb0JBQUl6VSxlQUFldVUsT0FBT3JiLElBQVAsQ0FBWSxHQUFaLEtBQW9CbUcsU0FBdkM7QUFDQSxvQkFBSWEsV0FBVyxDQUFDLE1BQUQsRUFBUyxhQUFULEVBQXdCeEUsT0FBeEIsQ0FBZ0M4WSxjQUFjLENBQWQsQ0FBaEMsSUFBb0QsQ0FBQyxDQUFyRCxHQUF5RG5WLFNBQXpELEdBQXFFbVYsY0FBYyxDQUFkLENBQXBGOztBQUVBLHVCQUFPLElBQUl0VyxVQUFKLENBQWU7QUFDbEI4QixrQ0FBY0EsWUFESTtBQUVsQkUsOEJBQVVBLFFBRlE7QUFHbEJFLGdDQUFZb1UsY0FBYyxDQUFkLENBSE07QUFJbEJsVSxrQ0FBY2tVLGNBQWMsQ0FBZCxDQUpJO0FBS2xCeFgsNEJBQVFxTSxJQUxVLEVBQWYsQ0FBUDs7QUFPSCxhQWpCTSxFQWlCSixJQWpCSSxDQUFQO0FBa0JILFNBdERFOztBQXdESDBLLHlCQUFpQixTQUFTVyxpQ0FBVCxDQUEyQ2hCLEtBQTNDLEVBQWtEO0FBQy9ELGdCQUFJWSxXQUFXWixNQUFNRyxLQUFOLENBQVkvWSxLQUFaLENBQWtCLElBQWxCLEVBQXdCNEcsTUFBeEIsQ0FBK0IsVUFBUzJILElBQVQsRUFBZTtBQUN6RCx1QkFBTyxDQUFDQSxLQUFLcFAsS0FBTCxDQUFXdVoseUJBQVgsQ0FBUjtBQUNILGFBRmMsRUFFWixJQUZZLENBQWY7O0FBSUEsbUJBQU9jLFNBQVNqVCxHQUFULENBQWEsVUFBU2dJLElBQVQsRUFBZTtBQUMvQjtBQUNBLG9CQUFJQSxLQUFLM04sT0FBTCxDQUFhLFNBQWIsSUFBMEIsQ0FBQyxDQUEvQixFQUFrQztBQUM5QjJOLDJCQUFPQSxLQUFLOU4sT0FBTCxDQUFhLG9EQUFiLEVBQW1FLEtBQW5FLENBQVA7QUFDSDs7QUFFRCxvQkFBSThOLEtBQUszTixPQUFMLENBQWEsR0FBYixNQUFzQixDQUFDLENBQXZCLElBQTRCMk4sS0FBSzNOLE9BQUwsQ0FBYSxHQUFiLE1BQXNCLENBQUMsQ0FBdkQsRUFBMEQ7QUFDdEQ7QUFDQSwyQkFBTyxJQUFJd0MsVUFBSixDQUFlO0FBQ2xCOEIsc0NBQWNxSixJQURJLEVBQWYsQ0FBUDs7QUFHSCxpQkFMRCxNQUtPO0FBQ0gsd0JBQUlrTCxTQUFTbEwsS0FBS3ZPLEtBQUwsQ0FBVyxHQUFYLENBQWI7QUFDQSx3QkFBSTBaLGdCQUFnQixLQUFLUixlQUFMLENBQXFCTyxPQUFPRSxHQUFQLEVBQXJCLENBQXBCO0FBQ0Esd0JBQUl6VSxlQUFldVUsT0FBT3JiLElBQVAsQ0FBWSxHQUFaLEtBQW9CbUcsU0FBdkM7O0FBRUEsMkJBQU8sSUFBSW5CLFVBQUosQ0FBZTtBQUNsQjhCLHNDQUFjQSxZQURJO0FBRWxCRSxrQ0FBVXNVLGNBQWMsQ0FBZCxDQUZRO0FBR2xCcFUsb0NBQVlvVSxjQUFjLENBQWQsQ0FITTtBQUlsQmxVLHNDQUFja1UsY0FBYyxDQUFkLENBSkk7QUFLbEJ4WCxnQ0FBUXFNLElBTFUsRUFBZixDQUFQOztBQU9IO0FBQ0osYUF4Qk0sRUF3QkosSUF4QkksQ0FBUDtBQXlCSCxTQXRGRTs7QUF3Rkh1SyxvQkFBWSxTQUFTZSw0QkFBVCxDQUFzQ2hGLENBQXRDLEVBQXlDO0FBQ2pELGdCQUFJLENBQUNBLEVBQUVnRSxVQUFILElBQWtCaEUsRUFBRWlGLE9BQUYsQ0FBVWxaLE9BQVYsQ0FBa0IsSUFBbEIsSUFBMEIsQ0FBQyxDQUEzQjtBQUNsQmlVLGNBQUVpRixPQUFGLENBQVU5WixLQUFWLENBQWdCLElBQWhCLEVBQXNCL0IsTUFBdEIsR0FBK0I0VyxFQUFFZ0UsVUFBRixDQUFhN1ksS0FBYixDQUFtQixJQUFuQixFQUF5Qi9CLE1BRDVELEVBQ3FFO0FBQ2pFLHVCQUFPLEtBQUs4YixXQUFMLENBQWlCbEYsQ0FBakIsQ0FBUDtBQUNILGFBSEQsTUFHTyxJQUFJLENBQUNBLEVBQUVrRSxLQUFQLEVBQWM7QUFDakIsdUJBQU8sS0FBS2lCLFlBQUwsQ0FBa0JuRixDQUFsQixDQUFQO0FBQ0gsYUFGTSxNQUVBO0FBQ0gsdUJBQU8sS0FBS29GLFlBQUwsQ0FBa0JwRixDQUFsQixDQUFQO0FBQ0g7QUFDSixTQWpHRTs7QUFtR0hrRixxQkFBYSxTQUFTRyw2QkFBVCxDQUF1Q3JGLENBQXZDLEVBQTBDO0FBQ25ELGdCQUFJc0YsU0FBUyxtQ0FBYjtBQUNBLGdCQUFJQyxRQUFRdkYsRUFBRWlGLE9BQUYsQ0FBVTlaLEtBQVYsQ0FBZ0IsSUFBaEIsQ0FBWjtBQUNBLGdCQUFJakMsU0FBUyxFQUFiOztBQUVBLGlCQUFLLElBQUlDLElBQUksQ0FBUixFQUFXMk0sTUFBTXlQLE1BQU1uYyxNQUE1QixFQUFvQ0QsSUFBSTJNLEdBQXhDLEVBQTZDM00sS0FBSyxDQUFsRCxFQUFxRDtBQUNqRCxvQkFBSW1CLFFBQVFnYixPQUFPYixJQUFQLENBQVljLE1BQU1wYyxDQUFOLENBQVosQ0FBWjtBQUNBLG9CQUFJbUIsS0FBSixFQUFXO0FBQ1BwQiwyQkFBT0ksSUFBUCxDQUFZLElBQUlpRixVQUFKLENBQWU7QUFDdkJnQyxrQ0FBVWpHLE1BQU0sQ0FBTixDQURhO0FBRXZCbUcsb0NBQVluRyxNQUFNLENBQU4sQ0FGVztBQUd2QitDLGdDQUFRa1ksTUFBTXBjLENBQU4sQ0FIZSxFQUFmLENBQVo7O0FBS0g7QUFDSjs7QUFFRCxtQkFBT0QsTUFBUDtBQUNILFNBcEhFOztBQXNISGljLHNCQUFjLFNBQVNLLDhCQUFULENBQXdDeEYsQ0FBeEMsRUFBMkM7QUFDckQsZ0JBQUlzRixTQUFTLDREQUFiO0FBQ0EsZ0JBQUlDLFFBQVF2RixFQUFFZ0UsVUFBRixDQUFhN1ksS0FBYixDQUFtQixJQUFuQixDQUFaO0FBQ0EsZ0JBQUlqQyxTQUFTLEVBQWI7O0FBRUEsaUJBQUssSUFBSUMsSUFBSSxDQUFSLEVBQVcyTSxNQUFNeVAsTUFBTW5jLE1BQTVCLEVBQW9DRCxJQUFJMk0sR0FBeEMsRUFBNkMzTSxLQUFLLENBQWxELEVBQXFEO0FBQ2pELG9CQUFJbUIsUUFBUWdiLE9BQU9iLElBQVAsQ0FBWWMsTUFBTXBjLENBQU4sQ0FBWixDQUFaO0FBQ0Esb0JBQUltQixLQUFKLEVBQVc7QUFDUHBCLDJCQUFPSSxJQUFQO0FBQ0ksd0JBQUlpRixVQUFKLENBQWU7QUFDWDhCLHNDQUFjL0YsTUFBTSxDQUFOLEtBQVlvRixTQURmO0FBRVhhLGtDQUFVakcsTUFBTSxDQUFOLENBRkM7QUFHWG1HLG9DQUFZbkcsTUFBTSxDQUFOLENBSEQ7QUFJWCtDLGdDQUFRa1ksTUFBTXBjLENBQU4sQ0FKRyxFQUFmLENBREo7OztBQVFIO0FBQ0o7O0FBRUQsbUJBQU9ELE1BQVA7QUFDSCxTQTFJRTs7QUE0SUg7QUFDQWtjLHNCQUFjLFNBQVNLLDhCQUFULENBQXdDMUIsS0FBeEMsRUFBK0M7QUFDekQsZ0JBQUlZLFdBQVdaLE1BQU1HLEtBQU4sQ0FBWS9ZLEtBQVosQ0FBa0IsSUFBbEIsRUFBd0I0RyxNQUF4QixDQUErQixVQUFTMkgsSUFBVCxFQUFlO0FBQ3pELHVCQUFPLENBQUMsQ0FBQ0EsS0FBS3BQLEtBQUwsQ0FBV3FaLDJCQUFYLENBQUYsSUFBNkMsQ0FBQ2pLLEtBQUtwUCxLQUFMLENBQVcsbUJBQVgsQ0FBckQ7QUFDSCxhQUZjLEVBRVosSUFGWSxDQUFmOztBQUlBLG1CQUFPcWEsU0FBU2pULEdBQVQsQ0FBYSxVQUFTZ0ksSUFBVCxFQUFlO0FBQy9CLG9CQUFJa0wsU0FBU2xMLEtBQUt2TyxLQUFMLENBQVcsR0FBWCxDQUFiO0FBQ0Esb0JBQUkwWixnQkFBZ0IsS0FBS1IsZUFBTCxDQUFxQk8sT0FBT0UsR0FBUCxFQUFyQixDQUFwQjtBQUNBLG9CQUFJWSxlQUFnQmQsT0FBTzFNLEtBQVAsTUFBa0IsRUFBdEM7QUFDQSxvQkFBSTdILGVBQWVxVjtBQUNWOVosdUJBRFUsQ0FDRixnQ0FERSxFQUNnQyxJQURoQztBQUVWQSx1QkFGVSxDQUVGLGFBRkUsRUFFYSxFQUZiLEtBRW9COEQsU0FGdkM7QUFHQSxvQkFBSWlXLE9BQUo7QUFDQSxvQkFBSUQsYUFBYXBiLEtBQWIsQ0FBbUIsY0FBbkIsQ0FBSixFQUF3QztBQUNwQ3FiLDhCQUFVRCxhQUFhOVosT0FBYixDQUFxQixzQkFBckIsRUFBNkMsSUFBN0MsQ0FBVjtBQUNIO0FBQ0Qsb0JBQUlpRSxPQUFROFYsWUFBWWpXLFNBQVosSUFBeUJpVyxZQUFZLDJCQUF0QztBQUNQalcseUJBRE8sR0FDS2lXLFFBQVF4YSxLQUFSLENBQWMsR0FBZCxDQURoQjs7QUFHQSx1QkFBTyxJQUFJb0QsVUFBSixDQUFlO0FBQ2xCOEIsa0NBQWNBLFlBREk7QUFFbEJSLDBCQUFNQSxJQUZZO0FBR2xCVSw4QkFBVXNVLGNBQWMsQ0FBZCxDQUhRO0FBSWxCcFUsZ0NBQVlvVSxjQUFjLENBQWQsQ0FKTTtBQUtsQmxVLGtDQUFja1UsY0FBYyxDQUFkLENBTEk7QUFNbEJ4WCw0QkFBUXFNLElBTlUsRUFBZixDQUFQOztBQVFILGFBdEJNLEVBc0JKLElBdEJJLENBQVA7QUF1QkgsU0F6S0UsRUFBUDs7QUEyS0gsQ0E5TEEsQ0FBRCxDOzs7Ozs7O0FDQUMsV0FBU2tNLEtBQVQsRUFBZ0I7O0FBRWpCLEtBQUlDLGFBQWFELE1BQU16USxJQUFOLENBQVcyUSxLQUFYLENBQWlCRixNQUFNN0QsU0FBTixDQUFnQjhELFVBQWpDLENBQWpCOztBQUVBRCxPQUFNN0QsU0FBTixDQUFnQkMsR0FBaEIsR0FBc0I0RCxNQUFNN0QsU0FBTixDQUFnQmdFLE1BQWhCLENBQXVCLFFBQXZCLEVBQWlDRixVQUFqQyxDQUF0QjtBQUNBRCxPQUFNN0QsU0FBTixDQUFnQkMsR0FBaEIsQ0FBb0J2RSxHQUFwQixDQUF3QnVJLE9BQXhCLEdBQWlDLG1HQUFqQzs7QUFFQUosT0FBTTdELFNBQU4sQ0FBZ0JDLEdBQWhCLENBQW9CdkUsR0FBcEIsQ0FBd0J3SSxNQUF4QixDQUErQixZQUEvQixFQUE2Q0QsT0FBN0MsR0FBdUQsc0NBQXZEOztBQUVBLEtBQUlFLGdCQUFnQk4sTUFBTXpRLElBQU4sQ0FBVzJRLEtBQVgsQ0FBaUJGLE1BQU03RCxTQUFOLENBQWdCQyxHQUFqQyxDQUFwQjs7QUFFQSxRQUFPa0UsY0FBY0MsV0FBckI7O0FBRUFELGlCQUFnQk4sTUFBTTdELFNBQU4sQ0FBZ0JxRSxZQUFoQixDQUE2QixLQUE3QixFQUFvQyxVQUFwQyxFQUFnRDtBQUM5RCxpQkFBZSxzQkFEK0MsRUFBaEQ7QUFFYixHQUFFcEUsS0FBS2tFLGFBQVAsRUFGYSxDQUFoQjs7QUFJQU4sT0FBTTdELFNBQU4sQ0FBZ0JxRSxZQUFoQixDQUE2QixRQUE3QixFQUF1QyxZQUF2QyxFQUFvRDtBQUNuRCxZQUFVO0FBQ1Q7QUFDQUosWUFBUyw2QkFGQTtBQUdUQyxXQUFRQyxhQUhDO0FBSVQsWUFBUyxxQkFKQSxFQUR5QyxFQUFwRDs7QUFPR04sT0FBTTdELFNBQU4sQ0FBZ0JDLEdBQWhCLENBQW9CdkUsR0FQdkI7O0FBU0MsQ0ExQkEsRUEwQkNtSSxLQTFCRCxDQUFELEM7Ozs7Ozs7O0FDQ0E7Ozs7QUFJQSxJQUFJUyxRQUFTLE9BQU90SSxNQUFQLEtBQWtCLFdBQW5CO0FBQ1RBLE1BRFMsQ0FDQTtBQURBO0FBR1QsT0FBT3VJLGlCQUFQLEtBQTZCLFdBQTdCLElBQTRDQyxnQkFBZ0JELGlCQUE3RDtBQUNFQyxJQURGLENBQ087QUFEUCxFQUVFLEVBTFEsQ0FLSDtBQUxUOztBQVFBOzs7Ozs7QUFNQSxJQUFJWCxRQUFTLFlBQVU7O0FBRXZCO0FBQ0EsS0FBSVksT0FBTywwQkFBWDtBQUNBLEtBQUlDLFdBQVcsQ0FBZjs7QUFFQSxLQUFJQyxJQUFJTCxNQUFNVCxLQUFOLEdBQWM7QUFDckJ6USxRQUFNO0FBQ0xxQyxXQUFRLGdCQUFVb04sTUFBVixFQUFrQjtBQUN6QixRQUFJQSxrQkFBa0IrQixLQUF0QixFQUE2QjtBQUM1QixZQUFPLElBQUlBLEtBQUosQ0FBVS9CLE9BQU9nQyxJQUFqQixFQUF1QkYsRUFBRXZSLElBQUYsQ0FBT3FDLE1BQVAsQ0FBY29OLE9BQU81SyxPQUFyQixDQUF2QixFQUFzRDRLLE9BQU9pQyxLQUE3RCxDQUFQO0FBQ0EsS0FGRCxNQUVPLElBQUlILEVBQUV2UixJQUFGLENBQU95UixJQUFQLENBQVloQyxNQUFaLE1BQXdCLE9BQTVCLEVBQXFDO0FBQzNDLFlBQU9BLE9BQU9sVCxHQUFQLENBQVdnVixFQUFFdlIsSUFBRixDQUFPcUMsTUFBbEIsQ0FBUDtBQUNBLEtBRk0sTUFFQTtBQUNOLFlBQU9vTixPQUFPaFosT0FBUCxDQUFlLElBQWYsRUFBcUIsT0FBckIsRUFBOEJBLE9BQTlCLENBQXNDLElBQXRDLEVBQTRDLE1BQTVDLEVBQW9EQSxPQUFwRCxDQUE0RCxTQUE1RCxFQUF1RSxHQUF2RSxDQUFQO0FBQ0E7QUFDRCxJQVRJOztBQVdMZ2IsU0FBTSxjQUFVRSxDQUFWLEVBQWE7QUFDbEIsV0FBT3ZhLE9BQU9vRCxTQUFQLENBQWlCMUcsUUFBakIsQ0FBMEIrRyxJQUExQixDQUErQjhXLENBQS9CLEVBQWtDeGMsS0FBbEMsQ0FBd0Msa0JBQXhDLEVBQTRELENBQTVELENBQVA7QUFDQSxJQWJJOztBQWVMeWMsVUFBTyxlQUFVemEsR0FBVixFQUFlO0FBQ3JCLFFBQUksQ0FBQ0EsSUFBSSxNQUFKLENBQUwsRUFBa0I7QUFDakJDLFlBQU95YSxjQUFQLENBQXNCMWEsR0FBdEIsRUFBMkIsTUFBM0IsRUFBbUMsRUFBRWdGLE9BQU8sRUFBRW1WLFFBQVgsRUFBbkM7QUFDQTtBQUNELFdBQU9uYSxJQUFJLE1BQUosQ0FBUDtBQUNBLElBcEJJOztBQXNCTDtBQUNBd1osVUFBTyxlQUFVZ0IsQ0FBVixFQUFhO0FBQ25CLFFBQUlGLE9BQU9GLEVBQUV2UixJQUFGLENBQU95UixJQUFQLENBQVlFLENBQVosQ0FBWDs7QUFFQSxZQUFRRixJQUFSO0FBQ0MsVUFBSyxRQUFMO0FBQ0MsVUFBSWQsUUFBUSxFQUFaOztBQUVBLFdBQUssSUFBSXhKLEdBQVQsSUFBZ0J3SyxDQUFoQixFQUFtQjtBQUNsQixXQUFJQSxFQUFFclgsY0FBRixDQUFpQjZNLEdBQWpCLENBQUosRUFBMkI7QUFDMUJ3SixjQUFNeEosR0FBTixJQUFhb0ssRUFBRXZSLElBQUYsQ0FBTzJRLEtBQVAsQ0FBYWdCLEVBQUV4SyxHQUFGLENBQWIsQ0FBYjtBQUNBO0FBQ0Q7O0FBRUQsYUFBT3dKLEtBQVA7O0FBRUQsVUFBSyxPQUFMO0FBQ0M7QUFDQSxhQUFPZ0IsRUFBRXBWLEdBQUYsSUFBU29WLEVBQUVwVixHQUFGLENBQU0sVUFBUzNCLENBQVQsRUFBWSxDQUFFLE9BQU8yVyxFQUFFdlIsSUFBRixDQUFPMlEsS0FBUCxDQUFhL1YsQ0FBYixDQUFQLENBQXlCLENBQTdDLENBQWhCLENBZEY7OztBQWlCQSxXQUFPK1csQ0FBUDtBQUNBLElBNUNJLEVBRGU7OztBQWdEckIvRSxhQUFXO0FBQ1ZnRSxXQUFRLGdCQUFVcGMsRUFBVixFQUFjc2QsS0FBZCxFQUFxQjtBQUM1QixRQUFJVCxPQUFPRSxFQUFFdlIsSUFBRixDQUFPMlEsS0FBUCxDQUFhWSxFQUFFM0UsU0FBRixDQUFZcFksRUFBWixDQUFiLENBQVg7O0FBRUEsU0FBSyxJQUFJMlMsR0FBVCxJQUFnQjJLLEtBQWhCLEVBQXVCO0FBQ3RCVCxVQUFLbEssR0FBTCxJQUFZMkssTUFBTTNLLEdBQU4sQ0FBWjtBQUNBOztBQUVELFdBQU9rSyxJQUFQO0FBQ0EsSUFUUzs7QUFXVjs7Ozs7Ozs7O0FBU0FKLGlCQUFjLHNCQUFVSCxNQUFWLEVBQWtCaUIsTUFBbEIsRUFBMEJDLE1BQTFCLEVBQWtDL1ksSUFBbEMsRUFBd0M7QUFDckRBLFdBQU9BLFFBQVFzWSxFQUFFM0UsU0FBakI7QUFDQSxRQUFJcUYsVUFBVWhaLEtBQUs2WCxNQUFMLENBQWQ7O0FBRUEsUUFBSWpjLFVBQVVaLE1BQVYsSUFBb0IsQ0FBeEIsRUFBMkI7QUFDMUIrZCxjQUFTbmQsVUFBVSxDQUFWLENBQVQ7O0FBRUEsVUFBSyxJQUFJcWQsUUFBVCxJQUFxQkYsTUFBckIsRUFBNkI7QUFDNUIsVUFBSUEsT0FBTzFYLGNBQVAsQ0FBc0I0WCxRQUF0QixDQUFKLEVBQXFDO0FBQ3BDRCxlQUFRQyxRQUFSLElBQW9CRixPQUFPRSxRQUFQLENBQXBCO0FBQ0E7QUFDRDs7QUFFRCxZQUFPRCxPQUFQO0FBQ0E7O0FBRUQsUUFBSUUsTUFBTSxFQUFWOztBQUVBLFNBQUssSUFBSUMsS0FBVCxJQUFrQkgsT0FBbEIsRUFBMkI7O0FBRTFCLFNBQUlBLFFBQVEzWCxjQUFSLENBQXVCOFgsS0FBdkIsQ0FBSixFQUFtQzs7QUFFbEMsVUFBSUEsU0FBU0wsTUFBYixFQUFxQjs7QUFFcEIsWUFBSyxJQUFJRyxRQUFULElBQXFCRixNQUFyQixFQUE2Qjs7QUFFNUIsWUFBSUEsT0FBTzFYLGNBQVAsQ0FBc0I0WCxRQUF0QixDQUFKLEVBQXFDO0FBQ3BDQyxhQUFJRCxRQUFKLElBQWdCRixPQUFPRSxRQUFQLENBQWhCO0FBQ0E7QUFDRDtBQUNEOztBQUVEQyxVQUFJQyxLQUFKLElBQWFILFFBQVFHLEtBQVIsQ0FBYjtBQUNBO0FBQ0Q7O0FBRUQ7QUFDQWIsTUFBRTNFLFNBQUYsQ0FBWXlGLEdBQVosQ0FBZ0JkLEVBQUUzRSxTQUFsQixFQUE2QixVQUFTekYsR0FBVCxFQUFjaEwsS0FBZCxFQUFxQjtBQUNqRCxTQUFJQSxVQUFVbEQsS0FBSzZYLE1BQUwsQ0FBVixJQUEwQjNKLE9BQU8ySixNQUFyQyxFQUE2QztBQUM1QyxXQUFLM0osR0FBTCxJQUFZZ0wsR0FBWjtBQUNBO0FBQ0QsS0FKRDs7QUFNQSxXQUFPbFosS0FBSzZYLE1BQUwsSUFBZXFCLEdBQXRCO0FBQ0EsSUFoRVM7O0FBa0VWO0FBQ0FFLFFBQUssYUFBU1YsQ0FBVCxFQUFZVyxRQUFaLEVBQXNCYixJQUF0QixFQUE0QmMsT0FBNUIsRUFBcUM7QUFDekNBLGNBQVVBLFdBQVcsRUFBckI7QUFDQSxTQUFLLElBQUl2ZSxDQUFULElBQWMyZCxDQUFkLEVBQWlCO0FBQ2hCLFNBQUlBLEVBQUVyWCxjQUFGLENBQWlCdEcsQ0FBakIsQ0FBSixFQUF5QjtBQUN4QnNlLGVBQVN6WCxJQUFULENBQWM4VyxDQUFkLEVBQWlCM2QsQ0FBakIsRUFBb0IyZCxFQUFFM2QsQ0FBRixDQUFwQixFQUEwQnlkLFFBQVF6ZCxDQUFsQzs7QUFFQSxVQUFJdWQsRUFBRXZSLElBQUYsQ0FBT3lSLElBQVAsQ0FBWUUsRUFBRTNkLENBQUYsQ0FBWixNQUFzQixRQUF0QixJQUFrQyxDQUFDdWUsUUFBUWhCLEVBQUV2UixJQUFGLENBQU80UixLQUFQLENBQWFELEVBQUUzZCxDQUFGLENBQWIsQ0FBUixDQUF2QyxFQUFvRTtBQUNuRXVlLGVBQVFoQixFQUFFdlIsSUFBRixDQUFPNFIsS0FBUCxDQUFhRCxFQUFFM2QsQ0FBRixDQUFiLENBQVIsSUFBOEIsSUFBOUI7QUFDQXVkLFNBQUUzRSxTQUFGLENBQVl5RixHQUFaLENBQWdCVixFQUFFM2QsQ0FBRixDQUFoQixFQUFzQnNlLFFBQXRCLEVBQWdDLElBQWhDLEVBQXNDQyxPQUF0QztBQUNBLE9BSEQ7QUFJSyxVQUFJaEIsRUFBRXZSLElBQUYsQ0FBT3lSLElBQVAsQ0FBWUUsRUFBRTNkLENBQUYsQ0FBWixNQUFzQixPQUF0QixJQUFpQyxDQUFDdWUsUUFBUWhCLEVBQUV2UixJQUFGLENBQU80UixLQUFQLENBQWFELEVBQUUzZCxDQUFGLENBQWIsQ0FBUixDQUF0QyxFQUFtRTtBQUN2RXVlLGVBQVFoQixFQUFFdlIsSUFBRixDQUFPNFIsS0FBUCxDQUFhRCxFQUFFM2QsQ0FBRixDQUFiLENBQVIsSUFBOEIsSUFBOUI7QUFDQXVkLFNBQUUzRSxTQUFGLENBQVl5RixHQUFaLENBQWdCVixFQUFFM2QsQ0FBRixDQUFoQixFQUFzQnNlLFFBQXRCLEVBQWdDdGUsQ0FBaEMsRUFBbUN1ZSxPQUFuQztBQUNBO0FBQ0Q7QUFDRDtBQUNELElBbkZTLEVBaERVOztBQXFJckJDLFdBQVMsRUFySVk7O0FBdUlyQkMsZ0JBQWMsc0JBQVNDLEtBQVQsRUFBZ0JKLFFBQWhCLEVBQTBCO0FBQ3ZDLE9BQUlLLE1BQU07QUFDVEwsY0FBVUEsUUFERDtBQUVUN1QsY0FBVSxrR0FGRCxFQUFWOzs7QUFLQThTLEtBQUVxQixLQUFGLENBQVFDLEdBQVIsQ0FBWSxxQkFBWixFQUFtQ0YsR0FBbkM7O0FBRUEsT0FBSUcsV0FBV0gsSUFBSUcsUUFBSixJQUFnQjFJLFNBQVMySSxnQkFBVCxDQUEwQkosSUFBSWxVLFFBQTlCLENBQS9COztBQUVBLFFBQUssSUFBSXpLLElBQUUsQ0FBTixFQUFTa1UsT0FBZCxFQUF1QkEsVUFBVTRLLFNBQVM5ZSxHQUFULENBQWpDLEdBQWlEO0FBQ2hEdWQsTUFBRXlCLGdCQUFGLENBQW1COUssT0FBbkIsRUFBNEJ3SyxVQUFVLElBQXRDLEVBQTRDQyxJQUFJTCxRQUFoRDtBQUNBO0FBQ0QsR0FwSm9COztBQXNKckJVLG9CQUFrQiwwQkFBUzlLLE9BQVQsRUFBa0J3SyxLQUFsQixFQUF5QkosUUFBekIsRUFBbUM7QUFDcEQ7QUFDQSxPQUFJVyxRQUFKLENBQWNoQixPQUFkLENBQXVCclQsU0FBU3NKLE9BQWhDOztBQUVBLFVBQU90SixVQUFVLENBQUN5UyxLQUFLNkIsSUFBTCxDQUFVdFUsT0FBTzRLLFNBQWpCLENBQWxCLEVBQStDO0FBQzlDNUssYUFBU0EsT0FBT3VVLFVBQWhCO0FBQ0E7O0FBRUQsT0FBSXZVLE1BQUosRUFBWTtBQUNYcVUsZUFBVyxDQUFDclUsT0FBTzRLLFNBQVAsQ0FBaUJyVSxLQUFqQixDQUF1QmtjLElBQXZCLEtBQWdDLEdBQUUsRUFBRixDQUFqQyxFQUF3QyxDQUF4QyxFQUEyQ3JJLFdBQTNDLEVBQVg7QUFDQWlKLGNBQVVWLEVBQUUzRSxTQUFGLENBQVlxRyxRQUFaLENBQVY7QUFDQTs7QUFFRDtBQUNBL0ssV0FBUXNCLFNBQVIsR0FBb0J0QixRQUFRc0IsU0FBUixDQUFrQi9TLE9BQWxCLENBQTBCNGEsSUFBMUIsRUFBZ0MsRUFBaEMsRUFBb0M1YSxPQUFwQyxDQUE0QyxNQUE1QyxFQUFvRCxHQUFwRCxJQUEyRCxZQUEzRCxHQUEwRXdjLFFBQTlGOztBQUVBO0FBQ0FyVSxZQUFTc0osUUFBUWlMLFVBQWpCOztBQUVBLE9BQUksT0FBT0QsSUFBUCxDQUFZdFUsT0FBT21LLFFBQW5CLENBQUosRUFBa0M7QUFDakNuSyxXQUFPNEssU0FBUCxHQUFtQjVLLE9BQU80SyxTQUFQLENBQWlCL1MsT0FBakIsQ0FBeUI0YSxJQUF6QixFQUErQixFQUEvQixFQUFtQzVhLE9BQW5DLENBQTJDLE1BQTNDLEVBQW1ELEdBQW5ELElBQTBELFlBQTFELEdBQXlFd2MsUUFBNUY7QUFDQTs7QUFFRCxPQUFJMUcsT0FBT3JFLFFBQVFrTCxXQUFuQjs7QUFFQSxPQUFJVCxNQUFNO0FBQ1R6SyxhQUFTQSxPQURBO0FBRVQrSyxjQUFVQSxRQUZEO0FBR1RoQixhQUFTQSxPQUhBO0FBSVQxRixVQUFNQSxJQUpHLEVBQVY7OztBQU9BZ0YsS0FBRXFCLEtBQUYsQ0FBUUMsR0FBUixDQUFZLHFCQUFaLEVBQW1DRixHQUFuQzs7QUFFQSxPQUFJLENBQUNBLElBQUlwRyxJQUFMLElBQWEsQ0FBQ29HLElBQUlWLE9BQXRCLEVBQStCO0FBQzlCLFFBQUlVLElBQUlwRyxJQUFSLEVBQWM7QUFDYm9HLFNBQUl6SyxPQUFKLENBQVlrTCxXQUFaLEdBQTBCVCxJQUFJcEcsSUFBOUI7QUFDQTtBQUNEZ0YsTUFBRXFCLEtBQUYsQ0FBUUMsR0FBUixDQUFZLFVBQVosRUFBd0JGLEdBQXhCO0FBQ0E7QUFDQTs7QUFFRHBCLEtBQUVxQixLQUFGLENBQVFDLEdBQVIsQ0FBWSxrQkFBWixFQUFnQ0YsR0FBaEM7O0FBRUEsT0FBSUQsU0FBU3hCLE1BQU1tQyxNQUFuQixFQUEyQjtBQUMxQixRQUFJQyxTQUFTLElBQUlELE1BQUosQ0FBVzlCLEVBQUVnQyxRQUFiLENBQWI7O0FBRUFELFdBQU9FLFNBQVAsR0FBbUIsVUFBU0MsR0FBVCxFQUFjO0FBQ2hDZCxTQUFJZSxlQUFKLEdBQXNCRCxJQUFJRSxJQUExQjs7QUFFQXBDLE9BQUVxQixLQUFGLENBQVFDLEdBQVIsQ0FBWSxlQUFaLEVBQTZCRixHQUE3Qjs7QUFFQUEsU0FBSXpLLE9BQUosQ0FBWTBMLFNBQVosR0FBd0JqQixJQUFJZSxlQUE1Qjs7QUFFQXBCLGlCQUFZQSxTQUFTelgsSUFBVCxDQUFjOFgsSUFBSXpLLE9BQWxCLENBQVo7QUFDQXFKLE9BQUVxQixLQUFGLENBQVFDLEdBQVIsQ0FBWSxpQkFBWixFQUErQkYsR0FBL0I7QUFDQXBCLE9BQUVxQixLQUFGLENBQVFDLEdBQVIsQ0FBWSxVQUFaLEVBQXdCRixHQUF4QjtBQUNBLEtBVkQ7O0FBWUFXLFdBQU9PLFdBQVAsQ0FBbUI1TixLQUFLQyxTQUFMLENBQWU7QUFDakMrTSxlQUFVTixJQUFJTSxRQURtQjtBQUVqQzFHLFdBQU1vRyxJQUFJcEcsSUFGdUI7QUFHakN1SCxxQkFBZ0IsSUFIaUIsRUFBZixDQUFuQjs7QUFLQSxJQXBCRDtBQXFCSztBQUNKbkIsUUFBSWUsZUFBSixHQUFzQm5DLEVBQUU1RSxTQUFGLENBQVlnRyxJQUFJcEcsSUFBaEIsRUFBc0JvRyxJQUFJVixPQUExQixFQUFtQ1UsSUFBSU0sUUFBdkMsQ0FBdEI7O0FBRUExQixNQUFFcUIsS0FBRixDQUFRQyxHQUFSLENBQVksZUFBWixFQUE2QkYsR0FBN0I7O0FBRUFBLFFBQUl6SyxPQUFKLENBQVkwTCxTQUFaLEdBQXdCakIsSUFBSWUsZUFBNUI7O0FBRUFwQixnQkFBWUEsU0FBU3pYLElBQVQsQ0FBY3FOLE9BQWQsQ0FBWjs7QUFFQXFKLE1BQUVxQixLQUFGLENBQVFDLEdBQVIsQ0FBWSxpQkFBWixFQUErQkYsR0FBL0I7QUFDQXBCLE1BQUVxQixLQUFGLENBQVFDLEdBQVIsQ0FBWSxVQUFaLEVBQXdCRixHQUF4QjtBQUNBO0FBQ0QsR0FuT29COztBQXFPckJoRyxhQUFXLG1CQUFVb0gsSUFBVixFQUFnQjlCLE9BQWhCLEVBQXlCZ0IsUUFBekIsRUFBbUM7QUFDN0MsT0FBSXhELFNBQVM4QixFQUFFeUMsUUFBRixDQUFXRCxJQUFYLEVBQWlCOUIsT0FBakIsQ0FBYjtBQUNBLFVBQU9ULE1BQU10TCxTQUFOLENBQWdCcUwsRUFBRXZSLElBQUYsQ0FBT3FDLE1BQVAsQ0FBY29OLE1BQWQsQ0FBaEIsRUFBdUN3RCxRQUF2QyxDQUFQO0FBQ0EsR0F4T29COztBQTBPckJlLFlBQVUsa0JBQVNELElBQVQsRUFBZTlCLE9BQWYsRUFBd0JnQixRQUF4QixFQUFrQztBQUMzQyxPQUFJekIsUUFBUUQsRUFBRUMsS0FBZDs7QUFFQSxPQUFJeUMsU0FBUyxDQUFDRixJQUFELENBQWI7O0FBRUEsT0FBSTlRLE9BQU9nUCxRQUFRaFAsSUFBbkI7O0FBRUEsT0FBSUEsSUFBSixFQUFVO0FBQ1QsU0FBSyxJQUFJbVAsS0FBVCxJQUFrQm5QLElBQWxCLEVBQXdCO0FBQ3ZCZ1AsYUFBUUcsS0FBUixJQUFpQm5QLEtBQUttUCxLQUFMLENBQWpCO0FBQ0E7O0FBRUQsV0FBT0gsUUFBUWhQLElBQWY7QUFDQTs7QUFFRGlSLGNBQVcsS0FBSyxJQUFJOUIsS0FBVCxJQUFrQkgsT0FBbEIsRUFBMkI7QUFDckMsUUFBRyxDQUFDQSxRQUFRM1gsY0FBUixDQUF1QjhYLEtBQXZCLENBQUQsSUFBa0MsQ0FBQ0gsUUFBUUcsS0FBUixDQUF0QyxFQUFzRDtBQUNyRDtBQUNBOztBQUVELFFBQUkrQixXQUFXbEMsUUFBUUcsS0FBUixDQUFmO0FBQ0ErQixlQUFZNUMsRUFBRXZSLElBQUYsQ0FBT3lSLElBQVAsQ0FBWTBDLFFBQVosTUFBMEIsT0FBM0IsR0FBc0NBLFFBQXRDLEdBQWlELENBQUNBLFFBQUQsQ0FBNUQ7O0FBRUEsU0FBSyxJQUFJeFksSUFBSSxDQUFiLEVBQWdCQSxJQUFJd1ksU0FBU2xnQixNQUE3QixFQUFxQyxFQUFFMEgsQ0FBdkMsRUFBMEM7QUFDekMsU0FBSWtWLFVBQVVzRCxTQUFTeFksQ0FBVCxDQUFkO0FBQ0NtVixjQUFTRCxRQUFRQyxNQURsQjtBQUVDc0Qsa0JBQWEsQ0FBQyxDQUFDdkQsUUFBUXVELFVBRnhCO0FBR0NDLGNBQVMsQ0FBQyxDQUFDeEQsUUFBUXdELE1BSHBCO0FBSUNDLHdCQUFtQixDQUpwQjtBQUtDNUMsYUFBUWIsUUFBUWEsS0FMakI7O0FBT0EsU0FBSTJDLFVBQVUsQ0FBQ3hELFFBQVFBLE9BQVIsQ0FBZ0IwRCxNQUEvQixFQUF1QztBQUN0QztBQUNBLFVBQUlDLFFBQVEzRCxRQUFRQSxPQUFSLENBQWdCL2MsUUFBaEIsR0FBMkJxQixLQUEzQixDQUFpQyxVQUFqQyxFQUE2QyxDQUE3QyxDQUFaO0FBQ0EwYixjQUFRQSxPQUFSLEdBQWtCNEQsT0FBTzVELFFBQVFBLE9BQVIsQ0FBZ0IzWSxNQUF2QixFQUErQnNjLFFBQVEsR0FBdkMsQ0FBbEI7QUFDQTs7QUFFRDNELGVBQVVBLFFBQVFBLE9BQVIsSUFBbUJBLE9BQTdCOztBQUVBO0FBQ0EsVUFBSyxJQUFJN2MsSUFBRSxDQUFOLEVBQVMwZ0IsTUFBTSxDQUFwQixFQUF1QjFnQixJQUFFaWdCLE9BQU9oZ0IsTUFBaEMsRUFBd0N5Z0IsT0FBT1QsT0FBT2pnQixDQUFQLEVBQVVDLE1BQWpCLEVBQXlCLEVBQUVELENBQW5FLEVBQXNFOztBQUVyRSxVQUFJMkYsTUFBTXNhLE9BQU9qZ0IsQ0FBUCxDQUFWOztBQUVBLFVBQUlpZ0IsT0FBT2hnQixNQUFQLEdBQWdCOGYsS0FBSzlmLE1BQXpCLEVBQWlDO0FBQ2hDO0FBQ0EsYUFBTWlnQixTQUFOO0FBQ0E7O0FBRUQsVUFBSXZhLGVBQWU2WCxLQUFuQixFQUEwQjtBQUN6QjtBQUNBOztBQUVEWCxjQUFROEQsU0FBUixHQUFvQixDQUFwQjs7QUFFQSxVQUFJeGYsUUFBUTBiLFFBQVF2QixJQUFSLENBQWEzVixHQUFiLENBQVo7QUFDSWliLGVBQVMsQ0FEYjs7QUFHQTtBQUNBLFVBQUksQ0FBQ3pmLEtBQUQsSUFBVWtmLE1BQVYsSUFBb0JyZ0IsS0FBS2lnQixPQUFPaGdCLE1BQVAsR0FBZ0IsQ0FBN0MsRUFBZ0Q7QUFDL0M0YyxlQUFROEQsU0FBUixHQUFvQkQsR0FBcEI7QUFDQXZmLGVBQVEwYixRQUFRdkIsSUFBUixDQUFheUUsSUFBYixDQUFSO0FBQ0EsV0FBSSxDQUFDNWUsS0FBTCxFQUFZO0FBQ1g7QUFDQTs7QUFFRCxXQUFJMGYsT0FBTzFmLE1BQU0wQixLQUFOLElBQWV1ZCxhQUFhamYsTUFBTSxDQUFOLEVBQVNsQixNQUF0QixHQUErQixDQUE5QyxDQUFYO0FBQ0lxWCxZQUFLblcsTUFBTTBCLEtBQU4sR0FBYzFCLE1BQU0sQ0FBTixFQUFTbEIsTUFEaEM7QUFFSTRILFdBQUk3SCxDQUZSO0FBR0krRixXQUFJMmEsR0FIUjs7QUFLQSxZQUFLLElBQUkvVCxNQUFNc1QsT0FBT2hnQixNQUF0QixFQUE4QjRILElBQUk4RSxHQUFKLElBQVc1RyxJQUFJdVIsRUFBN0MsRUFBaUQsRUFBRXpQLENBQW5ELEVBQXNEO0FBQ3JEOUIsYUFBS2thLE9BQU9wWSxDQUFQLEVBQVU1SCxNQUFmO0FBQ0E7QUFDQSxZQUFJNGdCLFFBQVE5YSxDQUFaLEVBQWU7QUFDZCxXQUFFL0YsQ0FBRjtBQUNBMGdCLGVBQU0zYSxDQUFOO0FBQ0E7QUFDRDs7QUFFRDs7OztBQUlBLFdBQUlrYSxPQUFPamdCLENBQVAsYUFBcUJ3ZCxLQUFyQixJQUE4QnlDLE9BQU9wWSxJQUFJLENBQVgsRUFBY3dZLE1BQWhELEVBQXdEO0FBQ3ZEO0FBQ0E7O0FBRUQ7QUFDQU8sZ0JBQVMvWSxJQUFJN0gsQ0FBYjtBQUNBMkYsYUFBTW9hLEtBQUtoZCxLQUFMLENBQVcyZCxHQUFYLEVBQWdCM2EsQ0FBaEIsQ0FBTjtBQUNBNUUsYUFBTTBCLEtBQU4sSUFBZTZkLEdBQWY7QUFDQTs7QUFFRCxVQUFJLENBQUN2ZixLQUFMLEVBQVk7QUFDWDtBQUNBOztBQUVELFVBQUdpZixVQUFILEVBQWU7QUFDZEUsMEJBQW1CbmYsTUFBTSxDQUFOLEVBQVNsQixNQUE1QjtBQUNBOztBQUVELFVBQUk0Z0IsT0FBTzFmLE1BQU0wQixLQUFOLEdBQWN5ZCxnQkFBekI7QUFDSW5mLGNBQVFBLE1BQU0sQ0FBTixFQUFTNEIsS0FBVCxDQUFldWQsZ0JBQWYsQ0FEWjtBQUVJaEosV0FBS3VKLE9BQU8xZixNQUFNbEIsTUFGdEI7QUFHSThkLGVBQVNwWSxJQUFJNUMsS0FBSixDQUFVLENBQVYsRUFBYThkLElBQWIsQ0FIYjtBQUlJQyxjQUFRbmIsSUFBSTVDLEtBQUosQ0FBVXVVLEVBQVYsQ0FKWjs7QUFNQSxVQUFJNVEsT0FBTyxDQUFDMUcsQ0FBRCxFQUFJNGdCLE1BQUosQ0FBWDs7QUFFQSxVQUFJN0MsTUFBSixFQUFZO0FBQ1hyWCxZQUFLdkcsSUFBTCxDQUFVNGQsTUFBVjtBQUNBOztBQUVELFVBQUlnRCxVQUFVLElBQUl2RCxLQUFKLENBQVVZLEtBQVYsRUFBaUJ0QixTQUFRUyxFQUFFeUMsUUFBRixDQUFXN2UsS0FBWCxFQUFrQjJiLE1BQWxCLENBQVIsR0FBb0MzYixLQUFyRCxFQUE0RHVjLEtBQTVELEVBQW1FdmMsS0FBbkUsRUFBMEVrZixNQUExRSxDQUFkOztBQUVBM1osV0FBS3ZHLElBQUwsQ0FBVTRnQixPQUFWOztBQUVBLFVBQUlELEtBQUosRUFBVztBQUNWcGEsWUFBS3ZHLElBQUwsQ0FBVTJnQixLQUFWO0FBQ0E7O0FBRUQ5ZCxZQUFNd0QsU0FBTixDQUFnQnJFLE1BQWhCLENBQXVCNmUsS0FBdkIsQ0FBNkJmLE1BQTdCLEVBQXFDdlosSUFBckM7QUFDQTtBQUNEO0FBQ0Q7O0FBRUQsVUFBT3VaLE1BQVA7QUFDQSxHQTFXb0I7O0FBNFdyQnJCLFNBQU87QUFDTnFDLFFBQUssRUFEQzs7QUFHTnJVLFFBQUssYUFBVXJJLElBQVYsRUFBZ0IrWixRQUFoQixFQUEwQjtBQUM5QixRQUFJTSxRQUFRckIsRUFBRXFCLEtBQUYsQ0FBUXFDLEdBQXBCOztBQUVBckMsVUFBTXJhLElBQU4sSUFBY3FhLE1BQU1yYSxJQUFOLEtBQWUsRUFBN0I7O0FBRUFxYSxVQUFNcmEsSUFBTixFQUFZcEUsSUFBWixDQUFpQm1lLFFBQWpCO0FBQ0EsSUFUSzs7QUFXTk8sUUFBSyxhQUFVdGEsSUFBVixFQUFnQm9hLEdBQWhCLEVBQXFCO0FBQ3pCLFFBQUl1QyxZQUFZM0QsRUFBRXFCLEtBQUYsQ0FBUXFDLEdBQVIsQ0FBWTFjLElBQVosQ0FBaEI7O0FBRUEsUUFBSSxDQUFDMmMsU0FBRCxJQUFjLENBQUNBLFVBQVVqaEIsTUFBN0IsRUFBcUM7QUFDcEM7QUFDQTs7QUFFRCxTQUFLLElBQUlELElBQUUsQ0FBTixFQUFTc2UsUUFBZCxFQUF3QkEsV0FBVzRDLFVBQVVsaEIsR0FBVixDQUFuQyxHQUFvRDtBQUNuRHNlLGNBQVNLLEdBQVQ7QUFDQTtBQUNELElBckJLLEVBNVdjLEVBQXRCOzs7O0FBcVlBLEtBQUluQixRQUFRRCxFQUFFQyxLQUFGLEdBQVUsVUFBU0MsSUFBVCxFQUFlNU0sT0FBZixFQUF3QjZNLEtBQXhCLEVBQStCeUQsVUFBL0IsRUFBMkNkLE1BQTNDLEVBQW1EO0FBQ3hFLE9BQUs1QyxJQUFMLEdBQVlBLElBQVo7QUFDQSxPQUFLNU0sT0FBTCxHQUFlQSxPQUFmO0FBQ0EsT0FBSzZNLEtBQUwsR0FBYUEsS0FBYjtBQUNBO0FBQ0EsT0FBS3pkLE1BQUwsR0FBYyxDQUFDa2hCLGNBQWMsRUFBZixFQUFtQmxoQixNQUFuQixHQUEwQixDQUF4QztBQUNBLE9BQUtvZ0IsTUFBTCxHQUFjLENBQUMsQ0FBQ0EsTUFBaEI7QUFDQSxFQVBEOztBQVNBN0MsT0FBTXRMLFNBQU4sR0FBa0IsVUFBU3lMLENBQVQsRUFBWXNCLFFBQVosRUFBc0JyVSxNQUF0QixFQUE4QjtBQUMvQyxNQUFJLE9BQU8rUyxDQUFQLElBQVksUUFBaEIsRUFBMEI7QUFDekIsVUFBT0EsQ0FBUDtBQUNBOztBQUVELE1BQUlKLEVBQUV2UixJQUFGLENBQU95UixJQUFQLENBQVlFLENBQVosTUFBbUIsT0FBdkIsRUFBZ0M7QUFDL0IsVUFBT0EsRUFBRXBWLEdBQUYsQ0FBTSxVQUFTMkwsT0FBVCxFQUFrQjtBQUM5QixXQUFPc0osTUFBTXRMLFNBQU4sQ0FBZ0JnQyxPQUFoQixFQUF5QitLLFFBQXpCLEVBQW1DdEIsQ0FBbkMsQ0FBUDtBQUNBLElBRk0sRUFFSnZkLElBRkksQ0FFQyxFQUZELENBQVA7QUFHQTs7QUFFRCxNQUFJdWUsTUFBTTtBQUNUbEIsU0FBTUUsRUFBRUYsSUFEQztBQUVUNU0sWUFBUzJNLE1BQU10TCxTQUFOLENBQWdCeUwsRUFBRTlNLE9BQWxCLEVBQTJCb08sUUFBM0IsRUFBcUNyVSxNQUFyQyxDQUZBO0FBR1QwSixRQUFLLE1BSEk7QUFJVDhNLFlBQVMsQ0FBQyxPQUFELEVBQVV6RCxFQUFFRixJQUFaLENBSkE7QUFLVDRELGVBQVksRUFMSDtBQU1UcEMsYUFBVUEsUUFORDtBQU9UclUsV0FBUUEsTUFQQyxFQUFWOzs7QUFVQSxNQUFJK1QsSUFBSWxCLElBQUosSUFBWSxTQUFoQixFQUEyQjtBQUMxQmtCLE9BQUkwQyxVQUFKLENBQWUsWUFBZixJQUErQixNQUEvQjtBQUNBOztBQUVELE1BQUkxRCxFQUFFRCxLQUFOLEVBQWE7QUFDWixPQUFJNEQsVUFBVS9ELEVBQUV2UixJQUFGLENBQU95UixJQUFQLENBQVlFLEVBQUVELEtBQWQsTUFBeUIsT0FBekIsR0FBbUNDLEVBQUVELEtBQXJDLEdBQTZDLENBQUNDLEVBQUVELEtBQUgsQ0FBM0Q7QUFDQTFhLFNBQU13RCxTQUFOLENBQWdCckcsSUFBaEIsQ0FBcUI2Z0IsS0FBckIsQ0FBMkJyQyxJQUFJeUMsT0FBL0IsRUFBd0NFLE9BQXhDO0FBQ0E7O0FBRUQvRCxJQUFFcUIsS0FBRixDQUFRQyxHQUFSLENBQVksTUFBWixFQUFvQkYsR0FBcEI7O0FBRUEsTUFBSTBDLGFBQWFqZSxPQUFPaU8sSUFBUCxDQUFZc04sSUFBSTBDLFVBQWhCLEVBQTRCOVksR0FBNUIsQ0FBZ0MsVUFBU2hFLElBQVQsRUFBZTtBQUMvRCxVQUFPQSxPQUFPLElBQVAsR0FBYyxDQUFDb2EsSUFBSTBDLFVBQUosQ0FBZTljLElBQWYsS0FBd0IsRUFBekIsRUFBNkI5QixPQUE3QixDQUFxQyxJQUFyQyxFQUEyQyxRQUEzQyxDQUFkLEdBQXFFLEdBQTVFO0FBQ0EsR0FGZ0IsRUFFZHJDLElBRmMsQ0FFVCxHQUZTLENBQWpCOztBQUlBLFNBQU8sTUFBTXVlLElBQUlySyxHQUFWLEdBQWdCLFVBQWhCLEdBQTZCcUssSUFBSXlDLE9BQUosQ0FBWWhoQixJQUFaLENBQWlCLEdBQWpCLENBQTdCLEdBQXFELEdBQXJELElBQTREaWhCLGFBQWEsTUFBTUEsVUFBbkIsR0FBZ0MsRUFBNUYsSUFBa0csR0FBbEcsR0FBd0cxQyxJQUFJOU4sT0FBNUcsR0FBc0gsSUFBdEgsR0FBNkg4TixJQUFJckssR0FBakksR0FBdUksR0FBOUk7O0FBRUEsRUF0Q0Q7O0FBd0NBLEtBQUksQ0FBQzRJLE1BQU05RyxRQUFYLEVBQXFCO0FBQ3BCLE1BQUksQ0FBQzhHLE1BQU16RyxnQkFBWCxFQUE2QjtBQUM1QjtBQUNBLFVBQU95RyxNQUFNVCxLQUFiO0FBQ0E7QUFDQTtBQUNEUyxRQUFNekcsZ0JBQU4sQ0FBdUIsU0FBdkIsRUFBa0MsVUFBU2dKLEdBQVQsRUFBYztBQUMvQyxPQUFJM0QsVUFBVTdKLEtBQUt1QyxLQUFMLENBQVdpTCxJQUFJRSxJQUFmLENBQWQ7QUFDSXRDLFVBQU92QixRQUFRbUQsUUFEbkI7QUFFSTFHLFVBQU91RCxRQUFRdkQsSUFGbkI7QUFHSXVILG9CQUFpQmhFLFFBQVFnRSxjQUg3Qjs7QUFLQTVDLFNBQU0yQyxXQUFOLENBQWtCdEMsRUFBRTVFLFNBQUYsQ0FBWUosSUFBWixFQUFrQmdGLEVBQUUzRSxTQUFGLENBQVl5RSxJQUFaLENBQWxCLEVBQXFDQSxJQUFyQyxDQUFsQjtBQUNBLE9BQUl5QyxjQUFKLEVBQW9CO0FBQ25CNUMsVUFBTXFFLEtBQU47QUFDQTtBQUNELEdBVkQsRUFVRyxLQVZIOztBQVlBLFNBQU9yRSxNQUFNVCxLQUFiO0FBQ0E7O0FBRUQ7QUFDQSxLQUFJK0UsU0FBU3BMLFNBQVNxTCxhQUFULElBQTBCLEdBQUcxZSxLQUFILENBQVM4RCxJQUFULENBQWN1UCxTQUFTc0wsb0JBQVQsQ0FBOEIsUUFBOUIsQ0FBZCxFQUF1RC9GLEdBQXZELEVBQXZDOztBQUVBLEtBQUk2RixNQUFKLEVBQVk7QUFDWGpFLElBQUVnQyxRQUFGLEdBQWFpQyxPQUFPRyxHQUFwQjs7QUFFQSxNQUFJdkwsU0FBU0ssZ0JBQVQsSUFBNkIsQ0FBQytLLE9BQU9JLFlBQVAsQ0FBb0IsYUFBcEIsQ0FBbEMsRUFBc0U7QUFDckUsT0FBR3hMLFNBQVN5TCxVQUFULEtBQXdCLFNBQTNCLEVBQXNDO0FBQ3JDLFFBQUlqTixPQUFPa04scUJBQVgsRUFBa0M7QUFDakNsTixZQUFPa04scUJBQVAsQ0FBNkJ2RSxFQUFFa0IsWUFBL0I7QUFDQSxLQUZELE1BRU87QUFDTjdKLFlBQU84QyxVQUFQLENBQWtCNkYsRUFBRWtCLFlBQXBCLEVBQWtDLEVBQWxDO0FBQ0E7QUFDRCxJQU5EO0FBT0s7QUFDSnJJLGFBQVNLLGdCQUFULENBQTBCLGtCQUExQixFQUE4QzhHLEVBQUVrQixZQUFoRDtBQUNBO0FBQ0Q7QUFDRDs7QUFFRCxRQUFPdkIsTUFBTVQsS0FBYjs7QUFFQyxDQXZlVyxFQUFaOztBQXllQSxJQUFJLE9BQU85YyxNQUFQLEtBQWtCLFdBQWxCLElBQWlDQSxPQUFPQyxPQUE1QyxFQUFxRDtBQUNwREQsUUFBT0MsT0FBUCxHQUFpQjZjLEtBQWpCO0FBQ0E7O0FBRUQ7QUFDQSxJQUFJLE9BQU84RCxNQUFQLEtBQWtCLFdBQXRCLEVBQW1DO0FBQ2xDQSxRQUFPOUQsS0FBUCxHQUFlQSxLQUFmO0FBQ0E7OztBQUdEOzs7O0FBSUFBLE1BQU03RCxTQUFOLENBQWdCbUosTUFBaEIsR0FBeUI7QUFDeEIsWUFBVyxpQkFEYTtBQUV4QixXQUFVLGdCQUZjO0FBR3hCLFlBQVcscUJBSGE7QUFJeEIsVUFBUyx5QkFKZTtBQUt4QixRQUFPO0FBQ05sRixXQUFTLHVHQURIO0FBRU5DLFVBQVE7QUFDUCxVQUFPO0FBQ05ELGFBQVMsaUJBREg7QUFFTkMsWUFBUTtBQUNQLG9CQUFlLE9BRFI7QUFFUCxrQkFBYSxjQUZOLEVBRkYsRUFEQTs7O0FBUVAsaUJBQWM7QUFDYkQsYUFBUyxpQ0FESTtBQUViQyxZQUFRO0FBQ1Asb0JBQWUsUUFEUixFQUZLLEVBUlA7OztBQWNQLGtCQUFlLE1BZFI7QUFlUCxnQkFBYTtBQUNaRCxhQUFTLFdBREc7QUFFWkMsWUFBUTtBQUNQLGtCQUFhLGNBRE4sRUFGSSxFQWZOLEVBRkYsRUFMaUI7Ozs7OztBQStCeEIsV0FBVSxtQkEvQmMsRUFBekI7OztBQWtDQTtBQUNBTCxNQUFNbUMsS0FBTixDQUFZaFMsR0FBWixDQUFnQixNQUFoQixFQUF3QixVQUFTK1IsR0FBVCxFQUFjOztBQUVyQyxLQUFJQSxJQUFJbEIsSUFBSixLQUFhLFFBQWpCLEVBQTJCO0FBQzFCa0IsTUFBSTBDLFVBQUosQ0FBZSxPQUFmLElBQTBCMUMsSUFBSTlOLE9BQUosQ0FBWXBPLE9BQVosQ0FBb0IsT0FBcEIsRUFBNkIsR0FBN0IsQ0FBMUI7QUFDQTtBQUNELENBTEQ7O0FBT0FnYSxNQUFNN0QsU0FBTixDQUFnQm9KLEdBQWhCLEdBQXNCdkYsTUFBTTdELFNBQU4sQ0FBZ0JtSixNQUF0QztBQUNBdEYsTUFBTTdELFNBQU4sQ0FBZ0JGLElBQWhCLEdBQXVCK0QsTUFBTTdELFNBQU4sQ0FBZ0JtSixNQUF2QztBQUNBdEYsTUFBTTdELFNBQU4sQ0FBZ0JxSixNQUFoQixHQUF5QnhGLE1BQU03RCxTQUFOLENBQWdCbUosTUFBekM7QUFDQXRGLE1BQU03RCxTQUFOLENBQWdCc0osR0FBaEIsR0FBc0J6RixNQUFNN0QsU0FBTixDQUFnQm1KLE1BQXRDOzs7QUFHQTs7OztBQUlBdEYsTUFBTTdELFNBQU4sQ0FBZ0J1SixHQUFoQixHQUFzQjtBQUNyQixZQUFXLGtCQURVO0FBRXJCLFdBQVU7QUFDVHRGLFdBQVMsMkJBREE7QUFFVEMsVUFBUTtBQUNQLFdBQVE7QUFDUjtBQUZPLEdBRkMsRUFGVzs7QUFTckIsUUFBTyw4REFUYztBQVVyQixhQUFZLDhCQVZTO0FBV3JCLFdBQVU7QUFDVEQsV0FBUyw2Q0FEQTtBQUVUd0QsVUFBUSxJQUZDLEVBWFc7O0FBZXJCLGFBQVksd0JBZlM7QUFnQnJCLGNBQWEsaUJBaEJRO0FBaUJyQixhQUFZLG1CQWpCUztBQWtCckIsZ0JBQWUsVUFsQk0sRUFBdEI7OztBQXFCQTVELE1BQU03RCxTQUFOLENBQWdCdUosR0FBaEIsQ0FBb0IsUUFBcEIsRUFBOEJyRixNQUE5QixDQUFxQzdOLElBQXJDLEdBQTRDd04sTUFBTXpRLElBQU4sQ0FBVzJRLEtBQVgsQ0FBaUJGLE1BQU03RCxTQUFOLENBQWdCdUosR0FBakMsQ0FBNUM7O0FBRUEsSUFBSTFGLE1BQU03RCxTQUFOLENBQWdCbUosTUFBcEIsRUFBNEI7QUFDM0J0RixPQUFNN0QsU0FBTixDQUFnQnFFLFlBQWhCLENBQTZCLFFBQTdCLEVBQXVDLEtBQXZDLEVBQThDO0FBQzdDLFdBQVM7QUFDUkosWUFBUyx5Q0FERDtBQUVSdUQsZUFBWSxJQUZKO0FBR1J0RCxXQUFRTCxNQUFNN0QsU0FBTixDQUFnQnVKLEdBSGhCO0FBSVJ6RSxVQUFPLGNBSkMsRUFEb0MsRUFBOUM7Ozs7QUFTQWpCLE9BQU03RCxTQUFOLENBQWdCcUUsWUFBaEIsQ0FBNkIsUUFBN0IsRUFBdUMsWUFBdkMsRUFBcUQ7QUFDcEQsZ0JBQWM7QUFDYkosWUFBUyxzQkFESTtBQUViQyxXQUFRO0FBQ1AsaUJBQWE7QUFDWkQsY0FBUyxZQURHO0FBRVpDLGFBQVFMLE1BQU03RCxTQUFOLENBQWdCbUosTUFBaEIsQ0FBdUJ6TixHQUF2QixDQUEyQndJLE1BRnZCLEVBRE47O0FBS1AsbUJBQWUsdUJBTFI7QUFNUCxrQkFBYztBQUNiRCxjQUFTLEtBREk7QUFFYkMsYUFBUUwsTUFBTTdELFNBQU4sQ0FBZ0J1SixHQUZYLEVBTlAsRUFGSzs7O0FBYWJ6RSxVQUFPLGNBYk0sRUFEc0MsRUFBckQ7O0FBZ0JHakIsT0FBTTdELFNBQU4sQ0FBZ0JtSixNQUFoQixDQUF1QnpOLEdBaEIxQjtBQWlCQTs7QUFFRDs7OztBQUlBbUksTUFBTTdELFNBQU4sQ0FBZ0J3SixLQUFoQixHQUF3QjtBQUN2QixZQUFXO0FBQ1Y7QUFDQ3ZGLFdBQVMsMkJBRFY7QUFFQ3VELGNBQVksSUFGYixFQURVOztBQUtWO0FBQ0N2RCxXQUFTLGtCQURWO0FBRUN1RCxjQUFZLElBRmIsRUFMVSxDQURZOzs7QUFXdkIsV0FBVTtBQUNUdkQsV0FBUyw4Q0FEQTtBQUVUd0QsVUFBUSxJQUZDLEVBWGE7O0FBZXZCLGVBQWM7QUFDYnhELFdBQVMsc0dBREk7QUFFYnVELGNBQVksSUFGQztBQUdidEQsVUFBUTtBQUNQRSxnQkFBYSxTQUROLEVBSEssRUFmUzs7O0FBc0J2QixZQUFXLDBHQXRCWTtBQXVCdkIsWUFBVyxrQkF2Qlk7QUF3QnZCLGFBQVksbUJBeEJXO0FBeUJ2QixXQUFVLCtDQXpCYTtBQTBCdkIsYUFBWSx5REExQlc7QUEyQnZCLGdCQUFlLGVBM0JRLEVBQXhCOzs7O0FBK0JBOzs7O0FBSUFQLE1BQU03RCxTQUFOLENBQWdCOEQsVUFBaEIsR0FBNkJELE1BQU03RCxTQUFOLENBQWdCZ0UsTUFBaEIsQ0FBdUIsT0FBdkIsRUFBZ0M7QUFDNUQsWUFBVywyVEFEaUQ7QUFFNUQsV0FBVSw4RUFGa0Q7QUFHNUQ7QUFDQSxhQUFZLHVEQUpnRDtBQUs1RCxhQUFZLGtFQUxnRCxFQUFoQyxDQUE3Qjs7O0FBUUFILE1BQU03RCxTQUFOLENBQWdCcUUsWUFBaEIsQ0FBNkIsWUFBN0IsRUFBMkMsU0FBM0MsRUFBc0Q7QUFDckQsVUFBUztBQUNSSixXQUFTLDhFQUREO0FBRVJ1RCxjQUFZLElBRko7QUFHUkMsVUFBUSxJQUhBLEVBRDRDLEVBQXREOzs7O0FBUUE1RCxNQUFNN0QsU0FBTixDQUFnQnFFLFlBQWhCLENBQTZCLFlBQTdCLEVBQTJDLFFBQTNDLEVBQXFEO0FBQ3BELG9CQUFtQjtBQUNsQkosV0FBUyx1QkFEUztBQUVsQndELFVBQVEsSUFGVTtBQUdsQnZELFVBQVE7QUFDUCxvQkFBaUI7QUFDaEJELGFBQVMsYUFETztBQUVoQkMsWUFBUTtBQUNQLGtDQUE2QjtBQUM1QkQsZUFBUyxXQURtQjtBQUU1QmEsYUFBTyxhQUZxQixFQUR0Qjs7QUFLUHpPLFdBQU13TixNQUFNN0QsU0FBTixDQUFnQjhELFVBTGYsRUFGUSxFQURWOzs7QUFXUCxhQUFVLFNBWEgsRUFIVSxFQURpQyxFQUFyRDs7Ozs7QUFvQkEsSUFBSUQsTUFBTTdELFNBQU4sQ0FBZ0JtSixNQUFwQixFQUE0QjtBQUMzQnRGLE9BQU03RCxTQUFOLENBQWdCcUUsWUFBaEIsQ0FBNkIsUUFBN0IsRUFBdUMsS0FBdkMsRUFBOEM7QUFDN0MsWUFBVTtBQUNUSixZQUFTLDJDQURBO0FBRVR1RCxlQUFZLElBRkg7QUFHVHRELFdBQVFMLE1BQU03RCxTQUFOLENBQWdCOEQsVUFIZjtBQUlUZ0IsVUFBTyxxQkFKRSxFQURtQyxFQUE5Qzs7O0FBUUE7O0FBRURqQixNQUFNN0QsU0FBTixDQUFnQnlKLEVBQWhCLEdBQXFCNUYsTUFBTTdELFNBQU4sQ0FBZ0I4RCxVQUFyQzs7QUFFQTs7OztBQUlBLENBQUMsWUFBWTtBQUNaLEtBQUksT0FBT1UsSUFBUCxLQUFnQixXQUFoQixJQUErQixDQUFDQSxLQUFLWCxLQUFyQyxJQUE4QyxDQUFDVyxLQUFLaEgsUUFBcEQsSUFBZ0UsQ0FBQ0EsU0FBUytCLGFBQTlFLEVBQTZGO0FBQzVGO0FBQ0E7O0FBRURpRixNQUFLWCxLQUFMLENBQVc2RixhQUFYLEdBQTJCLFlBQVc7O0FBRXJDLE1BQUlDLGFBQWE7QUFDaEIsU0FBTSxZQURVO0FBRWhCLFNBQU0sUUFGVTtBQUdoQixTQUFNLE1BSFU7QUFJaEIsVUFBTyxZQUpTO0FBS2hCLFdBQVEsWUFMUTtBQU1oQixTQUFNLE1BTlU7QUFPaEIsVUFBTyxPQVBTO0FBUWhCLFFBQUssR0FSVztBQVNoQixVQUFPLE9BVFMsRUFBakI7OztBQVlBLE1BQUd2ZixNQUFNd0QsU0FBTixDQUFnQnFELE9BQW5CLEVBQTRCLENBQUU7QUFDN0I3RyxTQUFNd0QsU0FBTixDQUFnQnpELEtBQWhCLENBQXNCOEQsSUFBdEIsQ0FBMkJ1UCxTQUFTMkksZ0JBQVQsQ0FBMEIsZUFBMUIsQ0FBM0IsRUFBdUVsVixPQUF2RSxDQUErRSxVQUFVMlksR0FBVixFQUFlO0FBQzdGLFFBQUliLE1BQU1hLElBQUlDLFlBQUosQ0FBaUIsVUFBakIsQ0FBVjs7QUFFQSxRQUFJeEQsUUFBSixDQUFjclUsU0FBUzRYLEdBQXZCO0FBQ0EsUUFBSW5GLE9BQU8sZ0NBQVg7QUFDQSxXQUFPelMsVUFBVSxDQUFDeVMsS0FBSzZCLElBQUwsQ0FBVXRVLE9BQU80SyxTQUFqQixDQUFsQixFQUErQztBQUM5QzVLLGNBQVNBLE9BQU91VSxVQUFoQjtBQUNBOztBQUVELFFBQUl2VSxNQUFKLEVBQVk7QUFDWHFVLGdCQUFXLENBQUN1RCxJQUFJaE4sU0FBSixDQUFjclUsS0FBZCxDQUFvQmtjLElBQXBCLEtBQTZCLEdBQUcsRUFBSCxDQUE5QixFQUFzQyxDQUF0QyxDQUFYO0FBQ0E7O0FBRUQsUUFBSSxDQUFDNEIsUUFBTCxFQUFlO0FBQ2QsU0FBSXlELFlBQVksQ0FBQ2YsSUFBSXhnQixLQUFKLENBQVUsVUFBVixLQUF5QixHQUFHLEVBQUgsQ0FBMUIsRUFBa0MsQ0FBbEMsQ0FBaEI7QUFDQThkLGdCQUFXc0QsV0FBV0csU0FBWCxLQUF5QkEsU0FBcEM7QUFDQTs7QUFFRCxRQUFJbkssT0FBT25DLFNBQVNFLGFBQVQsQ0FBdUIsTUFBdkIsQ0FBWDtBQUNBaUMsU0FBSy9DLFNBQUwsR0FBaUIsY0FBY3lKLFFBQS9COztBQUVBdUQsUUFBSXBELFdBQUosR0FBa0IsRUFBbEI7O0FBRUE3RyxTQUFLNkcsV0FBTCxHQUFtQixVQUFuQjs7QUFFQW9ELFFBQUlqTyxXQUFKLENBQWdCZ0UsSUFBaEI7O0FBRUEsUUFBSW9LLE1BQU0sSUFBSUMsY0FBSixFQUFWOztBQUVBRCxRQUFJRSxJQUFKLENBQVMsS0FBVCxFQUFnQmxCLEdBQWhCLEVBQXFCLElBQXJCOztBQUVBZ0IsUUFBSUcsa0JBQUosR0FBeUIsWUFBWTtBQUNwQyxTQUFJSCxJQUFJZCxVQUFKLElBQWtCLENBQXRCLEVBQXlCOztBQUV4QixVQUFJYyxJQUFJSSxNQUFKLEdBQWEsR0FBYixJQUFvQkosSUFBSUssWUFBNUIsRUFBMEM7QUFDekN6SyxZQUFLNkcsV0FBTCxHQUFtQnVELElBQUlLLFlBQXZCOztBQUVBdkcsYUFBTXVDLGdCQUFOLENBQXVCekcsSUFBdkI7QUFDQSxPQUpEO0FBS0ssVUFBSW9LLElBQUlJLE1BQUosSUFBYyxHQUFsQixFQUF1QjtBQUMzQnhLLFlBQUs2RyxXQUFMLEdBQW1CLGFBQWF1RCxJQUFJSSxNQUFqQixHQUEwQix3QkFBMUIsR0FBcURKLElBQUlNLFVBQTVFO0FBQ0EsT0FGSTtBQUdBO0FBQ0oxSyxZQUFLNkcsV0FBTCxHQUFtQiwwQ0FBbkI7QUFDQTtBQUNEO0FBQ0QsS0FmRDs7QUFpQkF1RCxRQUFJTyxJQUFKLENBQVMsSUFBVDtBQUNBLElBakREO0FBa0RBOztBQUVELEVBbkVEOztBQXFFQTlNLFVBQVNLLGdCQUFULENBQTBCLGtCQUExQixFQUE4QzJHLEtBQUtYLEtBQUwsQ0FBVzZGLGFBQXpEOztBQUVBLENBNUVELEk7Ozs7Ozs7O0NDOXNCQTtBQUNBOzs7Ozs7QUFNQSxJQUFJYSxlQUFlLG1FQUFtRW5oQixLQUFuRSxDQUF5RSxFQUF6RSxDQUFuQjs7QUFFQTs7O0FBR0FwQyxRQUFReU8sTUFBUixHQUFpQixVQUFVK1UsTUFBVixFQUFrQjtBQUNqQyxNQUFJLEtBQUtBLE1BQUwsSUFBZUEsU0FBU0QsYUFBYWxqQixNQUF6QyxFQUFpRDtBQUMvQyxXQUFPa2pCLGFBQWFDLE1BQWIsQ0FBUDtBQUNEO0FBQ0QsUUFBTSxJQUFJdGMsU0FBSixDQUFjLCtCQUErQnNjLE1BQTdDLENBQU47QUFDRCxDQUxEOztBQU9BOzs7O0FBSUF4akIsUUFBUThPLE1BQVIsR0FBaUIsVUFBVTJVLFFBQVYsRUFBb0I7QUFDbkMsTUFBSUMsT0FBTyxFQUFYLENBRG1DLENBQ2hCO0FBQ25CLE1BQUlDLE9BQU8sRUFBWCxDQUZtQyxDQUVoQjs7QUFFbkIsTUFBSUMsVUFBVSxFQUFkLENBSm1DLENBSWhCO0FBQ25CLE1BQUlDLFVBQVUsR0FBZCxDQUxtQyxDQUtoQjs7QUFFbkIsTUFBSUMsT0FBTyxFQUFYLENBUG1DLENBT2hCO0FBQ25CLE1BQUlDLE9BQU8sRUFBWCxDQVJtQyxDQVFoQjs7QUFFbkIsTUFBSUMsT0FBTyxFQUFYLENBVm1DLENBVWhCO0FBQ25CLE1BQUlDLFFBQVEsRUFBWixDQVhtQyxDQVdoQjs7QUFFbkIsTUFBSUMsZUFBZSxFQUFuQjtBQUNBLE1BQUlDLGVBQWUsRUFBbkI7O0FBRUE7QUFDQSxNQUFJVCxRQUFRRCxRQUFSLElBQW9CQSxZQUFZRSxJQUFwQyxFQUEwQztBQUN4QyxXQUFRRixXQUFXQyxJQUFuQjtBQUNEOztBQUVEO0FBQ0EsTUFBSUUsV0FBV0gsUUFBWCxJQUF1QkEsWUFBWUksT0FBdkMsRUFBZ0Q7QUFDOUMsV0FBUUosV0FBV0csT0FBWCxHQUFxQk0sWUFBN0I7QUFDRDs7QUFFRDtBQUNBLE1BQUlKLFFBQVFMLFFBQVIsSUFBb0JBLFlBQVlNLElBQXBDLEVBQTBDO0FBQ3hDLFdBQVFOLFdBQVdLLElBQVgsR0FBa0JLLFlBQTFCO0FBQ0Q7O0FBRUQ7QUFDQSxNQUFJVixZQUFZTyxJQUFoQixFQUFzQjtBQUNwQixXQUFPLEVBQVA7QUFDRDs7QUFFRDtBQUNBLE1BQUlQLFlBQVlRLEtBQWhCLEVBQXVCO0FBQ3JCLFdBQU8sRUFBUDtBQUNEOztBQUVEO0FBQ0EsU0FBTyxDQUFDLENBQVI7QUFDRCxDQTNDRCxDOzs7Ozs7O0NDdkJBO0FBQ0E7Ozs7OztBQU1BamtCLFFBQVFva0Isb0JBQVIsR0FBK0IsQ0FBL0I7QUFDQXBrQixRQUFRcWtCLGlCQUFSLEdBQTRCLENBQTVCOztBQUVBOzs7Ozs7Ozs7Ozs7O0FBYUEsU0FBU0MsZUFBVCxDQUF5QkMsSUFBekIsRUFBK0JDLEtBQS9CLEVBQXNDQyxPQUF0QyxFQUErQ0MsU0FBL0MsRUFBMERDLFFBQTFELEVBQW9FQyxLQUFwRSxFQUEyRTtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFJQyxNQUFNQyxLQUFLQyxLQUFMLENBQVcsQ0FBQ1AsUUFBUUQsSUFBVCxJQUFpQixDQUE1QixJQUFpQ0EsSUFBM0M7QUFDQSxNQUFJbGdCLE1BQU1zZ0IsU0FBU0YsT0FBVCxFQUFrQkMsVUFBVUcsR0FBVixDQUFsQixFQUFrQyxJQUFsQyxDQUFWO0FBQ0EsTUFBSXhnQixRQUFRLENBQVosRUFBZTtBQUNiO0FBQ0EsV0FBT3dnQixHQUFQO0FBQ0QsR0FIRDtBQUlLLE1BQUl4Z0IsTUFBTSxDQUFWLEVBQWE7QUFDaEI7QUFDQSxRQUFJbWdCLFFBQVFLLEdBQVIsR0FBYyxDQUFsQixFQUFxQjtBQUNuQjtBQUNBLGFBQU9QLGdCQUFnQk8sR0FBaEIsRUFBcUJMLEtBQXJCLEVBQTRCQyxPQUE1QixFQUFxQ0MsU0FBckMsRUFBZ0RDLFFBQWhELEVBQTBEQyxLQUExRCxDQUFQO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBLFFBQUlBLFNBQVM1a0IsUUFBUXFrQixpQkFBckIsRUFBd0M7QUFDdEMsYUFBT0csUUFBUUUsVUFBVXJrQixNQUFsQixHQUEyQm1rQixLQUEzQixHQUFtQyxDQUFDLENBQTNDO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsYUFBT0ssR0FBUDtBQUNEO0FBQ0YsR0FkSTtBQWVBO0FBQ0g7QUFDQSxRQUFJQSxNQUFNTixJQUFOLEdBQWEsQ0FBakIsRUFBb0I7QUFDbEI7QUFDQSxhQUFPRCxnQkFBZ0JDLElBQWhCLEVBQXNCTSxHQUF0QixFQUEyQkosT0FBM0IsRUFBb0NDLFNBQXBDLEVBQStDQyxRQUEvQyxFQUF5REMsS0FBekQsQ0FBUDtBQUNEOztBQUVEO0FBQ0EsUUFBSUEsU0FBUzVrQixRQUFRcWtCLGlCQUFyQixFQUF3QztBQUN0QyxhQUFPUSxHQUFQO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsYUFBT04sT0FBTyxDQUFQLEdBQVcsQ0FBQyxDQUFaLEdBQWdCQSxJQUF2QjtBQUNEO0FBQ0Y7QUFDRjs7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBdmtCLFFBQVFnbEIsTUFBUixHQUFpQixTQUFTQSxNQUFULENBQWdCUCxPQUFoQixFQUF5QkMsU0FBekIsRUFBb0NDLFFBQXBDLEVBQThDQyxLQUE5QyxFQUFxRDtBQUNwRSxNQUFJRixVQUFVcmtCLE1BQVYsS0FBcUIsQ0FBekIsRUFBNEI7QUFDMUIsV0FBTyxDQUFDLENBQVI7QUFDRDs7QUFFRCxNQUFJNEMsUUFBUXFoQixnQkFBZ0IsQ0FBQyxDQUFqQixFQUFvQkksVUFBVXJrQixNQUE5QixFQUFzQ29rQixPQUF0QyxFQUErQ0MsU0FBL0M7QUFDZ0JDLFVBRGhCLEVBQzBCQyxTQUFTNWtCLFFBQVFva0Isb0JBRDNDLENBQVo7QUFFQSxNQUFJbmhCLFFBQVEsQ0FBWixFQUFlO0FBQ2IsV0FBTyxDQUFDLENBQVI7QUFDRDs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxTQUFPQSxRQUFRLENBQVIsSUFBYSxDQUFwQixFQUF1QjtBQUNyQixRQUFJMGhCLFNBQVNELFVBQVV6aEIsS0FBVixDQUFULEVBQTJCeWhCLFVBQVV6aEIsUUFBUSxDQUFsQixDQUEzQixFQUFpRCxJQUFqRCxNQUEyRCxDQUEvRCxFQUFrRTtBQUNoRTtBQUNEO0FBQ0QsTUFBRUEsS0FBRjtBQUNEOztBQUVELFNBQU9BLEtBQVA7QUFDRCxDQXRCRCxDOzs7Ozs7O0NDeEZBO0FBQ0E7Ozs7OztBQU1BLElBQUltSixPQUFPLG1CQUFBQyxDQUFRLENBQVIsQ0FBWDs7QUFFQTs7OztBQUlBLFNBQVM0WSxzQkFBVCxDQUFnQy9nQixRQUFoQyxFQUEwQ0MsUUFBMUMsRUFBb0Q7QUFDbEQ7QUFDQSxNQUFJK2dCLFFBQVFoaEIsU0FBU1EsYUFBckI7QUFDQSxNQUFJeWdCLFFBQVFoaEIsU0FBU08sYUFBckI7QUFDQSxNQUFJMGdCLFVBQVVsaEIsU0FBU08sZUFBdkI7QUFDQSxNQUFJNGdCLFVBQVVsaEIsU0FBU00sZUFBdkI7QUFDQSxTQUFPMGdCLFFBQVFELEtBQVIsSUFBaUJDLFNBQVNELEtBQVQsSUFBa0JHLFdBQVdELE9BQTlDO0FBQ0FoWixPQUFLbkgsbUNBQUwsQ0FBeUNmLFFBQXpDLEVBQW1EQyxRQUFuRCxLQUFnRSxDQUR2RTtBQUVEOztBQUVEOzs7OztBQUtBLFNBQVNvTCxXQUFULEdBQXVCO0FBQ3JCLE9BQUsvQyxNQUFMLEdBQWMsRUFBZDtBQUNBLE9BQUs4WSxPQUFMLEdBQWUsSUFBZjtBQUNBO0FBQ0EsT0FBS0MsS0FBTCxHQUFhLEVBQUM3Z0IsZUFBZSxDQUFDLENBQWpCLEVBQW9CRCxpQkFBaUIsQ0FBckMsRUFBYjtBQUNEOztBQUVEOzs7Ozs7QUFNQThLLFlBQVkzSSxTQUFaLENBQXNCbUwsZUFBdEI7QUFDRSxTQUFTeVQsbUJBQVQsQ0FBNkJDLFNBQTdCLEVBQXdDQyxRQUF4QyxFQUFrRDtBQUNoRCxPQUFLbFosTUFBTCxDQUFZdkMsT0FBWixDQUFvQndiLFNBQXBCLEVBQStCQyxRQUEvQjtBQUNELENBSEg7O0FBS0E7Ozs7O0FBS0FuVyxZQUFZM0ksU0FBWixDQUFzQm9HLEdBQXRCLEdBQTRCLFNBQVMyWSxlQUFULENBQXlCQyxRQUF6QixFQUFtQztBQUM3RCxNQUFJWCx1QkFBdUIsS0FBS00sS0FBNUIsRUFBbUNLLFFBQW5DLENBQUosRUFBa0Q7QUFDaEQsU0FBS0wsS0FBTCxHQUFhSyxRQUFiO0FBQ0EsU0FBS3BaLE1BQUwsQ0FBWWpNLElBQVosQ0FBaUJxbEIsUUFBakI7QUFDRCxHQUhELE1BR087QUFDTCxTQUFLTixPQUFMLEdBQWUsS0FBZjtBQUNBLFNBQUs5WSxNQUFMLENBQVlqTSxJQUFaLENBQWlCcWxCLFFBQWpCO0FBQ0Q7QUFDRixDQVJEOztBQVVBOzs7Ozs7Ozs7QUFTQXJXLFlBQVkzSSxTQUFaLENBQXNCaUgsT0FBdEIsR0FBZ0MsU0FBU2dZLG1CQUFULEdBQStCO0FBQzdELE1BQUksQ0FBQyxLQUFLUCxPQUFWLEVBQW1CO0FBQ2pCLFNBQUs5WSxNQUFMLENBQVk0TixJQUFaLENBQWlCaE8sS0FBS25ILG1DQUF0QjtBQUNBLFNBQUtxZ0IsT0FBTCxHQUFlLElBQWY7QUFDRDtBQUNELFNBQU8sS0FBSzlZLE1BQVo7QUFDRCxDQU5EOztBQVFBeE0sUUFBUXVQLFdBQVIsR0FBc0JBLFdBQXRCLEM7Ozs7Ozs7Q0M5RUE7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7Ozs7Ozs7O0FBVUEsU0FBU3VXLElBQVQsQ0FBY0MsR0FBZCxFQUFtQi9MLENBQW5CLEVBQXNCZ00sQ0FBdEIsRUFBeUI7QUFDdkIsTUFBSUMsT0FBT0YsSUFBSS9MLENBQUosQ0FBWDtBQUNBK0wsTUFBSS9MLENBQUosSUFBUytMLElBQUlDLENBQUosQ0FBVDtBQUNBRCxNQUFJQyxDQUFKLElBQVNDLElBQVQ7QUFDRDs7QUFFRDs7Ozs7Ozs7QUFRQSxTQUFTQyxnQkFBVCxDQUEwQkMsR0FBMUIsRUFBK0JDLElBQS9CLEVBQXFDO0FBQ25DLFNBQU90QixLQUFLdUIsS0FBTCxDQUFXRixNQUFPckIsS0FBS3dCLE1BQUwsTUFBaUJGLE9BQU9ELEdBQXhCLENBQWxCLENBQVA7QUFDRDs7QUFFRDs7Ozs7Ozs7Ozs7O0FBWUEsU0FBU0ksV0FBVCxDQUFxQlIsR0FBckIsRUFBMEJTLFVBQTFCLEVBQXNDcmdCLENBQXRDLEVBQXlDc2dCLENBQXpDLEVBQTRDO0FBQzFDO0FBQ0E7QUFDQTs7QUFFQSxNQUFJdGdCLElBQUlzZ0IsQ0FBUixFQUFXO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBSUMsYUFBYVIsaUJBQWlCL2YsQ0FBakIsRUFBb0JzZ0IsQ0FBcEIsQ0FBakI7QUFDQSxRQUFJcm1CLElBQUkrRixJQUFJLENBQVo7O0FBRUEyZixTQUFLQyxHQUFMLEVBQVVXLFVBQVYsRUFBc0JELENBQXRCO0FBQ0EsUUFBSUUsUUFBUVosSUFBSVUsQ0FBSixDQUFaOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQUssSUFBSTFlLElBQUk1QixDQUFiLEVBQWdCNEIsSUFBSTBlLENBQXBCLEVBQXVCMWUsR0FBdkIsRUFBNEI7QUFDMUIsVUFBSXllLFdBQVdULElBQUloZSxDQUFKLENBQVgsRUFBbUI0ZSxLQUFuQixLQUE2QixDQUFqQyxFQUFvQztBQUNsQ3ZtQixhQUFLLENBQUw7QUFDQTBsQixhQUFLQyxHQUFMLEVBQVUzbEIsQ0FBVixFQUFhMkgsQ0FBYjtBQUNEO0FBQ0Y7O0FBRUQrZCxTQUFLQyxHQUFMLEVBQVUzbEIsSUFBSSxDQUFkLEVBQWlCMkgsQ0FBakI7QUFDQSxRQUFJNmUsSUFBSXhtQixJQUFJLENBQVo7O0FBRUE7O0FBRUFtbUIsZ0JBQVlSLEdBQVosRUFBaUJTLFVBQWpCLEVBQTZCcmdCLENBQTdCLEVBQWdDeWdCLElBQUksQ0FBcEM7QUFDQUwsZ0JBQVlSLEdBQVosRUFBaUJTLFVBQWpCLEVBQTZCSSxJQUFJLENBQWpDLEVBQW9DSCxDQUFwQztBQUNEO0FBQ0Y7O0FBRUQ7Ozs7Ozs7O0FBUUF6bUIsUUFBUTZtQixTQUFSLEdBQW9CLFVBQVVkLEdBQVYsRUFBZVMsVUFBZixFQUEyQjtBQUM3Q0QsY0FBWVIsR0FBWixFQUFpQlMsVUFBakIsRUFBNkIsQ0FBN0IsRUFBZ0NULElBQUkxbEIsTUFBSixHQUFhLENBQTdDO0FBQ0QsQ0FGRCxDOzs7Ozs7O0NDL0dBO0FBQ0E7Ozs7OztBQU1BLElBQUkrTCxPQUFPLG1CQUFBQyxDQUFRLENBQVIsQ0FBWDtBQUNBLElBQUl5YSxlQUFlLG1CQUFBemEsQ0FBUSxFQUFSLENBQW5CO0FBQ0EsSUFBSUUsV0FBVyxtQkFBQUYsQ0FBUSxDQUFSLEVBQXVCRSxRQUF0QztBQUNBLElBQUkrQyxZQUFZLG1CQUFBakQsQ0FBUSxDQUFSLENBQWhCO0FBQ0EsSUFBSXdhLFlBQVksbUJBQUF4YSxDQUFRLEVBQVIsRUFBd0J3YSxTQUF4Qzs7QUFFQSxTQUFTRSxpQkFBVCxDQUEyQkMsVUFBM0IsRUFBdUM7QUFDckMsTUFBSUMsWUFBWUQsVUFBaEI7QUFDQSxNQUFJLE9BQU9BLFVBQVAsS0FBc0IsUUFBMUIsRUFBb0M7QUFDbENDLGdCQUFZNVUsS0FBS3VDLEtBQUwsQ0FBV29TLFdBQVdua0IsT0FBWCxDQUFtQixVQUFuQixFQUErQixFQUEvQixDQUFYLENBQVo7QUFDRDs7QUFFRCxTQUFPb2tCLFVBQVVDLFFBQVYsSUFBc0IsSUFBdEI7QUFDSCxNQUFJQyx3QkFBSixDQUE2QkYsU0FBN0IsQ0FERztBQUVILE1BQUlHLHNCQUFKLENBQTJCSCxTQUEzQixDQUZKO0FBR0Q7O0FBRURGLGtCQUFrQjlXLGFBQWxCLEdBQWtDLFVBQVMrVyxVQUFULEVBQXFCO0FBQ3JELFNBQU9JLHVCQUF1Qm5YLGFBQXZCLENBQXFDK1csVUFBckMsQ0FBUDtBQUNELENBRkQ7O0FBSUE7OztBQUdBRCxrQkFBa0JuZ0IsU0FBbEIsQ0FBNEJvSixRQUE1QixHQUF1QyxDQUF2Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBK1csa0JBQWtCbmdCLFNBQWxCLENBQTRCeWdCLG1CQUE1QixHQUFrRCxJQUFsRDtBQUNBN2pCLE9BQU95YSxjQUFQLENBQXNCOEksa0JBQWtCbmdCLFNBQXhDLEVBQW1ELG9CQUFuRCxFQUF5RTtBQUN2RTBnQixPQUFLLGVBQVk7QUFDZixRQUFJLENBQUMsS0FBS0QsbUJBQVYsRUFBK0I7QUFDN0IsV0FBS0UsY0FBTCxDQUFvQixLQUFLelgsU0FBekIsRUFBb0MsS0FBS00sVUFBekM7QUFDRDs7QUFFRCxXQUFPLEtBQUtpWCxtQkFBWjtBQUNELEdBUHNFLEVBQXpFOzs7QUFVQU4sa0JBQWtCbmdCLFNBQWxCLENBQTRCNGdCLGtCQUE1QixHQUFpRCxJQUFqRDtBQUNBaGtCLE9BQU95YSxjQUFQLENBQXNCOEksa0JBQWtCbmdCLFNBQXhDLEVBQW1ELG1CQUFuRCxFQUF3RTtBQUN0RTBnQixPQUFLLGVBQVk7QUFDZixRQUFJLENBQUMsS0FBS0Usa0JBQVYsRUFBOEI7QUFDNUIsV0FBS0QsY0FBTCxDQUFvQixLQUFLelgsU0FBekIsRUFBb0MsS0FBS00sVUFBekM7QUFDRDs7QUFFRCxXQUFPLEtBQUtvWCxrQkFBWjtBQUNELEdBUHFFLEVBQXhFOzs7QUFVQVQsa0JBQWtCbmdCLFNBQWxCLENBQTRCNmdCLHVCQUE1QjtBQUNFLFNBQVNDLHdDQUFULENBQWtEN2pCLElBQWxELEVBQXdEWixLQUF4RCxFQUErRDtBQUM3RCxNQUFJMGtCLElBQUk5akIsS0FBS2pCLE1BQUwsQ0FBWUssS0FBWixDQUFSO0FBQ0EsU0FBTzBrQixNQUFNLEdBQU4sSUFBYUEsTUFBTSxHQUExQjtBQUNELENBSkg7O0FBTUE7Ozs7O0FBS0FaLGtCQUFrQm5nQixTQUFsQixDQUE0QjJnQixjQUE1QjtBQUNFLFNBQVNLLCtCQUFULENBQXlDL2pCLElBQXpDLEVBQStDeVAsV0FBL0MsRUFBNEQ7QUFDMUQsUUFBTSxJQUFJcFMsS0FBSixDQUFVLDBDQUFWLENBQU47QUFDRCxDQUhIOztBQUtBNmxCLGtCQUFrQmMsZUFBbEIsR0FBb0MsQ0FBcEM7QUFDQWQsa0JBQWtCZSxjQUFsQixHQUFtQyxDQUFuQzs7QUFFQWYsa0JBQWtCM0Msb0JBQWxCLEdBQXlDLENBQXpDO0FBQ0EyQyxrQkFBa0IxQyxpQkFBbEIsR0FBc0MsQ0FBdEM7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQkEwQyxrQkFBa0JuZ0IsU0FBbEIsQ0FBNEIySixXQUE1QjtBQUNFLFNBQVN3WCw2QkFBVCxDQUF1Q3RDLFNBQXZDLEVBQWtEdUMsUUFBbEQsRUFBNERDLE1BQTVELEVBQW9FO0FBQ2xFLE1BQUlDLFVBQVVGLFlBQVksSUFBMUI7QUFDQSxNQUFJRyxRQUFRRixVQUFVbEIsa0JBQWtCYyxlQUF4Qzs7QUFFQSxNQUFJM1UsUUFBSjtBQUNBLFVBQVFpVixLQUFSO0FBQ0EsU0FBS3BCLGtCQUFrQmMsZUFBdkI7QUFDRTNVLGlCQUFXLEtBQUtrVixrQkFBaEI7QUFDQTtBQUNGLFNBQUtyQixrQkFBa0JlLGNBQXZCO0FBQ0U1VSxpQkFBVyxLQUFLbVYsaUJBQWhCO0FBQ0E7QUFDRjtBQUNFLFlBQU0sSUFBSW5uQixLQUFKLENBQVUsNkJBQVYsQ0FBTixDQVJGOzs7QUFXQSxNQUFJa1AsYUFBYSxLQUFLQSxVQUF0QjtBQUNBOEMsV0FBU3ZLLEdBQVQsQ0FBYSxVQUFVNkgsT0FBVixFQUFtQjtBQUM5QixRQUFJbE0sU0FBU2tNLFFBQVFsTSxNQUFSLEtBQW1CLElBQW5CLEdBQTBCLElBQTFCLEdBQWlDLEtBQUtzTCxRQUFMLENBQWNsQyxFQUFkLENBQWlCOEMsUUFBUWxNLE1BQXpCLENBQTlDO0FBQ0EsUUFBSUEsVUFBVSxJQUFWLElBQWtCOEwsY0FBYyxJQUFwQyxFQUEwQztBQUN4QzlMLGVBQVM4SCxLQUFLNUwsSUFBTCxDQUFVNFAsVUFBVixFQUFzQjlMLE1BQXRCLENBQVQ7QUFDRDtBQUNELFdBQU87QUFDTEEsY0FBUUEsTUFESDtBQUVMSSxxQkFBZThMLFFBQVE5TCxhQUZsQjtBQUdMRCx1QkFBaUIrTCxRQUFRL0wsZUFIcEI7QUFJTEYsb0JBQWNpTSxRQUFRak0sWUFKakI7QUFLTEMsc0JBQWdCZ00sUUFBUWhNLGNBTG5CO0FBTUxHLFlBQU02TCxRQUFRN0wsSUFBUixLQUFpQixJQUFqQixHQUF3QixJQUF4QixHQUErQixLQUFLa0wsTUFBTCxDQUFZbkMsRUFBWixDQUFlOEMsUUFBUTdMLElBQXZCLENBTmhDLEVBQVA7O0FBUUQsR0FiRCxFQWFHLElBYkgsRUFhU3NGLE9BYlQsQ0FhaUJ3YixTQWJqQixFQWE0QnlDLE9BYjVCO0FBY0QsQ0FoQ0g7O0FBa0NBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUJBbkIsa0JBQWtCbmdCLFNBQWxCLENBQTRCMGhCLHdCQUE1QjtBQUNFLFNBQVNDLDBDQUFULENBQW9Eem5CLEtBQXBELEVBQTJEO0FBQ3pELE1BQUk2UCxPQUFPdkUsS0FBS3ZMLE1BQUwsQ0FBWUMsS0FBWixFQUFtQixNQUFuQixDQUFYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBSTBuQixTQUFTO0FBQ1hsa0IsWUFBUThILEtBQUt2TCxNQUFMLENBQVlDLEtBQVosRUFBbUIsUUFBbkIsQ0FERztBQUVYeUQsa0JBQWNvTSxJQUZIO0FBR1huTSxvQkFBZ0I0SCxLQUFLdkwsTUFBTCxDQUFZQyxLQUFaLEVBQW1CLFFBQW5CLEVBQTZCLENBQTdCLENBSEwsRUFBYjs7O0FBTUEsTUFBSSxLQUFLc1AsVUFBTCxJQUFtQixJQUF2QixFQUE2QjtBQUMzQm9ZLFdBQU9sa0IsTUFBUCxHQUFnQjhILEtBQUt0SixRQUFMLENBQWMsS0FBS3NOLFVBQW5CLEVBQStCb1ksT0FBT2xrQixNQUF0QyxDQUFoQjtBQUNEO0FBQ0QsTUFBSSxDQUFDLEtBQUtzTCxRQUFMLENBQWN0RCxHQUFkLENBQWtCa2MsT0FBT2xrQixNQUF6QixDQUFMLEVBQXVDO0FBQ3JDLFdBQU8sRUFBUDtBQUNEO0FBQ0Rra0IsU0FBT2xrQixNQUFQLEdBQWdCLEtBQUtzTCxRQUFMLENBQWM1TSxPQUFkLENBQXNCd2xCLE9BQU9sa0IsTUFBN0IsQ0FBaEI7O0FBRUEsTUFBSTRPLFdBQVcsRUFBZjs7QUFFQSxNQUFJalEsUUFBUSxLQUFLd2xCLFlBQUwsQ0FBa0JELE1BQWxCO0FBQ2tCLE9BQUtILGlCQUR2QjtBQUVrQixnQkFGbEI7QUFHa0Isa0JBSGxCO0FBSWtCamMsT0FBS25JLDBCQUp2QjtBQUtrQjZpQixlQUFhekMsaUJBTC9CLENBQVo7QUFNQSxNQUFJcGhCLFNBQVMsQ0FBYixFQUFnQjtBQUNkLFFBQUl1TixVQUFVLEtBQUs2WCxpQkFBTCxDQUF1QnBsQixLQUF2QixDQUFkOztBQUVBLFFBQUluQyxNQUFNOFAsTUFBTixLQUFpQmpLLFNBQXJCLEVBQWdDO0FBQzlCLFVBQUlwQyxlQUFlaU0sUUFBUWpNLFlBQTNCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBT2lNLFdBQVdBLFFBQVFqTSxZQUFSLEtBQXlCQSxZQUEzQyxFQUF5RDtBQUN2RDJPLGlCQUFTM1MsSUFBVCxDQUFjO0FBQ1pvUSxnQkFBTXZFLEtBQUt2TCxNQUFMLENBQVkyUCxPQUFaLEVBQXFCLGVBQXJCLEVBQXNDLElBQXRDLENBRE07QUFFWkksa0JBQVF4RSxLQUFLdkwsTUFBTCxDQUFZMlAsT0FBWixFQUFxQixpQkFBckIsRUFBd0MsSUFBeEMsQ0FGSTtBQUdaa1ksc0JBQVl0YyxLQUFLdkwsTUFBTCxDQUFZMlAsT0FBWixFQUFxQixxQkFBckIsRUFBNEMsSUFBNUMsQ0FIQSxFQUFkOzs7QUFNQUEsa0JBQVUsS0FBSzZYLGlCQUFMLENBQXVCLEVBQUVwbEIsS0FBekIsQ0FBVjtBQUNEO0FBQ0YsS0FoQkQsTUFnQk87QUFDTCxVQUFJdUIsaUJBQWlCZ00sUUFBUWhNLGNBQTdCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBT2dNO0FBQ0FBLGNBQVFqTSxZQUFSLEtBQXlCb00sSUFEekI7QUFFQUgsY0FBUWhNLGNBQVIsSUFBMEJBLGNBRmpDLEVBRWlEO0FBQy9DME8saUJBQVMzUyxJQUFULENBQWM7QUFDWm9RLGdCQUFNdkUsS0FBS3ZMLE1BQUwsQ0FBWTJQLE9BQVosRUFBcUIsZUFBckIsRUFBc0MsSUFBdEMsQ0FETTtBQUVaSSxrQkFBUXhFLEtBQUt2TCxNQUFMLENBQVkyUCxPQUFaLEVBQXFCLGlCQUFyQixFQUF3QyxJQUF4QyxDQUZJO0FBR1prWSxzQkFBWXRjLEtBQUt2TCxNQUFMLENBQVkyUCxPQUFaLEVBQXFCLHFCQUFyQixFQUE0QyxJQUE1QyxDQUhBLEVBQWQ7OztBQU1BQSxrQkFBVSxLQUFLNlgsaUJBQUwsQ0FBdUIsRUFBRXBsQixLQUF6QixDQUFWO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFNBQU9pUSxRQUFQO0FBQ0QsQ0F2RUg7O0FBeUVBbFQsUUFBUSttQixpQkFBUixHQUE0QkEsaUJBQTVCOztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE4QkEsU0FBU0ssc0JBQVQsQ0FBZ0NKLFVBQWhDLEVBQTRDO0FBQzFDLE1BQUlDLFlBQVlELFVBQWhCO0FBQ0EsTUFBSSxPQUFPQSxVQUFQLEtBQXNCLFFBQTFCLEVBQW9DO0FBQ2xDQyxnQkFBWTVVLEtBQUt1QyxLQUFMLENBQVdvUyxXQUFXbmtCLE9BQVgsQ0FBbUIsVUFBbkIsRUFBK0IsRUFBL0IsQ0FBWCxDQUFaO0FBQ0Q7O0FBRUQsTUFBSTZRLFVBQVV0SCxLQUFLdkwsTUFBTCxDQUFZb21CLFNBQVosRUFBdUIsU0FBdkIsQ0FBZDtBQUNBLE1BQUlsVyxVQUFVM0UsS0FBS3ZMLE1BQUwsQ0FBWW9tQixTQUFaLEVBQXVCLFNBQXZCLENBQWQ7QUFDQTtBQUNBO0FBQ0EsTUFBSXRULFFBQVF2SCxLQUFLdkwsTUFBTCxDQUFZb21CLFNBQVosRUFBdUIsT0FBdkIsRUFBZ0MsRUFBaEMsQ0FBWjtBQUNBLE1BQUk3VyxhQUFhaEUsS0FBS3ZMLE1BQUwsQ0FBWW9tQixTQUFaLEVBQXVCLFlBQXZCLEVBQXFDLElBQXJDLENBQWpCO0FBQ0EsTUFBSXJULGlCQUFpQnhILEtBQUt2TCxNQUFMLENBQVlvbUIsU0FBWixFQUF1QixnQkFBdkIsRUFBeUMsSUFBekMsQ0FBckI7QUFDQSxNQUFJL1QsV0FBVzlHLEtBQUt2TCxNQUFMLENBQVlvbUIsU0FBWixFQUF1QixVQUF2QixDQUFmO0FBQ0EsTUFBSTNXLE9BQU9sRSxLQUFLdkwsTUFBTCxDQUFZb21CLFNBQVosRUFBdUIsTUFBdkIsRUFBK0IsSUFBL0IsQ0FBWDs7QUFFQTtBQUNBO0FBQ0EsTUFBSXZULFdBQVcsS0FBSzFELFFBQXBCLEVBQThCO0FBQzVCLFVBQU0sSUFBSTlPLEtBQUosQ0FBVSwwQkFBMEJ3UyxPQUFwQyxDQUFOO0FBQ0Q7O0FBRUQzQyxZQUFVQTtBQUNQcEksS0FETyxDQUNIVDtBQUNMO0FBQ0E7QUFDQTtBQUpRLElBS1BTLEdBTE8sQ0FLSHlELEtBQUtwSztBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBVFEsSUFVUDJHLEdBVk8sQ0FVSCxVQUFVckUsTUFBVixFQUFrQjtBQUNyQixXQUFPOEwsY0FBY2hFLEtBQUtsSyxVQUFMLENBQWdCa08sVUFBaEIsQ0FBZCxJQUE2Q2hFLEtBQUtsSyxVQUFMLENBQWdCb0MsTUFBaEIsQ0FBN0M7QUFDSDhILFNBQUt0SixRQUFMLENBQWNzTixVQUFkLEVBQTBCOUwsTUFBMUIsQ0FERztBQUVIQSxVQUZKO0FBR0QsR0FkTyxDQUFWOztBQWdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQUt1TCxNQUFMLEdBQWN0RCxTQUFTRyxTQUFULENBQW1CaUgsTUFBTWhMLEdBQU4sQ0FBVVQsTUFBVixDQUFuQixFQUFzQyxJQUF0QyxDQUFkO0FBQ0EsT0FBSzBILFFBQUwsR0FBZ0JyRCxTQUFTRyxTQUFULENBQW1CcUUsT0FBbkIsRUFBNEIsSUFBNUIsQ0FBaEI7O0FBRUEsT0FBS1gsVUFBTCxHQUFrQkEsVUFBbEI7QUFDQSxPQUFLd0QsY0FBTCxHQUFzQkEsY0FBdEI7QUFDQSxPQUFLOUQsU0FBTCxHQUFpQm9ELFFBQWpCO0FBQ0EsT0FBSzVDLElBQUwsR0FBWUEsSUFBWjtBQUNEOztBQUVEOFcsdUJBQXVCeGdCLFNBQXZCLEdBQW1DcEQsT0FBT0MsTUFBUCxDQUFjc2pCLGtCQUFrQm5nQixTQUFoQyxDQUFuQztBQUNBd2dCLHVCQUF1QnhnQixTQUF2QixDQUFpQytoQixRQUFqQyxHQUE0QzVCLGlCQUE1Qzs7QUFFQTs7Ozs7OztBQU9BSyx1QkFBdUJuWCxhQUF2QjtBQUNFLFNBQVMyWSwrQkFBVCxDQUF5QzVCLFVBQXpDLEVBQXFEO0FBQ25ELE1BQUk2QixNQUFNcmxCLE9BQU9DLE1BQVAsQ0FBYzJqQix1QkFBdUJ4Z0IsU0FBckMsQ0FBVjs7QUFFQSxNQUFJK00sUUFBUWtWLElBQUloWixNQUFKLEdBQWF0RCxTQUFTRyxTQUFULENBQW1Cc2EsV0FBV25YLE1BQVgsQ0FBa0JoQyxPQUFsQixFQUFuQixFQUFnRCxJQUFoRCxDQUF6QjtBQUNBLE1BQUlrRCxVQUFVOFgsSUFBSWpaLFFBQUosR0FBZXJELFNBQVNHLFNBQVQsQ0FBbUJzYSxXQUFXcFgsUUFBWCxDQUFvQi9CLE9BQXBCLEVBQW5CLEVBQWtELElBQWxELENBQTdCO0FBQ0FnYixNQUFJelksVUFBSixHQUFpQjRXLFdBQVd0WCxXQUE1QjtBQUNBbVosTUFBSWpWLGNBQUosR0FBcUJvVCxXQUFXN1QsdUJBQVgsQ0FBbUMwVixJQUFJalosUUFBSixDQUFhL0IsT0FBYixFQUFuQztBQUNtQ2diLE1BQUl6WSxVQUR2QyxDQUFyQjtBQUVBeVksTUFBSXZZLElBQUosR0FBVzBXLFdBQVd2WCxLQUF0Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFJcVosb0JBQW9COUIsV0FBV2xYLFNBQVgsQ0FBcUJqQyxPQUFyQixHQUErQjFLLEtBQS9CLEVBQXhCO0FBQ0EsTUFBSTRsQix3QkFBd0JGLElBQUl4QixtQkFBSixHQUEwQixFQUF0RDtBQUNBLE1BQUkyQix1QkFBdUJILElBQUlyQixrQkFBSixHQUF5QixFQUFwRDs7QUFFQSxPQUFLLElBQUlwbkIsSUFBSSxDQUFSLEVBQVdDLFNBQVN5b0Isa0JBQWtCem9CLE1BQTNDLEVBQW1ERCxJQUFJQyxNQUF2RCxFQUErREQsR0FBL0QsRUFBb0U7QUFDbEUsUUFBSTZvQixhQUFhSCxrQkFBa0Ixb0IsQ0FBbEIsQ0FBakI7QUFDQSxRQUFJOG9CLGNBQWMsSUFBSUMsT0FBSixFQUFsQjtBQUNBRCxnQkFBWXhrQixhQUFaLEdBQTRCdWtCLFdBQVd2a0IsYUFBdkM7QUFDQXdrQixnQkFBWXprQixlQUFaLEdBQThCd2tCLFdBQVd4a0IsZUFBekM7O0FBRUEsUUFBSXdrQixXQUFXM2tCLE1BQWYsRUFBdUI7QUFDckI0a0Isa0JBQVk1a0IsTUFBWixHQUFxQnlNLFFBQVEvTixPQUFSLENBQWdCaW1CLFdBQVcza0IsTUFBM0IsQ0FBckI7QUFDQTRrQixrQkFBWTNrQixZQUFaLEdBQTJCMGtCLFdBQVcxa0IsWUFBdEM7QUFDQTJrQixrQkFBWTFrQixjQUFaLEdBQTZCeWtCLFdBQVd6a0IsY0FBeEM7O0FBRUEsVUFBSXlrQixXQUFXdGtCLElBQWYsRUFBcUI7QUFDbkJ1a0Isb0JBQVl2a0IsSUFBWixHQUFtQmdQLE1BQU0zUSxPQUFOLENBQWNpbUIsV0FBV3RrQixJQUF6QixDQUFuQjtBQUNEOztBQUVEcWtCLDJCQUFxQnpvQixJQUFyQixDQUEwQjJvQixXQUExQjtBQUNEOztBQUVESCwwQkFBc0J4b0IsSUFBdEIsQ0FBMkIyb0IsV0FBM0I7QUFDRDs7QUFFRHJDLFlBQVVnQyxJQUFJckIsa0JBQWQsRUFBa0NwYixLQUFLbkksMEJBQXZDOztBQUVBLFNBQU80a0IsR0FBUDtBQUNELENBNUNIOztBQThDQTs7O0FBR0F6Qix1QkFBdUJ4Z0IsU0FBdkIsQ0FBaUNvSixRQUFqQyxHQUE0QyxDQUE1Qzs7QUFFQTs7O0FBR0F4TSxPQUFPeWEsY0FBUCxDQUFzQm1KLHVCQUF1QnhnQixTQUE3QyxFQUF3RCxTQUF4RCxFQUFtRTtBQUNqRTBnQixPQUFLLGVBQVk7QUFDZixXQUFPLEtBQUsxWCxRQUFMLENBQWMvQixPQUFkLEdBQXdCbEYsR0FBeEIsQ0FBNEIsVUFBVWhGLENBQVYsRUFBYTtBQUM5QyxhQUFPLEtBQUt5TSxVQUFMLElBQW1CLElBQW5CLEdBQTBCaEUsS0FBSzVMLElBQUwsQ0FBVSxLQUFLNFAsVUFBZixFQUEyQnpNLENBQTNCLENBQTFCLEdBQTBEQSxDQUFqRTtBQUNELEtBRk0sRUFFSixJQUZJLENBQVA7QUFHRCxHQUxnRSxFQUFuRTs7O0FBUUE7OztBQUdBLFNBQVN3bEIsT0FBVCxHQUFtQjtBQUNqQixPQUFLemtCLGFBQUwsR0FBcUIsQ0FBckI7QUFDQSxPQUFLRCxlQUFMLEdBQXVCLENBQXZCO0FBQ0EsT0FBS0gsTUFBTCxHQUFjLElBQWQ7QUFDQSxPQUFLQyxZQUFMLEdBQW9CLElBQXBCO0FBQ0EsT0FBS0MsY0FBTCxHQUFzQixJQUF0QjtBQUNBLE9BQUtHLElBQUwsR0FBWSxJQUFaO0FBQ0Q7O0FBRUQ7Ozs7O0FBS0F5aUIsdUJBQXVCeGdCLFNBQXZCLENBQWlDMmdCLGNBQWpDO0FBQ0UsU0FBU0ssK0JBQVQsQ0FBeUMvakIsSUFBekMsRUFBK0N5UCxXQUEvQyxFQUE0RDtBQUMxRCxNQUFJNU8sZ0JBQWdCLENBQXBCO0FBQ0EsTUFBSStOLDBCQUEwQixDQUE5QjtBQUNBLE1BQUlHLHVCQUF1QixDQUEzQjtBQUNBLE1BQUlELHlCQUF5QixDQUE3QjtBQUNBLE1BQUlHLGlCQUFpQixDQUFyQjtBQUNBLE1BQUlELGVBQWUsQ0FBbkI7QUFDQSxNQUFJeFMsU0FBU3dELEtBQUt4RCxNQUFsQjtBQUNBLE1BQUk0QyxRQUFRLENBQVo7QUFDQSxNQUFJbW1CLGlCQUFpQixFQUFyQjtBQUNBLE1BQUluRCxPQUFPLEVBQVg7QUFDQSxNQUFJb0QsbUJBQW1CLEVBQXZCO0FBQ0EsTUFBSVAsb0JBQW9CLEVBQXhCO0FBQ0EsTUFBSXRZLE9BQUosRUFBYXpLLEdBQWIsRUFBa0J1akIsT0FBbEIsRUFBMkJDLEdBQTNCLEVBQWdDaGhCLEtBQWhDOztBQUVBLFNBQU90RixRQUFRNUMsTUFBZixFQUF1QjtBQUNyQixRQUFJd0QsS0FBS2pCLE1BQUwsQ0FBWUssS0FBWixNQUF1QixHQUEzQixFQUFnQztBQUM5QnlCO0FBQ0F6QjtBQUNBd1AsZ0NBQTBCLENBQTFCO0FBQ0QsS0FKRDtBQUtLLFFBQUk1TyxLQUFLakIsTUFBTCxDQUFZSyxLQUFaLE1BQXVCLEdBQTNCLEVBQWdDO0FBQ25DQTtBQUNELEtBRkk7QUFHQTtBQUNIdU4sZ0JBQVUsSUFBSTJZLE9BQUosRUFBVjtBQUNBM1ksY0FBUTlMLGFBQVIsR0FBd0JBLGFBQXhCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFLNmtCLE1BQU10bUIsS0FBWCxFQUFrQnNtQixNQUFNbHBCLE1BQXhCLEVBQWdDa3BCLEtBQWhDLEVBQXVDO0FBQ3JDLFlBQUksS0FBSzlCLHVCQUFMLENBQTZCNWpCLElBQTdCLEVBQW1DMGxCLEdBQW5DLENBQUosRUFBNkM7QUFDM0M7QUFDRDtBQUNGO0FBQ0R4akIsWUFBTWxDLEtBQUtWLEtBQUwsQ0FBV0YsS0FBWCxFQUFrQnNtQixHQUFsQixDQUFOOztBQUVBRCxnQkFBVUYsZUFBZXJqQixHQUFmLENBQVY7QUFDQSxVQUFJdWpCLE9BQUosRUFBYTtBQUNYcm1CLGlCQUFTOEMsSUFBSTFGLE1BQWI7QUFDRCxPQUZELE1BRU87QUFDTGlwQixrQkFBVSxFQUFWO0FBQ0EsZUFBT3JtQixRQUFRc21CLEdBQWYsRUFBb0I7QUFDbEJqYSxvQkFBVVIsTUFBVixDQUFpQmpMLElBQWpCLEVBQXVCWixLQUF2QixFQUE4QmdqQixJQUE5QjtBQUNBMWQsa0JBQVEwZCxLQUFLMWQsS0FBYjtBQUNBdEYsa0JBQVFnakIsS0FBSzVXLElBQWI7QUFDQWlhLGtCQUFRL29CLElBQVIsQ0FBYWdJLEtBQWI7QUFDRDs7QUFFRCxZQUFJK2dCLFFBQVFqcEIsTUFBUixLQUFtQixDQUF2QixFQUEwQjtBQUN4QixnQkFBTSxJQUFJYSxLQUFKLENBQVUsd0NBQVYsQ0FBTjtBQUNEOztBQUVELFlBQUlvb0IsUUFBUWpwQixNQUFSLEtBQW1CLENBQXZCLEVBQTBCO0FBQ3hCLGdCQUFNLElBQUlhLEtBQUosQ0FBVSx3Q0FBVixDQUFOO0FBQ0Q7O0FBRURrb0IsdUJBQWVyakIsR0FBZixJQUFzQnVqQixPQUF0QjtBQUNEOztBQUVEO0FBQ0E5WSxjQUFRL0wsZUFBUixHQUEwQmdPLDBCQUEwQjZXLFFBQVEsQ0FBUixDQUFwRDtBQUNBN1csZ0NBQTBCakMsUUFBUS9MLGVBQWxDOztBQUVBLFVBQUk2a0IsUUFBUWpwQixNQUFSLEdBQWlCLENBQXJCLEVBQXdCO0FBQ3RCO0FBQ0FtUSxnQkFBUWxNLE1BQVIsR0FBaUJ3TyxpQkFBaUJ3VyxRQUFRLENBQVIsQ0FBbEM7QUFDQXhXLDBCQUFrQndXLFFBQVEsQ0FBUixDQUFsQjs7QUFFQTtBQUNBOVksZ0JBQVFqTSxZQUFSLEdBQXVCcU8sdUJBQXVCMFcsUUFBUSxDQUFSLENBQTlDO0FBQ0ExVywrQkFBdUJwQyxRQUFRak0sWUFBL0I7QUFDQTtBQUNBaU0sZ0JBQVFqTSxZQUFSLElBQXdCLENBQXhCOztBQUVBO0FBQ0FpTSxnQkFBUWhNLGNBQVIsR0FBeUJtTyx5QkFBeUIyVyxRQUFRLENBQVIsQ0FBbEQ7QUFDQTNXLGlDQUF5Qm5DLFFBQVFoTSxjQUFqQzs7QUFFQSxZQUFJOGtCLFFBQVFqcEIsTUFBUixHQUFpQixDQUFyQixFQUF3QjtBQUN0QjtBQUNBbVEsa0JBQVE3TCxJQUFSLEdBQWVrTyxlQUFleVcsUUFBUSxDQUFSLENBQTlCO0FBQ0F6VywwQkFBZ0J5VyxRQUFRLENBQVIsQ0FBaEI7QUFDRDtBQUNGOztBQUVEUix3QkFBa0J2b0IsSUFBbEIsQ0FBdUJpUSxPQUF2QjtBQUNBLFVBQUksT0FBT0EsUUFBUWpNLFlBQWYsS0FBZ0MsUUFBcEMsRUFBOEM7QUFDNUM4a0IseUJBQWlCOW9CLElBQWpCLENBQXNCaVEsT0FBdEI7QUFDRDtBQUNGO0FBQ0Y7O0FBRURxVyxZQUFVaUMsaUJBQVYsRUFBNkIxYyxLQUFLeEgsbUNBQWxDO0FBQ0EsT0FBS3lpQixtQkFBTCxHQUEyQnlCLGlCQUEzQjs7QUFFQWpDLFlBQVV3QyxnQkFBVixFQUE0QmpkLEtBQUtuSSwwQkFBakM7QUFDQSxPQUFLdWpCLGtCQUFMLEdBQTBCNkIsZ0JBQTFCO0FBQ0QsQ0F0R0g7O0FBd0dBOzs7O0FBSUFqQyx1QkFBdUJ4Z0IsU0FBdkIsQ0FBaUM2aEIsWUFBakM7QUFDRSxTQUFTZSw2QkFBVCxDQUF1Qy9FLE9BQXZDLEVBQWdEZ0YsU0FBaEQsRUFBMkRDLFNBQTNEO0FBQ3VDQyxXQUR2QyxFQUNvREMsV0FEcEQsRUFDaUVoRixLQURqRSxFQUN3RTtBQUN0RTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFJSCxRQUFRaUYsU0FBUixLQUFzQixDQUExQixFQUE2QjtBQUMzQixVQUFNLElBQUl4aUIsU0FBSixDQUFjO0FBQ0V1ZCxZQUFRaUYsU0FBUixDQURoQixDQUFOO0FBRUQ7QUFDRCxNQUFJakYsUUFBUWtGLFdBQVIsSUFBdUIsQ0FBM0IsRUFBOEI7QUFDNUIsVUFBTSxJQUFJemlCLFNBQUosQ0FBYztBQUNFdWQsWUFBUWtGLFdBQVIsQ0FEaEIsQ0FBTjtBQUVEOztBQUVELFNBQU83QyxhQUFhOUIsTUFBYixDQUFvQlAsT0FBcEIsRUFBNkJnRixTQUE3QixFQUF3Q0csV0FBeEMsRUFBcURoRixLQUFyRCxDQUFQO0FBQ0QsQ0FsQkg7O0FBb0JBOzs7O0FBSUF3Qyx1QkFBdUJ4Z0IsU0FBdkIsQ0FBaUNpakIsa0JBQWpDO0FBQ0UsU0FBU0Msb0NBQVQsR0FBZ0Q7QUFDOUMsT0FBSyxJQUFJN21CLFFBQVEsQ0FBakIsRUFBb0JBLFFBQVEsS0FBS21sQixrQkFBTCxDQUF3Qi9uQixNQUFwRCxFQUE0RCxFQUFFNEMsS0FBOUQsRUFBcUU7QUFDbkUsUUFBSXVOLFVBQVUsS0FBSzRYLGtCQUFMLENBQXdCbmxCLEtBQXhCLENBQWQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFJQSxRQUFRLENBQVIsR0FBWSxLQUFLbWxCLGtCQUFMLENBQXdCL25CLE1BQXhDLEVBQWdEO0FBQzlDLFVBQUkwcEIsY0FBYyxLQUFLM0Isa0JBQUwsQ0FBd0JubEIsUUFBUSxDQUFoQyxDQUFsQjs7QUFFQSxVQUFJdU4sUUFBUTlMLGFBQVIsS0FBMEJxbEIsWUFBWXJsQixhQUExQyxFQUF5RDtBQUN2RDhMLGdCQUFRd1osbUJBQVIsR0FBOEJELFlBQVl0bEIsZUFBWixHQUE4QixDQUE1RDtBQUNBO0FBQ0Q7QUFDRjs7QUFFRDtBQUNBK0wsWUFBUXdaLG1CQUFSLEdBQThCQyxRQUE5QjtBQUNEO0FBQ0YsQ0FyQkg7O0FBdUJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9CQTdDLHVCQUF1QnhnQixTQUF2QixDQUFpQ29MLG1CQUFqQztBQUNFLFNBQVNrWSxxQ0FBVCxDQUErQ3BwQixLQUEvQyxFQUFzRDtBQUNwRCxNQUFJMG5CLFNBQVM7QUFDWDlqQixtQkFBZTBILEtBQUt2TCxNQUFMLENBQVlDLEtBQVosRUFBbUIsTUFBbkIsQ0FESjtBQUVYMkQscUJBQWlCMkgsS0FBS3ZMLE1BQUwsQ0FBWUMsS0FBWixFQUFtQixRQUFuQixDQUZOLEVBQWI7OztBQUtBLE1BQUltQyxRQUFRLEtBQUt3bEIsWUFBTDtBQUNWRCxRQURVO0FBRVYsT0FBS0osa0JBRks7QUFHVixpQkFIVTtBQUlWLG1CQUpVO0FBS1ZoYyxPQUFLeEgsbUNBTEs7QUFNVndILE9BQUt2TCxNQUFMLENBQVlDLEtBQVosRUFBbUIsTUFBbkIsRUFBMkJpbUIsa0JBQWtCM0Msb0JBQTdDLENBTlUsQ0FBWjs7O0FBU0EsTUFBSW5oQixTQUFTLENBQWIsRUFBZ0I7QUFDZCxRQUFJdU4sVUFBVSxLQUFLNFgsa0JBQUwsQ0FBd0JubEIsS0FBeEIsQ0FBZDs7QUFFQSxRQUFJdU4sUUFBUTlMLGFBQVIsS0FBMEI4akIsT0FBTzlqQixhQUFyQyxFQUFvRDtBQUNsRCxVQUFJSixTQUFTOEgsS0FBS3ZMLE1BQUwsQ0FBWTJQLE9BQVosRUFBcUIsUUFBckIsRUFBK0IsSUFBL0IsQ0FBYjtBQUNBLFVBQUlsTSxXQUFXLElBQWYsRUFBcUI7QUFDbkJBLGlCQUFTLEtBQUtzTCxRQUFMLENBQWNsQyxFQUFkLENBQWlCcEosTUFBakIsQ0FBVDtBQUNBLFlBQUksS0FBSzhMLFVBQUwsSUFBbUIsSUFBdkIsRUFBNkI7QUFDM0I5TCxtQkFBUzhILEtBQUs1TCxJQUFMLENBQVUsS0FBSzRQLFVBQWYsRUFBMkI5TCxNQUEzQixDQUFUO0FBQ0Q7QUFDRjtBQUNELFVBQUlLLE9BQU95SCxLQUFLdkwsTUFBTCxDQUFZMlAsT0FBWixFQUFxQixNQUFyQixFQUE2QixJQUE3QixDQUFYO0FBQ0EsVUFBSTdMLFNBQVMsSUFBYixFQUFtQjtBQUNqQkEsZUFBTyxLQUFLa0wsTUFBTCxDQUFZbkMsRUFBWixDQUFlL0ksSUFBZixDQUFQO0FBQ0Q7QUFDRCxhQUFPO0FBQ0xMLGdCQUFRQSxNQURIO0FBRUxxTSxjQUFNdkUsS0FBS3ZMLE1BQUwsQ0FBWTJQLE9BQVosRUFBcUIsY0FBckIsRUFBcUMsSUFBckMsQ0FGRDtBQUdMSSxnQkFBUXhFLEtBQUt2TCxNQUFMLENBQVkyUCxPQUFaLEVBQXFCLGdCQUFyQixFQUF1QyxJQUF2QyxDQUhIO0FBSUw3TCxjQUFNQSxJQUpELEVBQVA7O0FBTUQ7QUFDRjs7QUFFRCxTQUFPO0FBQ0xMLFlBQVEsSUFESDtBQUVMcU0sVUFBTSxJQUZEO0FBR0xDLFlBQVEsSUFISDtBQUlMak0sVUFBTSxJQUpELEVBQVA7O0FBTUQsQ0E5Q0g7O0FBZ0RBOzs7O0FBSUF5aUIsdUJBQXVCeGdCLFNBQXZCLENBQWlDdWpCLHVCQUFqQztBQUNFLFNBQVNDLDhDQUFULEdBQTBEO0FBQ3hELE1BQUksQ0FBQyxLQUFLeFcsY0FBVixFQUEwQjtBQUN4QixXQUFPLEtBQVA7QUFDRDtBQUNELFNBQU8sS0FBS0EsY0FBTCxDQUFvQnZULE1BQXBCLElBQThCLEtBQUt1UCxRQUFMLENBQWMzQyxJQUFkLEVBQTlCO0FBQ0wsR0FBQyxLQUFLMkcsY0FBTCxDQUFvQnlXLElBQXBCLENBQXlCLFVBQVVDLEVBQVYsRUFBYyxDQUFFLE9BQU9BLE1BQU0sSUFBYixDQUFvQixDQUE3RCxDQURIO0FBRUQsQ0FQSDs7QUFTQTs7Ozs7QUFLQWxELHVCQUF1QnhnQixTQUF2QixDQUFpQ3NLLGdCQUFqQztBQUNFLFNBQVNxWixrQ0FBVCxDQUE0Q25ZLE9BQTVDLEVBQXFEb1ksYUFBckQsRUFBb0U7QUFDbEUsTUFBSSxDQUFDLEtBQUs1VyxjQUFWLEVBQTBCO0FBQ3hCLFdBQU8sSUFBUDtBQUNEOztBQUVELE1BQUksS0FBS3hELFVBQUwsSUFBbUIsSUFBdkIsRUFBNkI7QUFDM0JnQyxjQUFVaEcsS0FBS3RKLFFBQUwsQ0FBYyxLQUFLc04sVUFBbkIsRUFBK0JnQyxPQUEvQixDQUFWO0FBQ0Q7O0FBRUQsTUFBSSxLQUFLeEMsUUFBTCxDQUFjdEQsR0FBZCxDQUFrQjhGLE9BQWxCLENBQUosRUFBZ0M7QUFDOUIsV0FBTyxLQUFLd0IsY0FBTCxDQUFvQixLQUFLaEUsUUFBTCxDQUFjNU0sT0FBZCxDQUFzQm9QLE9BQXRCLENBQXBCLENBQVA7QUFDRDs7QUFFRCxNQUFJclEsR0FBSjtBQUNBLE1BQUksS0FBS3FPLFVBQUwsSUFBbUIsSUFBbkI7QUFDSXJPLFFBQU1xSyxLQUFLL0ssUUFBTCxDQUFjLEtBQUsrTyxVQUFuQixDQURWLENBQUosRUFDK0M7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFJcWEsaUJBQWlCclksUUFBUXZQLE9BQVIsQ0FBZ0IsWUFBaEIsRUFBOEIsRUFBOUIsQ0FBckI7QUFDQSxRQUFJZCxJQUFJUCxNQUFKLElBQWMsTUFBZDtBQUNHLFNBQUtvTyxRQUFMLENBQWN0RCxHQUFkLENBQWtCbWUsY0FBbEIsQ0FEUCxFQUMwQztBQUN4QyxhQUFPLEtBQUs3VyxjQUFMLENBQW9CLEtBQUtoRSxRQUFMLENBQWM1TSxPQUFkLENBQXNCeW5CLGNBQXRCLENBQXBCLENBQVA7QUFDRDs7QUFFRCxRQUFJLENBQUMsQ0FBQzFvQixJQUFJSCxJQUFMLElBQWFHLElBQUlILElBQUosSUFBWSxHQUExQjtBQUNHLFNBQUtnTyxRQUFMLENBQWN0RCxHQUFkLENBQWtCLE1BQU04RixPQUF4QixDQURQLEVBQ3lDO0FBQ3ZDLGFBQU8sS0FBS3dCLGNBQUwsQ0FBb0IsS0FBS2hFLFFBQUwsQ0FBYzVNLE9BQWQsQ0FBc0IsTUFBTW9QLE9BQTVCLENBQXBCLENBQVA7QUFDRDtBQUNGOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBSW9ZLGFBQUosRUFBbUI7QUFDakIsV0FBTyxJQUFQO0FBQ0QsR0FGRDtBQUdLO0FBQ0gsVUFBTSxJQUFJdHBCLEtBQUosQ0FBVSxNQUFNa1IsT0FBTixHQUFnQiw0QkFBMUIsQ0FBTjtBQUNEO0FBQ0YsQ0EzQ0g7O0FBNkNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUJBZ1YsdUJBQXVCeGdCLFNBQXZCLENBQWlDOGpCLG9CQUFqQztBQUNFLFNBQVNDLHNDQUFULENBQWdEN3BCLEtBQWhELEVBQXVEO0FBQ3JELE1BQUl3RCxTQUFTOEgsS0FBS3ZMLE1BQUwsQ0FBWUMsS0FBWixFQUFtQixRQUFuQixDQUFiO0FBQ0EsTUFBSSxLQUFLc1AsVUFBTCxJQUFtQixJQUF2QixFQUE2QjtBQUMzQjlMLGFBQVM4SCxLQUFLdEosUUFBTCxDQUFjLEtBQUtzTixVQUFuQixFQUErQjlMLE1BQS9CLENBQVQ7QUFDRDtBQUNELE1BQUksQ0FBQyxLQUFLc0wsUUFBTCxDQUFjdEQsR0FBZCxDQUFrQmhJLE1BQWxCLENBQUwsRUFBZ0M7QUFDOUIsV0FBTztBQUNMcU0sWUFBTSxJQUREO0FBRUxDLGNBQVEsSUFGSDtBQUdMOFgsa0JBQVksSUFIUCxFQUFQOztBQUtEO0FBQ0Rwa0IsV0FBUyxLQUFLc0wsUUFBTCxDQUFjNU0sT0FBZCxDQUFzQnNCLE1BQXRCLENBQVQ7O0FBRUEsTUFBSWtrQixTQUFTO0FBQ1hsa0IsWUFBUUEsTUFERztBQUVYQyxrQkFBYzZILEtBQUt2TCxNQUFMLENBQVlDLEtBQVosRUFBbUIsTUFBbkIsQ0FGSDtBQUdYMEQsb0JBQWdCNEgsS0FBS3ZMLE1BQUwsQ0FBWUMsS0FBWixFQUFtQixRQUFuQixDQUhMLEVBQWI7OztBQU1BLE1BQUltQyxRQUFRLEtBQUt3bEIsWUFBTDtBQUNWRCxRQURVO0FBRVYsT0FBS0gsaUJBRks7QUFHVixnQkFIVTtBQUlWLGtCQUpVO0FBS1ZqYyxPQUFLbkksMEJBTEs7QUFNVm1JLE9BQUt2TCxNQUFMLENBQVlDLEtBQVosRUFBbUIsTUFBbkIsRUFBMkJpbUIsa0JBQWtCM0Msb0JBQTdDLENBTlUsQ0FBWjs7O0FBU0EsTUFBSW5oQixTQUFTLENBQWIsRUFBZ0I7QUFDZCxRQUFJdU4sVUFBVSxLQUFLNlgsaUJBQUwsQ0FBdUJwbEIsS0FBdkIsQ0FBZDs7QUFFQSxRQUFJdU4sUUFBUWxNLE1BQVIsS0FBbUJra0IsT0FBT2xrQixNQUE5QixFQUFzQztBQUNwQyxhQUFPO0FBQ0xxTSxjQUFNdkUsS0FBS3ZMLE1BQUwsQ0FBWTJQLE9BQVosRUFBcUIsZUFBckIsRUFBc0MsSUFBdEMsQ0FERDtBQUVMSSxnQkFBUXhFLEtBQUt2TCxNQUFMLENBQVkyUCxPQUFaLEVBQXFCLGlCQUFyQixFQUF3QyxJQUF4QyxDQUZIO0FBR0xrWSxvQkFBWXRjLEtBQUt2TCxNQUFMLENBQVkyUCxPQUFaLEVBQXFCLHFCQUFyQixFQUE0QyxJQUE1QyxDQUhQLEVBQVA7O0FBS0Q7QUFDRjs7QUFFRCxTQUFPO0FBQ0xHLFVBQU0sSUFERDtBQUVMQyxZQUFRLElBRkg7QUFHTDhYLGdCQUFZLElBSFAsRUFBUDs7QUFLRCxDQS9DSDs7QUFpREExb0IsUUFBUW9uQixzQkFBUixHQUFpQ0Esc0JBQWpDOztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE2Q0EsU0FBU0Qsd0JBQVQsQ0FBa0NILFVBQWxDLEVBQThDO0FBQzVDLE1BQUlDLFlBQVlELFVBQWhCO0FBQ0EsTUFBSSxPQUFPQSxVQUFQLEtBQXNCLFFBQTFCLEVBQW9DO0FBQ2xDQyxnQkFBWTVVLEtBQUt1QyxLQUFMLENBQVdvUyxXQUFXbmtCLE9BQVgsQ0FBbUIsVUFBbkIsRUFBK0IsRUFBL0IsQ0FBWCxDQUFaO0FBQ0Q7O0FBRUQsTUFBSTZRLFVBQVV0SCxLQUFLdkwsTUFBTCxDQUFZb21CLFNBQVosRUFBdUIsU0FBdkIsQ0FBZDtBQUNBLE1BQUlDLFdBQVc5YSxLQUFLdkwsTUFBTCxDQUFZb21CLFNBQVosRUFBdUIsVUFBdkIsQ0FBZjs7QUFFQSxNQUFJdlQsV0FBVyxLQUFLMUQsUUFBcEIsRUFBOEI7QUFDNUIsVUFBTSxJQUFJOU8sS0FBSixDQUFVLDBCQUEwQndTLE9BQXBDLENBQU47QUFDRDs7QUFFRCxPQUFLOUQsUUFBTCxHQUFnQixJQUFJckQsUUFBSixFQUFoQjtBQUNBLE9BQUtzRCxNQUFMLEdBQWMsSUFBSXRELFFBQUosRUFBZDs7QUFFQSxNQUFJcWUsYUFBYTtBQUNmamEsVUFBTSxDQUFDLENBRFE7QUFFZkMsWUFBUSxDQUZPLEVBQWpCOztBQUlBLE9BQUtpYSxTQUFMLEdBQWlCM0QsU0FBU3ZlLEdBQVQsQ0FBYSxVQUFVaEYsQ0FBVixFQUFhO0FBQ3pDLFFBQUlBLEVBQUU1QixHQUFOLEVBQVc7QUFDVDtBQUNBO0FBQ0EsWUFBTSxJQUFJYixLQUFKLENBQVUsb0RBQVYsQ0FBTjtBQUNEO0FBQ0QsUUFBSTRwQixTQUFTMWUsS0FBS3ZMLE1BQUwsQ0FBWThDLENBQVosRUFBZSxRQUFmLENBQWI7QUFDQSxRQUFJb25CLGFBQWEzZSxLQUFLdkwsTUFBTCxDQUFZaXFCLE1BQVosRUFBb0IsTUFBcEIsQ0FBakI7QUFDQSxRQUFJRSxlQUFlNWUsS0FBS3ZMLE1BQUwsQ0FBWWlxQixNQUFaLEVBQW9CLFFBQXBCLENBQW5COztBQUVBLFFBQUlDLGFBQWFILFdBQVdqYSxJQUF4QjtBQUNDb2EsbUJBQWVILFdBQVdqYSxJQUExQixJQUFrQ3FhLGVBQWVKLFdBQVdoYSxNQURqRSxFQUMwRTtBQUN4RSxZQUFNLElBQUkxUCxLQUFKLENBQVUsc0RBQVYsQ0FBTjtBQUNEO0FBQ0QwcEIsaUJBQWFFLE1BQWI7O0FBRUEsV0FBTztBQUNMRyx1QkFBaUI7QUFDZjtBQUNBO0FBQ0F2bUIsdUJBQWVxbUIsYUFBYSxDQUhiO0FBSWZ0bUIseUJBQWlCdW1CLGVBQWUsQ0FKakIsRUFEWjs7QUFPTHJDLGdCQUFVLElBQUk1QixpQkFBSixDQUFzQjNhLEtBQUt2TCxNQUFMLENBQVk4QyxDQUFaLEVBQWUsS0FBZixDQUF0QixDQVBMLEVBQVA7O0FBU0QsR0F6QmdCLENBQWpCO0FBMEJEOztBQUVEd2pCLHlCQUF5QnZnQixTQUF6QixHQUFxQ3BELE9BQU9DLE1BQVAsQ0FBY3NqQixrQkFBa0JuZ0IsU0FBaEMsQ0FBckM7QUFDQXVnQix5QkFBeUJ2Z0IsU0FBekIsQ0FBbUNza0IsV0FBbkMsR0FBaURuRSxpQkFBakQ7O0FBRUE7OztBQUdBSSx5QkFBeUJ2Z0IsU0FBekIsQ0FBbUNvSixRQUFuQyxHQUE4QyxDQUE5Qzs7QUFFQTs7O0FBR0F4TSxPQUFPeWEsY0FBUCxDQUFzQmtKLHlCQUF5QnZnQixTQUEvQyxFQUEwRCxTQUExRCxFQUFxRTtBQUNuRTBnQixPQUFLLGVBQVk7QUFDZixRQUFJdlcsVUFBVSxFQUFkO0FBQ0EsU0FBSyxJQUFJM1EsSUFBSSxDQUFiLEVBQWdCQSxJQUFJLEtBQUt5cUIsU0FBTCxDQUFleHFCLE1BQW5DLEVBQTJDRCxHQUEzQyxFQUFnRDtBQUM5QyxXQUFLLElBQUkySCxJQUFJLENBQWIsRUFBZ0JBLElBQUksS0FBSzhpQixTQUFMLENBQWV6cUIsQ0FBZixFQUFrQnVvQixRQUFsQixDQUEyQjVYLE9BQTNCLENBQW1DMVEsTUFBdkQsRUFBK0QwSCxHQUEvRCxFQUFvRTtBQUNsRWdKLGdCQUFReFEsSUFBUixDQUFhLEtBQUtzcUIsU0FBTCxDQUFlenFCLENBQWYsRUFBa0J1b0IsUUFBbEIsQ0FBMkI1WCxPQUEzQixDQUFtQ2hKLENBQW5DLENBQWI7QUFDRDtBQUNGO0FBQ0QsV0FBT2dKLE9BQVA7QUFDRCxHQVRrRSxFQUFyRTs7O0FBWUE7Ozs7Ozs7Ozs7Ozs7OztBQWVBb1cseUJBQXlCdmdCLFNBQXpCLENBQW1Db0wsbUJBQW5DO0FBQ0UsU0FBU21aLDRDQUFULENBQXNEcnFCLEtBQXRELEVBQTZEO0FBQzNELE1BQUkwbkIsU0FBUztBQUNYOWpCLG1CQUFlMEgsS0FBS3ZMLE1BQUwsQ0FBWUMsS0FBWixFQUFtQixNQUFuQixDQURKO0FBRVgyRCxxQkFBaUIySCxLQUFLdkwsTUFBTCxDQUFZQyxLQUFaLEVBQW1CLFFBQW5CLENBRk4sRUFBYjs7O0FBS0E7QUFDQTtBQUNBLE1BQUlzcUIsZUFBZXRFLGFBQWE5QixNQUFiLENBQW9Cd0QsTUFBcEIsRUFBNEIsS0FBS3FDLFNBQWpDO0FBQ2pCLFlBQVNyQyxNQUFULEVBQWlCNkMsT0FBakIsRUFBMEI7QUFDeEIsUUFBSWhuQixNQUFNbWtCLE9BQU85akIsYUFBUCxHQUF1QjJtQixRQUFRSixlQUFSLENBQXdCdm1CLGFBQXpEO0FBQ0EsUUFBSUwsR0FBSixFQUFTO0FBQ1AsYUFBT0EsR0FBUDtBQUNEOztBQUVELFdBQVFta0IsT0FBTy9qQixlQUFQO0FBQ0E0bUIsWUFBUUosZUFBUixDQUF3QnhtQixlQURoQztBQUVELEdBVGdCLENBQW5CO0FBVUEsTUFBSTRtQixVQUFVLEtBQUtSLFNBQUwsQ0FBZU8sWUFBZixDQUFkOztBQUVBLE1BQUksQ0FBQ0MsT0FBTCxFQUFjO0FBQ1osV0FBTztBQUNML21CLGNBQVEsSUFESDtBQUVMcU0sWUFBTSxJQUZEO0FBR0xDLGNBQVEsSUFISDtBQUlMak0sWUFBTSxJQUpELEVBQVA7O0FBTUQ7O0FBRUQsU0FBTzBtQixRQUFRMUMsUUFBUixDQUFpQjNXLG1CQUFqQixDQUFxQztBQUMxQ3JCLFVBQU02WCxPQUFPOWpCLGFBQVA7QUFDSDJtQixZQUFRSixlQUFSLENBQXdCdm1CLGFBQXhCLEdBQXdDLENBRHJDLENBRG9DO0FBRzFDa00sWUFBUTRYLE9BQU8vakIsZUFBUDtBQUNMNG1CLFlBQVFKLGVBQVIsQ0FBd0J2bUIsYUFBeEIsS0FBMEM4akIsT0FBTzlqQixhQUFqRDtBQUNFMm1CLFlBQVFKLGVBQVIsQ0FBd0J4bUIsZUFBeEIsR0FBMEMsQ0FENUM7QUFFRSxLQUhHLENBSGtDO0FBTzFDNm1CLFVBQU14cUIsTUFBTXdxQixJQVA4QixFQUFyQyxDQUFQOztBQVNELENBdkNIOztBQXlDQTs7OztBQUlBbkUseUJBQXlCdmdCLFNBQXpCLENBQW1DdWpCLHVCQUFuQztBQUNFLFNBQVNvQixnREFBVCxHQUE0RDtBQUMxRCxTQUFPLEtBQUtWLFNBQUwsQ0FBZVcsS0FBZixDQUFxQixVQUFVN25CLENBQVYsRUFBYTtBQUN2QyxXQUFPQSxFQUFFZ2xCLFFBQUYsQ0FBV3dCLHVCQUFYLEVBQVA7QUFDRCxHQUZNLENBQVA7QUFHRCxDQUxIOztBQU9BOzs7OztBQUtBaEQseUJBQXlCdmdCLFNBQXpCLENBQW1Dc0ssZ0JBQW5DO0FBQ0UsU0FBU3VhLHlDQUFULENBQW1EclosT0FBbkQsRUFBNERvWSxhQUE1RCxFQUEyRTtBQUN6RSxPQUFLLElBQUlwcUIsSUFBSSxDQUFiLEVBQWdCQSxJQUFJLEtBQUt5cUIsU0FBTCxDQUFleHFCLE1BQW5DLEVBQTJDRCxHQUEzQyxFQUFnRDtBQUM5QyxRQUFJaXJCLFVBQVUsS0FBS1IsU0FBTCxDQUFlenFCLENBQWYsQ0FBZDs7QUFFQSxRQUFJNlEsVUFBVW9hLFFBQVExQyxRQUFSLENBQWlCelgsZ0JBQWpCLENBQWtDa0IsT0FBbEMsRUFBMkMsSUFBM0MsQ0FBZDtBQUNBLFFBQUluQixPQUFKLEVBQWE7QUFDWCxhQUFPQSxPQUFQO0FBQ0Q7QUFDRjtBQUNELE1BQUl1WixhQUFKLEVBQW1CO0FBQ2pCLFdBQU8sSUFBUDtBQUNELEdBRkQ7QUFHSztBQUNILFVBQU0sSUFBSXRwQixLQUFKLENBQVUsTUFBTWtSLE9BQU4sR0FBZ0IsNEJBQTFCLENBQU47QUFDRDtBQUNGLENBaEJIOztBQWtCQTs7Ozs7Ozs7Ozs7Ozs7QUFjQStVLHlCQUF5QnZnQixTQUF6QixDQUFtQzhqQixvQkFBbkM7QUFDRSxTQUFTZ0IsNkNBQVQsQ0FBdUQ1cUIsS0FBdkQsRUFBOEQ7QUFDNUQsT0FBSyxJQUFJVixJQUFJLENBQWIsRUFBZ0JBLElBQUksS0FBS3lxQixTQUFMLENBQWV4cUIsTUFBbkMsRUFBMkNELEdBQTNDLEVBQWdEO0FBQzlDLFFBQUlpckIsVUFBVSxLQUFLUixTQUFMLENBQWV6cUIsQ0FBZixDQUFkOztBQUVBO0FBQ0E7QUFDQSxRQUFJaXJCLFFBQVExQyxRQUFSLENBQWlCNVgsT0FBakIsQ0FBeUIvTixPQUF6QixDQUFpQ29KLEtBQUt2TCxNQUFMLENBQVlDLEtBQVosRUFBbUIsUUFBbkIsQ0FBakMsTUFBbUUsQ0FBQyxDQUF4RSxFQUEyRTtBQUN6RTtBQUNEO0FBQ0QsUUFBSTZxQixvQkFBb0JOLFFBQVExQyxRQUFSLENBQWlCK0Isb0JBQWpCLENBQXNDNXBCLEtBQXRDLENBQXhCO0FBQ0EsUUFBSTZxQixpQkFBSixFQUF1QjtBQUNyQixVQUFJcE4sTUFBTTtBQUNSNU4sY0FBTWdiLGtCQUFrQmhiLElBQWxCO0FBQ0gwYSxnQkFBUUosZUFBUixDQUF3QnZtQixhQUF4QixHQUF3QyxDQURyQyxDQURFO0FBR1JrTSxnQkFBUSthLGtCQUFrQi9hLE1BQWxCO0FBQ0x5YSxnQkFBUUosZUFBUixDQUF3QnZtQixhQUF4QixLQUEwQ2luQixrQkFBa0JoYixJQUE1RDtBQUNFMGEsZ0JBQVFKLGVBQVIsQ0FBd0J4bUIsZUFBeEIsR0FBMEMsQ0FENUM7QUFFRSxTQUhHLENBSEEsRUFBVjs7QUFRQSxhQUFPOFosR0FBUDtBQUNEO0FBQ0Y7O0FBRUQsU0FBTztBQUNMNU4sVUFBTSxJQUREO0FBRUxDLFlBQVEsSUFGSCxFQUFQOztBQUlELENBNUJIOztBQThCQTs7Ozs7QUFLQXVXLHlCQUF5QnZnQixTQUF6QixDQUFtQzJnQixjQUFuQztBQUNFLFNBQVNxRSxzQ0FBVCxDQUFnRC9uQixJQUFoRCxFQUFzRHlQLFdBQXRELEVBQW1FO0FBQ2pFLE9BQUsrVCxtQkFBTCxHQUEyQixFQUEzQjtBQUNBLE9BQUtHLGtCQUFMLEdBQTBCLEVBQTFCO0FBQ0EsT0FBSyxJQUFJcG5CLElBQUksQ0FBYixFQUFnQkEsSUFBSSxLQUFLeXFCLFNBQUwsQ0FBZXhxQixNQUFuQyxFQUEyQ0QsR0FBM0MsRUFBZ0Q7QUFDOUMsUUFBSWlyQixVQUFVLEtBQUtSLFNBQUwsQ0FBZXpxQixDQUFmLENBQWQ7QUFDQSxRQUFJeXJCLGtCQUFrQlIsUUFBUTFDLFFBQVIsQ0FBaUJQLGtCQUF2QztBQUNBLFNBQUssSUFBSXJnQixJQUFJLENBQWIsRUFBZ0JBLElBQUk4akIsZ0JBQWdCeHJCLE1BQXBDLEVBQTRDMEgsR0FBNUMsRUFBaUQ7QUFDL0MsVUFBSXlJLFVBQVVxYixnQkFBZ0I5akIsQ0FBaEIsQ0FBZDs7QUFFQSxVQUFJekQsU0FBUyttQixRQUFRMUMsUUFBUixDQUFpQi9ZLFFBQWpCLENBQTBCbEMsRUFBMUIsQ0FBNkI4QyxRQUFRbE0sTUFBckMsQ0FBYjtBQUNBLFVBQUkrbUIsUUFBUTFDLFFBQVIsQ0FBaUJ2WSxVQUFqQixLQUFnQyxJQUFwQyxFQUEwQztBQUN4QzlMLGlCQUFTOEgsS0FBSzVMLElBQUwsQ0FBVTZxQixRQUFRMUMsUUFBUixDQUFpQnZZLFVBQTNCLEVBQXVDOUwsTUFBdkMsQ0FBVDtBQUNEO0FBQ0QsV0FBS3NMLFFBQUwsQ0FBYzVDLEdBQWQsQ0FBa0IxSSxNQUFsQjtBQUNBQSxlQUFTLEtBQUtzTCxRQUFMLENBQWM1TSxPQUFkLENBQXNCc0IsTUFBdEIsQ0FBVDs7QUFFQSxVQUFJSyxPQUFPMG1CLFFBQVExQyxRQUFSLENBQWlCOVksTUFBakIsQ0FBd0JuQyxFQUF4QixDQUEyQjhDLFFBQVE3TCxJQUFuQyxDQUFYO0FBQ0EsV0FBS2tMLE1BQUwsQ0FBWTdDLEdBQVosQ0FBZ0JySSxJQUFoQjtBQUNBQSxhQUFPLEtBQUtrTCxNQUFMLENBQVk3TSxPQUFaLENBQW9CMkIsSUFBcEIsQ0FBUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQUltbkIsa0JBQWtCO0FBQ3BCeG5CLGdCQUFRQSxNQURZO0FBRXBCSSx1QkFBZThMLFFBQVE5TCxhQUFSO0FBQ1oybUIsZ0JBQVFKLGVBQVIsQ0FBd0J2bUIsYUFBeEIsR0FBd0MsQ0FENUIsQ0FGSztBQUlwQkQseUJBQWlCK0wsUUFBUS9MLGVBQVI7QUFDZDRtQixnQkFBUUosZUFBUixDQUF3QnZtQixhQUF4QixLQUEwQzhMLFFBQVE5TCxhQUFsRDtBQUNDMm1CLGdCQUFRSixlQUFSLENBQXdCeG1CLGVBQXhCLEdBQTBDLENBRDNDO0FBRUMsU0FIYSxDQUpHO0FBUXBCRixzQkFBY2lNLFFBQVFqTSxZQVJGO0FBU3BCQyx3QkFBZ0JnTSxRQUFRaE0sY0FUSjtBQVVwQkcsY0FBTUEsSUFWYyxFQUF0Qjs7O0FBYUEsV0FBSzBpQixtQkFBTCxDQUF5QjltQixJQUF6QixDQUE4QnVyQixlQUE5QjtBQUNBLFVBQUksT0FBT0EsZ0JBQWdCdm5CLFlBQXZCLEtBQXdDLFFBQTVDLEVBQXNEO0FBQ3BELGFBQUtpakIsa0JBQUwsQ0FBd0JqbkIsSUFBeEIsQ0FBNkJ1ckIsZUFBN0I7QUFDRDtBQUNGO0FBQ0Y7O0FBRURqRixZQUFVLEtBQUtRLG1CQUFmLEVBQW9DamIsS0FBS3hILG1DQUF6QztBQUNBaWlCLFlBQVUsS0FBS1csa0JBQWYsRUFBbUNwYixLQUFLbkksMEJBQXhDO0FBQ0QsQ0EvQ0g7O0FBaURBakUsUUFBUW1uQix3QkFBUixHQUFtQ0Esd0JBQW5DLEM7Ozs7Ozs7Q0N6akNBO0FBQ0E7Ozs7OztBQU1BLElBQUkzWCxxQkFBcUIsbUJBQUFuRCxDQUFRLEVBQVIsRUFBa0NtRCxrQkFBM0Q7QUFDQSxJQUFJcEQsT0FBTyxtQkFBQUMsQ0FBUSxDQUFSLENBQVg7O0FBRUE7QUFDQTtBQUNBLElBQUkwZixnQkFBZ0IsU0FBcEI7O0FBRUE7QUFDQSxJQUFJQyxlQUFlLEVBQW5COztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUlDLGVBQWUsb0JBQW5COztBQUVBOzs7Ozs7Ozs7Ozs7QUFZQSxTQUFTQyxVQUFULENBQW9CQyxLQUFwQixFQUEyQkMsT0FBM0IsRUFBb0NoYSxPQUFwQyxFQUE2Q2lhLE9BQTdDLEVBQXNEdHJCLEtBQXRELEVBQTZEO0FBQzNELE9BQUswVCxRQUFMLEdBQWdCLEVBQWhCO0FBQ0EsT0FBSzZYLGNBQUwsR0FBc0IsRUFBdEI7QUFDQSxPQUFLM2IsSUFBTCxHQUFZd2IsU0FBUyxJQUFULEdBQWdCLElBQWhCLEdBQXVCQSxLQUFuQztBQUNBLE9BQUt2YixNQUFMLEdBQWN3YixXQUFXLElBQVgsR0FBa0IsSUFBbEIsR0FBeUJBLE9BQXZDO0FBQ0EsT0FBSzluQixNQUFMLEdBQWM4TixXQUFXLElBQVgsR0FBa0IsSUFBbEIsR0FBeUJBLE9BQXZDO0FBQ0EsT0FBS3pOLElBQUwsR0FBWTVELFNBQVMsSUFBVCxHQUFnQixJQUFoQixHQUF1QkEsS0FBbkM7QUFDQSxPQUFLa3JCLFlBQUwsSUFBcUIsSUFBckI7QUFDQSxNQUFJSSxXQUFXLElBQWYsRUFBcUIsS0FBS3JmLEdBQUwsQ0FBU3FmLE9BQVQ7QUFDdEI7O0FBRUQ7Ozs7Ozs7O0FBUUFILFdBQVdLLHVCQUFYO0FBQ0UsU0FBU0Msa0NBQVQsQ0FBNENDLGNBQTVDLEVBQTREdGMsa0JBQTVELEVBQWdGdWMsYUFBaEYsRUFBK0Y7QUFDN0Y7QUFDQTtBQUNBLE1BQUlDLE9BQU8sSUFBSVQsVUFBSixFQUFYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBSVUsaUJBQWlCSCxlQUFlcnFCLEtBQWYsQ0FBcUIycEIsYUFBckIsQ0FBckI7QUFDQSxNQUFJYyxnQkFBZ0IsU0FBaEJBLGFBQWdCLEdBQVc7QUFDN0IsUUFBSUMsZUFBZUYsZUFBZXpkLEtBQWYsRUFBbkI7QUFDQTtBQUNBLFFBQUk0ZCxVQUFVSCxlQUFlemQsS0FBZixNQUEwQixFQUF4QztBQUNBLFdBQU8yZCxlQUFlQyxPQUF0QjtBQUNELEdBTEQ7O0FBT0E7QUFDQSxNQUFJQyxvQkFBb0IsQ0FBeEIsQ0FBMkJoRCxzQkFBc0IsQ0FBakQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBSWlELGNBQWMsSUFBbEI7O0FBRUE5YyxxQkFBbUJJLFdBQW5CLENBQStCLFVBQVVDLE9BQVYsRUFBbUI7QUFDaEQsUUFBSXljLGdCQUFnQixJQUFwQixFQUEwQjtBQUN4QjtBQUNBO0FBQ0EsVUFBSUQsb0JBQW9CeGMsUUFBUTlMLGFBQWhDLEVBQStDO0FBQzdDO0FBQ0F3b0IsMkJBQW1CRCxXQUFuQixFQUFnQ0osZUFBaEM7QUFDQUc7QUFDQWhELDhCQUFzQixDQUF0QjtBQUNBO0FBQ0QsT0FORCxNQU1PO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsWUFBSW1ELFdBQVdQLGVBQWUsQ0FBZixDQUFmO0FBQ0EsWUFBSWpVLE9BQU93VSxTQUFTOXBCLE1BQVQsQ0FBZ0IsQ0FBaEIsRUFBbUJtTixRQUFRL0wsZUFBUjtBQUNBdWxCLDJCQURuQixDQUFYO0FBRUE0Qyx1QkFBZSxDQUFmLElBQW9CTyxTQUFTOXBCLE1BQVQsQ0FBZ0JtTixRQUFRL0wsZUFBUjtBQUNBdWxCLDJCQURoQixDQUFwQjtBQUVBQSw4QkFBc0J4WixRQUFRL0wsZUFBOUI7QUFDQXlvQiwyQkFBbUJELFdBQW5CLEVBQWdDdFUsSUFBaEM7QUFDQTtBQUNBc1Usc0JBQWN6YyxPQUFkO0FBQ0E7QUFDRDtBQUNGO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsV0FBT3djLG9CQUFvQnhjLFFBQVE5TCxhQUFuQyxFQUFrRDtBQUNoRGlvQixXQUFLM2YsR0FBTCxDQUFTNmYsZUFBVDtBQUNBRztBQUNEO0FBQ0QsUUFBSWhELHNCQUFzQnhaLFFBQVEvTCxlQUFsQyxFQUFtRDtBQUNqRCxVQUFJMG9CLFdBQVdQLGVBQWUsQ0FBZixDQUFmO0FBQ0FELFdBQUszZixHQUFMLENBQVNtZ0IsU0FBUzlwQixNQUFULENBQWdCLENBQWhCLEVBQW1CbU4sUUFBUS9MLGVBQTNCLENBQVQ7QUFDQW1vQixxQkFBZSxDQUFmLElBQW9CTyxTQUFTOXBCLE1BQVQsQ0FBZ0JtTixRQUFRL0wsZUFBeEIsQ0FBcEI7QUFDQXVsQiw0QkFBc0J4WixRQUFRL0wsZUFBOUI7QUFDRDtBQUNEd29CLGtCQUFjemMsT0FBZDtBQUNELEdBeENELEVBd0NHLElBeENIO0FBeUNBO0FBQ0EsTUFBSW9jLGVBQWV2c0IsTUFBZixHQUF3QixDQUE1QixFQUErQjtBQUM3QixRQUFJNHNCLFdBQUosRUFBaUI7QUFDZjtBQUNBQyx5QkFBbUJELFdBQW5CLEVBQWdDSixlQUFoQztBQUNEO0FBQ0Q7QUFDQUYsU0FBSzNmLEdBQUwsQ0FBUzRmLGVBQWVwc0IsSUFBZixDQUFvQixFQUFwQixDQUFUO0FBQ0Q7O0FBRUQ7QUFDQTJQLHFCQUFtQlksT0FBbkIsQ0FBMkI5RyxPQUEzQixDQUFtQyxVQUFVK0csVUFBVixFQUFzQjtBQUN2RCxRQUFJQyxVQUFVZCxtQkFBbUJlLGdCQUFuQixDQUFvQ0YsVUFBcEMsQ0FBZDtBQUNBLFFBQUlDLFdBQVcsSUFBZixFQUFxQjtBQUNuQixVQUFJeWIsaUJBQWlCLElBQXJCLEVBQTJCO0FBQ3pCMWIscUJBQWE1RSxLQUFLNUwsSUFBTCxDQUFVa3NCLGFBQVYsRUFBeUIxYixVQUF6QixDQUFiO0FBQ0Q7QUFDRDJiLFdBQUt4YixnQkFBTCxDQUFzQkgsVUFBdEIsRUFBa0NDLE9BQWxDO0FBQ0Q7QUFDRixHQVJEOztBQVVBLFNBQU8wYixJQUFQOztBQUVBLFdBQVNPLGtCQUFULENBQTRCMWMsT0FBNUIsRUFBcUNtSSxJQUFyQyxFQUEyQztBQUN6QyxRQUFJbkksWUFBWSxJQUFaLElBQW9CQSxRQUFRbE0sTUFBUixLQUFtQnFDLFNBQTNDLEVBQXNEO0FBQ3BEZ21CLFdBQUszZixHQUFMLENBQVMyTCxJQUFUO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsVUFBSXJVLFNBQVNvb0I7QUFDVHRnQixXQUFLNUwsSUFBTCxDQUFVa3NCLGFBQVYsRUFBeUJsYyxRQUFRbE0sTUFBakMsQ0FEUztBQUVUa00sY0FBUWxNLE1BRlo7QUFHQXFvQixXQUFLM2YsR0FBTCxDQUFTLElBQUlrZixVQUFKLENBQWUxYixRQUFRak0sWUFBdkI7QUFDZWlNLGNBQVFoTSxjQUR2QjtBQUVlRixZQUZmO0FBR2VxVSxVQUhmO0FBSWVuSSxjQUFRN0wsSUFKdkIsQ0FBVDtBQUtEO0FBQ0Y7QUFDRixDQXhHSDs7QUEwR0E7Ozs7OztBQU1BdW5CLFdBQVd0bEIsU0FBWCxDQUFxQm9HLEdBQXJCLEdBQTJCLFNBQVNvZ0IsY0FBVCxDQUF3QkMsTUFBeEIsRUFBZ0M7QUFDekQsTUFBSWpxQixNQUFNK0gsT0FBTixDQUFja2lCLE1BQWQsQ0FBSixFQUEyQjtBQUN6QkEsV0FBT3BqQixPQUFQLENBQWUsVUFBVXFqQixLQUFWLEVBQWlCO0FBQzlCLFdBQUt0Z0IsR0FBTCxDQUFTc2dCLEtBQVQ7QUFDRCxLQUZELEVBRUcsSUFGSDtBQUdELEdBSkQ7QUFLSyxNQUFJRCxPQUFPcEIsWUFBUCxLQUF3QixPQUFPb0IsTUFBUCxLQUFrQixRQUE5QyxFQUF3RDtBQUMzRCxRQUFJQSxNQUFKLEVBQVk7QUFDVixXQUFLNVksUUFBTCxDQUFjbFUsSUFBZCxDQUFtQjhzQixNQUFuQjtBQUNEO0FBQ0YsR0FKSTtBQUtBO0FBQ0gsVUFBTSxJQUFJbm1CLFNBQUo7QUFDSixvRkFBZ0ZtbUIsTUFENUUsQ0FBTjs7QUFHRDtBQUNELFNBQU8sSUFBUDtBQUNELENBakJEOztBQW1CQTs7Ozs7O0FBTUFuQixXQUFXdGxCLFNBQVgsQ0FBcUIybUIsT0FBckIsR0FBK0IsU0FBU0Msa0JBQVQsQ0FBNEJILE1BQTVCLEVBQW9DO0FBQ2pFLE1BQUlqcUIsTUFBTStILE9BQU4sQ0FBY2tpQixNQUFkLENBQUosRUFBMkI7QUFDekIsU0FBSyxJQUFJanRCLElBQUlpdEIsT0FBT2h0QixNQUFQLEdBQWMsQ0FBM0IsRUFBOEJELEtBQUssQ0FBbkMsRUFBc0NBLEdBQXRDLEVBQTJDO0FBQ3pDLFdBQUttdEIsT0FBTCxDQUFhRixPQUFPanRCLENBQVAsQ0FBYjtBQUNEO0FBQ0YsR0FKRDtBQUtLLE1BQUlpdEIsT0FBT3BCLFlBQVAsS0FBd0IsT0FBT29CLE1BQVAsS0FBa0IsUUFBOUMsRUFBd0Q7QUFDM0QsU0FBSzVZLFFBQUwsQ0FBY2daLE9BQWQsQ0FBc0JKLE1BQXRCO0FBQ0QsR0FGSTtBQUdBO0FBQ0gsVUFBTSxJQUFJbm1CLFNBQUo7QUFDSixvRkFBZ0ZtbUIsTUFENUUsQ0FBTjs7QUFHRDtBQUNELFNBQU8sSUFBUDtBQUNELENBZkQ7O0FBaUJBOzs7Ozs7O0FBT0FuQixXQUFXdGxCLFNBQVgsQ0FBcUI4bUIsSUFBckIsR0FBNEIsU0FBU0MsZUFBVCxDQUF5QkMsR0FBekIsRUFBOEI7QUFDeEQsTUFBSU4sS0FBSjtBQUNBLE9BQUssSUFBSWx0QixJQUFJLENBQVIsRUFBVzJNLE1BQU0sS0FBSzBILFFBQUwsQ0FBY3BVLE1BQXBDLEVBQTRDRCxJQUFJMk0sR0FBaEQsRUFBcUQzTSxHQUFyRCxFQUEwRDtBQUN4RGt0QixZQUFRLEtBQUs3WSxRQUFMLENBQWNyVSxDQUFkLENBQVI7QUFDQSxRQUFJa3RCLE1BQU1yQixZQUFOLENBQUosRUFBeUI7QUFDdkJxQixZQUFNSSxJQUFOLENBQVdFLEdBQVg7QUFDRCxLQUZEO0FBR0s7QUFDSCxVQUFJTixVQUFVLEVBQWQsRUFBa0I7QUFDaEJNLFlBQUlOLEtBQUosRUFBVyxFQUFFaHBCLFFBQVEsS0FBS0EsTUFBZjtBQUNFcU0sZ0JBQU0sS0FBS0EsSUFEYjtBQUVFQyxrQkFBUSxLQUFLQSxNQUZmO0FBR0VqTSxnQkFBTSxLQUFLQSxJQUhiLEVBQVg7QUFJRDtBQUNGO0FBQ0Y7QUFDRixDQWhCRDs7QUFrQkE7Ozs7OztBQU1BdW5CLFdBQVd0bEIsU0FBWCxDQUFxQnBHLElBQXJCLEdBQTRCLFNBQVNxdEIsZUFBVCxDQUF5QkMsSUFBekIsRUFBK0I7QUFDekQsTUFBSWpaLFdBQUo7QUFDQSxNQUFJelUsQ0FBSjtBQUNBLE1BQUkyTSxNQUFNLEtBQUswSCxRQUFMLENBQWNwVSxNQUF4QjtBQUNBLE1BQUkwTSxNQUFNLENBQVYsRUFBYTtBQUNYOEgsa0JBQWMsRUFBZDtBQUNBLFNBQUt6VSxJQUFJLENBQVQsRUFBWUEsSUFBSTJNLE1BQUksQ0FBcEIsRUFBdUIzTSxHQUF2QixFQUE0QjtBQUMxQnlVLGtCQUFZdFUsSUFBWixDQUFpQixLQUFLa1UsUUFBTCxDQUFjclUsQ0FBZCxDQUFqQjtBQUNBeVUsa0JBQVl0VSxJQUFaLENBQWlCdXRCLElBQWpCO0FBQ0Q7QUFDRGpaLGdCQUFZdFUsSUFBWixDQUFpQixLQUFLa1UsUUFBTCxDQUFjclUsQ0FBZCxDQUFqQjtBQUNBLFNBQUtxVSxRQUFMLEdBQWdCSSxXQUFoQjtBQUNEO0FBQ0QsU0FBTyxJQUFQO0FBQ0QsQ0FkRDs7QUFnQkE7Ozs7Ozs7QUFPQXFYLFdBQVd0bEIsU0FBWCxDQUFxQm1uQixZQUFyQixHQUFvQyxTQUFTQyx1QkFBVCxDQUFpQ0MsUUFBakMsRUFBMkNDLFlBQTNDLEVBQXlEO0FBQzNGLE1BQUkzWCxZQUFZLEtBQUs5QixRQUFMLENBQWMsS0FBS0EsUUFBTCxDQUFjcFUsTUFBZCxHQUF1QixDQUFyQyxDQUFoQjtBQUNBLE1BQUlrVyxVQUFVMFYsWUFBVixDQUFKLEVBQTZCO0FBQzNCMVYsY0FBVXdYLFlBQVYsQ0FBdUJFLFFBQXZCLEVBQWlDQyxZQUFqQztBQUNELEdBRkQ7QUFHSyxNQUFJLE9BQU8zWCxTQUFQLEtBQXFCLFFBQXpCLEVBQW1DO0FBQ3RDLFNBQUs5QixRQUFMLENBQWMsS0FBS0EsUUFBTCxDQUFjcFUsTUFBZCxHQUF1QixDQUFyQyxJQUEwQ2tXLFVBQVUxVCxPQUFWLENBQWtCb3JCLFFBQWxCLEVBQTRCQyxZQUE1QixDQUExQztBQUNELEdBRkk7QUFHQTtBQUNILFNBQUt6WixRQUFMLENBQWNsVSxJQUFkLENBQW1CLEdBQUdzQyxPQUFILENBQVdvckIsUUFBWCxFQUFxQkMsWUFBckIsQ0FBbkI7QUFDRDtBQUNELFNBQU8sSUFBUDtBQUNELENBWkQ7O0FBY0E7Ozs7Ozs7QUFPQWhDLFdBQVd0bEIsU0FBWCxDQUFxQnVLLGdCQUFyQjtBQUNFLFNBQVNnZCwyQkFBVCxDQUFxQzVjLFdBQXJDLEVBQWtEQyxjQUFsRCxFQUFrRTtBQUNoRSxPQUFLOGEsY0FBTCxDQUFvQmxnQixLQUFLeEksV0FBTCxDQUFpQjJOLFdBQWpCLENBQXBCLElBQXFEQyxjQUFyRDtBQUNELENBSEg7O0FBS0E7Ozs7OztBQU1BMGEsV0FBV3RsQixTQUFYLENBQXFCd25CLGtCQUFyQjtBQUNFLFNBQVNDLDZCQUFULENBQXVDVCxHQUF2QyxFQUE0QztBQUMxQyxPQUFLLElBQUl4dEIsSUFBSSxDQUFSLEVBQVcyTSxNQUFNLEtBQUswSCxRQUFMLENBQWNwVSxNQUFwQyxFQUE0Q0QsSUFBSTJNLEdBQWhELEVBQXFEM00sR0FBckQsRUFBMEQ7QUFDeEQsUUFBSSxLQUFLcVUsUUFBTCxDQUFjclUsQ0FBZCxFQUFpQjZyQixZQUFqQixDQUFKLEVBQW9DO0FBQ2xDLFdBQUt4WCxRQUFMLENBQWNyVSxDQUFkLEVBQWlCZ3VCLGtCQUFqQixDQUFvQ1IsR0FBcEM7QUFDRDtBQUNGOztBQUVELE1BQUk3YyxVQUFVdk4sT0FBT2lPLElBQVAsQ0FBWSxLQUFLNmEsY0FBakIsQ0FBZDtBQUNBLE9BQUssSUFBSWxzQixJQUFJLENBQVIsRUFBVzJNLE1BQU1nRSxRQUFRMVEsTUFBOUIsRUFBc0NELElBQUkyTSxHQUExQyxFQUErQzNNLEdBQS9DLEVBQW9EO0FBQ2xEd3RCLFFBQUl4aEIsS0FBS3JJLGFBQUwsQ0FBbUJnTixRQUFRM1EsQ0FBUixDQUFuQixDQUFKLEVBQW9DLEtBQUtrc0IsY0FBTCxDQUFvQnZiLFFBQVEzUSxDQUFSLENBQXBCLENBQXBDO0FBQ0Q7QUFDRixDQVpIOztBQWNBOzs7O0FBSUE4ckIsV0FBV3RsQixTQUFYLENBQXFCMUcsUUFBckIsR0FBZ0MsU0FBU291QixtQkFBVCxHQUErQjtBQUM3RCxNQUFJdm9CLE1BQU0sRUFBVjtBQUNBLE9BQUsybkIsSUFBTCxDQUFVLFVBQVVKLEtBQVYsRUFBaUI7QUFDekJ2bkIsV0FBT3VuQixLQUFQO0FBQ0QsR0FGRDtBQUdBLFNBQU92bkIsR0FBUDtBQUNELENBTkQ7O0FBUUE7Ozs7QUFJQW1tQixXQUFXdGxCLFNBQVgsQ0FBcUIybkIscUJBQXJCLEdBQTZDLFNBQVNDLGdDQUFULENBQTBDMXRCLEtBQTFDLEVBQWlEO0FBQzVGLE1BQUk0UCxZQUFZO0FBQ2RpSSxVQUFNLEVBRFE7QUFFZGhJLFVBQU0sQ0FGUTtBQUdkQyxZQUFRLENBSE0sRUFBaEI7O0FBS0EsTUFBSWpJLE1BQU0sSUFBSTZHLGtCQUFKLENBQXVCMU8sS0FBdkIsQ0FBVjtBQUNBLE1BQUkydEIsc0JBQXNCLEtBQTFCO0FBQ0EsTUFBSUMscUJBQXFCLElBQXpCO0FBQ0EsTUFBSUMsbUJBQW1CLElBQXZCO0FBQ0EsTUFBSUMscUJBQXFCLElBQXpCO0FBQ0EsTUFBSUMsbUJBQW1CLElBQXZCO0FBQ0EsT0FBS25CLElBQUwsQ0FBVSxVQUFVSixLQUFWLEVBQWlCemMsUUFBakIsRUFBMkI7QUFDbkNILGNBQVVpSSxJQUFWLElBQWtCMlUsS0FBbEI7QUFDQSxRQUFJemMsU0FBU3ZNLE1BQVQsS0FBb0IsSUFBcEI7QUFDR3VNLGFBQVNGLElBQVQsS0FBa0IsSUFEckI7QUFFR0UsYUFBU0QsTUFBVCxLQUFvQixJQUYzQixFQUVpQztBQUMvQixVQUFHOGQsdUJBQXVCN2QsU0FBU3ZNLE1BQWhDO0FBQ0dxcUIsMkJBQXFCOWQsU0FBU0YsSUFEakM7QUFFR2llLDZCQUF1Qi9kLFNBQVNELE1BRm5DO0FBR0dpZSwyQkFBcUJoZSxTQUFTbE0sSUFIcEMsRUFHMEM7QUFDeENnRSxZQUFJbUksVUFBSixDQUFlO0FBQ2J4TSxrQkFBUXVNLFNBQVN2TSxNQURKO0FBRWJ1TSxvQkFBVTtBQUNSRixrQkFBTUUsU0FBU0YsSUFEUDtBQUVSQyxvQkFBUUMsU0FBU0QsTUFGVCxFQUZHOztBQU1iRixxQkFBVztBQUNUQyxrQkFBTUQsVUFBVUMsSUFEUDtBQUVUQyxvQkFBUUYsVUFBVUUsTUFGVCxFQU5FOztBQVViak0sZ0JBQU1rTSxTQUFTbE0sSUFWRixFQUFmOztBQVlEO0FBQ0QrcEIsMkJBQXFCN2QsU0FBU3ZNLE1BQTlCO0FBQ0FxcUIseUJBQW1COWQsU0FBU0YsSUFBNUI7QUFDQWllLDJCQUFxQi9kLFNBQVNELE1BQTlCO0FBQ0FpZSx5QkFBbUJoZSxTQUFTbE0sSUFBNUI7QUFDQThwQiw0QkFBc0IsSUFBdEI7QUFDRCxLQXpCRCxNQXlCTyxJQUFJQSxtQkFBSixFQUF5QjtBQUM5QjlsQixVQUFJbUksVUFBSixDQUFlO0FBQ2JKLG1CQUFXO0FBQ1RDLGdCQUFNRCxVQUFVQyxJQURQO0FBRVRDLGtCQUFRRixVQUFVRSxNQUZULEVBREUsRUFBZjs7O0FBTUE4ZCwyQkFBcUIsSUFBckI7QUFDQUQsNEJBQXNCLEtBQXRCO0FBQ0Q7QUFDRCxTQUFLLElBQUlsaEIsTUFBTSxDQUFWLEVBQWFsTixTQUFTaXRCLE1BQU1qdEIsTUFBakMsRUFBeUNrTixNQUFNbE4sTUFBL0MsRUFBdURrTixLQUF2RCxFQUE4RDtBQUM1RCxVQUFJK2YsTUFBTXRwQixVQUFOLENBQWlCdUosR0FBakIsTUFBMEJ5ZSxZQUE5QixFQUE0QztBQUMxQ3RiLGtCQUFVQyxJQUFWO0FBQ0FELGtCQUFVRSxNQUFWLEdBQW1CLENBQW5CO0FBQ0E7QUFDQSxZQUFJckQsTUFBTSxDQUFOLEtBQVlsTixNQUFoQixFQUF3QjtBQUN0QnF1QiwrQkFBcUIsSUFBckI7QUFDQUQsZ0NBQXNCLEtBQXRCO0FBQ0QsU0FIRCxNQUdPLElBQUlBLG1CQUFKLEVBQXlCO0FBQzlCOWxCLGNBQUltSSxVQUFKLENBQWU7QUFDYnhNLG9CQUFRdU0sU0FBU3ZNLE1BREo7QUFFYnVNLHNCQUFVO0FBQ1JGLG9CQUFNRSxTQUFTRixJQURQO0FBRVJDLHNCQUFRQyxTQUFTRCxNQUZULEVBRkc7O0FBTWJGLHVCQUFXO0FBQ1RDLG9CQUFNRCxVQUFVQyxJQURQO0FBRVRDLHNCQUFRRixVQUFVRSxNQUZULEVBTkU7O0FBVWJqTSxrQkFBTWtNLFNBQVNsTSxJQVZGLEVBQWY7O0FBWUQ7QUFDRixPQXJCRCxNQXFCTztBQUNMK0wsa0JBQVVFLE1BQVY7QUFDRDtBQUNGO0FBQ0YsR0EvREQ7QUFnRUEsT0FBS3dkLGtCQUFMLENBQXdCLFVBQVVwZCxVQUFWLEVBQXNCOGQsYUFBdEIsRUFBcUM7QUFDM0RubUIsUUFBSXdJLGdCQUFKLENBQXFCSCxVQUFyQixFQUFpQzhkLGFBQWpDO0FBQ0QsR0FGRDs7QUFJQSxTQUFPLEVBQUVuVyxNQUFNakksVUFBVWlJLElBQWxCLEVBQXdCaFEsS0FBS0EsR0FBN0IsRUFBUDtBQUNELENBakZEOztBQW1GQTNJLFFBQVFrc0IsVUFBUixHQUFxQkEsVUFBckIsQzs7Ozs7OztDQ3RaQTs7Ozs7QUFLQWxzQixRQUFRd1Asa0JBQVIsR0FBNkIsbUJBQUFuRCxDQUFRLEVBQVIsRUFBc0NtRCxrQkFBbkU7QUFDQXhQLFFBQVErbUIsaUJBQVIsR0FBNEIsbUJBQUExYSxDQUFRLEVBQVIsRUFBcUMwYSxpQkFBakU7QUFDQS9tQixRQUFRa3NCLFVBQVIsR0FBcUIsbUJBQUE3ZixDQUFRLEVBQVIsRUFBNkI2ZixVQUFsRCxDOzs7Ozs7O3lXQ1BDLFdBQVM3bUIsSUFBVCxFQUFlQyxPQUFmLEVBQXdCO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQSxRQUFJLElBQUosRUFBZ0Q7QUFDNUNDLFFBQUEsaUNBQTBCLENBQUMsc0JBQUQsQ0FBMUIsb0NBQTBDRCxPQUExQztBQUFBO0FBQUE7QUFBQTtBQUNILEtBRkQsTUFFTyxJQUFJLFFBQU90RixPQUFQLHlDQUFPQSxPQUFQLE9BQW1CLFFBQXZCLEVBQWlDO0FBQ3BDRCxlQUFPQyxPQUFQLEdBQWlCc0YsUUFBUStHLFFBQVEsWUFBUixDQUFSLENBQWpCO0FBQ0gsS0FGTSxNQUVBO0FBQ0hoSCxhQUFLMHBCLGNBQUwsR0FBc0J6cEIsUUFBUUQsS0FBS0csVUFBYixDQUF0QjtBQUNIO0FBQ0osQ0FaQSxhQVlPLFVBQVNBLFVBQVQsRUFBcUI7QUFDekIsV0FBTztBQUNId3BCLG1CQUFXLFNBQVNDLHlCQUFULENBQW1DeFYsSUFBbkMsRUFBeUM7QUFDaEQsZ0JBQUkwQixRQUFRLEVBQVo7QUFDQSxnQkFBSStULGVBQWUsRUFBbkI7O0FBRUEsZ0JBQUksUUFBT3pWLElBQVAseUNBQU9BLElBQVAsT0FBZ0IsUUFBaEIsSUFBNEIsT0FBT0EsS0FBS3lWLFlBQVosS0FBNkIsUUFBN0QsRUFBdUU7QUFDbkVBLCtCQUFlelYsS0FBS3lWLFlBQXBCO0FBQ0g7O0FBRUQsZ0JBQUlDLE9BQU9sdUIsVUFBVW11QixNQUFyQjtBQUNBLG1CQUFPRCxRQUFRaFUsTUFBTTlhLE1BQU4sR0FBZTZ1QixZQUE5QixFQUE0QztBQUN4QztBQUNBLG9CQUFJcG9CLE9BQU8sSUFBSTFELEtBQUosQ0FBVStyQixLQUFLLFdBQUwsRUFBa0I5dUIsTUFBNUIsQ0FBWDtBQUNBLHFCQUFLLElBQUlELElBQUksQ0FBYixFQUFnQkEsSUFBSTBHLEtBQUt6RyxNQUF6QixFQUFpQyxFQUFFRCxDQUFuQyxFQUFzQztBQUNsQzBHLHlCQUFLMUcsQ0FBTCxJQUFVK3VCLEtBQUssV0FBTCxFQUFrQi91QixDQUFsQixDQUFWO0FBQ0g7QUFDRCxvQkFBSSxnQ0FBZ0NrZixJQUFoQyxDQUFxQzZQLEtBQUtqdkIsUUFBTCxFQUFyQyxDQUFKLEVBQTJEO0FBQ3ZEaWIsMEJBQU01YSxJQUFOLENBQVcsSUFBSWlGLFVBQUosQ0FBZSxFQUFDOEIsY0FBY3VaLE9BQU93TyxFQUFQLElBQWExb0IsU0FBNUIsRUFBdUNHLE1BQU1BLElBQTdDLEVBQWYsQ0FBWDtBQUNILGlCQUZELE1BRU87QUFDSHFVLDBCQUFNNWEsSUFBTixDQUFXLElBQUlpRixVQUFKLENBQWUsRUFBQ3NCLE1BQU1BLElBQVAsRUFBZixDQUFYO0FBQ0g7O0FBRUQsb0JBQUk7QUFDQXFvQiwyQkFBT0EsS0FBS0csTUFBWjtBQUNILGlCQUZELENBRUUsT0FBT3JZLENBQVAsRUFBVTtBQUNSO0FBQ0g7QUFDSjtBQUNELG1CQUFPa0UsS0FBUDtBQUNILFNBN0JFLEVBQVA7O0FBK0JILENBNUNBLENBQUQsQzs7Ozs7Ozt5V0NBQyxXQUFTOVYsSUFBVCxFQUFlQyxPQUFmLEVBQXdCO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQSxRQUFJLElBQUosRUFBZ0Q7QUFDNUNDLFFBQUEsaUNBQXlCLENBQUMsdUJBQUQsRUFBZSxzQkFBZixDQUF6QixvQ0FBdURELE9BQXZEO0FBQUE7QUFBQTtBQUFBO0FBQ0gsS0FGRCxNQUVPLElBQUksUUFBT3RGLE9BQVAseUNBQU9BLE9BQVAsT0FBbUIsUUFBdkIsRUFBaUM7QUFDcENELGVBQU9DLE9BQVAsR0FBaUJzRixRQUFRK0csUUFBUSxvQ0FBUixDQUFSLEVBQXVEQSxRQUFRLFlBQVIsQ0FBdkQsQ0FBakI7QUFDSCxLQUZNLE1BRUE7QUFDSGhILGFBQUtrcUIsYUFBTCxHQUFxQmpxQixRQUFRRCxLQUFLbXFCLFNBQUwsSUFBa0JucUIsS0FBSzRoQixTQUEvQixFQUEwQzVoQixLQUFLRyxVQUEvQyxDQUFyQjtBQUNIO0FBQ0osQ0FaQSxhQVlPLFVBQVNncUIsU0FBVCxFQUFvQmhxQixVQUFwQixFQUFnQztBQUNwQzs7QUFFQTs7Ozs7O0FBTUEsYUFBU2lxQixJQUFULENBQWMxdEIsR0FBZCxFQUFtQjtBQUNmLGVBQU8sSUFBSTJ0QixPQUFKLENBQVksVUFBU0MsT0FBVCxFQUFrQkMsTUFBbEIsRUFBMEI7QUFDekMsZ0JBQUlDLE1BQU0sSUFBSTdNLGNBQUosRUFBVjtBQUNBNk0sZ0JBQUk1TSxJQUFKLENBQVMsS0FBVCxFQUFnQmxoQixHQUFoQjtBQUNBOHRCLGdCQUFJQyxPQUFKLEdBQWNGLE1BQWQ7QUFDQUMsZ0JBQUkzTSxrQkFBSixHQUF5QixTQUFTQSxrQkFBVCxHQUE4QjtBQUNuRCxvQkFBSTJNLElBQUk1TixVQUFKLEtBQW1CLENBQXZCLEVBQTBCO0FBQ3RCLHdCQUFLNE4sSUFBSTFNLE1BQUosSUFBYyxHQUFkLElBQXFCME0sSUFBSTFNLE1BQUosR0FBYSxHQUFuQztBQUNDcGhCLHdCQUFJc0IsTUFBSixDQUFXLENBQVgsRUFBYyxDQUFkLE1BQXFCLFNBQXJCLElBQWtDd3NCLElBQUl6TSxZQUQzQyxFQUMwRDtBQUN0RHVNLGdDQUFRRSxJQUFJek0sWUFBWjtBQUNILHFCQUhELE1BR087QUFDSHdNLCtCQUFPLElBQUkxdUIsS0FBSixDQUFVLGtCQUFrQjJ1QixJQUFJMU0sTUFBdEIsR0FBK0IsY0FBL0IsR0FBZ0RwaEIsR0FBMUQsQ0FBUDtBQUNIO0FBQ0o7QUFDSixhQVREO0FBVUE4dEIsZ0JBQUl2TSxJQUFKO0FBQ0gsU0FmTSxDQUFQOztBQWlCSDs7QUFFRDs7Ozs7OztBQU9BLGFBQVN5TSxLQUFULENBQWVDLE1BQWYsRUFBdUI7QUFDbkIsWUFBSSxPQUFPaGIsTUFBUCxLQUFrQixXQUFsQixJQUFpQ0EsT0FBT2liLElBQTVDLEVBQWtEO0FBQzlDLG1CQUFPamIsT0FBT2liLElBQVAsQ0FBWUQsTUFBWixDQUFQO0FBQ0gsU0FGRCxNQUVPO0FBQ0gsa0JBQU0sSUFBSTl1QixLQUFKLENBQVUsZ0VBQVYsQ0FBTjtBQUNIO0FBQ0o7O0FBRUQsYUFBU2d2QixVQUFULENBQW9CQyxNQUFwQixFQUE0QjtBQUN4QixZQUFJLE9BQU85ZCxJQUFQLEtBQWdCLFdBQWhCLElBQStCQSxLQUFLdUMsS0FBeEMsRUFBK0M7QUFDM0MsbUJBQU92QyxLQUFLdUMsS0FBTCxDQUFXdWIsTUFBWCxDQUFQO0FBQ0gsU0FGRCxNQUVPO0FBQ0gsa0JBQU0sSUFBSWp2QixLQUFKLENBQVUsK0RBQVYsQ0FBTjtBQUNIO0FBQ0o7O0FBRUQsYUFBU2t2QixpQkFBVCxDQUEyQjlyQixNQUEzQixFQUFtQ29ELFVBQW5DLENBQTZDLGtCQUE3QyxFQUFpRTtBQUM3RCxZQUFJMm9CLFdBQVc7QUFDWDtBQUNBLGtFQUZXO0FBR1g7QUFDQSw4Q0FKVztBQUtYO0FBQ0EsK0VBTlc7QUFPWDtBQUNBLDBGQVJXO0FBU1g7QUFDQSxvRUFWVyxDQUFmOztBQVlBLFlBQUk3VCxRQUFRbFksT0FBT2xDLEtBQVAsQ0FBYSxJQUFiLENBQVo7O0FBRUE7QUFDQSxZQUFJdVcsT0FBTyxFQUFYO0FBQ0EsWUFBSTJYLFdBQVd4TCxLQUFLeUwsR0FBTCxDQUFTN29CLFVBQVQsRUFBcUIsRUFBckIsQ0FBZjtBQUNBLGFBQUssSUFBSXRILElBQUksQ0FBYixFQUFnQkEsSUFBSWt3QixRQUFwQixFQUE4QixFQUFFbHdCLENBQWhDLEVBQW1DO0FBQy9CO0FBQ0EsZ0JBQUl1USxPQUFPNkwsTUFBTTlVLGFBQWF0SCxDQUFiLEdBQWlCLENBQXZCLENBQVg7QUFDQSxnQkFBSW93QixhQUFhN2YsS0FBSzNOLE9BQUwsQ0FBYSxJQUFiLENBQWpCO0FBQ0EsZ0JBQUl3dEIsY0FBYyxDQUFsQixFQUFxQjtBQUNqQjdmLHVCQUFPQSxLQUFLdE4sTUFBTCxDQUFZLENBQVosRUFBZW10QixVQUFmLENBQVA7QUFDSDs7QUFFRCxnQkFBSTdmLElBQUosRUFBVTtBQUNOZ0ksdUJBQU9oSSxPQUFPZ0ksSUFBZDtBQUNBLG9CQUFJNUwsTUFBTXNqQixTQUFTaHdCLE1BQW5CO0FBQ0EscUJBQUssSUFBSTRDLFFBQVEsQ0FBakIsRUFBb0JBLFFBQVE4SixHQUE1QixFQUFpQzlKLE9BQWpDLEVBQTBDO0FBQ3RDLHdCQUFJd3RCLElBQUlKLFNBQVNwdEIsS0FBVCxFQUFnQnlZLElBQWhCLENBQXFCL0MsSUFBckIsQ0FBUjtBQUNBLHdCQUFJOFgsS0FBS0EsRUFBRSxDQUFGLENBQVQsRUFBZTtBQUNYLCtCQUFPQSxFQUFFLENBQUYsQ0FBUDtBQUNIO0FBQ0o7QUFDSjtBQUNKO0FBQ0QsZUFBTzlwQixTQUFQO0FBQ0g7O0FBRUQsYUFBUytwQiwyQkFBVCxHQUF1QztBQUNuQyxZQUFJLE9BQU9sdEIsT0FBT3lhLGNBQWQsS0FBaUMsVUFBakMsSUFBK0MsT0FBT3phLE9BQU9DLE1BQWQsS0FBeUIsVUFBNUUsRUFBd0Y7QUFDcEYsa0JBQU0sSUFBSXZDLEtBQUosQ0FBVSxpREFBVixDQUFOO0FBQ0g7QUFDSjs7QUFFRCxhQUFTeXZCLHdCQUFULENBQWtDQyxVQUFsQyxFQUE4QztBQUMxQyxZQUFJLFFBQU9BLFVBQVAseUNBQU9BLFVBQVAsT0FBc0IsUUFBMUIsRUFBb0M7QUFDaEMsa0JBQU0sSUFBSTFwQixTQUFKLENBQWMsbUNBQWQsQ0FBTjtBQUNILFNBRkQsTUFFTyxJQUFJLE9BQU8wcEIsV0FBV3BwQixRQUFsQixLQUErQixRQUFuQyxFQUE2QztBQUNoRCxrQkFBTSxJQUFJTixTQUFKLENBQWMsaUNBQWQsQ0FBTjtBQUNILFNBRk0sTUFFQSxJQUFJLE9BQU8wcEIsV0FBV2xwQixVQUFsQixLQUFpQyxRQUFqQztBQUNQa3BCLG1CQUFXbHBCLFVBQVgsR0FBd0IsQ0FBeEIsS0FBOEIsQ0FEdkI7QUFFUGtwQixtQkFBV2xwQixVQUFYLEdBQXdCLENBRnJCLEVBRXdCO0FBQzNCLGtCQUFNLElBQUlSLFNBQUosQ0FBYyw4Q0FBZCxDQUFOO0FBQ0gsU0FKTSxNQUlBLElBQUksT0FBTzBwQixXQUFXaHBCLFlBQWxCLEtBQW1DLFFBQW5DO0FBQ1BncEIsbUJBQVdocEIsWUFBWCxHQUEwQixDQUExQixLQUFnQyxDQUR6QjtBQUVQZ3BCLG1CQUFXaHBCLFlBQVgsR0FBMEIsQ0FGdkIsRUFFMEI7QUFDN0Isa0JBQU0sSUFBSVYsU0FBSixDQUFjLG9EQUFkLENBQU47QUFDSDtBQUNELGVBQU8sSUFBUDtBQUNIOztBQUVELGFBQVMycEIscUJBQVQsQ0FBK0J2c0IsTUFBL0IsRUFBdUM7QUFDbkMsWUFBSW1zQixJQUFJLDZDQUE2Qy9VLElBQTdDLENBQWtEcFgsTUFBbEQsQ0FBUjtBQUNBLFlBQUltc0IsS0FBS0EsRUFBRSxDQUFGLENBQVQsRUFBZTtBQUNYLG1CQUFPQSxFQUFFLENBQUYsQ0FBUDtBQUNILFNBRkQsTUFFTztBQUNILGtCQUFNLElBQUl2dkIsS0FBSixDQUFVLDRCQUFWLENBQU47QUFDSDtBQUNKOztBQUVELGFBQVM0dkIsdUNBQVQsQ0FBaURGLFVBQWpELEVBQTZERyxpQkFBN0QsRUFBZ0ZDLFdBQWhGLEVBQTZGO0FBQ3pGLGVBQU8sSUFBSXRCLE9BQUosQ0FBWSxVQUFTQyxPQUFULEVBQWtCQyxNQUFsQixFQUEwQjtBQUN6QyxnQkFBSXFCLE1BQU1GLGtCQUFrQi9lLG1CQUFsQixDQUFzQztBQUM1Q3JCLHNCQUFNaWdCLFdBQVdscEIsVUFEMkI7QUFFNUNrSix3QkFBUWdnQixXQUFXaHBCLFlBRnlCLEVBQXRDLENBQVY7OztBQUtBLGdCQUFJcXBCLElBQUkzc0IsTUFBUixFQUFnQjtBQUNaO0FBQ0Esb0JBQUk0c0IsZUFBZUgsa0JBQWtCN2YsZ0JBQWxCLENBQW1DK2YsSUFBSTNzQixNQUF2QyxDQUFuQjtBQUNBLG9CQUFJNHNCLFlBQUosRUFBa0I7QUFDZEYsZ0NBQVlDLElBQUkzc0IsTUFBaEIsSUFBMEI0c0IsWUFBMUI7QUFDSDs7QUFFRHZCO0FBQ0k7QUFDQSxvQkFBSW5xQixVQUFKLENBQWU7QUFDWDhCLGtDQUFjMnBCLElBQUl0c0IsSUFBSixJQUFZaXNCLFdBQVd0cEIsWUFEMUI7QUFFWFIsMEJBQU04cEIsV0FBVzlwQixJQUZOO0FBR1hVLDhCQUFVeXBCLElBQUkzc0IsTUFISDtBQUlYb0QsZ0NBQVl1cEIsSUFBSXRnQixJQUpMO0FBS1gvSSxrQ0FBY3FwQixJQUFJcmdCLE1BTFAsRUFBZixDQUZKOztBQVNILGFBaEJELE1BZ0JPO0FBQ0hnZix1QkFBTyxJQUFJMXVCLEtBQUosQ0FBVSxtRUFBVixDQUFQO0FBQ0g7QUFDSixTQXpCTSxDQUFQO0FBMEJIOztBQUVEOzs7Ozs7Ozs7QUFTQSxXQUFPLFNBQVNxdUIsYUFBVCxDQUF1QjlWLElBQXZCLEVBQTZCO0FBQ2hDLFlBQUksRUFBRSxnQkFBZ0I4VixhQUFsQixDQUFKLEVBQXNDO0FBQ2xDLG1CQUFPLElBQUlBLGFBQUosQ0FBa0I5VixJQUFsQixDQUFQO0FBQ0g7QUFDREEsZUFBT0EsUUFBUSxFQUFmOztBQUVBLGFBQUt1WCxXQUFMLEdBQW1CdlgsS0FBS3VYLFdBQUwsSUFBb0IsRUFBdkM7QUFDQSxhQUFLRyxzQkFBTCxHQUE4QjFYLEtBQUswWCxzQkFBTCxJQUErQixFQUE3RDs7QUFFQSxhQUFLQyxJQUFMLEdBQVkzWCxLQUFLMlgsSUFBTCxJQUFhM0IsSUFBekI7O0FBRUEsYUFBS00sS0FBTCxHQUFhdFcsS0FBS3dXLElBQUwsSUFBYUYsS0FBMUI7O0FBRUEsYUFBS3NCLElBQUwsR0FBWSxTQUFTQSxJQUFULENBQWNDLFFBQWQsRUFBd0I7QUFDaEMsbUJBQU8sSUFBSTVCLE9BQUosQ0FBWSxVQUFTQyxPQUFULEVBQWtCQyxNQUFsQixFQUEwQjtBQUN6QyxvQkFBSTJCLFlBQVlELFNBQVNqdUIsTUFBVCxDQUFnQixDQUFoQixFQUFtQixDQUFuQixNQUEwQixPQUExQztBQUNBLG9CQUFJLEtBQUsydEIsV0FBTCxDQUFpQk0sUUFBakIsQ0FBSixFQUFnQztBQUM1QjNCLDRCQUFRLEtBQUtxQixXQUFMLENBQWlCTSxRQUFqQixDQUFSO0FBQ0gsaUJBRkQsTUFFTyxJQUFJN1gsS0FBSytYLE9BQUwsSUFBZ0IsQ0FBQ0QsU0FBckIsRUFBZ0M7QUFDbkMzQiwyQkFBTyxJQUFJMXVCLEtBQUosQ0FBVSw4Q0FBVixDQUFQO0FBQ0gsaUJBRk0sTUFFQTtBQUNILHdCQUFJcXdCLFNBQUosRUFBZTtBQUNYO0FBQ0E7QUFDQSw0QkFBSUU7QUFDQSxzRUFESjtBQUVBLDRCQUFJbHdCLFFBQVErdkIsU0FBUy92QixLQUFULENBQWVrd0IsdUJBQWYsQ0FBWjtBQUNBLDRCQUFJbHdCLEtBQUosRUFBVztBQUNQLGdDQUFJbXdCLGlCQUFpQm53QixNQUFNLENBQU4sRUFBU2xCLE1BQTlCO0FBQ0EsZ0NBQUlzeEIsZ0JBQWdCTCxTQUFTanVCLE1BQVQsQ0FBZ0JxdUIsY0FBaEIsQ0FBcEI7QUFDQSxnQ0FBSXB0QixTQUFTLEtBQUt5ckIsS0FBTCxDQUFXNEIsYUFBWCxDQUFiO0FBQ0EsaUNBQUtYLFdBQUwsQ0FBaUJNLFFBQWpCLElBQTZCaHRCLE1BQTdCO0FBQ0FxckIsb0NBQVFyckIsTUFBUjtBQUNILHlCQU5ELE1BTU87QUFDSHNyQixtQ0FBTyxJQUFJMXVCLEtBQUosQ0FBVSx1REFBVixDQUFQO0FBQ0g7QUFDSixxQkFmRCxNQWVPO0FBQ0gsNEJBQUkwd0IsYUFBYSxLQUFLUixJQUFMLENBQVVFLFFBQVYsRUFBb0IsRUFBQ08sUUFBUSxLQUFULEVBQXBCLENBQWpCO0FBQ0E7QUFDQSw2QkFBS2IsV0FBTCxDQUFpQk0sUUFBakIsSUFBNkJNLFVBQTdCO0FBQ0FBLG1DQUFXRSxJQUFYLENBQWdCbkMsT0FBaEIsRUFBeUJDLE1BQXpCO0FBQ0g7QUFDSjtBQUNKLGFBN0JrQixDQTZCakJtQyxJQTdCaUIsQ0E2QlosSUE3QlksQ0FBWixDQUFQO0FBOEJILFNBL0JEOztBQWlDQTs7Ozs7Ozs7QUFRQSxhQUFLQyxxQkFBTCxHQUE2QixTQUFTQSxxQkFBVCxDQUErQkMsZ0JBQS9CLEVBQWlEQyxpQkFBakQsRUFBb0U7QUFDN0YsbUJBQU8sSUFBSXhDLE9BQUosQ0FBWSxVQUFTQyxPQUFULEVBQWtCQyxNQUFsQixFQUEwQjtBQUN6QyxvQkFBSSxLQUFLdUIsc0JBQUwsQ0FBNEJjLGdCQUE1QixDQUFKLEVBQW1EO0FBQy9DdEMsNEJBQVEsS0FBS3dCLHNCQUFMLENBQTRCYyxnQkFBNUIsQ0FBUjtBQUNILGlCQUZELE1BRU87QUFDSCx3QkFBSUUsMkJBQTJCLElBQUl6QyxPQUFKLENBQVksVUFBU0MsT0FBVCxFQUFrQkMsTUFBbEIsRUFBMEI7QUFDakUsK0JBQU8sS0FBS3lCLElBQUwsQ0FBVVksZ0JBQVYsRUFBNEJILElBQTVCLENBQWlDLFVBQVNNLGVBQVQsRUFBMEI7QUFDOUQsZ0NBQUksT0FBT0EsZUFBUCxLQUEyQixRQUEvQixFQUF5QztBQUNyQ0Esa0RBQWtCbEMsV0FBV2tDLGdCQUFnQnZ2QixPQUFoQixDQUF3QixVQUF4QixFQUFvQyxFQUFwQyxDQUFYLENBQWxCO0FBQ0g7QUFDRCxnQ0FBSSxPQUFPdXZCLGdCQUFnQmhpQixVQUF2QixLQUFzQyxXQUExQyxFQUF1RDtBQUNuRGdpQixnREFBZ0JoaUIsVUFBaEIsR0FBNkI4aEIsaUJBQTdCO0FBQ0g7O0FBRUR2QyxvQ0FBUSxJQUFJSCxVQUFVekksaUJBQWQsQ0FBZ0NxTCxlQUFoQyxDQUFSO0FBQ0gseUJBVE0sRUFTSnhDLE1BVEksQ0FBUDtBQVVILHFCQVgwQyxDQVd6Q21DLElBWHlDLENBV3BDLElBWG9DLENBQVosQ0FBL0I7QUFZQSx5QkFBS1osc0JBQUwsQ0FBNEJjLGdCQUE1QixJQUFnREUsd0JBQWhEO0FBQ0F4Qyw0QkFBUXdDLHdCQUFSO0FBQ0g7QUFDSixhQW5Ca0IsQ0FtQmpCSixJQW5CaUIsQ0FtQlosSUFuQlksQ0FBWixDQUFQO0FBb0JILFNBckJEOztBQXVCQTs7Ozs7OztBQU9BLGFBQUtNLFFBQUwsR0FBZ0IsU0FBU0MsdUJBQVQsQ0FBaUMxQixVQUFqQyxFQUE2QztBQUN6RCxtQkFBTyxJQUFJbEIsT0FBSixDQUFZLFVBQVNDLE9BQVQsRUFBa0JDLE1BQWxCLEVBQTBCO0FBQ3pDLHFCQUFLMkMsaUJBQUwsQ0FBdUIzQixVQUF2QixFQUFtQ2tCLElBQW5DLENBQXdDLFVBQVNVLGdCQUFULEVBQTJCO0FBQy9ELDZCQUFTQyx1QkFBVCxHQUFtQztBQUMvQjlDLGdDQUFRNkMsZ0JBQVI7QUFDSDs7QUFFRCx5QkFBS0UsZ0JBQUwsQ0FBc0JGLGdCQUF0QjtBQUNLVix3QkFETCxDQUNVbkMsT0FEVixFQUNtQjhDLHVCQURuQjtBQUVLLDJCQUZMLEVBRWNBLHVCQUZkO0FBR0gsaUJBUnVDLENBUXRDVixJQVJzQyxDQVFqQyxJQVJpQyxDQUF4QyxFQVFjbkMsTUFSZDtBQVNILGFBVmtCLENBVWpCbUMsSUFWaUIsQ0FVWixJQVZZLENBQVosQ0FBUDtBQVdILFNBWkQ7O0FBY0E7Ozs7OztBQU1BLGFBQUtXLGdCQUFMLEdBQXdCLFNBQVNDLCtCQUFULENBQXlDL0IsVUFBekMsRUFBcUQ7QUFDekUsbUJBQU8sSUFBSWxCLE9BQUosQ0FBWSxVQUFTQyxPQUFULEVBQWtCQyxNQUFsQixFQUEwQjtBQUN6Q2UseUNBQXlCQyxVQUF6QjtBQUNBLHFCQUFLUyxJQUFMLENBQVVULFdBQVdwcEIsUUFBckIsRUFBK0JzcUIsSUFBL0IsQ0FBb0MsU0FBU2MsaUJBQVQsQ0FBMkJ0dUIsTUFBM0IsRUFBbUM7QUFDbkUsd0JBQUlvRCxhQUFha3BCLFdBQVdscEIsVUFBNUI7QUFDQSx3QkFBSUUsZUFBZWdwQixXQUFXaHBCLFlBQTlCO0FBQ0Esd0JBQUlpckIsc0JBQXNCekMsa0JBQWtCOXJCLE1BQWxCLEVBQTBCb0QsVUFBMUIsRUFBc0NFLFlBQXRDLENBQTFCO0FBQ0E7QUFDQSx3QkFBSWlyQixtQkFBSixFQUF5QjtBQUNyQmxELGdDQUFRLElBQUlucUIsVUFBSixDQUFlO0FBQ25COEIsMENBQWN1ckIsbUJBREs7QUFFbkIvckIsa0NBQU04cEIsV0FBVzlwQixJQUZFO0FBR25CVSxzQ0FBVW9wQixXQUFXcHBCLFFBSEY7QUFJbkJFLHdDQUFZQSxVQUpPO0FBS25CRSwwQ0FBY0EsWUFMSyxFQUFmLENBQVI7O0FBT0gscUJBUkQsTUFRTztBQUNIK25CLGdDQUFRaUIsVUFBUjtBQUNIO0FBQ0osaUJBaEJELEVBZ0JHaEIsTUFoQkgsRUFnQlcsT0FoQlgsRUFnQm9CQSxNQWhCcEI7QUFpQkgsYUFuQmtCLENBbUJqQm1DLElBbkJpQixDQW1CWixJQW5CWSxDQUFaLENBQVA7QUFvQkgsU0FyQkQ7O0FBdUJBOzs7Ozs7QUFNQSxhQUFLUSxpQkFBTCxHQUF5QixTQUFTTyxnQ0FBVCxDQUEwQ2xDLFVBQTFDLEVBQXNEO0FBQzNFLG1CQUFPLElBQUlsQixPQUFKLENBQVksVUFBU0MsT0FBVCxFQUFrQkMsTUFBbEIsRUFBMEI7QUFDekNjO0FBQ0FDLHlDQUF5QkMsVUFBekI7O0FBRUEsb0JBQUlJLGNBQWMsS0FBS0EsV0FBdkI7QUFDQSxvQkFBSXhwQixXQUFXb3BCLFdBQVdwcEIsUUFBMUI7QUFDQSxxQkFBSzZwQixJQUFMLENBQVU3cEIsUUFBVixFQUFvQnNxQixJQUFwQixDQUF5QixVQUFTeHRCLE1BQVQsRUFBaUI7QUFDdEMsd0JBQUkydEIsbUJBQW1CcEIsc0JBQXNCdnNCLE1BQXRCLENBQXZCO0FBQ0Esd0JBQUlpdEIsWUFBWVUsaUJBQWlCNXVCLE1BQWpCLENBQXdCLENBQXhCLEVBQTJCLENBQTNCLE1BQWtDLE9BQWxEO0FBQ0Esd0JBQUk2dUIsb0JBQW9CMXFCLFNBQVN2QixTQUFULENBQW1CLENBQW5CLEVBQXNCdUIsU0FBU3RFLFdBQVQsQ0FBcUIsR0FBckIsSUFBNEIsQ0FBbEQsQ0FBeEI7O0FBRUEsd0JBQUkrdUIsaUJBQWlCLENBQWpCLE1BQXdCLEdBQXhCLElBQStCLENBQUNWLFNBQWhDLElBQTZDLENBQUUscUJBQUQsQ0FBd0JqUyxJQUF4QixDQUE2QjJTLGdCQUE3QixDQUFsRCxFQUFrRztBQUM5RkEsMkNBQW1CQyxvQkFBb0JELGdCQUF2QztBQUNIOztBQUVELDJCQUFPLEtBQUtELHFCQUFMLENBQTJCQyxnQkFBM0IsRUFBNkNDLGlCQUE3QyxFQUFnRUosSUFBaEUsQ0FBcUUsVUFBU2YsaUJBQVQsRUFBNEI7QUFDcEcsK0JBQU9ELHdDQUF3Q0YsVUFBeEMsRUFBb0RHLGlCQUFwRCxFQUF1RUMsV0FBdkU7QUFDRmMsNEJBREUsQ0FDR25DLE9BREgsRUFDWSxPQURaLEVBQ3FCLFlBQVc7QUFDbkNBLG9DQUFRaUIsVUFBUjtBQUNILHlCQUhNLENBQVA7QUFJSCxxQkFMTSxDQUFQO0FBTUgsaUJBZndCLENBZXZCbUIsSUFmdUIsQ0FlbEIsSUFma0IsQ0FBekIsRUFlY25DLE1BZmQsRUFlc0IsT0FmdEIsRUFlK0JBLE1BZi9CO0FBZ0JILGFBdEJrQixDQXNCakJtQyxJQXRCaUIsQ0FzQlosSUF0QlksQ0FBWixDQUFQO0FBdUJILFNBeEJEO0FBeUJILEtBOUpEO0FBK0pILENBN1VBLENBQUQsQzs7Ozs7Ozt5V0NBQyxXQUFTMXNCLElBQVQsRUFBZUMsT0FBZixFQUF3QjtBQUNyQjtBQUNBOztBQUVBO0FBQ0EsUUFBSSxJQUFKLEVBQWdEO0FBQzVDQyxRQUFBLGlDQUFxQixDQUFDLHVCQUFELEVBQXVCLHVCQUF2QixFQUEwQyx1QkFBMUMsQ0FBckIsb0NBQWtGRCxPQUFsRjtBQUFBO0FBQUE7QUFBQTtBQUNILEtBRkQsTUFFTyxJQUFJLFFBQU90RixPQUFQLHlDQUFPQSxPQUFQLE9BQW1CLFFBQXZCLEVBQWlDO0FBQ3BDRCxlQUFPQyxPQUFQLEdBQWlCc0YsUUFBUStHLFFBQVEsb0JBQVIsQ0FBUixFQUF1Q0EsUUFBUSxpQkFBUixDQUF2QyxFQUFtRUEsUUFBUSxnQkFBUixDQUFuRSxDQUFqQjtBQUNILEtBRk0sTUFFQTtBQUNIaEgsYUFBSzB0QixVQUFMLEdBQWtCenRCLFFBQVFELEtBQUtzVixnQkFBYixFQUErQnRWLEtBQUswcEIsY0FBcEMsRUFBb0QxcEIsS0FBS2txQixhQUF6RCxDQUFsQjtBQUNIO0FBQ0osQ0FaQSxhQVlPLFNBQVN3RCxVQUFULENBQW9CcFksZ0JBQXBCLEVBQXNDb1UsY0FBdEMsRUFBc0RRLGFBQXRELEVBQXFFO0FBQ3pFLFFBQUl5RCxXQUFXO0FBQ1hocUIsZ0JBQVEsZ0JBQVM0bkIsVUFBVCxFQUFxQjtBQUN6QjtBQUNBLG1CQUFPLENBQUNBLFdBQVd0cEIsWUFBWCxJQUEyQixFQUE1QixFQUFnQ3RFLE9BQWhDLENBQXdDLGNBQXhDLE1BQTRELENBQUMsQ0FBN0Q7QUFDSCxhQUFDNHRCLFdBQVd0cEIsWUFBWCxJQUEyQixFQUE1QixFQUFnQ3RFLE9BQWhDLENBQXdDLG9CQUF4QyxNQUFrRSxDQUFDLENBRGhFO0FBRUgsYUFBQzR0QixXQUFXdHBCLFlBQVgsSUFBMkIsRUFBNUIsRUFBZ0N0RSxPQUFoQyxDQUF3QyxpQkFBeEMsTUFBK0QsQ0FBQyxDQUY3RDtBQUdILGFBQUM0dEIsV0FBV3RwQixZQUFYLElBQTJCLEVBQTVCLEVBQWdDdEUsT0FBaEMsQ0FBd0Msa0JBQXhDLE1BQWdFLENBQUMsQ0FIckU7QUFJSCxTQVBVO0FBUVhndUIscUJBQWEsRUFSRixFQUFmOzs7QUFXQSxRQUFJaUMsaUJBQWlCLFNBQVNDLHlCQUFULEdBQXFDO0FBQ3RELFlBQUk7QUFDQTtBQUNBLGtCQUFNLElBQUloeUIsS0FBSixFQUFOO0FBQ0gsU0FIRCxDQUdFLE9BQU9peUIsR0FBUCxFQUFZO0FBQ1YsbUJBQU9BLEdBQVA7QUFDSDtBQUNKLEtBUEQ7O0FBU0E7Ozs7Ozs7OztBQVNBLGFBQVNDLE1BQVQsQ0FBZ0JDLEtBQWhCLEVBQXVCQyxNQUF2QixFQUErQjtBQUMzQixZQUFJcGMsU0FBUyxFQUFiOztBQUVBLFNBQUNtYyxLQUFELEVBQVFDLE1BQVIsRUFBZ0JycEIsT0FBaEIsQ0FBd0IsVUFBUzFHLEdBQVQsRUFBYztBQUNsQyxpQkFBSyxJQUFJZ3dCLElBQVQsSUFBaUJod0IsR0FBakIsRUFBc0I7QUFDbEIsb0JBQUlBLElBQUltRCxjQUFKLENBQW1CNnNCLElBQW5CLENBQUosRUFBOEI7QUFDMUJyYywyQkFBT3FjLElBQVAsSUFBZWh3QixJQUFJZ3dCLElBQUosQ0FBZjtBQUNIO0FBQ0o7QUFDRCxtQkFBT3JjLE1BQVA7QUFDSCxTQVBEOztBQVNBLGVBQU9BLE1BQVA7QUFDSDs7QUFFRCxhQUFTc2MsMEJBQVQsQ0FBb0NMLEdBQXBDLEVBQXlDO0FBQ3JDLGVBQU9BLElBQUloWSxLQUFKLElBQWFnWSxJQUFJLGlCQUFKLENBQXBCO0FBQ0g7O0FBRUQsYUFBU00sU0FBVCxDQUFtQkMsV0FBbkIsRUFBZ0MxcUIsTUFBaEMsRUFBd0M7QUFDcEMsWUFBSSxPQUFPQSxNQUFQLEtBQWtCLFVBQXRCLEVBQWtDO0FBQzlCLG1CQUFPMHFCLFlBQVkxcUIsTUFBWixDQUFtQkEsTUFBbkIsQ0FBUDtBQUNIO0FBQ0QsZUFBTzBxQixXQUFQO0FBQ0g7O0FBRUQsV0FBTztBQUNIOzs7Ozs7QUFNQXBNLGFBQUssU0FBU3FNLGVBQVQsQ0FBeUJsYSxJQUF6QixFQUErQjtBQUNoQyxnQkFBSTBaLE1BQU1GLGdCQUFWO0FBQ0EsbUJBQU9PLDJCQUEyQkwsR0FBM0IsSUFBa0MsS0FBS1MsU0FBTCxDQUFlVCxHQUFmLEVBQW9CMVosSUFBcEIsQ0FBbEMsR0FBOEQsS0FBS29hLG9CQUFMLENBQTBCcGEsSUFBMUIsQ0FBckU7QUFDSCxTQVZFOztBQVlIOzs7Ozs7O0FBT0FxYSxpQkFBUyxTQUFTQyxtQkFBVCxDQUE2QnRhLElBQTdCLEVBQW1DO0FBQ3hDQSxtQkFBTzJaLE9BQU9KLFFBQVAsRUFBaUJ2WixJQUFqQixDQUFQO0FBQ0EsZ0JBQUkwWixNQUFNRixnQkFBVjtBQUNBLGdCQUFJOVgsUUFBUXFZLDJCQUEyQkwsR0FBM0IsSUFBa0N4WSxpQkFBaUIvRixLQUFqQixDQUF1QnVlLEdBQXZCLENBQWxDLEdBQWdFcEUsZUFBZUMsU0FBZixDQUF5QnZWLElBQXpCLENBQTVFO0FBQ0EsbUJBQU9nYSxVQUFVdFksS0FBVixFQUFpQjFCLEtBQUt6USxNQUF0QixDQUFQO0FBQ0gsU0F4QkU7O0FBMEJIOzs7Ozs7O0FBT0E0cUIsbUJBQVcsU0FBU0kscUJBQVQsQ0FBK0JoWixLQUEvQixFQUFzQ3ZCLElBQXRDLEVBQTRDO0FBQ25EQSxtQkFBTzJaLE9BQU9KLFFBQVAsRUFBaUJ2WixJQUFqQixDQUFQO0FBQ0EsZ0JBQUl3YSxNQUFNLElBQUkxRSxhQUFKLENBQWtCOVYsSUFBbEIsQ0FBVjtBQUNBLG1CQUFPLElBQUlpVyxPQUFKLENBQVksVUFBU0MsT0FBVCxFQUFrQjtBQUNqQyxvQkFBSStELGNBQWNELFVBQVU5WSxpQkFBaUIvRixLQUFqQixDQUF1Qm9HLEtBQXZCLENBQVYsRUFBeUN2QixLQUFLelEsTUFBOUMsQ0FBbEI7QUFDQTJtQix3QkFBUUQsUUFBUXJPLEdBQVIsQ0FBWXFTLFlBQVkvcUIsR0FBWixDQUFnQixVQUFTdXJCLEVBQVQsRUFBYTtBQUM3QywyQkFBTyxJQUFJeEUsT0FBSixDQUFZLFVBQVNDLE9BQVQsRUFBa0I7QUFDakMsaUNBQVN3RSxlQUFULEdBQTJCO0FBQ3ZCeEUsb0NBQVF1RSxFQUFSO0FBQ0g7O0FBRURELDRCQUFJNUIsUUFBSixDQUFhNkIsRUFBYixFQUFpQnBDLElBQWpCLENBQXNCbkMsT0FBdEIsRUFBK0J3RSxlQUEvQixFQUFnRCxPQUFoRCxFQUF5REEsZUFBekQ7QUFDSCxxQkFOTSxDQUFQO0FBT0gsaUJBUm1CLENBQVosQ0FBUjtBQVNILGFBWGtCLENBV2pCcEMsSUFYaUIsQ0FXWixJQVhZLENBQVosQ0FBUDtBQVlILFNBaERFOztBQWtESDs7Ozs7O0FBTUE4Qiw4QkFBc0IsU0FBU08sZ0NBQVQsQ0FBMEMzYSxJQUExQyxFQUFnRDtBQUNsRUEsbUJBQU8yWixPQUFPSixRQUFQLEVBQWlCdlosSUFBakIsQ0FBUDtBQUNBLGdCQUFJNGEsY0FBY3RGLGVBQWVDLFNBQWYsQ0FBeUJ2VixJQUF6QixDQUFsQjtBQUNBLGdCQUFJLE9BQU9BLEtBQUt6USxNQUFaLEtBQXVCLFVBQTNCLEVBQXVDO0FBQ25DcXJCLDhCQUFjQSxZQUFZcnJCLE1BQVosQ0FBbUJ5USxLQUFLelEsTUFBeEIsQ0FBZDtBQUNIO0FBQ0QsbUJBQU8wbUIsUUFBUUMsT0FBUixDQUFnQjBFLFdBQWhCLENBQVA7QUFDSCxTQS9ERTs7QUFpRUg7Ozs7Ozs7OztBQVNBQyxvQkFBWSxTQUFTQyxzQkFBVCxDQUFnQzNyQixFQUFoQyxFQUFvQzhWLFFBQXBDLEVBQThDOFYsT0FBOUMsRUFBdURDLE9BQXZELEVBQWdFO0FBQ3hFLGdCQUFJLE9BQU83ckIsRUFBUCxLQUFjLFVBQWxCLEVBQThCO0FBQzFCLHNCQUFNLElBQUkxSCxLQUFKLENBQVUsdUNBQVYsQ0FBTjtBQUNILGFBRkQsTUFFTyxJQUFJLE9BQU8wSCxHQUFHOHJCLHNCQUFWLEtBQXFDLFVBQXpDLEVBQXFEO0FBQ3hEO0FBQ0EsdUJBQU85ckIsRUFBUDtBQUNIOztBQUVELGdCQUFJK3JCLGVBQWUsU0FBU0Msd0JBQVQsR0FBb0M7QUFDbkQsb0JBQUk7QUFDQSx5QkFBS3ROLEdBQUwsR0FBV3dLLElBQVgsQ0FBZ0JwVCxRQUFoQixFQUEwQjhWLE9BQTFCLEVBQW1DLE9BQW5DLEVBQTRDQSxPQUE1QztBQUNBLDJCQUFPNXJCLEdBQUd3WSxLQUFILENBQVNxVCxXQUFXLElBQXBCLEVBQTBCeHpCLFNBQTFCLENBQVA7QUFDSCxpQkFIRCxDQUdFLE9BQU9nVyxDQUFQLEVBQVU7QUFDUix3QkFBSXVjLDJCQUEyQnZjLENBQTNCLENBQUosRUFBbUM7QUFDL0IsNkJBQUsyYyxTQUFMLENBQWUzYyxDQUFmLEVBQWtCNmEsSUFBbEIsQ0FBdUJwVCxRQUF2QixFQUFpQzhWLE9BQWpDLEVBQTBDLE9BQTFDLEVBQW1EQSxPQUFuRDtBQUNIO0FBQ0QsMEJBQU12ZCxDQUFOO0FBQ0g7QUFDSixhQVZrQixDQVVqQjhhLElBVmlCLENBVVosSUFWWSxDQUFuQjtBQVdBNEMseUJBQWFELHNCQUFiLEdBQXNDOXJCLEVBQXRDOztBQUVBLG1CQUFPK3JCLFlBQVA7QUFDSCxTQWhHRTs7QUFrR0g7Ozs7OztBQU1BRSxzQkFBYyxTQUFTQyx3QkFBVCxDQUFrQ2xzQixFQUFsQyxFQUFzQztBQUNoRCxnQkFBSSxPQUFPQSxFQUFQLEtBQWMsVUFBbEIsRUFBOEI7QUFDMUIsc0JBQU0sSUFBSTFILEtBQUosQ0FBVSwwQ0FBVixDQUFOO0FBQ0gsYUFGRCxNQUVPLElBQUksT0FBTzBILEdBQUc4ckIsc0JBQVYsS0FBcUMsVUFBekMsRUFBcUQ7QUFDeEQsdUJBQU85ckIsR0FBRzhyQixzQkFBVjtBQUNILGFBRk0sTUFFQTtBQUNIO0FBQ0EsdUJBQU85ckIsRUFBUDtBQUNIO0FBQ0osU0FqSEU7O0FBbUhIOzs7Ozs7OztBQVFBbXNCLGdCQUFRLFNBQVNDLGtCQUFULENBQTRCdEIsV0FBNUIsRUFBeUMzeEIsR0FBekMsRUFBOENrekIsUUFBOUMsRUFBd0RDLGNBQXhELEVBQXdFO0FBQzVFLG1CQUFPLElBQUl4RixPQUFKLENBQVksVUFBU0MsT0FBVCxFQUFrQkMsTUFBbEIsRUFBMEI7QUFDekMsb0JBQUlDLE1BQU0sSUFBSTdNLGNBQUosRUFBVjtBQUNBNk0sb0JBQUlDLE9BQUosR0FBY0YsTUFBZDtBQUNBQyxvQkFBSTNNLGtCQUFKLEdBQXlCLFNBQVNBLGtCQUFULEdBQThCO0FBQ25ELHdCQUFJMk0sSUFBSTVOLFVBQUosS0FBbUIsQ0FBdkIsRUFBMEI7QUFDdEIsNEJBQUk0TixJQUFJMU0sTUFBSixJQUFjLEdBQWQsSUFBcUIwTSxJQUFJMU0sTUFBSixHQUFhLEdBQXRDLEVBQTJDO0FBQ3ZDd00sb0NBQVFFLElBQUl6TSxZQUFaO0FBQ0gseUJBRkQsTUFFTztBQUNId00sbUNBQU8sSUFBSTF1QixLQUFKLENBQVUsYUFBYWEsR0FBYixHQUFtQix1QkFBbkIsR0FBNkM4dEIsSUFBSTFNLE1BQTNELENBQVA7QUFDSDtBQUNKO0FBQ0osaUJBUkQ7QUFTQTBNLG9CQUFJNU0sSUFBSixDQUFTLE1BQVQsRUFBaUJsaEIsR0FBakI7O0FBRUE7QUFDQTh0QixvQkFBSXNGLGdCQUFKLENBQXFCLGNBQXJCLEVBQXFDLGtCQUFyQztBQUNBLG9CQUFJRCxrQkFBa0IsUUFBT0EsZUFBZUUsT0FBdEIsTUFBa0MsUUFBeEQsRUFBa0U7QUFDOUQsd0JBQUlBLFVBQVVGLGVBQWVFLE9BQTdCO0FBQ0EseUJBQUssSUFBSXJlLE1BQVQsSUFBbUJxZSxPQUFuQixFQUE0QjtBQUN4Qiw0QkFBSUEsUUFBUTF1QixjQUFSLENBQXVCcVEsTUFBdkIsQ0FBSixFQUFvQztBQUNoQzhZLGdDQUFJc0YsZ0JBQUosQ0FBcUJwZSxNQUFyQixFQUE2QnFlLFFBQVFyZSxNQUFSLENBQTdCO0FBQ0g7QUFDSjtBQUNKOztBQUVELG9CQUFJc2UsZ0JBQWdCLEVBQUNsYSxPQUFPdVksV0FBUixFQUFwQjtBQUNBLG9CQUFJdUIsYUFBYXR1QixTQUFiLElBQTBCc3VCLGFBQWEsSUFBM0MsRUFBaUQ7QUFDN0NJLGtDQUFjblosT0FBZCxHQUF3QitZLFFBQXhCO0FBQ0g7O0FBRURwRixvQkFBSXZNLElBQUosQ0FBU2pSLEtBQUtDLFNBQUwsQ0FBZStpQixhQUFmLENBQVQ7QUFDSCxhQS9CTSxDQUFQO0FBZ0NILFNBNUpFLEVBQVA7O0FBOEpILENBbE9BLENBQUQsQzs7Ozs7Ozt5UUNBQSxJQUFJQyxDQUFKOztBQUVBO0FBQ0FBLElBQUssWUFBVztBQUNmLFFBQU8sSUFBUDtBQUNBLENBRkcsRUFBSjs7QUFJQSxJQUFJO0FBQ0g7QUFDQUEsS0FBSUEsS0FBS0MsU0FBUyxhQUFULEdBQUwsSUFBa0MsQ0FBQyxHQUFFQyxJQUFILEVBQVMsTUFBVCxDQUF0QztBQUNBLENBSEQsQ0FHRSxPQUFNdmUsQ0FBTixFQUFTO0FBQ1Y7QUFDQSxLQUFHLFFBQU9qQyxNQUFQLHlDQUFPQSxNQUFQLE9BQWtCLFFBQXJCO0FBQ0NzZ0IsS0FBSXRnQixNQUFKO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBOztBQUVBalYsT0FBT0MsT0FBUCxHQUFpQnMxQixDQUFqQixDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDMERnQkcsTSxHQUFBQSxNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE4QkFDLFUsR0FBQUEsVSxDQTVHaEIsK0JBRUEsU0FBU0MsY0FBVCxDQUF3QkMsWUFBeEIsRUFBc0MsQ0FDbEM7QUFDQTtBQUNILGFBQVNDLG1CQUFULENBQTZCNWUsQ0FBN0IsRUFBZ0MsQ0FDekIsSUFBSUMsU0FBU0QsRUFBRUMsTUFBRixJQUFZRCxFQUFFNmUsVUFBM0IsQ0FDQSxJQUFJNWUsT0FBT0MsT0FBUCxLQUFtQixHQUF2QixFQUE0QixDQUN4QixJQUFJNGUsT0FBTzdlLE9BQU8yTCxZQUFQLENBQW9CLE1BQXBCLENBQVgsQ0FDQSxJQUFJbVQsVUFBVUQsUUFBUSxJQUFSLElBQWdCQSxLQUFLRSxVQUFMLENBQWdCLEdBQWhCLENBQTlCLENBQ0EsSUFBSUMsV0FBV0gsUUFBUSxJQUFSLElBQWdCQSxLQUFLRSxVQUFMLENBQWdCLEdBQWhCLENBQS9CLENBRUEsSUFBSUQsV0FBV0UsUUFBZixFQUF5QixrQkFDUUMsVUFBVUosSUFBVixDQURSLENBQ2hCSyxNQURnQixjQUNoQkEsTUFEZ0IsQ0FDUkMsS0FEUSxjQUNSQSxLQURRLENBQ0RodEIsS0FEQyxjQUNEQSxLQURDLENBRXJCLElBQUlndEIsVUFBVTF2QixTQUFkLEVBQXlCLENBQ3JCMHZCLFFBQVFULGFBQWFydEIsS0FBYixDQUFtQjh0QixLQUEzQixDQUNILENBQ0RDLEtBQUtWLFlBQUwsRUFBbUJRLE1BQW5CLEVBQTJCQyxLQUEzQixFQUFrQ2h0QixLQUFsQyxFQUxxQixDQU1yQjtBQUNBNE4sa0JBQUVzZixjQUFGLEdBQ0gsQ0FDSixDQUNKLENBcEJpQyxDQXNCbEM7QUFDQXZoQixXQUFPd2hCLFVBQVAsR0FBb0IsVUFBU0MsS0FBVCxFQUFnQixDQUNoQyxJQUFJQSxNQUFNQyxLQUFWLEVBQWlCLG9CQUNRRCxNQUFNQyxLQURkLENBQ1JMLEtBRFEsZ0JBQ1JBLEtBRFEsQ0FDRGh0QixLQURDLGdCQUNEQSxLQURDLENBRWJzdEIsb0JBQW9CZixZQUFwQixFQUFrQ1MsS0FBbEMsRUFBeUNodEIsS0FBekMsRUFDSCxDQUNKLENBTEQsQ0F2QmtDLENBOEJsQztBQUNBbU4sYUFBU0ssZ0JBQVQsQ0FBMEIsT0FBMUIsRUFBbUNnZixtQkFBbkMsRUEvQmtDLENBaUNsQztBQUNBLFFBQUl2RSxTQUFTc0YsUUFBVCxLQUFzQixHQUF0QixJQUE2QnRGLFNBQVN0TSxNQUFULEtBQW9CLEVBQXJELEVBQXlELENBQ3JEO0FBQ0EsWUFBSStRLE9BQU96RSxTQUFTc0YsUUFBVCxHQUFvQnRGLFNBQVN0TSxNQUE3QixHQUFzQ3NNLFNBQVN1RixJQUExRCxDQUZxRCxrQkFHaENWLFVBQVU3RSxTQUFTc0YsUUFBVCxHQUFvQnRGLFNBQVN0TSxNQUE3QixHQUFzQ3NNLFNBQVN1RixJQUF6RCxDQUhnQyxDQUdoRFIsS0FIZ0QsZUFHaERBLEtBSGdELENBR3pDaHRCLEtBSHlDLGVBR3pDQSxLQUh5QyxDQUlyRHN0QixvQkFBb0JmLFlBQXBCLEVBQWtDUyxLQUFsQyxFQUF5Q2h0QixLQUF6QyxFQUNILENBQ0osQyxDQUdEO0FBQ0EsU0FBU3l0QixZQUFULENBQXNCRCxJQUF0QixFQUE0QjdSLE1BQTVCLEVBQW9DLENBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBSStSLFdBQVcsNENBQWYsQ0FDQSxJQUFJQyxrQkFBa0JuVyxPQUFPa1csUUFBUCxFQUFpQnJiLElBQWpCLENBQXNCbWIsSUFBdEIsQ0FBdEIsQ0FDQSxJQUFJSSxvQkFBb0JwVyxPQUFPa1csUUFBUCxFQUFpQnJiLElBQWpCLENBQXNCc0osTUFBdEIsQ0FBeEIsQ0FQZ0MsQ0FTaEM7QUFDQSxRQUFJa1MsT0FBT0YsbUJBQW1CQSxnQkFBZ0IsQ0FBaEIsS0FBc0IsSUFBekMsR0FBZ0RBLGdCQUFnQixDQUFoQixFQUFtQjUwQixLQUFuQixDQUF5QixHQUF6QixDQUFoRCxHQUFnRixFQUEzRixDQUNBODBCLE9BQU9ELHFCQUFxQkEsa0JBQWtCLENBQWxCLEtBQXdCLElBQTdDLEdBQW9EQyxLQUFLendCLE1BQUwsQ0FBWXd3QixrQkFBa0IsQ0FBbEIsRUFBcUI3MEIsS0FBckIsQ0FBMkIsR0FBM0IsQ0FBWixDQUFwRCxHQUFtRzgwQixJQUExRyxDQUVBLElBQUk1ZSxTQUFTLEVBQWIsQ0FDQSxLQUFLLElBQUlsWSxJQUFFLENBQVgsRUFBYUEsSUFBRTgyQixLQUFLNzJCLE1BQXBCLEVBQTJCRCxHQUEzQixFQUFnQyxDQUM1QixJQUFJKzJCLE9BQU9ELEtBQUs5MkIsQ0FBTCxFQUFRZ0MsS0FBUixDQUFjLEdBQWQsQ0FBWCxDQUQ0QixDQUV4QjtBQUNKLFlBQUksT0FBT2tXLE9BQU82ZSxLQUFLLENBQUwsQ0FBUCxDQUFQLEtBQTJCLFdBQS9CLEVBQTRDLENBQ3hDN2UsT0FBTzZlLEtBQUssQ0FBTCxDQUFQLElBQWtCQyxtQkFBbUJELEtBQUssQ0FBTCxDQUFuQixDQUFsQixDQUR3QyxDQUV4QztBQUNILFNBSEQsTUFHTyxJQUFJLE9BQU83ZSxPQUFPNmUsS0FBSyxDQUFMLENBQVAsQ0FBUCxLQUEyQixRQUEvQixFQUF5QyxDQUM1QyxJQUFJRSxNQUFNLENBQUUvZSxPQUFPNmUsS0FBSyxDQUFMLENBQVAsQ0FBRixFQUFrQkMsbUJBQW1CRCxLQUFLLENBQUwsQ0FBbkIsQ0FBbEIsQ0FBVixDQUNBN2UsT0FBTzZlLEtBQUssQ0FBTCxDQUFQLElBQWtCRSxHQUFsQixDQUY0QyxDQUc1QztBQUNILFNBSk0sTUFJQSxDQUNIL2UsT0FBTzZlLEtBQUssQ0FBTCxDQUFQLEVBQWdCNTJCLElBQWhCLENBQXFCNjJCLG1CQUFtQkQsS0FBSyxDQUFMLENBQW5CLENBQXJCLEVBQ0gsQ0FDSixDQUNELE9BQU83ZSxNQUFQLENBQ0gsQyxDQUVEO0FBQ08sU0FBU21kLE1BQVQsT0FBa0NoZCxTQUFsQyxFQUE2QyxLQUE1QkwsT0FBNEIsUUFBNUJBLE9BQTRCLENBQW5CaWUsS0FBbUIsUUFBbkJBLEtBQW1CLENBQ2hELElBQUlqZSxXQUFXLElBQWYsRUFBcUIsQ0FDakJrZixRQUFRQyxHQUFSLENBQVksMkRBQVosRUFDQSxPQUFPLElBQVAsQ0FDSCxDQUNELElBQUlsQixTQUFTLElBQWIsRUFBbUIsQ0FDZmlCLFFBQVFDLEdBQVIsQ0FBWSxvREFBWixFQUNBLE9BQU8sSUFBUCxDQUNILENBUitDLENBU2hEO0FBQ0E7QUFDQW5mLFlBQVFqUCxDQUFSLENBQVUsUUFBVixDQUNBO0FBREEsTUFFQ1IsR0FGRCxDQUVLLFVBQUM2dUIsTUFBRCxVQUFZQSxPQUFPeDBCLE9BQVAsQ0FBZXF6QixLQUFmLE1BQTBCLENBQUMsQ0FBM0IsSUFBZ0NqZSxRQUFRNU8sS0FBUixDQUFjLEVBQUVndUIsUUFBUUEsT0FBTy93QixNQUFQLENBQWM0dkIsS0FBZCxDQUFWLEVBQWQsQ0FBNUMsRUFGTCxFQVhnRCxDQWVoRDtBQUNBLFFBQUlvQixrQkFBa0JyZixRQUNqQnpQLEdBRGlCLENBQ2IsaUJBQXFCLEtBQW5CMHRCLEtBQW1CLFNBQW5CQSxLQUFtQixDQUFabUIsTUFBWSxTQUFaQSxNQUFZLENBQ3RCLElBQUlBLE9BQU94MEIsT0FBUCxDQUFlcXpCLEtBQWYsTUFBMEIsQ0FBQyxDQUEvQixFQUFrQyxDQUM5QixPQUFPLEdBQVAsQ0FDSCxDQUNELE9BQU9BLEtBQVAsQ0FDSCxDQU5pQixDQUF0QixDQVFBLElBQUlxQixlQUFlRCxnQkFBZ0I1dUIsRUFBaEIsQ0FBbUJ3dEIsS0FBbkIsRUFBMEJudEIsUUFBMUIsRUFBbkIsQ0FDQSxPQUFPLGNBQU8sQ0FBQ3d1QixZQUFELEVBQWVqZixTQUFmLENBQVAsRUFBa0M5UCxHQUFsQyxDQUFzQyxpQkFBd0Isc0NBQXRCZ3ZCLE1BQXNCLFlBQWRsakIsUUFBYyxZQUNqRSxPQUFPa2pCLFNBQVNsakIsUUFBVCxHQUFvQixFQUEzQixDQUNILENBRk0sQ0FBUCxDQUdILENBRU0sU0FBU2loQixVQUFULEdBQXNCLENBQ3pCLElBQUlFLGVBQWUsY0FBTyxFQUN0QlMsT0FBTyxFQURlLEVBRXRCL2QsUUFBUSxFQUZjLEVBR3RCa2YsUUFBUSxDQUFDLEdBQUQsQ0FIYyxFQUFQLENBQW5CLENBTUE3QixlQUFlQyxZQUFmLEVBRUEsT0FBT0EsWUFBUCxDQUNILEMsQ0FFRDtBQUNBLFNBQVNPLFNBQVQsQ0FBbUJ5QixJQUFuQixFQUF5QixDQUNyQixJQUFJQyxTQUFTLG9EQUFiLENBQ0EsSUFBSUMsV0FBV0QsT0FBT25jLElBQVAsQ0FBWWtjLElBQVosQ0FBZixDQUNBLE9BQU8sRUFDSHhCLFFBQVEwQixTQUFTLENBQVQsQ0FETCxFQUVIekIsT0FBT3lCLFNBQVMsQ0FBVCxDQUZKLEVBR0h6dUIsT0FBT3l1QixTQUFTLENBQVQsQ0FISixFQUFQLENBS0g7QUFFRDtBQUNBO0FBQ0EsU0FBU25CLG1CQUFULENBQTZCZixZQUE3QixFQUEyQ1MsS0FBM0MsRUFBa0RodEIsS0FBbEQsRUFBeUQ7QUFDckQ7QUFDQSxRQUFJMHNCLE9BQU96RSxTQUFTdUYsSUFBVCxDQUFjeHpCLE1BQWQsQ0FBcUIsQ0FBckIsQ0FBWDtBQUNBdXlCLGlCQUFhcHNCLEtBQWIsQ0FBbUI7QUFDZjZzQixlQUFPQSxTQUFTLEVBREQ7QUFFZi9kLGdCQUFRd2UsYUFBYWYsSUFBYixFQUFtQnpFLFNBQVN0TSxNQUE1QixDQUZPLEVBQW5COztBQUlIOztBQUVELFNBQVNzUixJQUFULENBQWNWLFlBQWQsRUFBNEJRLE1BQTVCLEVBQW9DQyxLQUFwQyxFQUEyQ2h0QixLQUEzQyxFQUFrRDtBQUM5QzB1QixZQUFRQyxTQUFSLENBQWtCLEVBQUM1QixjQUFELEVBQVNDLFlBQVQsRUFBZ0JodEIsWUFBaEIsRUFBbEIsRUFBMEMsRUFBMUMsU0FBa0RndEIsUUFBUUEsTUFBTWh6QixNQUFOLENBQWEsQ0FBYixDQUFSLEdBQTBCLEVBQTVFLEtBQWlGZ0csUUFBUSxNQUFNQSxLQUFkLEdBQXNCLEVBQXZHO0FBQ0EsUUFBSStzQixNQUFKLEVBQVk7QUFDVDlFLGlCQUFTdUYsSUFBVCxHQUFnQixNQUFNVCxNQUF0QjtBQUNGO0FBQ0RPLHdCQUFvQmYsWUFBcEIsRUFBa0NTLEtBQWxDLEVBQXlDaHRCLEtBQXpDO0FBQ0gsQzs7Ozs7Ozs7Ozs7Ozs7QUM3SWU0dUIsaUIsR0FBQUEsaUIsQ0FQaEIsNEMseUpBR0E7Ozs4T0FJTyxTQUFTQSxpQkFBVCxHQUE2QixDQUNoQ2pqQixPQUFPOGEsT0FBUCxHQUFpQixVQUFTb0ksR0FBVCxFQUFjNW5CLElBQWQsRUFBb0JLLElBQXBCLEVBQTBCd25CLEdBQTFCLEVBQStCbmQsS0FBL0IsRUFBc0MsQ0FDbkQsdUJBQVc0WSxTQUFYLENBQXFCNVksS0FBckIsRUFDQzhXLElBREQsQ0FDTSwwQkFBVXdGLFFBQVF0YyxLQUFSLENBQWNvZCxhQUFhQyxNQUFiLEVBQXFCSCxHQUFyQixDQUFkLENBQVYsRUFETjtBQUVDSSxhQUZELENBRU9oQixRQUFRdGMsS0FGZjs7QUFJQSxlQUFPLElBQVA7QUFDSCxLQU5EOztBQVFBLGFBQVNvZCxZQUFULENBQXNCL0QsV0FBdEIsRUFBbUNrRSxZQUFuQyxFQUFpRDtBQUM3QyxZQUFJQyxpQkFBaUJuRTtBQUNwQnJyQixjQURvQixDQUNiLHFCQUFFeEIsUUFBRixRQUFFQSxRQUFGLFFBQWdCQSxTQUFTeXVCLFVBQVQsY0FBaEIsRUFEYTtBQUVwQnR0QixXQUZvQixDQUVoQixpQkFBd0QsS0FBdERyQixZQUFzRCxTQUF0REEsWUFBc0QsQ0FBeENNLFlBQXdDLFNBQXhDQSxZQUF3QyxDQUExQkosUUFBMEIsU0FBMUJBLFFBQTBCLENBQWhCRSxVQUFnQixTQUFoQkEsVUFBZ0I7QUFDekQ7QUFDQSxnQkFBSSt3QixzQkFBc0JqeEIsU0FBUzNFLE9BQVQsOEJBQTFCOztBQUVBLDJCQUFheUUsaUJBQWlCWCxTQUFqQixHQUE2QlcsWUFBN0IsR0FBNkMsYUFBMUQsaUJBQW1GbXhCLG1CQUFuRixTQUEwRy93QixVQUExRyxTQUF3SEUsWUFBeEg7QUFDSCxTQVBvQixDQUFyQjs7QUFTQSxlQUFPLENBQUMsWUFBWTJ3QixZQUFiLEVBQTJCOXhCLE1BQTNCLENBQWtDK3hCLGNBQWxDLEVBQWtEaDRCLElBQWxELENBQXVELElBQXZELENBQVA7QUFDSDtBQUNKLEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNEZWs0QixHLEdBQUFBLEc7Ozs7OztBQU1BQyxLLEdBQUFBLEssQ0FqQ2hCLCtCLENBRUE7QUFDTyxJQUFNQyw4QkFBVyxTQUFYQSxRQUFXLENBQUNDLE9BQUQsRUFBYSxDQUNwQyxJQUFJQyxVQUFVLGNBQU8sRUFDcEJDLFNBQVMsSUFEVyxFQUVwQi9kLE9BQU8sSUFGYSxFQUdwQitFLE1BQU0sSUFIYyxFQUFQLENBQWQsQ0FNQThZLFFBQVEvRyxJQUFSLENBQWEsa0JBQVUsQ0FDdEJnSCxRQUFRdHZCLEtBQVIsQ0FBYyxFQUNidXZCLFNBQVMsS0FESSxFQUViaFosTUFBTTVmLE1BRk8sRUFBZCxFQUlBLENBTEQsRUFLRyxpQkFBUyxDQUNYMjRCLFFBQVF0dkIsS0FBUixDQUFjLEVBQ2J1dkIsU0FBUyxLQURJLEVBRWIvZCxZQUZhLEVBQWQsRUFJQSxDQVZELEVBWUEsT0FBTzhkLE9BQVAsQ0FDQSxDQXBCTSxDLENBc0JQO0FBQ0E7QUFDTyxTQUFTSixHQUFULENBQWFyd0IsTUFBYixFQUFxQjJ3QixNQUFyQixFQUE2QkMsT0FBN0IsRUFBc0MsQ0FDekMsT0FBTzV3QixPQUFPTSxHQUFQLENBQVcscUJBQUdxUixJQUFHZ2YsVUFBUSxJQUFYLEdBQWtCQyxXQUFTLElBQTlCLEVBQVgsQ0FBUCxDQUNILEMsQ0FFRDtBQUNBO0FBQ08sU0FBU04sS0FBVCxHQUF1QixtQ0FBTHRCLEdBQUssZ0RBQUxBLEdBQUssMEJBQzFCLElBQUk2QixPQUFPN0IsSUFBSTF1QixHQUFKLENBQVEsZ0JBQVEsQ0FDdkIsSUFBSXJJLFNBQVMsSUFBVCxJQUFpQkEsU0FBU3FHLFNBQTlCLEVBQXlDLENBQ3JDLE9BQU8sY0FBTyxFQUFQLENBQVAsQ0FDSCxDQUNELElBQUlyRyxLQUFLbUksU0FBVCxFQUFvQjtBQUNoQixVQUFPbkksSUFBUDtBQUNIO0FBQ0QsU0FBTyxjQUFPQSxJQUFQLENBQVA7QUFDSCxFQVJVLENBQVg7QUFTQSxRQUFPLGNBQU80NEIsSUFBUCxFQUFhdndCLEdBQWIsQ0FBaUIsdUJBQU8wdUIsSUFBSTcyQixJQUFKLENBQVMsR0FBVCxDQUFQLEVBQWpCLENBQVA7QUFDSCxDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDc0VlMjRCLE8sR0FBQUEsTyxDQWxIaEIsc0NBQ0EsMEMsMkxBRUE7OzhSQUdPLElBQU1DLGdCQUFJLFNBQUpBLENBQUksQ0FBQzFrQixHQUFELEVBQU1sTyxLQUFOLEVBQTZCLG1DQUFiaU8sUUFBYSxtRUFBYkEsUUFBYSw4QkFDN0MsSUFBSTRrQixXQUFXLHFCQUFPLEtBQVAsQ0FBZixDQUNBLElBQUlubEIsa0JBQUosQ0FDQSxJQUFJUixVQUFVLENBQUMsQ0FBZixDQUVBLElBQUk0bEIsa0JBQWtCQyxlQUFlSixRQUFRMWtCLFFBQVIsQ0FBZixDQUF0QixDQUw2QyxDQU03QztBQUNBO0FBQ0EsS0FBSSxPQUFPQyxHQUFQLEtBQWUsVUFBbkIsRUFBK0IsQ0FDOUIsT0FBT0EsSUFDTmxPLEtBRE0sRUFFTjh5QixlQUZNLEVBR05ELFFBSE0sQ0FBUCxDQUtBLENBZDRDLENBZTdDO0FBQ0EsS0FBSTd5QixVQUFVLElBQWQsRUFBb0IsQ0FDbkJoRCxPQUFPaU8sSUFBUCxDQUFZakwsS0FBWixFQUFtQm1DLEdBQW5CLENBQXVCLFVBQUM2d0IsUUFBRCxFQUFXdjJCLEtBQVgsRUFBcUIsQ0FDM0MsSUFBSSx1QkFBU3VELE1BQU1nekIsUUFBTixDQUFULENBQUosRUFBK0IsQ0FDOUJoekIsTUFBTWd6QixRQUFOLElBQWtCaHpCLE1BQU1nekIsUUFBTixFQUFnQmx3QixLQUFoQixDQUFzQit2QixRQUF0QixDQUFsQixDQUNBLENBQ0QsQ0FKRCxFQUtBLENBQ0QsT0FBTyxFQUNOamxCLE9BQU8scUJBQU8sQ0FDWnFsQixXQUFXanpCLEtBQVgsRUFBa0I2eUIsUUFBbEIsQ0FEWSxFQUVaQyxnQkFBZ0Izd0IsR0FBaEIsQ0FBb0J3d0IsT0FBcEIsQ0FGWSxDQUFQLEVBR0h4d0IsR0FIRyxDQUdDLGdCQUF1QixxQ0FBckJuQyxLQUFxQixZQUFkaU8sUUFBYyxZQUM3QixPQUFPLEVBQ05DLFFBRE0sRUFFTmxPLFlBRk0sRUFHTmlPLGtCQUhNLEVBSU5mLFNBQVMsRUFBRUEsT0FKTCxFQUFQLENBS0MsQ0FUSSxDQURELEVBQVAsQ0FZQSxDQW5DTSxDLENBcUNQO0FBQ0EsU0FBUzZsQixjQUFULENBQXdCOWtCLFFBQXhCLEVBQWtDLENBQ2pDLElBQUksQ0FBQ3JSLE1BQU0rSCxPQUFOLENBQWNzSixRQUFkLENBQUwsRUFBOEIsQ0FDN0JBLFdBQVcsQ0FBQ0EsUUFBRCxDQUFYLENBQ0EsQ0FDREEsV0FBVzBrQixRQUFRMWtCLFFBQVIsQ0FBWCxDQUNBLElBQUlpbEIsbUJBQW1CamxCLFNBQVM5TCxHQUFULENBQWEsaUJBQVMsQ0FDNUMsSUFBSSx1QkFBU3FOLEtBQVQsQ0FBSixFQUFxQixDQUNwQixPQUFPQSxNQUNOak4sT0FETSxDQUNFd3dCLGNBREYsQ0FBUCxDQUVBLENBQ0QsT0FBT3ZqQixNQUFNNUIsS0FBTixJQUFlNEIsS0FBdEIsQ0FDQSxDQU5zQixDQUF2QixDQVFBLE9BQU8scUJBQU8wakIsZ0JBQVAsQ0FBUCxDQUNBLEMsQ0FFRDs7Ozt1VUFLQSxTQUFTQyxtQkFBVCxDQUE2QkMsV0FBN0IsRUFBMENQLFFBQTFDLEVBQW9ELFlBQ25EO0FBQ0E7QUFDQU8sZUFBYyxhQUFHbnpCLE1BQUgsaUNBQWFtekIsV0FBYixFQUFkLENBSG1ELENBSW5EO0FBQ0EsS0FBSUMsZUFBZUQsWUFBWWp4QixHQUFaLENBQWdCLHFCQUFhLENBQy9DO0FBQ0EsTUFBSXVMLFVBQVVFLEtBQVYsS0FBb0J6TixTQUF4QixFQUFtQyxDQUNsQyxPQUFPLHFCQUFPdU4sU0FBUCxDQUFQLENBQ0EsQ0FDRCxPQUFPQSxVQUFVRSxLQUFqQixDQUNBLENBTmtCLENBQW5CLENBUUEsT0FBT3lsQixhQUNOO0FBRE0sRUFFTGx4QixHQUZLLENBRUQseUJBQVN5TCxNQUFNOUssS0FBTixDQUFZK3ZCLFFBQVosQ0FBVCxFQUZDLENBR047QUFITSxHQUlMMXdCLEdBSkssQ0FJRCxxQkFBS214QixVQUFVbmMsQ0FBVixFQUNSaFYsR0FEUSxDQUNKd3dCLE9BREksQ0FBTCxFQUpDLENBTU47QUFOTSxHQU9MeHdCLEdBUEssQ0FPRCx5QkFBU3lMLE1BQU1yTCxPQUFOLENBQWMsMkJBQzFCLHFCQUFPZ3hCLE9BQVAsQ0FEMEIsRUFBZCxDQUFULEVBUEMsQ0FBUCxDQVNBLEMsQ0FFRDtBQUNBO0FBQ0EsU0FBU0MsV0FBVCxDQUFxQkosV0FBckIsRUFBa0MsQ0FDakMsT0FBT0EsWUFBWWp4QixHQUFaLENBQWdCLGlCQUFTLENBQy9CLElBQUlxTixVQUFVLElBQVYsSUFBa0IsQ0FBQyx1QkFBU0EsS0FBVCxDQUF2QixFQUF3QyxDQUN2QyxPQUFPLHFCQUFPQSxLQUFQLENBQVAsQ0FDQSxDQUNELE9BQU9BLEtBQVAsQ0FDQSxDQUxNLENBQVAsQ0FNQSxDLENBRUQ7QUFDQSxTQUFTOGpCLFNBQVQsQ0FBbUJ6eEIsTUFBbkIsRUFBMkIsQ0FDMUIsT0FBT0EsT0FBT00sR0FBUCxDQUFXLGlCQUFTLENBQzFCLElBQUlKLFNBQVMsSUFBYixFQUFtQixDQUNsQixPQUFPLEVBQVAsQ0FDQSxDQUNELElBQUksQ0FBQ25GLE1BQU0rSCxPQUFOLENBQWM1QyxLQUFkLENBQUwsRUFBMkIsQ0FDMUIsT0FBTyxDQUFDQSxLQUFELENBQVAsQ0FDQSxDQUNELE9BQU9BLEtBQVAsQ0FDQSxDQVJNLENBQVAsQ0FTQSxDLENBRUQ7QUFDTyxTQUFTNHdCLE9BQVQsQ0FBaUJjLEtBQWpCLEVBQXdCQyxPQUF4QixFQUFpQyxDQUNwQyxJQUFJaDZCLFdBQVdzRCxPQUFPb0QsU0FBUCxDQUFpQjFHLFFBQWhDLENBQ0EsSUFBSWk2QixlQUFlLGdCQUFuQixDQUVBLElBQUloNkIsU0FBUyxFQUFiLENBQ0EsSUFBSWk2QixRQUFTRixXQUFXRCxLQUFaLElBQXNCQSxNQUFNOTJCLEtBQU4sRUFBbEMsQ0FDQSxJQUFJd3BCLElBQUosQ0FFQSxJQUFJLENBQUNzTixNQUFNNTVCLE1BQVgsRUFBbUIsQ0FDZixPQUFPRixNQUFQLENBQ0gsQ0FFRHdzQixPQUFPeU4sTUFBTXJlLEdBQU4sRUFBUCxDQUVBLEdBQUcsQ0FDQyxJQUFJN2IsU0FBUytHLElBQVQsQ0FBYzBsQixJQUFkLE1BQXdCd04sWUFBNUIsRUFBMEMsQ0FDdENDLE1BQU03NUIsSUFBTixDQUFXNmdCLEtBQVgsQ0FBaUJnWixLQUFqQixFQUF3QnpOLElBQXhCLEVBQ0gsQ0FGRCxNQUVPLENBQ0h4c0IsT0FBT0ksSUFBUCxDQUFZb3NCLElBQVosRUFDSCxDQUNKLENBTkQsUUFNU3lOLE1BQU0vNUIsTUFBTixJQUFnQixDQUFDc3NCLE9BQU95TixNQUFNcmUsR0FBTixFQUFSLE1BQXlCcFYsU0FObEQ7QUFRQXhHLFFBQU9rNkIsT0FBUCxHQXRCb0MsQ0FzQmxCO0FBQ2xCLFFBQU9sNkIsTUFBUDtBQUNIOztBQUVEOzs7QUFHQSxTQUFTczVCLFVBQVQsQ0FBb0JqekIsS0FBcEIsRUFBMkI2eUIsUUFBM0IsRUFBcUM7QUFDcEMsS0FBSTd5QixVQUFVLElBQWQsRUFBb0IsT0FBTyxxQkFBTyxFQUFQLENBQVA7QUFDcEIsS0FBSSx1QkFBU0EsS0FBVCxDQUFKLEVBQXFCO0FBQ3BCLFNBQU9BLE1BQU04QyxLQUFOLENBQVkrdkIsUUFBWixDQUFQO0FBQ0E7O0FBRUQsS0FBSWlCLGdCQUFnQkMscUJBQXFCL3pCLEtBQXJCLENBQXBCO0FBQ0EsS0FBSWcwQixnQkFBZ0JGLGNBQWMzeEIsR0FBZCxDQUFrQixTQUFTOHhCLDJCQUFULFFBQTRELEtBQXRCenZCLE1BQXNCLFNBQXRCQSxNQUFzQixDQUFkdUksR0FBYyxTQUFkQSxHQUFjLENBQVRsTCxNQUFTLFNBQVRBLE1BQVM7QUFDakcsU0FBT0E7QUFDTmlCLE9BRE0sQ0FDQSt2QixRQURBO0FBRU5ud0I7QUFDRDtBQUNBO0FBSk8sS0FLTlAsR0FMTSxDQUtGLGlCQUFTO0FBQ2JxQyxVQUFPdUksR0FBUCxJQUFjaEwsS0FBZDtBQUNBLFVBQU9BLEtBQVA7QUFDQSxHQVJNLENBQVA7QUFTQSxFQVZtQixDQUFwQjtBQVdBLFFBQU8scUJBQU9peUIsYUFBUCxFQUFzQjd4QixHQUF0QixDQUEwQixxQkFBS25DLEtBQUwsRUFBMUIsQ0FBUDtBQUNBOztBQUVEO0FBQ0E7QUFDQSxTQUFTK3pCLG9CQUFULENBQThCaDNCLEdBQTlCLEVBQW1DO0FBQ2xDLFFBQU80MUIsUUFBUTMxQixPQUFPaU8sSUFBUCxDQUFZbE8sR0FBWixFQUFpQm9GLEdBQWpCLENBQXFCLGVBQU87QUFDMUMsTUFBSSxRQUFPcEYsSUFBSWdRLEdBQUosQ0FBUCxNQUFvQixRQUF4QixFQUFrQztBQUNqQyxVQUFPZ25CLHFCQUFxQmgzQixJQUFJZ1EsR0FBSixDQUFyQixDQUFQO0FBQ0E7QUFDRCxNQUFJLHVCQUFTaFEsSUFBSWdRLEdBQUosQ0FBVCxDQUFKLEVBQXdCO0FBQ3ZCLFVBQU8sQ0FBQztBQUNQdkksWUFBUXpILEdBREQ7QUFFUGdRLFlBRk87QUFHUGxMLFlBQVE5RSxJQUFJZ1EsR0FBSixDQUhELEVBQUQsQ0FBUDs7QUFLQTtBQUNELFNBQU8sRUFBUDtBQUNBLEVBWmMsQ0FBUixDQUFQO0FBYUEsQzs7Ozs7Ozs7O0FDbExlK0wsSSxHQUFBQSxJLENBRmhCLGtDQUVPLFNBQVNBLElBQVQsT0FBdUJvYixRQUF2QixFQUFpQ0MsSUFBakMsRUFBdUMsS0FBeEJ2bUIsS0FBd0IsUUFBeEJBLEtBQXdCO0FBQzFDLHFCQUFPLEVBQUNBLFlBQUQsRUFBUCxFQUFnQmpMLENBQWhCLENBQWtCLFNBQWxCLEVBQTZCTyxNQUE3QixDQUFvQyxVQUFDa3hCLFNBQUQsRUFBWTdsQixVQUFaLEVBQTJCO0FBQzNELFlBQUkybEIsU0FBU0UsU0FBVCxNQUF3QmowQixTQUE1QixFQUF1QztBQUNuQyxrQkFBTSxJQUFJekYsS0FBSixDQUFVLG9CQUFWLENBQU47QUFDSDtBQUNEdzVCLGlCQUFTRSxTQUFULEVBQW9CN2xCLFVBQXBCO0FBQ0EsWUFBSTJsQixTQUFTcjZCLE1BQVQsS0FBb0J1NkIsWUFBWSxDQUFoQyxJQUFxQ0QsSUFBekMsRUFBK0M7QUFDM0NBO0FBQ0g7O0FBRUQsZUFBT0MsWUFBVyxDQUFsQjtBQUNILEtBVkQsRUFVRyxDQVZIO0FBV0gsQzs7Ozs7O0FDZEQ7QUFDQTs7O0FBR0E7QUFDQSwrQ0FBZ0QseUJBQXlCLEVBQUUsaUJBQWlCLHNCQUFzQixvQkFBb0IsRUFBRSxvQkFBb0IsZ0RBQWdELHVCQUF1QixFQUFFLHFCQUFxQixvQkFBb0IsRUFBRSx1Q0FBdUMsc0JBQXNCLHdCQUF3QixFQUFFLHVCQUF1QixzQkFBc0IsRUFBRSxzQkFBc0IsMEJBQTBCLEVBQUUsRUFBRSxnQkFBZ0Isc0JBQXNCLHlCQUF5QixFQUFFLGtCQUFrQixxQkFBcUIsc0JBQXNCLHdCQUF3Qix3QkFBd0IsNEJBQTRCLEVBQUUsdUNBQXVDLGtCQUFrQixzQkFBc0IsRUFBRSxFQUFFLGFBQWEsb0JBQW9CLGlCQUFpQixlQUFlLGdCQUFnQixFQUFFLGVBQWUsb0JBQW9CLHVCQUF1QixFQUFFLDZCQUE2QixnQkFBZ0IsdUJBQXVCLEVBQUUsMEJBQTBCLHlCQUF5QixFQUFFLHlDQUF5Qyw4QkFBOEIsNkJBQTZCLEVBQUUsRUFBRSwyQkFBMkIsc0JBQXNCLEVBQUUsd0JBQXdCLDBCQUEwQiw2QkFBNkIsRUFBRTs7QUFFL3RDOzs7Ozs7O0FDUEE7QUFDQTs7O0FBR0E7QUFDQSxpQ0FBa0Msa0JBQWtCLEVBQUU7O0FBRXREOzs7Ozs7O0FDUEE7QUFDQTs7O0FBR0E7QUFDQSwrQkFBZ0Msd0JBQXdCLEVBQUUsYUFBYSx1QkFBdUIsdUJBQXVCLGVBQWUsRUFBRSxnQkFBZ0IsOEJBQThCLEVBQUUscUJBQXFCLDhCQUE4QixFQUFFLDJCQUEyQix5Q0FBeUMsRUFBRSxjQUFjLHdCQUF3QixFQUFFLFNBQVMsaUNBQWlDLHlDQUF5QywwQkFBMEIsRUFBRSxnQkFBZ0IscUNBQXFDLGdDQUFnQyxFQUFFOztBQUUvaEI7Ozs7Ozs7QUNQQTtBQUNBOzs7QUFHQTtBQUNBLHVDQUF3QywrQkFBK0IscUJBQXFCLEVBQUU7O0FBRTlGOzs7Ozs7O0FDUEE7QUFDQTs7O0FBR0E7QUFDQSwyQ0FBNEMseUNBQXlDLEVBQUUsMkJBQTJCLDhCQUE4QixFQUFFLGdDQUFnQyx5Q0FBeUMsRUFBRSwwQ0FBMEMsOEJBQThCLEVBQUUsZ0NBQWdDLHlDQUF5QyxFQUFFLDBDQUEwQyw4QkFBOEIsRUFBRSxnQ0FBZ0MseUNBQXlDLEVBQUUsMENBQTBDLDhCQUE4QixFQUFFLGdDQUFnQyx5Q0FBeUMsRUFBRSwwQ0FBMEMsOEJBQThCLEVBQUUsZ0NBQWdDLHlDQUF5QyxFQUFFLDBDQUEwQyw4QkFBOEIsRUFBRSwrQkFBK0IseUNBQXlDLEVBQUUseUNBQXlDLDhCQUE4QixFQUFFLCtCQUErQix5Q0FBeUMsRUFBRSx5Q0FBeUMsOEJBQThCLEVBQUUsK0JBQStCLHlDQUF5QyxFQUFFLHlDQUF5Qyw4QkFBOEIsRUFBRSwrQkFBK0IseUNBQXlDLEVBQUUseUNBQXlDLDhCQUE4QixFQUFFLFVBQVUseUNBQXlDLEVBQUUsZUFBZSw4QkFBOEIsRUFBRSxvQkFBb0IseUNBQXlDLEVBQUUsOEJBQThCLDhCQUE4QixFQUFFLG9CQUFvQix5Q0FBeUMsRUFBRSw4QkFBOEIsOEJBQThCLEVBQUUsb0JBQW9CLHlDQUF5QyxFQUFFLDhCQUE4Qiw4QkFBOEIsRUFBRSxvQkFBb0IseUNBQXlDLEVBQUUsOEJBQThCLDhCQUE4QixFQUFFLG9CQUFvQix5Q0FBeUMsRUFBRSw4QkFBOEIsOEJBQThCLEVBQUUsbUJBQW1CLHlDQUF5QyxFQUFFLDZCQUE2Qiw4QkFBOEIsRUFBRSxtQkFBbUIseUNBQXlDLEVBQUUsNkJBQTZCLDhCQUE4QixFQUFFLG1CQUFtQix5Q0FBeUMsRUFBRSw2QkFBNkIsOEJBQThCLEVBQUUsbUJBQW1CLHlDQUF5QyxFQUFFLDZCQUE2Qiw4QkFBOEIsRUFBRSxtQkFBbUIseUNBQXlDLEVBQUUsNkJBQTZCLDhCQUE4QixFQUFFLG1CQUFtQix5Q0FBeUMsRUFBRSw2QkFBNkIsOEJBQThCLEVBQUUsbUJBQW1CLHlDQUF5QyxFQUFFLDZCQUE2Qiw4QkFBOEIsRUFBRSxtQkFBbUIseUNBQXlDLEVBQUUsNkJBQTZCLDhCQUE4QixFQUFFLFdBQVcseUNBQXlDLEVBQUUsZ0JBQWdCLDhCQUE4QixFQUFFLHFCQUFxQix5Q0FBeUMsRUFBRSwrQkFBK0IsOEJBQThCLEVBQUUscUJBQXFCLHlDQUF5QyxFQUFFLCtCQUErQiw4QkFBOEIsRUFBRSxxQkFBcUIseUNBQXlDLEVBQUUsK0JBQStCLDhCQUE4QixFQUFFLHFCQUFxQix5Q0FBeUMsRUFBRSwrQkFBK0IsOEJBQThCLEVBQUUscUJBQXFCLHlDQUF5QyxFQUFFLCtCQUErQiw4QkFBOEIsRUFBRSxvQkFBb0IseUNBQXlDLEVBQUUsOEJBQThCLDhCQUE4QixFQUFFLG9CQUFvQix5Q0FBeUMsRUFBRSw4QkFBOEIsOEJBQThCLEVBQUUsb0JBQW9CLHlDQUF5QyxFQUFFLDhCQUE4Qiw4QkFBOEIsRUFBRSxvQkFBb0IseUNBQXlDLEVBQUUsOEJBQThCLDhCQUE4QixFQUFFLG9CQUFvQix5Q0FBeUMsRUFBRSw4QkFBOEIsOEJBQThCLEVBQUUsb0JBQW9CLHlDQUF5QyxFQUFFLDhCQUE4Qiw4QkFBOEIsRUFBRSxvQkFBb0IseUNBQXlDLEVBQUUsOEJBQThCLDhCQUE4QixFQUFFLG9CQUFvQix5Q0FBeUMsRUFBRSw4QkFBOEIsOEJBQThCLEVBQUUsYUFBYSx5Q0FBeUMsRUFBRSxrQkFBa0IsOEJBQThCLEVBQUUsdUJBQXVCLHlDQUF5QyxFQUFFLGlDQUFpQyw4QkFBOEIsRUFBRSx1QkFBdUIseUNBQXlDLEVBQUUsaUNBQWlDLDhCQUE4QixFQUFFLHVCQUF1Qix5Q0FBeUMsRUFBRSxpQ0FBaUMsOEJBQThCLEVBQUUsdUJBQXVCLHlDQUF5QyxFQUFFLGlDQUFpQyw4QkFBOEIsRUFBRSx1QkFBdUIseUNBQXlDLEVBQUUsaUNBQWlDLDhCQUE4QixFQUFFLHNCQUFzQix5Q0FBeUMsRUFBRSxnQ0FBZ0MsOEJBQThCLEVBQUUsc0JBQXNCLHlDQUF5QyxFQUFFLGdDQUFnQyw4QkFBOEIsRUFBRSxzQkFBc0IseUNBQXlDLEVBQUUsZ0NBQWdDLDhCQUE4QixFQUFFLHNCQUFzQix5Q0FBeUMsRUFBRSxnQ0FBZ0MsOEJBQThCLEVBQUUsc0JBQXNCLHlDQUF5QyxFQUFFLGdDQUFnQyw4QkFBOEIsRUFBRSxzQkFBc0IseUNBQXlDLEVBQUUsZ0NBQWdDLDhCQUE4QixFQUFFLHNCQUFzQix5Q0FBeUMsRUFBRSxnQ0FBZ0MsOEJBQThCLEVBQUUsc0JBQXNCLHNDQUFzQyxFQUFFLGdDQUFnQywyQkFBMkIsRUFBRSxrQkFBa0IseUNBQXlDLEVBQUUsdUJBQXVCLDhCQUE4QixFQUFFLDRCQUE0Qix5Q0FBeUMsRUFBRSxzQ0FBc0MsOEJBQThCLEVBQUUsNEJBQTRCLHlDQUF5QyxFQUFFLHNDQUFzQyw4QkFBOEIsRUFBRSw0QkFBNEIseUNBQXlDLEVBQUUsc0NBQXNDLDhCQUE4QixFQUFFLDRCQUE0Qix5Q0FBeUMsRUFBRSxzQ0FBc0MsOEJBQThCLEVBQUUsNEJBQTRCLHlDQUF5QyxFQUFFLHNDQUFzQyw4QkFBOEIsRUFBRSwyQkFBMkIseUNBQXlDLEVBQUUscUNBQXFDLDhCQUE4QixFQUFFLDJCQUEyQix5Q0FBeUMsRUFBRSxxQ0FBcUMsOEJBQThCLEVBQUUsMkJBQTJCLHlDQUF5QyxFQUFFLHFDQUFxQyw4QkFBOEIsRUFBRSwyQkFBMkIseUNBQXlDLEVBQUUscUNBQXFDLDhCQUE4QixFQUFFLDJCQUEyQix5Q0FBeUMsRUFBRSxxQ0FBcUMsOEJBQThCLEVBQUUsMkJBQTJCLHlDQUF5QyxFQUFFLHFDQUFxQyw4QkFBOEIsRUFBRSwyQkFBMkIseUNBQXlDLEVBQUUscUNBQXFDLDhCQUE4QixFQUFFLDJCQUEyQix5Q0FBeUMsRUFBRSxxQ0FBcUMsOEJBQThCLEVBQUUsYUFBYSx5Q0FBeUMsRUFBRSxrQkFBa0IsOEJBQThCLEVBQUUsdUJBQXVCLHlDQUF5QyxFQUFFLGlDQUFpQyw4QkFBOEIsRUFBRSx1QkFBdUIseUNBQXlDLEVBQUUsaUNBQWlDLDhCQUE4QixFQUFFLHVCQUF1Qix5Q0FBeUMsRUFBRSxpQ0FBaUMsOEJBQThCLEVBQUUsdUJBQXVCLHlDQUF5QyxFQUFFLGlDQUFpQyw4QkFBOEIsRUFBRSx1QkFBdUIseUNBQXlDLEVBQUUsaUNBQWlDLDhCQUE4QixFQUFFLHNCQUFzQix5Q0FBeUMsRUFBRSxnQ0FBZ0MsOEJBQThCLEVBQUUsc0JBQXNCLHlDQUF5QyxFQUFFLGdDQUFnQyw4QkFBOEIsRUFBRSxzQkFBc0IseUNBQXlDLEVBQUUsZ0NBQWdDLDhCQUE4QixFQUFFLHNCQUFzQix5Q0FBeUMsRUFBRSxnQ0FBZ0MsOEJBQThCLEVBQUUsc0JBQXNCLHlDQUF5QyxFQUFFLGdDQUFnQyw4QkFBOEIsRUFBRSxzQkFBc0IseUNBQXlDLEVBQUUsZ0NBQWdDLDhCQUE4QixFQUFFLHNCQUFzQix5Q0FBeUMsRUFBRSxnQ0FBZ0MsOEJBQThCLEVBQUUsc0JBQXNCLHlDQUF5QyxFQUFFLGdDQUFnQyw4QkFBOEIsRUFBRSxXQUFXLHlDQUF5QyxFQUFFLGdCQUFnQiw4QkFBOEIsRUFBRSxxQkFBcUIseUNBQXlDLEVBQUUsK0JBQStCLDhCQUE4QixFQUFFLHFCQUFxQix5Q0FBeUMsRUFBRSwrQkFBK0IsOEJBQThCLEVBQUUscUJBQXFCLHlDQUF5QyxFQUFFLCtCQUErQiw4QkFBOEIsRUFBRSxxQkFBcUIseUNBQXlDLEVBQUUsK0JBQStCLDhCQUE4QixFQUFFLHFCQUFxQix5Q0FBeUMsRUFBRSwrQkFBK0IsOEJBQThCLEVBQUUsb0JBQW9CLHlDQUF5QyxFQUFFLDhCQUE4Qiw4QkFBOEIsRUFBRSxvQkFBb0IseUNBQXlDLEVBQUUsOEJBQThCLDhCQUE4QixFQUFFLG9CQUFvQix5Q0FBeUMsRUFBRSw4QkFBOEIsOEJBQThCLEVBQUUsb0JBQW9CLHlDQUF5QyxFQUFFLDhCQUE4Qiw4QkFBOEIsRUFBRSxvQkFBb0IseUNBQXlDLEVBQUUsOEJBQThCLDhCQUE4QixFQUFFLG9CQUFvQix5Q0FBeUMsRUFBRSw4QkFBOEIsOEJBQThCLEVBQUUsb0JBQW9CLHlDQUF5QyxFQUFFLDhCQUE4Qiw4QkFBOEIsRUFBRSxvQkFBb0IseUNBQXlDLEVBQUUsOEJBQThCLDhCQUE4QixFQUFFLGlCQUFpQix5Q0FBeUMsRUFBRSxzQkFBc0IsOEJBQThCLEVBQUUsMkJBQTJCLHlDQUF5QyxFQUFFLHFDQUFxQyw4QkFBOEIsRUFBRSwyQkFBMkIseUNBQXlDLEVBQUUscUNBQXFDLDhCQUE4QixFQUFFLDJCQUEyQix5Q0FBeUMsRUFBRSxxQ0FBcUMsOEJBQThCLEVBQUUsMkJBQTJCLHlDQUF5QyxFQUFFLHFDQUFxQyw4QkFBOEIsRUFBRSwyQkFBMkIseUNBQXlDLEVBQUUscUNBQXFDLDhCQUE4QixFQUFFLDBCQUEwQix5Q0FBeUMsRUFBRSxvQ0FBb0MsOEJBQThCLEVBQUUsMEJBQTBCLHlDQUF5QyxFQUFFLG9DQUFvQyw4QkFBOEIsRUFBRSwwQkFBMEIseUNBQXlDLEVBQUUsb0NBQW9DLDhCQUE4QixFQUFFLDBCQUEwQix5Q0FBeUMsRUFBRSxvQ0FBb0MsOEJBQThCLEVBQUUsMEJBQTBCLHlDQUF5QyxFQUFFLG9DQUFvQyw4QkFBOEIsRUFBRSwwQkFBMEIseUNBQXlDLEVBQUUsb0NBQW9DLDhCQUE4QixFQUFFLDBCQUEwQix5Q0FBeUMsRUFBRSxvQ0FBb0MsOEJBQThCLEVBQUUsMEJBQTBCLHlDQUF5QyxFQUFFLG9DQUFvQyw4QkFBOEIsRUFBRSxXQUFXLHlDQUF5QyxFQUFFLGdCQUFnQiw4QkFBOEIsRUFBRSxxQkFBcUIseUNBQXlDLEVBQUUsK0JBQStCLDhCQUE4QixFQUFFLHFCQUFxQix5Q0FBeUMsRUFBRSwrQkFBK0IsOEJBQThCLEVBQUUscUJBQXFCLHlDQUF5QyxFQUFFLCtCQUErQiw4QkFBOEIsRUFBRSxxQkFBcUIseUNBQXlDLEVBQUUsK0JBQStCLDhCQUE4QixFQUFFLHFCQUFxQix5Q0FBeUMsRUFBRSwrQkFBK0IsOEJBQThCLEVBQUUsb0JBQW9CLHlDQUF5QyxFQUFFLDhCQUE4Qiw4QkFBOEIsRUFBRSxvQkFBb0IseUNBQXlDLEVBQUUsOEJBQThCLDhCQUE4QixFQUFFLG9CQUFvQix5Q0FBeUMsRUFBRSw4QkFBOEIsOEJBQThCLEVBQUUsb0JBQW9CLHlDQUF5QyxFQUFFLDhCQUE4Qiw4QkFBOEIsRUFBRSxvQkFBb0IseUNBQXlDLEVBQUUsOEJBQThCLDhCQUE4QixFQUFFLG9CQUFvQix5Q0FBeUMsRUFBRSw4QkFBOEIsOEJBQThCLEVBQUUsb0JBQW9CLHlDQUF5QyxFQUFFLDhCQUE4Qiw4QkFBOEIsRUFBRSxvQkFBb0IseUNBQXlDLEVBQUUsOEJBQThCLDhCQUE4QixFQUFFLFdBQVcseUNBQXlDLEVBQUUsZ0JBQWdCLDhCQUE4QixFQUFFLHFCQUFxQix5Q0FBeUMsRUFBRSwrQkFBK0IsOEJBQThCLEVBQUUscUJBQXFCLHlDQUF5QyxFQUFFLCtCQUErQiw4QkFBOEIsRUFBRSxxQkFBcUIseUNBQXlDLEVBQUUsK0JBQStCLDhCQUE4QixFQUFFLHFCQUFxQix5Q0FBeUMsRUFBRSwrQkFBK0IsOEJBQThCLEVBQUUscUJBQXFCLHlDQUF5QyxFQUFFLCtCQUErQiw4QkFBOEIsRUFBRSxvQkFBb0IseUNBQXlDLEVBQUUsOEJBQThCLDhCQUE4QixFQUFFLG9CQUFvQix5Q0FBeUMsRUFBRSw4QkFBOEIsOEJBQThCLEVBQUUsb0JBQW9CLHlDQUF5QyxFQUFFLDhCQUE4Qiw4QkFBOEIsRUFBRSxvQkFBb0IseUNBQXlDLEVBQUUsOEJBQThCLDhCQUE4QixFQUFFLG9CQUFvQix5Q0FBeUMsRUFBRSw4QkFBOEIsOEJBQThCLEVBQUUsb0JBQW9CLHlDQUF5QyxFQUFFLDhCQUE4Qiw4QkFBOEIsRUFBRSxvQkFBb0IseUNBQXlDLEVBQUUsOEJBQThCLDhCQUE4QixFQUFFLG9CQUFvQix5Q0FBeUMsRUFBRSw4QkFBOEIsOEJBQThCLEVB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LGlCQUFpQix3QkFBd0IsaUJBQWlCLGtCQUFrQixFQUFFLGtCQUFrQiw0QkFBNEIsd0JBQXdCLGlCQUFpQixrQkFBa0IsRUFBRSxrQkFBa0IsNEJBQTRCLHdCQUF3QixpQkFBaUIsa0JBQWtCLEVBQUUsa0JBQWtCLGlCQUFpQix3QkFBd0IsaUJBQWlCLGtCQUFrQixFQUFFLG1CQUFtQiw0QkFBNEIsd0JBQXdCLGlCQUFpQixrQkFBa0IsRUFBRSxtQkFBbUIsNEJBQTRCLHdCQUF3QixpQkFBaUIsa0JBQWtCLEVBQUUsbUJBQW1CLGtCQUFrQix3QkFBd0IsaUJBQWlCLGtCQUFrQixFQUFFLHlCQUF5QixpQ0FBaUMsRUFBRSx1QkFBdUIsMkJBQTJCLEVBQUUsdUJBQXVCLDBCQUEwQixFQUFFLHlCQUF5QixrQ0FBa0MsRUFBRSx1QkFBdUIsNEJBQTRCLEVBQUUsdUJBQXVCLDJCQUEyQixFQUFFLHlCQUF5Qix1QkFBdUIsRUFBRSx1QkFBdUIsaUJBQWlCLEVBQUUsdUJBQXVCLGdCQUFnQixFQUFFLHlCQUF5QixrQ0FBa0MsRUFBRSx1QkFBdUIsNEJBQTRCLEVBQUUsdUJBQXVCLDJCQUEyQixFQUFFLHlCQUF5QixrQ0FBa0MsRUFBRSx1QkFBdUIsNEJBQTRCLEVBQUUsdUJBQXVCLDJCQUEyQixFQUFFLHlCQUF5Qix1QkFBdUIsRUFBRSx1QkFBdUIsaUJBQWlCLEVBQUUsdUJBQXVCLGdCQUFnQixFQUFFLHlCQUF5QixrQ0FBa0MsRUFBRSx1QkFBdUIsNEJBQTRCLEVBQUUsdUJBQXVCLDJCQUEyQixFQUFFLHlCQUF5QixrQ0FBa0MsRUFBRSx1QkFBdUIsNEJBQTRCLEVBQUUsdUJBQXVCLDJCQUEyQixFQUFFLHlCQUF5Qix1QkFBdUIsRUFBRSx1QkFBdUIsaUJBQWlCLEVBQUUsdUJBQXVCLGdCQUFnQixFQUFFLDBCQUEwQixrQ0FBa0MsRUFBRSx3QkFBd0IsNEJBQTRCLEVBQUUsd0JBQXdCLDJCQUEyQixFQUFFLDBCQUEwQixrQ0FBa0MsRUFBRSx3QkFBd0IsNEJBQTRCLEVBQUUsd0JBQXdCLDJCQUEyQixFQUFFLDBCQUEwQix3QkFBd0IsRUFBRSx3QkFBd0Isa0JBQWtCLEVBQUUsd0JBQXdCLGlCQUFpQixFQUFFLEVBQUUsK0NBQStDLGtCQUFrQiwyQkFBMkIsd0JBQXdCLGlCQUFpQixrQkFBa0IsRUFBRSxrQkFBa0IsNEJBQTRCLHdCQUF3QixpQkFBaUIsa0JBQWtCLEVBQUUsa0JBQWtCLGlCQUFpQix3QkFBd0IsaUJBQWlCLGtCQUFrQixFQUFFLGtCQUFrQiw0QkFBNEIsd0JBQXdCLGlCQUFpQixrQkFBa0IsRUFBRSxrQkFBa0IsNEJBQTRCLHdCQUF3QixpQkFBaUIsa0JBQWtCLEVBQUUsa0JBQWtCLGlCQUFpQix3QkFBd0IsaUJBQWlCLGtCQUFrQixFQUFFLGtCQUFrQiw0QkFBNEIsd0JBQXdCLGlCQUFpQixrQkFBa0IsRUFBRSxrQkFBa0IsNEJBQTRCLHdCQUF3QixpQkFBaUIsa0JBQWtCLEVBQUUsa0JBQWtCLGlCQUFpQix3QkFBd0IsaUJBQWlCLGtCQUFrQixFQUFFLG1CQUFtQiw0QkFBNEIsd0JBQXdCLGlCQUFpQixrQkFBa0IsRUFBRSxtQkFBbUIsNEJBQTRCLHdCQUF3QixpQkFBaUIsa0JBQWtCLEVBQUUsbUJBQW1CLGtCQUFrQix3QkFBd0IsaUJBQWlCLGtCQUFrQixFQUFFLHlCQUF5QixpQ0FBaUMsRUFBRSx1QkFBdUIsMkJBQTJCLEVBQUUsdUJBQXVCLDBCQUEwQixFQUFFLHlCQUF5QixrQ0FBa0MsRUFBRSx1QkFBdUIsNEJBQTRCLEVBQUUsdUJBQXVCLDJCQUEyQixFQUFFLHlCQUF5Qix1QkFBdUIsRUFBRSx1QkFBdUIsaUJBQWlCLEVBQUUsdUJBQXVCLGdCQUFnQixFQUFFLHlCQUF5QixrQ0FBa0MsRUFBRSx1QkFBdUIsNEJBQTRCLEVBQUUsdUJBQXVCLDJCQUEyQixFQUFFLHlCQUF5QixrQ0FBa0MsRUFBRSx1QkFBdUIsNEJBQTRCLEVBQUUsdUJBQXVCLDJCQUEyQixFQUFFLHlCQUF5Qix1QkFBdUIsRUFBRSx1QkFBdUIsaUJBQWlCLEVBQUUsdUJBQXVCLGdCQUFnQixFQUFFLHlCQUF5Qixr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Ozs7Ozs7QUNwQkE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBOEU7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxnQ0FBZ0MsVUFBVSxFQUFFO0FBQzVDLEM7Ozs7OztBQ3BCQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUFvRTtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLGdDQUFnQyxVQUFVLEVBQUU7QUFDNUMsQyIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDE4KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCA2MjljOWNkZGE5NWI0NTE2ZTA0ZiIsImV4cG9ydCAqIGZyb20gJy4vdXRpbHMnO1xyXG5leHBvcnQgKiBmcm9tICcuLi90ZXN0L2hlbHBlcnMvdGVzdC1jb21wb25lbnQnO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC5qcyIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcblx0dmFyIGxpc3QgPSBbXTtcblxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0XHR2YXIgcmVzdWx0ID0gW107XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gdGhpc1tpXTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmVzdWx0LnB1c2goXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBpdGVtWzFdICsgXCJ9XCIpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmVzdWx0LnB1c2goaXRlbVsxXSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanMiLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xudmFyIHN0eWxlc0luRG9tID0ge30sXG5cdG1lbW9pemUgPSBmdW5jdGlvbihmbikge1xuXHRcdHZhciBtZW1vO1xuXHRcdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0cmV0dXJuIG1lbW87XG5cdFx0fTtcblx0fSxcblx0aXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIC9tc2llIFs2LTldXFxiLy50ZXN0KHNlbGYubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKTtcblx0fSksXG5cdGdldEhlYWRFbGVtZW50ID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xuXHR9KSxcblx0c2luZ2xldG9uRWxlbWVudCA9IG51bGwsXG5cdHNpbmdsZXRvbkNvdW50ZXIgPSAwLFxuXHRzdHlsZUVsZW1lbnRzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiA9PT0gXCJ1bmRlZmluZWRcIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIDxoZWFkPi5cblx0aWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcInVuZGVmaW5lZFwiKSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QpO1xuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspXG5cdFx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oKTtcblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyhsaXN0KSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKVxuXHRcdFx0c3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlXG5cdFx0XHRuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlRWxlbWVudCkge1xuXHR2YXIgaGVhZCA9IGdldEhlYWRFbGVtZW50KCk7XG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wW3N0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0aGVhZC5pbnNlcnRCZWZvcmUoc3R5bGVFbGVtZW50LCBoZWFkLmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZihsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0aGVhZC5pbnNlcnRCZWZvcmUoc3R5bGVFbGVtZW50LCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KTtcblx0XHR9XG5cdFx0c3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AucHVzaChzdHlsZUVsZW1lbnQpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHRoZWFkLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudCk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcuIE11c3QgYmUgJ3RvcCcgb3IgJ2JvdHRvbScuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcblx0c3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcblx0dmFyIGlkeCA9IHN0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGVFbGVtZW50KTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZUVsZW1lbnRzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuXHR2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXHRzdHlsZUVsZW1lbnQudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlRWxlbWVudCk7XG5cdHJldHVybiBzdHlsZUVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpIHtcblx0dmFyIGxpbmtFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cdGxpbmtFbGVtZW50LnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGlua0VsZW1lbnQpO1xuXHRyZXR1cm4gbGlua0VsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVFbGVtZW50LCB1cGRhdGUsIHJlbW92ZTtcblxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcblx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcblx0XHRzdHlsZUVsZW1lbnQgPSBzaW5nbGV0b25FbGVtZW50IHx8IChzaW5nbGV0b25FbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCBmYWxzZSk7XG5cdFx0cmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cdH0gZWxzZSBpZihvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdHN0eWxlRWxlbWVudCA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZUVsZW1lbnQpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG5cdFx0XHRpZihzdHlsZUVsZW1lbnQuaHJlZilcblx0XHRcdFx0VVJMLnJldm9rZU9iamVjdFVSTChzdHlsZUVsZW1lbnQuaHJlZik7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRzdHlsZUVsZW1lbnQgPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuXHRcdGlmKG5ld09iaikge1xuXHRcdFx0aWYobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVtb3ZlKCk7XG5cdFx0fVxuXHR9O1xufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuXHR2YXIgdGV4dFN0b3JlID0gW107XG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcblx0XHR0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlRWxlbWVudCwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuXHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGVFbGVtZW50LmNoaWxkTm9kZXM7XG5cdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGVFbGVtZW50Lmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChjc3NOb2RlKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZUVsZW1lbnQsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuXG5cdGlmKG1lZGlhKSB7XG5cdFx0c3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuXHR9IGVsc2Uge1xuXHRcdHdoaWxlKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuXHRcdH1cblx0XHRzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTGluayhsaW5rRWxlbWVudCwgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuXHRpZihzb3VyY2VNYXApIHtcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuXHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcblx0fVxuXG5cdHZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogXCJ0ZXh0L2Nzc1wiIH0pO1xuXG5cdHZhciBvbGRTcmMgPSBsaW5rRWxlbWVudC5ocmVmO1xuXG5cdGxpbmtFbGVtZW50LmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuXG5cdGlmKG9sZFNyYylcblx0XHRVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc3R5bGUtbG9hZGVyL2FkZFN0eWxlcy5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbi8qKlxuICogVGhpcyBpcyBhIGhlbHBlciBmdW5jdGlvbiBmb3IgZ2V0dGluZyB2YWx1ZXMgZnJvbSBwYXJhbWV0ZXIvb3B0aW9uc1xuICogb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0gYXJncyBUaGUgb2JqZWN0IHdlIGFyZSBleHRyYWN0aW5nIHZhbHVlcyBmcm9tXG4gKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgd2UgYXJlIGdldHRpbmcuXG4gKiBAcGFyYW0gZGVmYXVsdFZhbHVlIEFuIG9wdGlvbmFsIHZhbHVlIHRvIHJldHVybiBpZiB0aGUgcHJvcGVydHkgaXMgbWlzc2luZ1xuICogZnJvbSB0aGUgb2JqZWN0LiBJZiB0aGlzIGlzIG5vdCBzcGVjaWZpZWQgYW5kIHRoZSBwcm9wZXJ0eSBpcyBtaXNzaW5nLCBhblxuICogZXJyb3Igd2lsbCBiZSB0aHJvd24uXG4gKi9cbmZ1bmN0aW9uIGdldEFyZyhhQXJncywgYU5hbWUsIGFEZWZhdWx0VmFsdWUpIHtcbiAgaWYgKGFOYW1lIGluIGFBcmdzKSB7XG4gICAgcmV0dXJuIGFBcmdzW2FOYW1lXTtcbiAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgcmV0dXJuIGFEZWZhdWx0VmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBhTmFtZSArICdcIiBpcyBhIHJlcXVpcmVkIGFyZ3VtZW50LicpO1xuICB9XG59XG5leHBvcnRzLmdldEFyZyA9IGdldEFyZztcblxudmFyIHVybFJlZ2V4cCA9IC9eKD86KFtcXHcrXFwtLl0rKTopP1xcL1xcLyg/OihcXHcrOlxcdyspQCk/KFtcXHcuXSopKD86OihcXGQrKSk/KFxcUyopJC87XG52YXIgZGF0YVVybFJlZ2V4cCA9IC9eZGF0YTouK1xcLC4rJC87XG5cbmZ1bmN0aW9uIHVybFBhcnNlKGFVcmwpIHtcbiAgdmFyIG1hdGNoID0gYVVybC5tYXRjaCh1cmxSZWdleHApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzY2hlbWU6IG1hdGNoWzFdLFxuICAgIGF1dGg6IG1hdGNoWzJdLFxuICAgIGhvc3Q6IG1hdGNoWzNdLFxuICAgIHBvcnQ6IG1hdGNoWzRdLFxuICAgIHBhdGg6IG1hdGNoWzVdXG4gIH07XG59XG5leHBvcnRzLnVybFBhcnNlID0gdXJsUGFyc2U7XG5cbmZ1bmN0aW9uIHVybEdlbmVyYXRlKGFQYXJzZWRVcmwpIHtcbiAgdmFyIHVybCA9ICcnO1xuICBpZiAoYVBhcnNlZFVybC5zY2hlbWUpIHtcbiAgICB1cmwgKz0gYVBhcnNlZFVybC5zY2hlbWUgKyAnOic7XG4gIH1cbiAgdXJsICs9ICcvLyc7XG4gIGlmIChhUGFyc2VkVXJsLmF1dGgpIHtcbiAgICB1cmwgKz0gYVBhcnNlZFVybC5hdXRoICsgJ0AnO1xuICB9XG4gIGlmIChhUGFyc2VkVXJsLmhvc3QpIHtcbiAgICB1cmwgKz0gYVBhcnNlZFVybC5ob3N0O1xuICB9XG4gIGlmIChhUGFyc2VkVXJsLnBvcnQpIHtcbiAgICB1cmwgKz0gXCI6XCIgKyBhUGFyc2VkVXJsLnBvcnRcbiAgfVxuICBpZiAoYVBhcnNlZFVybC5wYXRoKSB7XG4gICAgdXJsICs9IGFQYXJzZWRVcmwucGF0aDtcbiAgfVxuICByZXR1cm4gdXJsO1xufVxuZXhwb3J0cy51cmxHZW5lcmF0ZSA9IHVybEdlbmVyYXRlO1xuXG4vKipcbiAqIE5vcm1hbGl6ZXMgYSBwYXRoLCBvciB0aGUgcGF0aCBwb3J0aW9uIG9mIGEgVVJMOlxuICpcbiAqIC0gUmVwbGFjZXMgY29uc2VjdXRpdmUgc2xhc2hlcyB3aXRoIG9uZSBzbGFzaC5cbiAqIC0gUmVtb3ZlcyB1bm5lY2Vzc2FyeSAnLicgcGFydHMuXG4gKiAtIFJlbW92ZXMgdW5uZWNlc3NhcnkgJzxkaXI+Ly4uJyBwYXJ0cy5cbiAqXG4gKiBCYXNlZCBvbiBjb2RlIGluIHRoZSBOb2RlLmpzICdwYXRoJyBjb3JlIG1vZHVsZS5cbiAqXG4gKiBAcGFyYW0gYVBhdGggVGhlIHBhdGggb3IgdXJsIHRvIG5vcm1hbGl6ZS5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplKGFQYXRoKSB7XG4gIHZhciBwYXRoID0gYVBhdGg7XG4gIHZhciB1cmwgPSB1cmxQYXJzZShhUGF0aCk7XG4gIGlmICh1cmwpIHtcbiAgICBpZiAoIXVybC5wYXRoKSB7XG4gICAgICByZXR1cm4gYVBhdGg7XG4gICAgfVxuICAgIHBhdGggPSB1cmwucGF0aDtcbiAgfVxuICB2YXIgaXNBYnNvbHV0ZSA9IGV4cG9ydHMuaXNBYnNvbHV0ZShwYXRoKTtcblxuICB2YXIgcGFydHMgPSBwYXRoLnNwbGl0KC9cXC8rLyk7XG4gIGZvciAodmFyIHBhcnQsIHVwID0gMCwgaSA9IHBhcnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgcGFydCA9IHBhcnRzW2ldO1xuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCA+IDApIHtcbiAgICAgIGlmIChwYXJ0ID09PSAnJykge1xuICAgICAgICAvLyBUaGUgZmlyc3QgcGFydCBpcyBibGFuayBpZiB0aGUgcGF0aCBpcyBhYnNvbHV0ZS4gVHJ5aW5nIHRvIGdvXG4gICAgICAgIC8vIGFib3ZlIHRoZSByb290IGlzIGEgbm8tb3AuIFRoZXJlZm9yZSB3ZSBjYW4gcmVtb3ZlIGFsbCAnLi4nIHBhcnRzXG4gICAgICAgIC8vIGRpcmVjdGx5IGFmdGVyIHRoZSByb290LlxuICAgICAgICBwYXJ0cy5zcGxpY2UoaSArIDEsIHVwKTtcbiAgICAgICAgdXAgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFydHMuc3BsaWNlKGksIDIpO1xuICAgICAgICB1cC0tO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBwYXRoID0gcGFydHMuam9pbignLycpO1xuXG4gIGlmIChwYXRoID09PSAnJykge1xuICAgIHBhdGggPSBpc0Fic29sdXRlID8gJy8nIDogJy4nO1xuICB9XG5cbiAgaWYgKHVybCkge1xuICAgIHVybC5wYXRoID0gcGF0aDtcbiAgICByZXR1cm4gdXJsR2VuZXJhdGUodXJsKTtcbiAgfVxuICByZXR1cm4gcGF0aDtcbn1cbmV4cG9ydHMubm9ybWFsaXplID0gbm9ybWFsaXplO1xuXG4vKipcbiAqIEpvaW5zIHR3byBwYXRocy9VUkxzLlxuICpcbiAqIEBwYXJhbSBhUm9vdCBUaGUgcm9vdCBwYXRoIG9yIFVSTC5cbiAqIEBwYXJhbSBhUGF0aCBUaGUgcGF0aCBvciBVUkwgdG8gYmUgam9pbmVkIHdpdGggdGhlIHJvb3QuXG4gKlxuICogLSBJZiBhUGF0aCBpcyBhIFVSTCBvciBhIGRhdGEgVVJJLCBhUGF0aCBpcyByZXR1cm5lZCwgdW5sZXNzIGFQYXRoIGlzIGFcbiAqICAgc2NoZW1lLXJlbGF0aXZlIFVSTDogVGhlbiB0aGUgc2NoZW1lIG9mIGFSb290LCBpZiBhbnksIGlzIHByZXBlbmRlZFxuICogICBmaXJzdC5cbiAqIC0gT3RoZXJ3aXNlIGFQYXRoIGlzIGEgcGF0aC4gSWYgYVJvb3QgaXMgYSBVUkwsIHRoZW4gaXRzIHBhdGggcG9ydGlvblxuICogICBpcyB1cGRhdGVkIHdpdGggdGhlIHJlc3VsdCBhbmQgYVJvb3QgaXMgcmV0dXJuZWQuIE90aGVyd2lzZSB0aGUgcmVzdWx0XG4gKiAgIGlzIHJldHVybmVkLlxuICogICAtIElmIGFQYXRoIGlzIGFic29sdXRlLCB0aGUgcmVzdWx0IGlzIGFQYXRoLlxuICogICAtIE90aGVyd2lzZSB0aGUgdHdvIHBhdGhzIGFyZSBqb2luZWQgd2l0aCBhIHNsYXNoLlxuICogLSBKb2luaW5nIGZvciBleGFtcGxlICdodHRwOi8vJyBhbmQgJ3d3dy5leGFtcGxlLmNvbScgaXMgYWxzbyBzdXBwb3J0ZWQuXG4gKi9cbmZ1bmN0aW9uIGpvaW4oYVJvb3QsIGFQYXRoKSB7XG4gIGlmIChhUm9vdCA9PT0gXCJcIikge1xuICAgIGFSb290ID0gXCIuXCI7XG4gIH1cbiAgaWYgKGFQYXRoID09PSBcIlwiKSB7XG4gICAgYVBhdGggPSBcIi5cIjtcbiAgfVxuICB2YXIgYVBhdGhVcmwgPSB1cmxQYXJzZShhUGF0aCk7XG4gIHZhciBhUm9vdFVybCA9IHVybFBhcnNlKGFSb290KTtcbiAgaWYgKGFSb290VXJsKSB7XG4gICAgYVJvb3QgPSBhUm9vdFVybC5wYXRoIHx8ICcvJztcbiAgfVxuXG4gIC8vIGBqb2luKGZvbywgJy8vd3d3LmV4YW1wbGUub3JnJylgXG4gIGlmIChhUGF0aFVybCAmJiAhYVBhdGhVcmwuc2NoZW1lKSB7XG4gICAgaWYgKGFSb290VXJsKSB7XG4gICAgICBhUGF0aFVybC5zY2hlbWUgPSBhUm9vdFVybC5zY2hlbWU7XG4gICAgfVxuICAgIHJldHVybiB1cmxHZW5lcmF0ZShhUGF0aFVybCk7XG4gIH1cblxuICBpZiAoYVBhdGhVcmwgfHwgYVBhdGgubWF0Y2goZGF0YVVybFJlZ2V4cCkpIHtcbiAgICByZXR1cm4gYVBhdGg7XG4gIH1cblxuICAvLyBgam9pbignaHR0cDovLycsICd3d3cuZXhhbXBsZS5jb20nKWBcbiAgaWYgKGFSb290VXJsICYmICFhUm9vdFVybC5ob3N0ICYmICFhUm9vdFVybC5wYXRoKSB7XG4gICAgYVJvb3RVcmwuaG9zdCA9IGFQYXRoO1xuICAgIHJldHVybiB1cmxHZW5lcmF0ZShhUm9vdFVybCk7XG4gIH1cblxuICB2YXIgam9pbmVkID0gYVBhdGguY2hhckF0KDApID09PSAnLydcbiAgICA/IGFQYXRoXG4gICAgOiBub3JtYWxpemUoYVJvb3QucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyBhUGF0aCk7XG5cbiAgaWYgKGFSb290VXJsKSB7XG4gICAgYVJvb3RVcmwucGF0aCA9IGpvaW5lZDtcbiAgICByZXR1cm4gdXJsR2VuZXJhdGUoYVJvb3RVcmwpO1xuICB9XG4gIHJldHVybiBqb2luZWQ7XG59XG5leHBvcnRzLmpvaW4gPSBqb2luO1xuXG5leHBvcnRzLmlzQWJzb2x1dGUgPSBmdW5jdGlvbiAoYVBhdGgpIHtcbiAgcmV0dXJuIGFQYXRoLmNoYXJBdCgwKSA9PT0gJy8nIHx8ICEhYVBhdGgubWF0Y2godXJsUmVnZXhwKTtcbn07XG5cbi8qKlxuICogTWFrZSBhIHBhdGggcmVsYXRpdmUgdG8gYSBVUkwgb3IgYW5vdGhlciBwYXRoLlxuICpcbiAqIEBwYXJhbSBhUm9vdCBUaGUgcm9vdCBwYXRoIG9yIFVSTC5cbiAqIEBwYXJhbSBhUGF0aCBUaGUgcGF0aCBvciBVUkwgdG8gYmUgbWFkZSByZWxhdGl2ZSB0byBhUm9vdC5cbiAqL1xuZnVuY3Rpb24gcmVsYXRpdmUoYVJvb3QsIGFQYXRoKSB7XG4gIGlmIChhUm9vdCA9PT0gXCJcIikge1xuICAgIGFSb290ID0gXCIuXCI7XG4gIH1cblxuICBhUm9vdCA9IGFSb290LnJlcGxhY2UoL1xcLyQvLCAnJyk7XG5cbiAgLy8gSXQgaXMgcG9zc2libGUgZm9yIHRoZSBwYXRoIHRvIGJlIGFib3ZlIHRoZSByb290LiBJbiB0aGlzIGNhc2UsIHNpbXBseVxuICAvLyBjaGVja2luZyB3aGV0aGVyIHRoZSByb290IGlzIGEgcHJlZml4IG9mIHRoZSBwYXRoIHdvbid0IHdvcmsuIEluc3RlYWQsIHdlXG4gIC8vIG5lZWQgdG8gcmVtb3ZlIGNvbXBvbmVudHMgZnJvbSB0aGUgcm9vdCBvbmUgYnkgb25lLCB1bnRpbCBlaXRoZXIgd2UgZmluZFxuICAvLyBhIHByZWZpeCB0aGF0IGZpdHMsIG9yIHdlIHJ1biBvdXQgb2YgY29tcG9uZW50cyB0byByZW1vdmUuXG4gIHZhciBsZXZlbCA9IDA7XG4gIHdoaWxlIChhUGF0aC5pbmRleE9mKGFSb290ICsgJy8nKSAhPT0gMCkge1xuICAgIHZhciBpbmRleCA9IGFSb290Lmxhc3RJbmRleE9mKFwiL1wiKTtcbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICByZXR1cm4gYVBhdGg7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIG9ubHkgcGFydCBvZiB0aGUgcm9vdCB0aGF0IGlzIGxlZnQgaXMgdGhlIHNjaGVtZSAoaS5lLiBodHRwOi8vLFxuICAgIC8vIGZpbGU6Ly8vLCBldGMuKSwgb25lIG9yIG1vcmUgc2xhc2hlcyAoLyksIG9yIHNpbXBseSBub3RoaW5nIGF0IGFsbCwgd2VcbiAgICAvLyBoYXZlIGV4aGF1c3RlZCBhbGwgY29tcG9uZW50cywgc28gdGhlIHBhdGggaXMgbm90IHJlbGF0aXZlIHRvIHRoZSByb290LlxuICAgIGFSb290ID0gYVJvb3Quc2xpY2UoMCwgaW5kZXgpO1xuICAgIGlmIChhUm9vdC5tYXRjaCgvXihbXlxcL10rOlxcLyk/XFwvKiQvKSkge1xuICAgICAgcmV0dXJuIGFQYXRoO1xuICAgIH1cblxuICAgICsrbGV2ZWw7XG4gIH1cblxuICAvLyBNYWtlIHN1cmUgd2UgYWRkIGEgXCIuLi9cIiBmb3IgZWFjaCBjb21wb25lbnQgd2UgcmVtb3ZlZCBmcm9tIHRoZSByb290LlxuICByZXR1cm4gQXJyYXkobGV2ZWwgKyAxKS5qb2luKFwiLi4vXCIpICsgYVBhdGguc3Vic3RyKGFSb290Lmxlbmd0aCArIDEpO1xufVxuZXhwb3J0cy5yZWxhdGl2ZSA9IHJlbGF0aXZlO1xuXG52YXIgc3VwcG9ydHNOdWxsUHJvdG8gPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgb2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuICEoJ19fcHJvdG9fXycgaW4gb2JqKTtcbn0oKSk7XG5cbmZ1bmN0aW9uIGlkZW50aXR5IChzKSB7XG4gIHJldHVybiBzO1xufVxuXG4vKipcbiAqIEJlY2F1c2UgYmVoYXZpb3IgZ29lcyB3YWNreSB3aGVuIHlvdSBzZXQgYF9fcHJvdG9fX2Agb24gb2JqZWN0cywgd2VcbiAqIGhhdmUgdG8gcHJlZml4IGFsbCB0aGUgc3RyaW5ncyBpbiBvdXIgc2V0IHdpdGggYW4gYXJiaXRyYXJ5IGNoYXJhY3Rlci5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvc291cmNlLW1hcC9wdWxsLzMxIGFuZFxuICogaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvc291cmNlLW1hcC9pc3N1ZXMvMzBcbiAqXG4gKiBAcGFyYW0gU3RyaW5nIGFTdHJcbiAqL1xuZnVuY3Rpb24gdG9TZXRTdHJpbmcoYVN0cikge1xuICBpZiAoaXNQcm90b1N0cmluZyhhU3RyKSkge1xuICAgIHJldHVybiAnJCcgKyBhU3RyO1xuICB9XG5cbiAgcmV0dXJuIGFTdHI7XG59XG5leHBvcnRzLnRvU2V0U3RyaW5nID0gc3VwcG9ydHNOdWxsUHJvdG8gPyBpZGVudGl0eSA6IHRvU2V0U3RyaW5nO1xuXG5mdW5jdGlvbiBmcm9tU2V0U3RyaW5nKGFTdHIpIHtcbiAgaWYgKGlzUHJvdG9TdHJpbmcoYVN0cikpIHtcbiAgICByZXR1cm4gYVN0ci5zbGljZSgxKTtcbiAgfVxuXG4gIHJldHVybiBhU3RyO1xufVxuZXhwb3J0cy5mcm9tU2V0U3RyaW5nID0gc3VwcG9ydHNOdWxsUHJvdG8gPyBpZGVudGl0eSA6IGZyb21TZXRTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzUHJvdG9TdHJpbmcocykge1xuICBpZiAoIXMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gcy5sZW5ndGg7XG5cbiAgaWYgKGxlbmd0aCA8IDkgLyogXCJfX3Byb3RvX19cIi5sZW5ndGggKi8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAocy5jaGFyQ29kZUF0KGxlbmd0aCAtIDEpICE9PSA5NSAgLyogJ18nICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gMikgIT09IDk1ICAvKiAnXycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSAzKSAhPT0gMTExIC8qICdvJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDQpICE9PSAxMTYgLyogJ3QnICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gNSkgIT09IDExMSAvKiAnbycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA2KSAhPT0gMTE0IC8qICdyJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDcpICE9PSAxMTIgLyogJ3AnICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gOCkgIT09IDk1ICAvKiAnXycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA5KSAhPT0gOTUgIC8qICdfJyAqLykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSBsZW5ndGggLSAxMDsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAocy5jaGFyQ29kZUF0KGkpICE9PSAzNiAvKiAnJCcgKi8pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBDb21wYXJhdG9yIGJldHdlZW4gdHdvIG1hcHBpbmdzIHdoZXJlIHRoZSBvcmlnaW5hbCBwb3NpdGlvbnMgYXJlIGNvbXBhcmVkLlxuICpcbiAqIE9wdGlvbmFsbHkgcGFzcyBpbiBgdHJ1ZWAgYXMgYG9ubHlDb21wYXJlR2VuZXJhdGVkYCB0byBjb25zaWRlciB0d29cbiAqIG1hcHBpbmdzIHdpdGggdGhlIHNhbWUgb3JpZ2luYWwgc291cmNlL2xpbmUvY29sdW1uLCBidXQgZGlmZmVyZW50IGdlbmVyYXRlZFxuICogbGluZSBhbmQgY29sdW1uIHRoZSBzYW1lLiBVc2VmdWwgd2hlbiBzZWFyY2hpbmcgZm9yIGEgbWFwcGluZyB3aXRoIGFcbiAqIHN0dWJiZWQgb3V0IG1hcHBpbmcuXG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zKG1hcHBpbmdBLCBtYXBwaW5nQiwgb25seUNvbXBhcmVPcmlnaW5hbCkge1xuICB2YXIgY21wID0gbWFwcGluZ0Euc291cmNlIC0gbWFwcGluZ0Iuc291cmNlO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsTGluZSAtIG1hcHBpbmdCLm9yaWdpbmFsTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbENvbHVtbiAtIG1hcHBpbmdCLm9yaWdpbmFsQ29sdW1uO1xuICBpZiAoY21wICE9PSAwIHx8IG9ubHlDb21wYXJlT3JpZ2luYWwpIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkQ29sdW1uIC0gbWFwcGluZ0IuZ2VuZXJhdGVkQ29sdW1uO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZExpbmUgLSBtYXBwaW5nQi5nZW5lcmF0ZWRMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIHJldHVybiBtYXBwaW5nQS5uYW1lIC0gbWFwcGluZ0IubmFtZTtcbn1cbmV4cG9ydHMuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMgPSBjb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucztcblxuLyoqXG4gKiBDb21wYXJhdG9yIGJldHdlZW4gdHdvIG1hcHBpbmdzIHdpdGggZGVmbGF0ZWQgc291cmNlIGFuZCBuYW1lIGluZGljZXMgd2hlcmVcbiAqIHRoZSBnZW5lcmF0ZWQgcG9zaXRpb25zIGFyZSBjb21wYXJlZC5cbiAqXG4gKiBPcHRpb25hbGx5IHBhc3MgaW4gYHRydWVgIGFzIGBvbmx5Q29tcGFyZUdlbmVyYXRlZGAgdG8gY29uc2lkZXIgdHdvXG4gKiBtYXBwaW5ncyB3aXRoIHRoZSBzYW1lIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4sIGJ1dCBkaWZmZXJlbnRcbiAqIHNvdXJjZS9uYW1lL29yaWdpbmFsIGxpbmUgYW5kIGNvbHVtbiB0aGUgc2FtZS4gVXNlZnVsIHdoZW4gc2VhcmNoaW5nIGZvciBhXG4gKiBtYXBwaW5nIHdpdGggYSBzdHViYmVkIG91dCBtYXBwaW5nLlxuICovXG5mdW5jdGlvbiBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZChtYXBwaW5nQSwgbWFwcGluZ0IsIG9ubHlDb21wYXJlR2VuZXJhdGVkKSB7XG4gIHZhciBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRMaW5lIC0gbWFwcGluZ0IuZ2VuZXJhdGVkTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRDb2x1bW4gLSBtYXBwaW5nQi5nZW5lcmF0ZWRDb2x1bW47XG4gIGlmIChjbXAgIT09IDAgfHwgb25seUNvbXBhcmVHZW5lcmF0ZWQpIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0Euc291cmNlIC0gbWFwcGluZ0Iuc291cmNlO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsTGluZSAtIG1hcHBpbmdCLm9yaWdpbmFsTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbENvbHVtbiAtIG1hcHBpbmdCLm9yaWdpbmFsQ29sdW1uO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIHJldHVybiBtYXBwaW5nQS5uYW1lIC0gbWFwcGluZ0IubmFtZTtcbn1cbmV4cG9ydHMuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQgPSBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZDtcblxuZnVuY3Rpb24gc3RyY21wKGFTdHIxLCBhU3RyMikge1xuICBpZiAoYVN0cjEgPT09IGFTdHIyKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZiAoYVN0cjEgPiBhU3RyMikge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIENvbXBhcmF0b3IgYmV0d2VlbiB0d28gbWFwcGluZ3Mgd2l0aCBpbmZsYXRlZCBzb3VyY2UgYW5kIG5hbWUgc3RyaW5ncyB3aGVyZVxuICogdGhlIGdlbmVyYXRlZCBwb3NpdGlvbnMgYXJlIGNvbXBhcmVkLlxuICovXG5mdW5jdGlvbiBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZChtYXBwaW5nQSwgbWFwcGluZ0IpIHtcbiAgdmFyIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZExpbmUgLSBtYXBwaW5nQi5nZW5lcmF0ZWRMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZENvbHVtbiAtIG1hcHBpbmdCLmdlbmVyYXRlZENvbHVtbjtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBzdHJjbXAobWFwcGluZ0Euc291cmNlLCBtYXBwaW5nQi5zb3VyY2UpO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsTGluZSAtIG1hcHBpbmdCLm9yaWdpbmFsTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbENvbHVtbiAtIG1hcHBpbmdCLm9yaWdpbmFsQ29sdW1uO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIHJldHVybiBzdHJjbXAobWFwcGluZ0EubmFtZSwgbWFwcGluZ0IubmFtZSk7XG59XG5leHBvcnRzLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkID0gY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQ7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAvbGliL3V0aWwuanMiLCJpbXBvcnQgeyBoLCBSb3V0ZXIsIFVQREFURV9ET05FLCBzdHJlYW0gfSBmcm9tICcuLi9zcmMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFN1YmhlYWRlciA9ICh7dGl0bGUsIHN1YnRpdGxlLCBpZH0pID0+XHJcbiAgICA8ZGl2IGNsYXNzPVwicm93IGNlbnRlclwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJhbmNob3JcIiBpZD17aWR9IC8+XHJcbiAgICAgICAgPGgzIGNsYXNzPVwibGlnaHQgaGVhZGVyIGhpZ2hsaWdodFwiPnt0aXRsZX08L2gzPlxyXG4gICAgICAgIDxwIGNsYXNzPVwiY29sIHMxMiBtOCBvZmZzZXQtbTIgY2FwdGlvblwiPntzdWJ0aXRsZX08L3A+XHJcbiAgICA8L2Rpdj5cclxuO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RlbW8vc3ViaGVhZGVyLmpzeCIsIihmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIC8vIFVuaXZlcnNhbCBNb2R1bGUgRGVmaW5pdGlvbiAoVU1EKSB0byBzdXBwb3J0IEFNRCwgQ29tbW9uSlMvTm9kZS5qcywgUmhpbm8sIGFuZCBicm93c2Vycy5cblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoJ3N0YWNrZnJhbWUnLCBbXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdC5TdGFja0ZyYW1lID0gZmFjdG9yeSgpO1xuICAgIH1cbn0odGhpcywgZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGZ1bmN0aW9uIF9pc051bWJlcihuKSB7XG4gICAgICAgIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdChuKSkgJiYgaXNGaW5pdGUobik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX2NhcGl0YWxpemUoc3RyKSB7XG4gICAgICAgIHJldHVybiBzdHJbMF0udG9VcHBlckNhc2UoKSArIHN0ci5zdWJzdHJpbmcoMSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX2dldHRlcihwKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW3BdO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBib29sZWFuUHJvcHMgPSBbJ2lzQ29uc3RydWN0b3InLCAnaXNFdmFsJywgJ2lzTmF0aXZlJywgJ2lzVG9wbGV2ZWwnXTtcbiAgICB2YXIgbnVtZXJpY1Byb3BzID0gWydjb2x1bW5OdW1iZXInLCAnbGluZU51bWJlciddO1xuICAgIHZhciBzdHJpbmdQcm9wcyA9IFsnZmlsZU5hbWUnLCAnZnVuY3Rpb25OYW1lJywgJ3NvdXJjZSddO1xuICAgIHZhciBhcnJheVByb3BzID0gWydhcmdzJ107XG5cbiAgICB2YXIgcHJvcHMgPSBib29sZWFuUHJvcHMuY29uY2F0KG51bWVyaWNQcm9wcywgc3RyaW5nUHJvcHMsIGFycmF5UHJvcHMpO1xuXG4gICAgZnVuY3Rpb24gU3RhY2tGcmFtZShvYmopIHtcbiAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcHNbaV0pICYmIG9ialtwcm9wc1tpXV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzWydzZXQnICsgX2NhcGl0YWxpemUocHJvcHNbaV0pXShvYmpbcHJvcHNbaV1dKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBTdGFja0ZyYW1lLnByb3RvdHlwZSA9IHtcbiAgICAgICAgZ2V0QXJnczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hcmdzO1xuICAgICAgICB9LFxuICAgICAgICBzZXRBcmdzOiBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHYpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJncyBtdXN0IGJlIGFuIEFycmF5Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmFyZ3MgPSB2O1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldEV2YWxPcmlnaW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXZhbE9yaWdpbjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0RXZhbE9yaWdpbjogZnVuY3Rpb24odikge1xuICAgICAgICAgICAgaWYgKHYgaW5zdGFuY2VvZiBTdGFja0ZyYW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmFsT3JpZ2luID0gdjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodiBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXZhbE9yaWdpbiA9IG5ldyBTdGFja0ZyYW1lKHYpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFdmFsIE9yaWdpbiBtdXN0IGJlIGFuIE9iamVjdCBvciBTdGFja0ZyYW1lJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGZ1bmN0aW9uTmFtZSA9IHRoaXMuZ2V0RnVuY3Rpb25OYW1lKCkgfHwgJ3thbm9ueW1vdXN9JztcbiAgICAgICAgICAgIHZhciBhcmdzID0gJygnICsgKHRoaXMuZ2V0QXJncygpIHx8IFtdKS5qb2luKCcsJykgKyAnKSc7XG4gICAgICAgICAgICB2YXIgZmlsZU5hbWUgPSB0aGlzLmdldEZpbGVOYW1lKCkgPyAoJ0AnICsgdGhpcy5nZXRGaWxlTmFtZSgpKSA6ICcnO1xuICAgICAgICAgICAgdmFyIGxpbmVOdW1iZXIgPSBfaXNOdW1iZXIodGhpcy5nZXRMaW5lTnVtYmVyKCkpID8gKCc6JyArIHRoaXMuZ2V0TGluZU51bWJlcigpKSA6ICcnO1xuICAgICAgICAgICAgdmFyIGNvbHVtbk51bWJlciA9IF9pc051bWJlcih0aGlzLmdldENvbHVtbk51bWJlcigpKSA/ICgnOicgKyB0aGlzLmdldENvbHVtbk51bWJlcigpKSA6ICcnO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uTmFtZSArIGFyZ3MgKyBmaWxlTmFtZSArIGxpbmVOdW1iZXIgKyBjb2x1bW5OdW1iZXI7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib29sZWFuUHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgU3RhY2tGcmFtZS5wcm90b3R5cGVbJ2dldCcgKyBfY2FwaXRhbGl6ZShib29sZWFuUHJvcHNbaV0pXSA9IF9nZXR0ZXIoYm9vbGVhblByb3BzW2ldKTtcbiAgICAgICAgU3RhY2tGcmFtZS5wcm90b3R5cGVbJ3NldCcgKyBfY2FwaXRhbGl6ZShib29sZWFuUHJvcHNbaV0pXSA9IChmdW5jdGlvbihwKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odikge1xuICAgICAgICAgICAgICAgIHRoaXNbcF0gPSBCb29sZWFuKHYpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkoYm9vbGVhblByb3BzW2ldKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IG51bWVyaWNQcm9wcy5sZW5ndGg7IGorKykge1xuICAgICAgICBTdGFja0ZyYW1lLnByb3RvdHlwZVsnZ2V0JyArIF9jYXBpdGFsaXplKG51bWVyaWNQcm9wc1tqXSldID0gX2dldHRlcihudW1lcmljUHJvcHNbal0pO1xuICAgICAgICBTdGFja0ZyYW1lLnByb3RvdHlwZVsnc2V0JyArIF9jYXBpdGFsaXplKG51bWVyaWNQcm9wc1tqXSldID0gKGZ1bmN0aW9uKHApIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfaXNOdW1iZXIodikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihwICsgJyBtdXN0IGJlIGEgTnVtYmVyJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXNbcF0gPSBOdW1iZXIodik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KShudW1lcmljUHJvcHNbal0pO1xuICAgIH1cblxuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgc3RyaW5nUHJvcHMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgU3RhY2tGcmFtZS5wcm90b3R5cGVbJ2dldCcgKyBfY2FwaXRhbGl6ZShzdHJpbmdQcm9wc1trXSldID0gX2dldHRlcihzdHJpbmdQcm9wc1trXSk7XG4gICAgICAgIFN0YWNrRnJhbWUucHJvdG90eXBlWydzZXQnICsgX2NhcGl0YWxpemUoc3RyaW5nUHJvcHNba10pXSA9IChmdW5jdGlvbihwKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odikge1xuICAgICAgICAgICAgICAgIHRoaXNbcF0gPSBTdHJpbmcodik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KShzdHJpbmdQcm9wc1trXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFN0YWNrRnJhbWU7XG59KSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3N0YWNrZnJhbWUvc3RhY2tmcmFtZS5qcyIsImV4cG9ydCAqIGZyb20gJy4vc3RyZWFteSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vc3RyZWFteS1kb20nO1xyXG5leHBvcnQgKiBmcm9tICcuL3N0cmVhbXktaHlwZXJzY3JpcHQnO1xyXG5leHBvcnQgKiBmcm9tICcuL3N0cmVhbXktaGVscGVycyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vcm91dGVyJztcclxuZXhwb3J0ICogZnJvbSAnLi9zdGFja3RyYWNlJztcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3V0aWxzL2luZGV4LmpzIiwiaW1wb3J0IGRlZXBFcXVhbCBmcm9tICdkZWVwLWVxdWFsJztcclxuXHJcbi8qXHJcbiogc3RyZWFtIGNvbnN0cnVjdG9yXHJcbiogY29uc3RydWN0b3IgcmV0dXJucyBhIHN0cmVhbVxyXG4qIGdldCB0aGUgY3VycmVudCB2YWx1ZSBvZiBzdHJlYW0gbGlrZTogc3RyZWFtLnZhbHVlXHJcbiovXHJcbmV4cG9ydCBjb25zdCBzdHJlYW0gPSBmdW5jdGlvbihpbml0X3ZhbHVlKSB7XHJcblx0bGV0IHMgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG5cdFx0aWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0cmV0dXJuIHMudmFsdWU7XHJcblx0XHR9XHJcblx0XHR1cGRhdGUocywgdmFsdWUpO1xyXG5cdFx0cmV0dXJuIHM7XHJcblx0fVxyXG5cclxuXHRzLklTX1NUUkVBTSA9IHRydWU7XHJcblx0cy52YWx1ZSA9IGluaXRfdmFsdWU7XHJcblx0cy5saXN0ZW5lcnMgPSBbXTtcclxuXHJcblx0cy5tYXAgPSAoZm4pID0+IG1hcChzLCBmbik7XHJcblx0cy5pcyA9ICh2YWx1ZSkgPT4gbWFwKHMsIChjdXIpID0+IGN1ciA9PT0gdmFsdWUpO1xyXG5cdHMuZmxhdE1hcCA9IChmbikgPT4gZmxhdE1hcChzLCBmbik7XHJcblx0cy5maWx0ZXIgPSAoZm4pID0+IGZpbHRlcihzLCBmbik7XHJcblx0cy5kZWVwU2VsZWN0ID0gKGZuKSA9PiBkZWVwU2VsZWN0KHMsIGZuKTtcclxuXHRzLmRpc3RpbmN0ID0gKGZuKSA9PiBkaXN0aW5jdChzLCBmbik7XHJcblx0cy4kID0gKHNlbGVjdG9yQXJyKSA9PiBxdWVyeShzLCBzZWxlY3RvckFycik7XHJcblx0cy51bnRpbCA9IChzdG9wRW1pdCQpID0+IHVudGlsKHMsIHN0b3BFbWl0JCk7XHJcblx0cy5wYXRjaCA9IChwYXJ0aWFsQ2hhbmdlKSA9PiBwYXRjaChzLCBwYXJ0aWFsQ2hhbmdlKTtcclxuXHRzLnJlZHVjZSA9IChmbiwgc3RhcnRWYWx1ZSkgPT4gcmVkdWNlKHMsIGZuLCBzdGFydFZhbHVlKTtcclxuXHJcblx0cmV0dXJuIHM7XHJcbn07XHJcblxyXG4vKlxyXG4qIHdyYXBwZXIgZm9yIHRoZSBkaWZmaW5nIG9mIHN0cmVhbSB2YWx1ZXNcclxuKi9cclxuZnVuY3Rpb24gdmFsdWVzQ2hhbmdlZChvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcclxuXHRyZXR1cm4gIWRlZXBFcXVhbChvbGRWYWx1ZSwgbmV3VmFsdWUpO1xyXG59XHJcblxyXG4vKlxyXG4qIHVwZGF0ZSB0aGUgc3RyZWFtIHZhbHVlIGFuZCBub3RpZnkgbGlzdGVuZXJzIG9uIHRoZSBzdHJlYW1cclxuKi9cclxuZnVuY3Rpb24gdXBkYXRlKHBhcmVudCQsIG5ld1ZhbHVlKSB7XHJcblx0cGFyZW50JC52YWx1ZSA9IG5ld1ZhbHVlO1xyXG5cdG5vdGlmeUxpc3RlbmVycyhwYXJlbnQkLmxpc3RlbmVycywgbmV3VmFsdWUpO1xyXG59O1xyXG5cclxuLypcclxuKiBwcm92aWRlIGEgbmV3IHZhbHVlIHRvIGFsbCBsaXN0ZW5lcnMgcmVnaXN0ZXJlZCBmb3IgYSBzdHJlYW1cclxuKi9cclxuZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKGxpc3RlbmVycywgdmFsdWUpIHtcclxuXHRsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcihsaXN0ZW5lcikge1xyXG5cdFx0bGlzdGVuZXIodmFsdWUpO1xyXG5cdH0pO1xyXG59XHJcblxyXG4vKlxyXG4qIERvIG5vdCBwaXBlIHRoZSB2YWx1ZSB1bmRlZmluZWQuIFRoaXMgYWxsb3dzIHRvIHdhaXQgZm9yIGFuIGV4dGVybmFsIGluaXRpYWxpemF0aW9uLlxyXG4qIEl0IGFsc28gc2F2ZXMgeW91IGZyb20gY2hlY2tpbmcgZm9yIGFuIGluaXRpYWwgbnVsbCBvbiBldmVyeSBtYXAgZnVuY3Rpb24uXHJcbiovXHJcbmZ1bmN0aW9uIGZvcmskKHBhcmVudCQsIG1hcEZ1bmN0aW9uKSB7XHJcblx0bGV0IGluaXRWYWx1ZSA9IHBhcmVudCQudmFsdWUgIT09IHVuZGVmaW5lZCA/IG1hcEZ1bmN0aW9uKHBhcmVudCQudmFsdWUpIDogdW5kZWZpbmVkXHJcblx0cmV0dXJuIHN0cmVhbShpbml0VmFsdWUpO1xyXG59XHJcblxyXG4vKlxyXG4qIHByb3ZpZGVzIGEgbmV3IHN0cmVhbSBhcHBseWluZyBhIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uIHRvIHRoZSB2YWx1ZSBvZiBhIHBhcmVudCBzdHJlYW1cclxuKi9cclxuZnVuY3Rpb24gbWFwKHBhcmVudCQsIGZuKSB7XHJcblx0bGV0IG5ld1N0cmVhbSA9IGZvcmskKHBhcmVudCQsIGZuKTtcclxuXHRwYXJlbnQkLmxpc3RlbmVycy5wdXNoKGZ1bmN0aW9uIG1hcFZhbHVlKHZhbHVlKSB7XHJcblx0XHRuZXdTdHJlYW0oZm4odmFsdWUpKTtcclxuXHR9KTtcclxuXHRyZXR1cm4gbmV3U3RyZWFtO1xyXG59XHJcblxyXG4vKlxyXG4qIHByb3ZpZGVzIGEgbmV3IHN0cmVhbSBhcHBseWluZyBhIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uIHRvIHRoZSB2YWx1ZSBvZiBhIHBhcmVudCBzdHJlYW1cclxuKi9cclxuZnVuY3Rpb24gZmxhdE1hcChwYXJlbnQkLCBmbikge1xyXG5cdGxldCBuZXdTdHJlYW0gPSBmb3JrJChwYXJlbnQkLCBmdW5jdGlvbiBnZXRDaGlsZFN0cmVhbVZhbHVlKHZhbHVlKSB7IHJldHVybiBmbih2YWx1ZSkudmFsdWU7IH0pO1xyXG5cdHBhcmVudCQubGlzdGVuZXJzLnB1c2goZnVuY3Rpb24gZmxhdE1hcFZhbHVlKHZhbHVlKSB7XHJcblx0XHRmbih2YWx1ZSkubWFwKGZ1bmN0aW9uIHVwZGF0ZU91dGVyU3RyZWFtKHJlc3VsdCkge1xyXG5cdFx0XHRuZXdTdHJlYW0ocmVzdWx0KTtcclxuXHRcdH0pO1xyXG5cdH0pO1xyXG5cdHJldHVybiBuZXdTdHJlYW07XHJcbn1cclxuXHJcbi8qXHJcbiogcHJvdmlkZXMgYSBuZXcgc3RyZWFtIHRoYXQgb25seSBzZXJ2ZXMgdGhlIHZhbHVlcyB0aGF0IGEgZmlsdGVyIGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSBmb3JcclxuKiBzdGlsbCBhIHN0cmVhbSBBTFdBWVMgaGFzIGEgdmFsdWUgLT4gc28gaXQgc3RhcnRzIGF0IGxlYXN0IHdpdGggTlVMTFxyXG4qL1xyXG5mdW5jdGlvbiBmaWx0ZXIocGFyZW50JCwgZm4pIHtcclxuXHRsZXQgbmV3U3RyZWFtID0gZm9yayQocGFyZW50JCwgKHZhbHVlKSA9PiBmbih2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZCk7XHJcblx0cGFyZW50JC5saXN0ZW5lcnMucHVzaChmdW5jdGlvbiBmaWx0ZXJWYWx1ZSh2YWx1ZSkge1xyXG5cdFx0aWYgKGZuKHZhbHVlKSkge1xyXG5cdFx0XHRuZXdTdHJlYW0odmFsdWUpO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG5cdHJldHVybiBuZXdTdHJlYW07XHJcbn1cclxuXHJcbi8qXHJcbiogcHJvdmlkZXMgYSBuZXcgc3RyZWFtIHRoYXQgaGFzIGEgc2VsZWN0ZWQgc3ViIHByb3BlcnR5IG9mIHRoZSBvYmplY3QgdmFsdWUgb2YgdGhlIHBhcmVudCBzdHJlYW1cclxuKiB0aGUgc2VsZWN0b3IgaGFzIHRoZSBmb3JtYXQgW3twcm9wZXJ0eU5hbWV9Ll0qXHJcbiovXHJcbmZ1bmN0aW9uIGRlZXBTZWxlY3QocGFyZW50JCwgc2VsZWN0b3IpIHtcclxuXHRsZXQgc2VsZWN0b3JzID0gc2VsZWN0b3Iuc3BsaXQoJy4nKTtcclxuXHJcblx0ZnVuY3Rpb24gc2VsZWN0KHBhcmVudCwgc2VsZWN0b3JzKSB7XHJcblx0XHRyZXR1cm4gc2VsZWN0b3JzLnJlZHVjZSgoaW5wdXQsIHNlbGVjdG9yKSA9PiB7XHJcblx0XHRcdHJldHVybiBpbnB1dFtzZWxlY3Rvcl07XHJcblx0XHR9LCBwYXJlbnQpO1xyXG5cdH1cclxuXHJcblx0bGV0IG5ld1N0cmVhbSA9IGZvcmskKHBhcmVudCQsICh2YWx1ZSkgPT4gc2VsZWN0KHZhbHVlLCBzZWxlY3RvcnMpKTtcclxuXHRwYXJlbnQkLmxpc3RlbmVycy5wdXNoKGZ1bmN0aW9uIGRlZXBTZWxlY3RWYWx1ZShuZXdWYWx1ZSkge1xyXG5cdFx0bmV3U3RyZWFtKHNlbGVjdChuZXdWYWx1ZSwgc2VsZWN0b3JzKSk7XHJcblx0fSk7XHJcblx0cmV0dXJuIG5ld1N0cmVhbTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIHF1ZXJ5KHBhcmVudCQsIHNlbGVjdG9yQXJyKSB7XHJcblx0aWYoIUFycmF5LmlzQXJyYXkoc2VsZWN0b3JBcnIpKSB7XHJcblx0XHRyZXR1cm4gZGVlcFNlbGVjdChwYXJlbnQkLCBzZWxlY3RvckFycik7XHJcblx0fVxyXG5cdHJldHVybiBtZXJnZSQoc2VsZWN0b3JBcnIubWFwKHNlbGVjdG9yID0+IGRlZXBTZWxlY3QocGFyZW50JCwgc2VsZWN0b3IpKSk7XHJcbn1cclxuXHJcbi8vIFRPRE86IG1heWJlIHJlZmFjdG9yIHdpdGggZmlsdGVyXHJcbi8qXHJcbiogcHJvdmlkZSBhIG5ldyBzdHJlYW0gdGhhdCBvbmx5IG5vdGlmeXMgaXRzIGNoaWxkcmVuIGlmIHRoZSBjb250YWluaW5nIHZhbHVlIGFjdHVhbHkgY2hhbmdlc1xyXG4qL1xyXG5mdW5jdGlvbiBkaXN0aW5jdChwYXJlbnQkLCBmbiA9IChhLCBiKSA9PiB2YWx1ZXNDaGFuZ2VkKGEsIGIpKSB7XHJcblx0bGV0IG5ld1N0cmVhbSA9IGZvcmskKHBhcmVudCQsICh2YWx1ZSkgPT4gdmFsdWUpO1xyXG5cdHBhcmVudCQubGlzdGVuZXJzLnB1c2goZnVuY3Rpb24gZGVlcFNlbGVjdFZhbHVlKHZhbHVlKSB7XHJcblx0XHRpZiAoZm4obmV3U3RyZWFtLnZhbHVlLCB2YWx1ZSkpIHtcclxuXHRcdFx0bmV3U3RyZWFtKHZhbHVlKTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHRyZXR1cm4gbmV3U3RyZWFtO1xyXG59XHJcblxyXG4vKlxyXG4qIHVwZGF0ZSBvbmx5IHRoZSBwcm9wZXJ0aWVzIG9mIGFuIG9iamVjdCBwYXNzZWRcclxuKiBpLmUuIHtuYW1lOiAnRmFiaWFuJywgbGFzdG5hbWU6ICdXZWJlcn0gcGF0Y2hlZCB3aXRoIHtuYW1lOiAnRmFibyd9IHByb2R1Y2VzIHtuYW1lOiAnRmFibycsIGxhc3RuYW1lOiAnV2ViZXJ9XHJcbiovXHJcbmZ1bmN0aW9uIHBhdGNoKHBhcmVudCQsIHBhcnRpYWxDaGFuZ2UpIHtcclxuXHRpZiAocGFyZW50JC52YWx1ZSA9PSBudWxsKSB7XHJcblx0XHRwYXJlbnQkKHBhcnRpYWxDaGFuZ2UpO1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHRyZXR1cm4gcGFyZW50JChPYmplY3QuYXNzaWduKHt9LCBwYXJlbnQkLnZhbHVlLCBwYXJ0aWFsQ2hhbmdlKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVudGlsKHBhcmVudCQsIHN0b3BFbWl0VmFsdWVzJCkge1xyXG5cdGxldCBuZXdTdHJlYW0gPSBzdHJlYW0oc3RvcEVtaXRWYWx1ZXMkLnZhbHVlID8gdW5kZWZpbmVkIDogcGFyZW50JC52YWx1ZSk7XHJcblx0bGV0IHN1YnNjcmliZVRvID0gKHN0cmVhbSkgPT4ge1xyXG5cdFx0bmV3U3RyZWFtKHBhcmVudCQudmFsdWUpO1xyXG5cdFx0c3RyZWFtLmxpc3RlbmVycy5wdXNoKG5ld1N0cmVhbSk7XHJcblx0fVxyXG5cdGxldCB1bnN1YnNjcmliZUZyb20gPSAoc3RyZWFtKSA9PiB7XHJcblx0XHR2YXIgaW5kZXggPSBzdHJlYW0ubGlzdGVuZXJzLmluZGV4T2YobmV3U3RyZWFtKTtcclxuXHRcdGlmIChpbmRleCAhPT0gLTEpIHtcclxuXHRcdFx0c3RyZWFtLmxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0c3RvcEVtaXRWYWx1ZXMkLm1hcChzdG9wRW1pdFZhbHVlcyA9PiB7XHJcblx0XHRpZihzdG9wRW1pdFZhbHVlcykge1xyXG5cdFx0XHR1bnN1YnNjcmliZUZyb20ocGFyZW50JCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRzdWJzY3JpYmVUbyhwYXJlbnQkKTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHRyZXR1cm4gbmV3U3RyZWFtO1xyXG59XHJcblxyXG4vKlxyXG4qIHJlZHVjZSBhIHN0cmVhbSBvdmVyIHRpbWVcclxuKiB0aGlzIHdpbGwgcGFzcyB0aGUgbGFzdCBvdXRwdXQgdmFsdWUgdG8gdGhlIGNhbGN1bGF0aW9uIGZ1bmN0aW9uXHJcbiogcmVhZHMgbGlrZSB0aGUgYXJyYXkgcmVkdWNlIGZ1bmN0aW9uXHJcbiovXHJcbmZ1bmN0aW9uIHJlZHVjZShwYXJlbnQkLCBmbiwgc3RhcnRWYWx1ZSkge1xyXG5cdGxldCBhZ2dyZWdhdGUgPSBwYXJlbnQkLnZhbHVlICE9PSB1bmRlZmluZWQgPyBmbihzdGFydFZhbHVlLCBwYXJlbnQkLnZhbHVlKSA6IHVuZGVmaW5lZDtcclxuXHRsZXQgbmV3U3RyZWFtID0gc3RyZWFtKGFnZ3JlZ2F0ZSk7XHJcblx0cGFyZW50JC5saXN0ZW5lcnMucHVzaChmdW5jdGlvbiByZWR1Y2VWYWx1ZSh2YWx1ZSkge1xyXG5cdFx0YWdncmVnYXRlID0gZm4oYWdncmVnYXRlLCBwYXJlbnQkLnZhbHVlKTtcclxuXHRcdG5ld1N0cmVhbShhZ2dyZWdhdGUpO1xyXG5cdH0pO1xyXG5cdHJldHVybiBuZXdTdHJlYW07XHJcbn1cclxuXHJcbi8qXHJcbiogbWVyZ2Ugc2V2ZXJhbCBzdHJlYW1zIGludG8gb25lIHN0cmVhbSBwcm92aWRpbmcgdGhlIHZhbHVlcyBvZiBhbGwgc3RyZWFtcyBhcyBhbiBhcnJheVxyXG4qIGFjY2VwdHMgYWxzbyBub24gc3RyZWFtIGVsZW1lbnRzLCB0aG9zZSBhcmUganVzdCBjb3BpZWQgdG8gdGhlIG91dHB1dFxyXG4qIHRoZSBtZXJnZSB3aWxsIG9ubHkgaGF2ZSBhIHZhbHVlIGlmIGV2ZXJ5IHN0cmVhbSBmb3IgdGhlIG1lcmdlIGhhcyBhIHZhbHVlXHJcbiovXHJcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZSQocG90ZW50aWFsU3RyZWFtc0Fycikge1xyXG5cdGxldCB2YWx1ZXMgPSBwb3RlbnRpYWxTdHJlYW1zQXJyLm1hcChwYXJlbnQkID0+IHBhcmVudCQuSVNfU1RSRUFNID8gcGFyZW50JC52YWx1ZSA6IHBhcmVudCQpO1xyXG5cdGxldCBhY3R1YWxTdHJlYW1zID0gcG90ZW50aWFsU3RyZWFtc0Fyci5yZWR1Y2UoKHN0cmVhbXMsIHBvdGVudGlhbFN0cmVhbSwgaW5kZXgpID0+IHtcclxuXHRcdGlmIChwb3RlbnRpYWxTdHJlYW0uSVNfU1RSRUFNKSB7XHJcblx0XHRcdHN0cmVhbXMucHVzaCh7XHJcblx0XHRcdFx0c3RyZWFtOiBwb3RlbnRpYWxTdHJlYW0sXHJcblx0XHRcdFx0aW5kZXhcclxuXHRcdFx0fSlcclxuXHRcdH1cclxuXHRcdHJldHVybiBzdHJlYW1zO1xyXG5cdH0sIFtdKTtcclxuXHRsZXQgbmV3U3RyZWFtID0gc3RyZWFtKHZhbHVlcy5pbmRleE9mKHVuZGVmaW5lZCkgPT09IC0xID8gdmFsdWVzIDogdW5kZWZpbmVkKTtcclxuXHRhY3R1YWxTdHJlYW1zLmZvckVhY2goZnVuY3Rpb24gdHJpZ2dlck1lcmdlZFN0cmVhbVVwZGF0ZSh7c3RyZWFtLCBpbmRleH0pIHtcclxuXHRcdHN0cmVhbS5saXN0ZW5lcnMucHVzaChmdW5jdGlvbiB1cGRhdGVNZXJnZWRTdHJlYW0odmFsdWUpIHtcclxuXHRcdFx0dmFsdWVzW2luZGV4XSA9IHZhbHVlO1xyXG5cdFx0XHRuZXdTdHJlYW0odmFsdWVzLmluZGV4T2YodW5kZWZpbmVkKSA9PT0gLTEgPyB2YWx1ZXMgOiB1bmRlZmluZWQpO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcblx0cmV0dXJuIG5ld1N0cmVhbTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyZWFtKHBhcmVudCQpIHtcclxuXHRyZXR1cm4gcGFyZW50JCAhPSBudWxsICYmICEhcGFyZW50JC5JU19TVFJFQU07XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3V0aWxzL3N0cmVhbXkuanMiLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbnZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIGRhdGEgc3RydWN0dXJlIHdoaWNoIGlzIGEgY29tYmluYXRpb24gb2YgYW4gYXJyYXkgYW5kIGEgc2V0LiBBZGRpbmcgYSBuZXdcbiAqIG1lbWJlciBpcyBPKDEpLCB0ZXN0aW5nIGZvciBtZW1iZXJzaGlwIGlzIE8oMSksIGFuZCBmaW5kaW5nIHRoZSBpbmRleCBvZiBhblxuICogZWxlbWVudCBpcyBPKDEpLiBSZW1vdmluZyBlbGVtZW50cyBmcm9tIHRoZSBzZXQgaXMgbm90IHN1cHBvcnRlZC4gT25seVxuICogc3RyaW5ncyBhcmUgc3VwcG9ydGVkIGZvciBtZW1iZXJzaGlwLlxuICovXG5mdW5jdGlvbiBBcnJheVNldCgpIHtcbiAgdGhpcy5fYXJyYXkgPSBbXTtcbiAgdGhpcy5fc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cblxuLyoqXG4gKiBTdGF0aWMgbWV0aG9kIGZvciBjcmVhdGluZyBBcnJheVNldCBpbnN0YW5jZXMgZnJvbSBhbiBleGlzdGluZyBhcnJheS5cbiAqL1xuQXJyYXlTZXQuZnJvbUFycmF5ID0gZnVuY3Rpb24gQXJyYXlTZXRfZnJvbUFycmF5KGFBcnJheSwgYUFsbG93RHVwbGljYXRlcykge1xuICB2YXIgc2V0ID0gbmV3IEFycmF5U2V0KCk7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhQXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBzZXQuYWRkKGFBcnJheVtpXSwgYUFsbG93RHVwbGljYXRlcyk7XG4gIH1cbiAgcmV0dXJuIHNldDtcbn07XG5cbi8qKlxuICogUmV0dXJuIGhvdyBtYW55IHVuaXF1ZSBpdGVtcyBhcmUgaW4gdGhpcyBBcnJheVNldC4gSWYgZHVwbGljYXRlcyBoYXZlIGJlZW5cbiAqIGFkZGVkLCB0aGFuIHRob3NlIGRvIG5vdCBjb3VudCB0b3dhcmRzIHRoZSBzaXplLlxuICpcbiAqIEByZXR1cm5zIE51bWJlclxuICovXG5BcnJheVNldC5wcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uIEFycmF5U2V0X3NpemUoKSB7XG4gIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzLl9zZXQpLmxlbmd0aDtcbn07XG5cbi8qKlxuICogQWRkIHRoZSBnaXZlbiBzdHJpbmcgdG8gdGhpcyBzZXQuXG4gKlxuICogQHBhcmFtIFN0cmluZyBhU3RyXG4gKi9cbkFycmF5U2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBBcnJheVNldF9hZGQoYVN0ciwgYUFsbG93RHVwbGljYXRlcykge1xuICB2YXIgc1N0ciA9IHV0aWwudG9TZXRTdHJpbmcoYVN0cik7XG4gIHZhciBpc0R1cGxpY2F0ZSA9IGhhcy5jYWxsKHRoaXMuX3NldCwgc1N0cik7XG4gIHZhciBpZHggPSB0aGlzLl9hcnJheS5sZW5ndGg7XG4gIGlmICghaXNEdXBsaWNhdGUgfHwgYUFsbG93RHVwbGljYXRlcykge1xuICAgIHRoaXMuX2FycmF5LnB1c2goYVN0cik7XG4gIH1cbiAgaWYgKCFpc0R1cGxpY2F0ZSkge1xuICAgIHRoaXMuX3NldFtzU3RyXSA9IGlkeDtcbiAgfVxufTtcblxuLyoqXG4gKiBJcyB0aGUgZ2l2ZW4gc3RyaW5nIGEgbWVtYmVyIG9mIHRoaXMgc2V0P1xuICpcbiAqIEBwYXJhbSBTdHJpbmcgYVN0clxuICovXG5BcnJheVNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gQXJyYXlTZXRfaGFzKGFTdHIpIHtcbiAgdmFyIHNTdHIgPSB1dGlsLnRvU2V0U3RyaW5nKGFTdHIpO1xuICByZXR1cm4gaGFzLmNhbGwodGhpcy5fc2V0LCBzU3RyKTtcbn07XG5cbi8qKlxuICogV2hhdCBpcyB0aGUgaW5kZXggb2YgdGhlIGdpdmVuIHN0cmluZyBpbiB0aGUgYXJyYXk/XG4gKlxuICogQHBhcmFtIFN0cmluZyBhU3RyXG4gKi9cbkFycmF5U2V0LnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gQXJyYXlTZXRfaW5kZXhPZihhU3RyKSB7XG4gIHZhciBzU3RyID0gdXRpbC50b1NldFN0cmluZyhhU3RyKTtcbiAgaWYgKGhhcy5jYWxsKHRoaXMuX3NldCwgc1N0cikpIHtcbiAgICByZXR1cm4gdGhpcy5fc2V0W3NTdHJdO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignXCInICsgYVN0ciArICdcIiBpcyBub3QgaW4gdGhlIHNldC4nKTtcbn07XG5cbi8qKlxuICogV2hhdCBpcyB0aGUgZWxlbWVudCBhdCB0aGUgZ2l2ZW4gaW5kZXg/XG4gKlxuICogQHBhcmFtIE51bWJlciBhSWR4XG4gKi9cbkFycmF5U2V0LnByb3RvdHlwZS5hdCA9IGZ1bmN0aW9uIEFycmF5U2V0X2F0KGFJZHgpIHtcbiAgaWYgKGFJZHggPj0gMCAmJiBhSWR4IDwgdGhpcy5fYXJyYXkubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FycmF5W2FJZHhdO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignTm8gZWxlbWVudCBpbmRleGVkIGJ5ICcgKyBhSWR4KTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYXJyYXkgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBzZXQgKHdoaWNoIGhhcyB0aGUgcHJvcGVyIGluZGljZXNcbiAqIGluZGljYXRlZCBieSBpbmRleE9mKS4gTm90ZSB0aGF0IHRoaXMgaXMgYSBjb3B5IG9mIHRoZSBpbnRlcm5hbCBhcnJheSB1c2VkXG4gKiBmb3Igc3RvcmluZyB0aGUgbWVtYmVycyBzbyB0aGF0IG5vIG9uZSBjYW4gbWVzcyB3aXRoIGludGVybmFsIHN0YXRlLlxuICovXG5BcnJheVNldC5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIEFycmF5U2V0X3RvQXJyYXkoKSB7XG4gIHJldHVybiB0aGlzLl9hcnJheS5zbGljZSgpO1xufTtcblxuZXhwb3J0cy5BcnJheVNldCA9IEFycmF5U2V0O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwL2xpYi9hcnJheS1zZXQuanMiLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICpcbiAqIEJhc2VkIG9uIHRoZSBCYXNlIDY0IFZMUSBpbXBsZW1lbnRhdGlvbiBpbiBDbG9zdXJlIENvbXBpbGVyOlxuICogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jbG9zdXJlLWNvbXBpbGVyL3NvdXJjZS9icm93c2UvdHJ1bmsvc3JjL2NvbS9nb29nbGUvZGVidWdnaW5nL3NvdXJjZW1hcC9CYXNlNjRWTFEuamF2YVxuICpcbiAqIENvcHlyaWdodCAyMDExIFRoZSBDbG9zdXJlIENvbXBpbGVyIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmVcbiAqIG1ldDpcbiAqXG4gKiAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICogICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZVxuICogICAgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiAqICAgIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZFxuICogICAgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICogICogTmVpdGhlciB0aGUgbmFtZSBvZiBHb29nbGUgSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0c1xuICogICAgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkXG4gKiAgICBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SU1xuICogXCJBUyBJU1wiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVFxuICogTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SXG4gKiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVFxuICogT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsXG4gKiBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UXG4gKiBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSxcbiAqIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWVxuICogVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICogKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFXG4gKiBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCcuL2Jhc2U2NCcpO1xuXG4vLyBBIHNpbmdsZSBiYXNlIDY0IGRpZ2l0IGNhbiBjb250YWluIDYgYml0cyBvZiBkYXRhLiBGb3IgdGhlIGJhc2UgNjQgdmFyaWFibGVcbi8vIGxlbmd0aCBxdWFudGl0aWVzIHdlIHVzZSBpbiB0aGUgc291cmNlIG1hcCBzcGVjLCB0aGUgZmlyc3QgYml0IGlzIHRoZSBzaWduLFxuLy8gdGhlIG5leHQgZm91ciBiaXRzIGFyZSB0aGUgYWN0dWFsIHZhbHVlLCBhbmQgdGhlIDZ0aCBiaXQgaXMgdGhlXG4vLyBjb250aW51YXRpb24gYml0LiBUaGUgY29udGludWF0aW9uIGJpdCB0ZWxscyB1cyB3aGV0aGVyIHRoZXJlIGFyZSBtb3JlXG4vLyBkaWdpdHMgaW4gdGhpcyB2YWx1ZSBmb2xsb3dpbmcgdGhpcyBkaWdpdC5cbi8vXG4vLyAgIENvbnRpbnVhdGlvblxuLy8gICB8ICAgIFNpZ25cbi8vICAgfCAgICB8XG4vLyAgIFYgICAgVlxuLy8gICAxMDEwMTFcblxudmFyIFZMUV9CQVNFX1NISUZUID0gNTtcblxuLy8gYmluYXJ5OiAxMDAwMDBcbnZhciBWTFFfQkFTRSA9IDEgPDwgVkxRX0JBU0VfU0hJRlQ7XG5cbi8vIGJpbmFyeTogMDExMTExXG52YXIgVkxRX0JBU0VfTUFTSyA9IFZMUV9CQVNFIC0gMTtcblxuLy8gYmluYXJ5OiAxMDAwMDBcbnZhciBWTFFfQ09OVElOVUFUSU9OX0JJVCA9IFZMUV9CQVNFO1xuXG4vKipcbiAqIENvbnZlcnRzIGZyb20gYSB0d28tY29tcGxlbWVudCB2YWx1ZSB0byBhIHZhbHVlIHdoZXJlIHRoZSBzaWduIGJpdCBpc1xuICogcGxhY2VkIGluIHRoZSBsZWFzdCBzaWduaWZpY2FudCBiaXQuICBGb3IgZXhhbXBsZSwgYXMgZGVjaW1hbHM6XG4gKiAgIDEgYmVjb21lcyAyICgxMCBiaW5hcnkpLCAtMSBiZWNvbWVzIDMgKDExIGJpbmFyeSlcbiAqICAgMiBiZWNvbWVzIDQgKDEwMCBiaW5hcnkpLCAtMiBiZWNvbWVzIDUgKDEwMSBiaW5hcnkpXG4gKi9cbmZ1bmN0aW9uIHRvVkxRU2lnbmVkKGFWYWx1ZSkge1xuICByZXR1cm4gYVZhbHVlIDwgMFxuICAgID8gKCgtYVZhbHVlKSA8PCAxKSArIDFcbiAgICA6IChhVmFsdWUgPDwgMSkgKyAwO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIHRvIGEgdHdvLWNvbXBsZW1lbnQgdmFsdWUgZnJvbSBhIHZhbHVlIHdoZXJlIHRoZSBzaWduIGJpdCBpc1xuICogcGxhY2VkIGluIHRoZSBsZWFzdCBzaWduaWZpY2FudCBiaXQuICBGb3IgZXhhbXBsZSwgYXMgZGVjaW1hbHM6XG4gKiAgIDIgKDEwIGJpbmFyeSkgYmVjb21lcyAxLCAzICgxMSBiaW5hcnkpIGJlY29tZXMgLTFcbiAqICAgNCAoMTAwIGJpbmFyeSkgYmVjb21lcyAyLCA1ICgxMDEgYmluYXJ5KSBiZWNvbWVzIC0yXG4gKi9cbmZ1bmN0aW9uIGZyb21WTFFTaWduZWQoYVZhbHVlKSB7XG4gIHZhciBpc05lZ2F0aXZlID0gKGFWYWx1ZSAmIDEpID09PSAxO1xuICB2YXIgc2hpZnRlZCA9IGFWYWx1ZSA+PiAxO1xuICByZXR1cm4gaXNOZWdhdGl2ZVxuICAgID8gLXNoaWZ0ZWRcbiAgICA6IHNoaWZ0ZWQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYmFzZSA2NCBWTFEgZW5jb2RlZCB2YWx1ZS5cbiAqL1xuZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbiBiYXNlNjRWTFFfZW5jb2RlKGFWYWx1ZSkge1xuICB2YXIgZW5jb2RlZCA9IFwiXCI7XG4gIHZhciBkaWdpdDtcblxuICB2YXIgdmxxID0gdG9WTFFTaWduZWQoYVZhbHVlKTtcblxuICBkbyB7XG4gICAgZGlnaXQgPSB2bHEgJiBWTFFfQkFTRV9NQVNLO1xuICAgIHZscSA+Pj49IFZMUV9CQVNFX1NISUZUO1xuICAgIGlmICh2bHEgPiAwKSB7XG4gICAgICAvLyBUaGVyZSBhcmUgc3RpbGwgbW9yZSBkaWdpdHMgaW4gdGhpcyB2YWx1ZSwgc28gd2UgbXVzdCBtYWtlIHN1cmUgdGhlXG4gICAgICAvLyBjb250aW51YXRpb24gYml0IGlzIG1hcmtlZC5cbiAgICAgIGRpZ2l0IHw9IFZMUV9DT05USU5VQVRJT05fQklUO1xuICAgIH1cbiAgICBlbmNvZGVkICs9IGJhc2U2NC5lbmNvZGUoZGlnaXQpO1xuICB9IHdoaWxlICh2bHEgPiAwKTtcblxuICByZXR1cm4gZW5jb2RlZDtcbn07XG5cbi8qKlxuICogRGVjb2RlcyB0aGUgbmV4dCBiYXNlIDY0IFZMUSB2YWx1ZSBmcm9tIHRoZSBnaXZlbiBzdHJpbmcgYW5kIHJldHVybnMgdGhlXG4gKiB2YWx1ZSBhbmQgdGhlIHJlc3Qgb2YgdGhlIHN0cmluZyB2aWEgdGhlIG91dCBwYXJhbWV0ZXIuXG4gKi9cbmV4cG9ydHMuZGVjb2RlID0gZnVuY3Rpb24gYmFzZTY0VkxRX2RlY29kZShhU3RyLCBhSW5kZXgsIGFPdXRQYXJhbSkge1xuICB2YXIgc3RyTGVuID0gYVN0ci5sZW5ndGg7XG4gIHZhciByZXN1bHQgPSAwO1xuICB2YXIgc2hpZnQgPSAwO1xuICB2YXIgY29udGludWF0aW9uLCBkaWdpdDtcblxuICBkbyB7XG4gICAgaWYgKGFJbmRleCA+PSBzdHJMZW4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIG1vcmUgZGlnaXRzIGluIGJhc2UgNjQgVkxRIHZhbHVlLlwiKTtcbiAgICB9XG5cbiAgICBkaWdpdCA9IGJhc2U2NC5kZWNvZGUoYVN0ci5jaGFyQ29kZUF0KGFJbmRleCsrKSk7XG4gICAgaWYgKGRpZ2l0ID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBiYXNlNjQgZGlnaXQ6IFwiICsgYVN0ci5jaGFyQXQoYUluZGV4IC0gMSkpO1xuICAgIH1cblxuICAgIGNvbnRpbnVhdGlvbiA9ICEhKGRpZ2l0ICYgVkxRX0NPTlRJTlVBVElPTl9CSVQpO1xuICAgIGRpZ2l0ICY9IFZMUV9CQVNFX01BU0s7XG4gICAgcmVzdWx0ID0gcmVzdWx0ICsgKGRpZ2l0IDw8IHNoaWZ0KTtcbiAgICBzaGlmdCArPSBWTFFfQkFTRV9TSElGVDtcbiAgfSB3aGlsZSAoY29udGludWF0aW9uKTtcblxuICBhT3V0UGFyYW0udmFsdWUgPSBmcm9tVkxRU2lnbmVkKHJlc3VsdCk7XG4gIGFPdXRQYXJhbS5yZXN0ID0gYUluZGV4O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC9saWIvYmFzZTY0LXZscS5qcyIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIGJhc2U2NFZMUSA9IHJlcXVpcmUoJy4vYmFzZTY0LXZscScpO1xudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcbnZhciBBcnJheVNldCA9IHJlcXVpcmUoJy4vYXJyYXktc2V0JykuQXJyYXlTZXQ7XG52YXIgTWFwcGluZ0xpc3QgPSByZXF1aXJlKCcuL21hcHBpbmctbGlzdCcpLk1hcHBpbmdMaXN0O1xuXG4vKipcbiAqIEFuIGluc3RhbmNlIG9mIHRoZSBTb3VyY2VNYXBHZW5lcmF0b3IgcmVwcmVzZW50cyBhIHNvdXJjZSBtYXAgd2hpY2ggaXNcbiAqIGJlaW5nIGJ1aWx0IGluY3JlbWVudGFsbHkuIFlvdSBtYXkgcGFzcyBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nXG4gKiBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBmaWxlOiBUaGUgZmlsZW5hbWUgb2YgdGhlIGdlbmVyYXRlZCBzb3VyY2UuXG4gKiAgIC0gc291cmNlUm9vdDogQSByb290IGZvciBhbGwgcmVsYXRpdmUgVVJMcyBpbiB0aGlzIHNvdXJjZSBtYXAuXG4gKi9cbmZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcihhQXJncykge1xuICBpZiAoIWFBcmdzKSB7XG4gICAgYUFyZ3MgPSB7fTtcbiAgfVxuICB0aGlzLl9maWxlID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdmaWxlJywgbnVsbCk7XG4gIHRoaXMuX3NvdXJjZVJvb3QgPSB1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZVJvb3QnLCBudWxsKTtcbiAgdGhpcy5fc2tpcFZhbGlkYXRpb24gPSB1dGlsLmdldEFyZyhhQXJncywgJ3NraXBWYWxpZGF0aW9uJywgZmFsc2UpO1xuICB0aGlzLl9zb3VyY2VzID0gbmV3IEFycmF5U2V0KCk7XG4gIHRoaXMuX25hbWVzID0gbmV3IEFycmF5U2V0KCk7XG4gIHRoaXMuX21hcHBpbmdzID0gbmV3IE1hcHBpbmdMaXN0KCk7XG4gIHRoaXMuX3NvdXJjZXNDb250ZW50cyA9IG51bGw7XG59XG5cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuX3ZlcnNpb24gPSAzO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgU291cmNlTWFwR2VuZXJhdG9yIGJhc2VkIG9uIGEgU291cmNlTWFwQ29uc3VtZXJcbiAqXG4gKiBAcGFyYW0gYVNvdXJjZU1hcENvbnN1bWVyIFRoZSBTb3VyY2VNYXAuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5mcm9tU291cmNlTWFwID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX2Zyb21Tb3VyY2VNYXAoYVNvdXJjZU1hcENvbnN1bWVyKSB7XG4gICAgdmFyIHNvdXJjZVJvb3QgPSBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlUm9vdDtcbiAgICB2YXIgZ2VuZXJhdG9yID0gbmV3IFNvdXJjZU1hcEdlbmVyYXRvcih7XG4gICAgICBmaWxlOiBhU291cmNlTWFwQ29uc3VtZXIuZmlsZSxcbiAgICAgIHNvdXJjZVJvb3Q6IHNvdXJjZVJvb3RcbiAgICB9KTtcbiAgICBhU291cmNlTWFwQ29uc3VtZXIuZWFjaE1hcHBpbmcoZnVuY3Rpb24gKG1hcHBpbmcpIHtcbiAgICAgIHZhciBuZXdNYXBwaW5nID0ge1xuICAgICAgICBnZW5lcmF0ZWQ6IHtcbiAgICAgICAgICBsaW5lOiBtYXBwaW5nLmdlbmVyYXRlZExpbmUsXG4gICAgICAgICAgY29sdW1uOiBtYXBwaW5nLmdlbmVyYXRlZENvbHVtblxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBpZiAobWFwcGluZy5zb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICBuZXdNYXBwaW5nLnNvdXJjZSA9IG1hcHBpbmcuc291cmNlO1xuICAgICAgICBpZiAoc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgICAgbmV3TWFwcGluZy5zb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIG5ld01hcHBpbmcuc291cmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5ld01hcHBpbmcub3JpZ2luYWwgPSB7XG4gICAgICAgICAgbGluZTogbWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgICAgY29sdW1uOiBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG1hcHBpbmcubmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgbmV3TWFwcGluZy5uYW1lID0gbWFwcGluZy5uYW1lO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGdlbmVyYXRvci5hZGRNYXBwaW5nKG5ld01hcHBpbmcpO1xuICAgIH0pO1xuICAgIGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZUZpbGUpIHtcbiAgICAgIHZhciBjb250ZW50ID0gYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZUNvbnRlbnRGb3Ioc291cmNlRmlsZSk7XG4gICAgICBpZiAoY29udGVudCAhPSBudWxsKSB7XG4gICAgICAgIGdlbmVyYXRvci5zZXRTb3VyY2VDb250ZW50KHNvdXJjZUZpbGUsIGNvbnRlbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH07XG5cbi8qKlxuICogQWRkIGEgc2luZ2xlIG1hcHBpbmcgZnJvbSBvcmlnaW5hbCBzb3VyY2UgbGluZSBhbmQgY29sdW1uIHRvIHRoZSBnZW5lcmF0ZWRcbiAqIHNvdXJjZSdzIGxpbmUgYW5kIGNvbHVtbiBmb3IgdGhpcyBzb3VyY2UgbWFwIGJlaW5nIGNyZWF0ZWQuIFRoZSBtYXBwaW5nXG4gKiBvYmplY3Qgc2hvdWxkIGhhdmUgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBnZW5lcmF0ZWQ6IEFuIG9iamVjdCB3aXRoIHRoZSBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uIHBvc2l0aW9ucy5cbiAqICAgLSBvcmlnaW5hbDogQW4gb2JqZWN0IHdpdGggdGhlIG9yaWdpbmFsIGxpbmUgYW5kIGNvbHVtbiBwb3NpdGlvbnMuXG4gKiAgIC0gc291cmNlOiBUaGUgb3JpZ2luYWwgc291cmNlIGZpbGUgKHJlbGF0aXZlIHRvIHRoZSBzb3VyY2VSb290KS5cbiAqICAgLSBuYW1lOiBBbiBvcHRpb25hbCBvcmlnaW5hbCB0b2tlbiBuYW1lIGZvciB0aGlzIG1hcHBpbmcuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuYWRkTWFwcGluZyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9hZGRNYXBwaW5nKGFBcmdzKSB7XG4gICAgdmFyIGdlbmVyYXRlZCA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnZ2VuZXJhdGVkJyk7XG4gICAgdmFyIG9yaWdpbmFsID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdvcmlnaW5hbCcsIG51bGwpO1xuICAgIHZhciBzb3VyY2UgPSB1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZScsIG51bGwpO1xuICAgIHZhciBuYW1lID0gdXRpbC5nZXRBcmcoYUFyZ3MsICduYW1lJywgbnVsbCk7XG5cbiAgICBpZiAoIXRoaXMuX3NraXBWYWxpZGF0aW9uKSB7XG4gICAgICB0aGlzLl92YWxpZGF0ZU1hcHBpbmcoZ2VuZXJhdGVkLCBvcmlnaW5hbCwgc291cmNlLCBuYW1lKTtcbiAgICB9XG5cbiAgICBpZiAoc291cmNlICE9IG51bGwpIHtcbiAgICAgIHNvdXJjZSA9IFN0cmluZyhzb3VyY2UpO1xuICAgICAgaWYgKCF0aGlzLl9zb3VyY2VzLmhhcyhzb3VyY2UpKSB7XG4gICAgICAgIHRoaXMuX3NvdXJjZXMuYWRkKHNvdXJjZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG5hbWUgIT0gbnVsbCkge1xuICAgICAgbmFtZSA9IFN0cmluZyhuYW1lKTtcbiAgICAgIGlmICghdGhpcy5fbmFtZXMuaGFzKG5hbWUpKSB7XG4gICAgICAgIHRoaXMuX25hbWVzLmFkZChuYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9tYXBwaW5ncy5hZGQoe1xuICAgICAgZ2VuZXJhdGVkTGluZTogZ2VuZXJhdGVkLmxpbmUsXG4gICAgICBnZW5lcmF0ZWRDb2x1bW46IGdlbmVyYXRlZC5jb2x1bW4sXG4gICAgICBvcmlnaW5hbExpbmU6IG9yaWdpbmFsICE9IG51bGwgJiYgb3JpZ2luYWwubGluZSxcbiAgICAgIG9yaWdpbmFsQ29sdW1uOiBvcmlnaW5hbCAhPSBudWxsICYmIG9yaWdpbmFsLmNvbHVtbixcbiAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgbmFtZTogbmFtZVxuICAgIH0pO1xuICB9O1xuXG4vKipcbiAqIFNldCB0aGUgc291cmNlIGNvbnRlbnQgZm9yIGEgc291cmNlIGZpbGUuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuc2V0U291cmNlQ29udGVudCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9zZXRTb3VyY2VDb250ZW50KGFTb3VyY2VGaWxlLCBhU291cmNlQ29udGVudCkge1xuICAgIHZhciBzb3VyY2UgPSBhU291cmNlRmlsZTtcbiAgICBpZiAodGhpcy5fc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICBzb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHRoaXMuX3NvdXJjZVJvb3QsIHNvdXJjZSk7XG4gICAgfVxuXG4gICAgaWYgKGFTb3VyY2VDb250ZW50ICE9IG51bGwpIHtcbiAgICAgIC8vIEFkZCB0aGUgc291cmNlIGNvbnRlbnQgdG8gdGhlIF9zb3VyY2VzQ29udGVudHMgbWFwLlxuICAgICAgLy8gQ3JlYXRlIGEgbmV3IF9zb3VyY2VzQ29udGVudHMgbWFwIGlmIHRoZSBwcm9wZXJ0eSBpcyBudWxsLlxuICAgICAgaWYgKCF0aGlzLl9zb3VyY2VzQ29udGVudHMpIHtcbiAgICAgICAgdGhpcy5fc291cmNlc0NvbnRlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3NvdXJjZXNDb250ZW50c1t1dGlsLnRvU2V0U3RyaW5nKHNvdXJjZSldID0gYVNvdXJjZUNvbnRlbnQ7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9zb3VyY2VzQ29udGVudHMpIHtcbiAgICAgIC8vIFJlbW92ZSB0aGUgc291cmNlIGZpbGUgZnJvbSB0aGUgX3NvdXJjZXNDb250ZW50cyBtYXAuXG4gICAgICAvLyBJZiB0aGUgX3NvdXJjZXNDb250ZW50cyBtYXAgaXMgZW1wdHksIHNldCB0aGUgcHJvcGVydHkgdG8gbnVsbC5cbiAgICAgIGRlbGV0ZSB0aGlzLl9zb3VyY2VzQ29udGVudHNbdXRpbC50b1NldFN0cmluZyhzb3VyY2UpXTtcbiAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLl9zb3VyY2VzQ29udGVudHMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLl9zb3VyY2VzQ29udGVudHMgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBBcHBsaWVzIHRoZSBtYXBwaW5ncyBvZiBhIHN1Yi1zb3VyY2UtbWFwIGZvciBhIHNwZWNpZmljIHNvdXJjZSBmaWxlIHRvIHRoZVxuICogc291cmNlIG1hcCBiZWluZyBnZW5lcmF0ZWQuIEVhY2ggbWFwcGluZyB0byB0aGUgc3VwcGxpZWQgc291cmNlIGZpbGUgaXNcbiAqIHJld3JpdHRlbiB1c2luZyB0aGUgc3VwcGxpZWQgc291cmNlIG1hcC4gTm90ZTogVGhlIHJlc29sdXRpb24gZm9yIHRoZVxuICogcmVzdWx0aW5nIG1hcHBpbmdzIGlzIHRoZSBtaW5pbWl1bSBvZiB0aGlzIG1hcCBhbmQgdGhlIHN1cHBsaWVkIG1hcC5cbiAqXG4gKiBAcGFyYW0gYVNvdXJjZU1hcENvbnN1bWVyIFRoZSBzb3VyY2UgbWFwIHRvIGJlIGFwcGxpZWQuXG4gKiBAcGFyYW0gYVNvdXJjZUZpbGUgT3B0aW9uYWwuIFRoZSBmaWxlbmFtZSBvZiB0aGUgc291cmNlIGZpbGUuXG4gKiAgICAgICAgSWYgb21pdHRlZCwgU291cmNlTWFwQ29uc3VtZXIncyBmaWxlIHByb3BlcnR5IHdpbGwgYmUgdXNlZC5cbiAqIEBwYXJhbSBhU291cmNlTWFwUGF0aCBPcHRpb25hbC4gVGhlIGRpcm5hbWUgb2YgdGhlIHBhdGggdG8gdGhlIHNvdXJjZSBtYXBcbiAqICAgICAgICB0byBiZSBhcHBsaWVkLiBJZiByZWxhdGl2ZSwgaXQgaXMgcmVsYXRpdmUgdG8gdGhlIFNvdXJjZU1hcENvbnN1bWVyLlxuICogICAgICAgIFRoaXMgcGFyYW1ldGVyIGlzIG5lZWRlZCB3aGVuIHRoZSB0d28gc291cmNlIG1hcHMgYXJlbid0IGluIHRoZSBzYW1lXG4gKiAgICAgICAgZGlyZWN0b3J5LCBhbmQgdGhlIHNvdXJjZSBtYXAgdG8gYmUgYXBwbGllZCBjb250YWlucyByZWxhdGl2ZSBzb3VyY2VcbiAqICAgICAgICBwYXRocy4gSWYgc28sIHRob3NlIHJlbGF0aXZlIHNvdXJjZSBwYXRocyBuZWVkIHRvIGJlIHJld3JpdHRlblxuICogICAgICAgIHJlbGF0aXZlIHRvIHRoZSBTb3VyY2VNYXBHZW5lcmF0b3IuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuYXBwbHlTb3VyY2VNYXAgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfYXBwbHlTb3VyY2VNYXAoYVNvdXJjZU1hcENvbnN1bWVyLCBhU291cmNlRmlsZSwgYVNvdXJjZU1hcFBhdGgpIHtcbiAgICB2YXIgc291cmNlRmlsZSA9IGFTb3VyY2VGaWxlO1xuICAgIC8vIElmIGFTb3VyY2VGaWxlIGlzIG9taXR0ZWQsIHdlIHdpbGwgdXNlIHRoZSBmaWxlIHByb3BlcnR5IG9mIHRoZSBTb3VyY2VNYXBcbiAgICBpZiAoYVNvdXJjZUZpbGUgPT0gbnVsbCkge1xuICAgICAgaWYgKGFTb3VyY2VNYXBDb25zdW1lci5maWxlID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdTb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLmFwcGx5U291cmNlTWFwIHJlcXVpcmVzIGVpdGhlciBhbiBleHBsaWNpdCBzb3VyY2UgZmlsZSwgJyArXG4gICAgICAgICAgJ29yIHRoZSBzb3VyY2UgbWFwXFwncyBcImZpbGVcIiBwcm9wZXJ0eS4gQm90aCB3ZXJlIG9taXR0ZWQuJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgc291cmNlRmlsZSA9IGFTb3VyY2VNYXBDb25zdW1lci5maWxlO1xuICAgIH1cbiAgICB2YXIgc291cmNlUm9vdCA9IHRoaXMuX3NvdXJjZVJvb3Q7XG4gICAgLy8gTWFrZSBcInNvdXJjZUZpbGVcIiByZWxhdGl2ZSBpZiBhbiBhYnNvbHV0ZSBVcmwgaXMgcGFzc2VkLlxuICAgIGlmIChzb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgIHNvdXJjZUZpbGUgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIHNvdXJjZUZpbGUpO1xuICAgIH1cbiAgICAvLyBBcHBseWluZyB0aGUgU291cmNlTWFwIGNhbiBhZGQgYW5kIHJlbW92ZSBpdGVtcyBmcm9tIHRoZSBzb3VyY2VzIGFuZFxuICAgIC8vIHRoZSBuYW1lcyBhcnJheS5cbiAgICB2YXIgbmV3U291cmNlcyA9IG5ldyBBcnJheVNldCgpO1xuICAgIHZhciBuZXdOYW1lcyA9IG5ldyBBcnJheVNldCgpO1xuXG4gICAgLy8gRmluZCBtYXBwaW5ncyBmb3IgdGhlIFwic291cmNlRmlsZVwiXG4gICAgdGhpcy5fbWFwcGluZ3MudW5zb3J0ZWRGb3JFYWNoKGZ1bmN0aW9uIChtYXBwaW5nKSB7XG4gICAgICBpZiAobWFwcGluZy5zb3VyY2UgPT09IHNvdXJjZUZpbGUgJiYgbWFwcGluZy5vcmlnaW5hbExpbmUgIT0gbnVsbCkge1xuICAgICAgICAvLyBDaGVjayBpZiBpdCBjYW4gYmUgbWFwcGVkIGJ5IHRoZSBzb3VyY2UgbWFwLCB0aGVuIHVwZGF0ZSB0aGUgbWFwcGluZy5cbiAgICAgICAgdmFyIG9yaWdpbmFsID0gYVNvdXJjZU1hcENvbnN1bWVyLm9yaWdpbmFsUG9zaXRpb25Gb3Ioe1xuICAgICAgICAgIGxpbmU6IG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICAgIGNvbHVtbjogbWFwcGluZy5vcmlnaW5hbENvbHVtblxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG9yaWdpbmFsLnNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgICAgLy8gQ29weSBtYXBwaW5nXG4gICAgICAgICAgbWFwcGluZy5zb3VyY2UgPSBvcmlnaW5hbC5zb3VyY2U7XG4gICAgICAgICAgaWYgKGFTb3VyY2VNYXBQYXRoICE9IG51bGwpIHtcbiAgICAgICAgICAgIG1hcHBpbmcuc291cmNlID0gdXRpbC5qb2luKGFTb3VyY2VNYXBQYXRoLCBtYXBwaW5nLnNvdXJjZSlcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgbWFwcGluZy5zb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIG1hcHBpbmcuc291cmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbWFwcGluZy5vcmlnaW5hbExpbmUgPSBvcmlnaW5hbC5saW5lO1xuICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxDb2x1bW4gPSBvcmlnaW5hbC5jb2x1bW47XG4gICAgICAgICAgaWYgKG9yaWdpbmFsLm5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgbWFwcGluZy5uYW1lID0gb3JpZ2luYWwubmFtZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHNvdXJjZSA9IG1hcHBpbmcuc291cmNlO1xuICAgICAgaWYgKHNvdXJjZSAhPSBudWxsICYmICFuZXdTb3VyY2VzLmhhcyhzb3VyY2UpKSB7XG4gICAgICAgIG5ld1NvdXJjZXMuYWRkKHNvdXJjZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBuYW1lID0gbWFwcGluZy5uYW1lO1xuICAgICAgaWYgKG5hbWUgIT0gbnVsbCAmJiAhbmV3TmFtZXMuaGFzKG5hbWUpKSB7XG4gICAgICAgIG5ld05hbWVzLmFkZChuYW1lKTtcbiAgICAgIH1cblxuICAgIH0sIHRoaXMpO1xuICAgIHRoaXMuX3NvdXJjZXMgPSBuZXdTb3VyY2VzO1xuICAgIHRoaXMuX25hbWVzID0gbmV3TmFtZXM7XG5cbiAgICAvLyBDb3B5IHNvdXJjZXNDb250ZW50cyBvZiBhcHBsaWVkIG1hcC5cbiAgICBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2VGaWxlKSB7XG4gICAgICB2YXIgY29udGVudCA9IGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VDb250ZW50Rm9yKHNvdXJjZUZpbGUpO1xuICAgICAgaWYgKGNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoYVNvdXJjZU1hcFBhdGggIT0gbnVsbCkge1xuICAgICAgICAgIHNvdXJjZUZpbGUgPSB1dGlsLmpvaW4oYVNvdXJjZU1hcFBhdGgsIHNvdXJjZUZpbGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgICBzb3VyY2VGaWxlID0gdXRpbC5yZWxhdGl2ZShzb3VyY2VSb290LCBzb3VyY2VGaWxlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFNvdXJjZUNvbnRlbnQoc291cmNlRmlsZSwgY29udGVudCk7XG4gICAgICB9XG4gICAgfSwgdGhpcyk7XG4gIH07XG5cbi8qKlxuICogQSBtYXBwaW5nIGNhbiBoYXZlIG9uZSBvZiB0aGUgdGhyZWUgbGV2ZWxzIG9mIGRhdGE6XG4gKlxuICogICAxLiBKdXN0IHRoZSBnZW5lcmF0ZWQgcG9zaXRpb24uXG4gKiAgIDIuIFRoZSBHZW5lcmF0ZWQgcG9zaXRpb24sIG9yaWdpbmFsIHBvc2l0aW9uLCBhbmQgb3JpZ2luYWwgc291cmNlLlxuICogICAzLiBHZW5lcmF0ZWQgYW5kIG9yaWdpbmFsIHBvc2l0aW9uLCBvcmlnaW5hbCBzb3VyY2UsIGFzIHdlbGwgYXMgYSBuYW1lXG4gKiAgICAgIHRva2VuLlxuICpcbiAqIFRvIG1haW50YWluIGNvbnNpc3RlbmN5LCB3ZSB2YWxpZGF0ZSB0aGF0IGFueSBuZXcgbWFwcGluZyBiZWluZyBhZGRlZCBmYWxsc1xuICogaW4gdG8gb25lIG9mIHRoZXNlIGNhdGVnb3JpZXMuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuX3ZhbGlkYXRlTWFwcGluZyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl92YWxpZGF0ZU1hcHBpbmcoYUdlbmVyYXRlZCwgYU9yaWdpbmFsLCBhU291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFOYW1lKSB7XG4gICAgaWYgKGFHZW5lcmF0ZWQgJiYgJ2xpbmUnIGluIGFHZW5lcmF0ZWQgJiYgJ2NvbHVtbicgaW4gYUdlbmVyYXRlZFxuICAgICAgICAmJiBhR2VuZXJhdGVkLmxpbmUgPiAwICYmIGFHZW5lcmF0ZWQuY29sdW1uID49IDBcbiAgICAgICAgJiYgIWFPcmlnaW5hbCAmJiAhYVNvdXJjZSAmJiAhYU5hbWUpIHtcbiAgICAgIC8vIENhc2UgMS5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWxzZSBpZiAoYUdlbmVyYXRlZCAmJiAnbGluZScgaW4gYUdlbmVyYXRlZCAmJiAnY29sdW1uJyBpbiBhR2VuZXJhdGVkXG4gICAgICAgICAgICAgJiYgYU9yaWdpbmFsICYmICdsaW5lJyBpbiBhT3JpZ2luYWwgJiYgJ2NvbHVtbicgaW4gYU9yaWdpbmFsXG4gICAgICAgICAgICAgJiYgYUdlbmVyYXRlZC5saW5lID4gMCAmJiBhR2VuZXJhdGVkLmNvbHVtbiA+PSAwXG4gICAgICAgICAgICAgJiYgYU9yaWdpbmFsLmxpbmUgPiAwICYmIGFPcmlnaW5hbC5jb2x1bW4gPj0gMFxuICAgICAgICAgICAgICYmIGFTb3VyY2UpIHtcbiAgICAgIC8vIENhc2VzIDIgYW5kIDMuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1hcHBpbmc6ICcgKyBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGdlbmVyYXRlZDogYUdlbmVyYXRlZCxcbiAgICAgICAgc291cmNlOiBhU291cmNlLFxuICAgICAgICBvcmlnaW5hbDogYU9yaWdpbmFsLFxuICAgICAgICBuYW1lOiBhTmFtZVxuICAgICAgfSkpO1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBTZXJpYWxpemUgdGhlIGFjY3VtdWxhdGVkIG1hcHBpbmdzIGluIHRvIHRoZSBzdHJlYW0gb2YgYmFzZSA2NCBWTFFzXG4gKiBzcGVjaWZpZWQgYnkgdGhlIHNvdXJjZSBtYXAgZm9ybWF0LlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLl9zZXJpYWxpemVNYXBwaW5ncyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9zZXJpYWxpemVNYXBwaW5ncygpIHtcbiAgICB2YXIgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgIHZhciBwcmV2aW91c0dlbmVyYXRlZExpbmUgPSAxO1xuICAgIHZhciBwcmV2aW91c09yaWdpbmFsQ29sdW1uID0gMDtcbiAgICB2YXIgcHJldmlvdXNPcmlnaW5hbExpbmUgPSAwO1xuICAgIHZhciBwcmV2aW91c05hbWUgPSAwO1xuICAgIHZhciBwcmV2aW91c1NvdXJjZSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIHZhciBuZXh0O1xuICAgIHZhciBtYXBwaW5nO1xuICAgIHZhciBuYW1lSWR4O1xuICAgIHZhciBzb3VyY2VJZHg7XG5cbiAgICB2YXIgbWFwcGluZ3MgPSB0aGlzLl9tYXBwaW5ncy50b0FycmF5KCk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IG1hcHBpbmdzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBtYXBwaW5nID0gbWFwcGluZ3NbaV07XG4gICAgICBuZXh0ID0gJydcblxuICAgICAgaWYgKG1hcHBpbmcuZ2VuZXJhdGVkTGluZSAhPT0gcHJldmlvdXNHZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICAgICAgd2hpbGUgKG1hcHBpbmcuZ2VuZXJhdGVkTGluZSAhPT0gcHJldmlvdXNHZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgICAgbmV4dCArPSAnOyc7XG4gICAgICAgICAgcHJldmlvdXNHZW5lcmF0ZWRMaW5lKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICBpZiAoIXV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQobWFwcGluZywgbWFwcGluZ3NbaSAtIDFdKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5leHQgKz0gJywnO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG5leHQgKz0gYmFzZTY0VkxRLmVuY29kZShtYXBwaW5nLmdlbmVyYXRlZENvbHVtblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBwcmV2aW91c0dlbmVyYXRlZENvbHVtbik7XG4gICAgICBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiA9IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uO1xuXG4gICAgICBpZiAobWFwcGluZy5zb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICBzb3VyY2VJZHggPSB0aGlzLl9zb3VyY2VzLmluZGV4T2YobWFwcGluZy5zb3VyY2UpO1xuICAgICAgICBuZXh0ICs9IGJhc2U2NFZMUS5lbmNvZGUoc291cmNlSWR4IC0gcHJldmlvdXNTb3VyY2UpO1xuICAgICAgICBwcmV2aW91c1NvdXJjZSA9IHNvdXJjZUlkeDtcblxuICAgICAgICAvLyBsaW5lcyBhcmUgc3RvcmVkIDAtYmFzZWQgaW4gU291cmNlTWFwIHNwZWMgdmVyc2lvbiAzXG4gICAgICAgIG5leHQgKz0gYmFzZTY0VkxRLmVuY29kZShtYXBwaW5nLm9yaWdpbmFsTGluZSAtIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBwcmV2aW91c09yaWdpbmFsTGluZSk7XG4gICAgICAgIHByZXZpb3VzT3JpZ2luYWxMaW5lID0gbWFwcGluZy5vcmlnaW5hbExpbmUgLSAxO1xuXG4gICAgICAgIG5leHQgKz0gYmFzZTY0VkxRLmVuY29kZShtYXBwaW5nLm9yaWdpbmFsQ29sdW1uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gcHJldmlvdXNPcmlnaW5hbENvbHVtbik7XG4gICAgICAgIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gPSBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uO1xuXG4gICAgICAgIGlmIChtYXBwaW5nLm5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgIG5hbWVJZHggPSB0aGlzLl9uYW1lcy5pbmRleE9mKG1hcHBpbmcubmFtZSk7XG4gICAgICAgICAgbmV4dCArPSBiYXNlNjRWTFEuZW5jb2RlKG5hbWVJZHggLSBwcmV2aW91c05hbWUpO1xuICAgICAgICAgIHByZXZpb3VzTmFtZSA9IG5hbWVJZHg7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmVzdWx0ICs9IG5leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5fZ2VuZXJhdGVTb3VyY2VzQ29udGVudCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9nZW5lcmF0ZVNvdXJjZXNDb250ZW50KGFTb3VyY2VzLCBhU291cmNlUm9vdCkge1xuICAgIHJldHVybiBhU291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgaWYgKCF0aGlzLl9zb3VyY2VzQ29udGVudHMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoYVNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICBzb3VyY2UgPSB1dGlsLnJlbGF0aXZlKGFTb3VyY2VSb290LCBzb3VyY2UpO1xuICAgICAgfVxuICAgICAgdmFyIGtleSA9IHV0aWwudG9TZXRTdHJpbmcoc291cmNlKTtcbiAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5fc291cmNlc0NvbnRlbnRzLCBrZXkpXG4gICAgICAgID8gdGhpcy5fc291cmNlc0NvbnRlbnRzW2tleV1cbiAgICAgICAgOiBudWxsO1xuICAgIH0sIHRoaXMpO1xuICB9O1xuXG4vKipcbiAqIEV4dGVybmFsaXplIHRoZSBzb3VyY2UgbWFwLlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLnRvSlNPTiA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl90b0pTT04oKSB7XG4gICAgdmFyIG1hcCA9IHtcbiAgICAgIHZlcnNpb246IHRoaXMuX3ZlcnNpb24sXG4gICAgICBzb3VyY2VzOiB0aGlzLl9zb3VyY2VzLnRvQXJyYXkoKSxcbiAgICAgIG5hbWVzOiB0aGlzLl9uYW1lcy50b0FycmF5KCksXG4gICAgICBtYXBwaW5nczogdGhpcy5fc2VyaWFsaXplTWFwcGluZ3MoKVxuICAgIH07XG4gICAgaWYgKHRoaXMuX2ZpbGUgIT0gbnVsbCkge1xuICAgICAgbWFwLmZpbGUgPSB0aGlzLl9maWxlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICBtYXAuc291cmNlUm9vdCA9IHRoaXMuX3NvdXJjZVJvb3Q7XG4gICAgfVxuICAgIGlmICh0aGlzLl9zb3VyY2VzQ29udGVudHMpIHtcbiAgICAgIG1hcC5zb3VyY2VzQ29udGVudCA9IHRoaXMuX2dlbmVyYXRlU291cmNlc0NvbnRlbnQobWFwLnNvdXJjZXMsIG1hcC5zb3VyY2VSb290KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFwO1xuICB9O1xuXG4vKipcbiAqIFJlbmRlciB0aGUgc291cmNlIG1hcCBiZWluZyBnZW5lcmF0ZWQgdG8gYSBzdHJpbmcuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUudG9TdHJpbmcgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudG9KU09OKCkpO1xuICB9O1xuXG5leHBvcnRzLlNvdXJjZU1hcEdlbmVyYXRvciA9IFNvdXJjZU1hcEdlbmVyYXRvcjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC9saWIvc291cmNlLW1hcC1nZW5lcmF0b3IuanMiLCJpbXBvcnQge2lzU3RyZWFtfSBmcm9tICcuL3N0cmVhbXknO1xyXG5cclxuY29uc3QgVEVYVF9OT0RFID0gJyN0ZXh0JztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoY29tcG9uZW50LCBwYXJlbnRFbGVtZW50KSB7XHJcblx0cmV0dXJuIGNvbXBvbmVudC52ZG9tJC5yZWR1Y2UoKHtlbGVtZW50Om9sZEVsZW1lbnQsIHZlcnNpb246b2xkVmVyc2lvbiwgY2hpbGRyZW46b2xkQ2hpbGRyZW59LCB7dGFnLCBwcm9wcywgY2hpbGRyZW4sIHZlcnNpb259KSA9PiB7XHJcblx0XHRpZiAob2xkRWxlbWVudCA9PT0gbnVsbCkge1xyXG5cdFx0XHRvbGRFbGVtZW50ID0gY3JlYXRlTm9kZSh0YWcsIGNoaWxkcmVuKTtcclxuXHRcdFx0aWYgKHBhcmVudEVsZW1lbnQpIHtcclxuXHRcdFx0XHRwYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKG9sZEVsZW1lbnQpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRkaWZmKG9sZEVsZW1lbnQsIHRhZywgcHJvcHMsIGNoaWxkcmVuLCB2ZXJzaW9uLCBvbGRDaGlsZHJlbiwgb2xkVmVyc2lvbik7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRlbGVtZW50OiBvbGRFbGVtZW50LFxyXG5cdFx0XHR2ZXJzaW9uLFxyXG5cdFx0XHRjaGlsZHJlbjogSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjaGlsZHJlbikpXHJcblx0XHR9XHJcblx0fSwge1xyXG5cdFx0ZWxlbWVudDogbnVsbCxcclxuXHRcdHZlcnNpb246IC0xLFxyXG5cdFx0Y2hpbGRyZW46IFtdXHJcblx0fSlcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRpZmYob2xkRWxlbWVudCwgdGFnLCBwcm9wcywgbmV3Q2hpbGRyZW4sIG5ld1ZlcnNpb24sIG9sZENoaWxkcmVuLCBvbGRWZXJzaW9uKSB7XHJcblx0Ly8gaWYgdGhlIGRvbS10cmVlIGhhc24ndCBjaGFuZ2VkLCBkb24ndCBwcm9jZXNzIGl0XHJcblx0aWYgKG5ld1ZlcnNpb24gPT09IHVuZGVmaW5lZCAmJiBuZXdWZXJzaW9uID09PSBvbGRWZXJzaW9uKSB7XHJcblx0XHRyZXR1cm4gb2xkRWxlbWVudDtcclxuXHR9XHJcblx0bGV0IG5ld0VsZW1lbnQgPSBvbGRFbGVtZW50O1xyXG5cclxuXHRpZiAob2xkRWxlbWVudCBpbnN0YW5jZW9mIHdpbmRvdy5UZXh0ICYmIHRhZyA9PT0gVEVYVF9OT0RFICYmIG9sZEVsZW1lbnQubm9kZVZhbHVlICE9PSBuZXdDaGlsZHJlblswXSkge1xyXG5cdFx0b2xkRWxlbWVudC5ub2RlVmFsdWUgPSBuZXdDaGlsZHJlblswXTtcclxuXHRcdHJldHVybiBuZXdFbGVtZW50O1xyXG5cdH1cclxuXHJcblx0aWYgKG9sZEVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gdGFnKSB7XHJcblx0XHRuZXdFbGVtZW50ID0gY3JlYXRlTm9kZSh0YWcsIG5ld0NoaWxkcmVuKTtcclxuXHRcdG9sZEVsZW1lbnQucGFyZW50RWxlbWVudC5yZXBsYWNlQ2hpbGQobmV3RWxlbWVudCwgb2xkRWxlbWVudCk7XHJcblx0XHRvbGRDaGlsZHJlbiA9IFtdO1xyXG5cdFx0b2xkVmVyc2lvbiA9IC0xO1xyXG5cdH1cclxuXHJcblx0ZGlmZkF0dHJpYnV0ZXMobmV3RWxlbWVudCwgcHJvcHMpO1xyXG5cdGlmICh0YWcgIT09IFRFWFRfTk9ERSAmJiAhKG5ld0NoaWxkcmVuLmxlbmd0aCA9PT0gMCAmJiBvbGRDaGlsZHJlbi5sZW5ndGggPT09IDApKSB7XHJcblx0XHRkaWZmQ2hpbGRyZW4obmV3RWxlbWVudCwgbmV3Q2hpbGRyZW4sIG9sZENoaWxkcmVuKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBuZXdFbGVtZW50O1xyXG59XHJcblxyXG5mdW5jdGlvbiBkaWZmQXR0cmlidXRlcyhlbGVtZW50LCBwcm9wcykge1xyXG5cdGlmIChwcm9wcyAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwcm9wcykubWFwKGZ1bmN0aW9uIGFwcGx5UHJvcGVydHlUb0VsZW1lbnQoYXR0cmlidXRlKSB7XHJcblx0XHRcdGFwcGx5QXR0cmlidXRlKGVsZW1lbnQsIGF0dHJpYnV0ZSwgcHJvcHNbYXR0cmlidXRlXSlcclxuXHRcdH0pO1xyXG5cdFx0Y2xlYW51cEF0dHJpYnV0ZXMoZWxlbWVudCwgcHJvcHMpO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gYXBwbHlBdHRyaWJ1dGUoZWxlbWVudCwgYXR0cmlidXRlLCB2YWx1ZSkge1xyXG5cdGlmIChhdHRyaWJ1dGUgPT09ICdjbGFzcycgfHwgYXR0cmlidXRlID09PSAnY2xhc3NOYW1lJykge1xyXG5cdFx0ZWxlbWVudC5jbGFzc05hbWUgPSB2YWx1ZTtcclxuXHQvLyB3ZSBsZWF2ZSB0aGUgcG9zc2liaWxpdHkgdG8gZGVmaW5lIHN0eWxlcyBhcyBzdHJpbmdzXHJcblx0Ly8gYnV0IHdlIGFsbG93IHN0eWxlcyB0byBiZSBkZWZpbmVkIGFzIGFuIG9iamVjdFxyXG5cdH0gZWxzZSBpZiAoYXR0cmlidXRlID09PSAnc3R5bGUnICYmIHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgdmFsdWUpO1xyXG5cdC8vIG90aGVyIHByb3BlcnR5cyBhcmUganVzdCBhZGRlZCBhcyBpcyB0byB0aGUgRE9NXHJcblx0fSBlbHNlIHtcclxuXHRcdC8vIGFsc28gcmVtb3ZlIGF0dHJpYnV0ZXMgb24gbnVsbCB0byBhbGxvdyBiZXR0ZXIgaGFuZGxpbmcgb2Ygc3RyZWFtc1xyXG5cdFx0Ly8gc3RyZWFtcyBkb24ndCBlbWl0IG9uIHVuZGVmaW5lZFxyXG5cdFx0aWYgKHZhbHVlID09PSBudWxsKSB7XHJcblx0XHRcdGVsZW1lbnRbYXR0cmlidXRlXSA9IHVuZGVmaW5lZDtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIGVsZW1lbnQuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpO1xyXG5cdFx0XHRlbGVtZW50W2F0dHJpYnV0ZV0gPSB2YWx1ZTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbi8vIHJlbW92ZSBhdHRyaWJ1dGVzIHRoYXQgYXJlIG5vdCBpbiBwcm9wcyBhbnltb3JlXHJcbmZ1bmN0aW9uIGNsZWFudXBBdHRyaWJ1dGVzKGVsZW1lbnQsIHByb3BzKSB7XHJcblx0aWYgKGVsZW1lbnQucHJvcHMgIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0Zm9yKGxldCBhdHRyaWJ1dGUgaW4gZWxlbWVudC5wcm9wcykge1xyXG5cdFx0XHRpZiAocHJvcHNbYXR0cmlidXRlXSA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0ZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gdW5pZnlDaGlsZHJlbihjaGlsZHJlbikge1xyXG5cdHJldHVybiBjaGlsZHJlbi5tYXAoY2hpbGQgPT4ge1xyXG5cdFx0Ly8gaWYgdGhlcmUgaXMgbm8gdGFnIHdlIGFzc3VtZSBpdCdzIGEgbnVtYmVyIG9yIGEgc3RyaW5nXHJcblx0XHRpZiAoIWlzU3RyZWFtKGNoaWxkKSAmJiBjaGlsZC50YWcgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdHRhZzogVEVYVF9OT0RFLFxyXG5cdFx0XHRcdGNoaWxkcmVuOiBbY2hpbGRdLFxyXG5cdFx0XHRcdHZlcnNpb246IDFcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIGNoaWxkO1xyXG5cdFx0fVxyXG5cdH0pXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRpZmZDaGlsZHJlbihlbGVtZW50LCBuZXdDaGlsZHJlbiwgb2xkQ2hpbGRyZW4pIHtcclxuXHRsZXQgb2xkQ2hpbGROb2RlcyA9IGVsZW1lbnQuY2hpbGROb2RlcztcclxuXHRsZXQgdW5pZmllZENoaWxkcmVuID0gdW5pZnlDaGlsZHJlbihuZXdDaGlsZHJlbik7XHJcblx0bGV0IHVuaWZpZWRPbGRDaGlsZHJlbiA9IHVuaWZ5Q2hpbGRyZW4ob2xkQ2hpbGRyZW4pO1xyXG5cclxuXHRsZXQgaSA9IDA7XHJcblx0Ly8gZGlmZiBleGlzdGluZyBub2Rlc1xyXG5cdGZvcig7IGkgPCB1bmlmaWVkT2xkQ2hpbGRyZW4ubGVuZ3RoICYmIGkgPCB1bmlmaWVkQ2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuXHRcdGxldCBvbGRFbGVtZW50ID0gb2xkQ2hpbGROb2Rlc1tpXTtcclxuXHRcdGxldCB7dmVyc2lvbjogb2xkVmVyc2lvbiwgY2hpbGRyZW46IG9sZENoaWxkQ2hpbGRyZW59ID0gdW5pZmllZE9sZENoaWxkcmVuW2ldO1xyXG5cdFx0bGV0IHt0YWcsIHByb3BzLCBjaGlsZHJlbiwgdmVyc2lvbn0gPSB1bmlmaWVkQ2hpbGRyZW5baV07XHJcblx0XHRkaWZmKG9sZEVsZW1lbnQsIHRhZywgcHJvcHMsIGNoaWxkcmVuLCB2ZXJzaW9uLCBvbGRDaGlsZENoaWxkcmVuLCBvbGRWZXJzaW9uKTtcclxuXHR9XHJcblxyXG5cdC8vIHJlbW92ZSBub3QgbmVlZGVkIG5vZGVzIGF0IHRoZSBlbmRcclxuXHRmb3IoOyBpIDwgdW5pZmllZE9sZENoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRlbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQubGFzdENoaWxkKTtcclxuXHR9XHJcblxyXG5cdC8vIGFkZCBuZXcgbm9kZXNcclxuXHRmb3IoOyBpIDwgdW5pZmllZENoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRsZXQge3RhZywgcHJvcHMsIGNoaWxkcmVuLCB2ZXJzaW9ufSA9IHVuaWZpZWRDaGlsZHJlbltpXTtcclxuXHRcdGxldCBuZXdFbGVtZW50ID0gY3JlYXRlTm9kZSh0YWcsIGNoaWxkcmVuKTtcclxuXHRcdGVsZW1lbnQuYXBwZW5kQ2hpbGQobmV3RWxlbWVudCk7XHJcblx0XHRkaWZmKG5ld0VsZW1lbnQsIHRhZywgcHJvcHMsIGNoaWxkcmVuLCB2ZXJzaW9uLCBbXSwgLTEpO1xyXG5cdH1cclxufVxyXG5cclxuLy8gY3JlYXRlIHRleHRfbm9kZXMgZnJvbSBudW1iZXJzIG9yIHN0cmluZ3NcclxuLy8gY3JlYXRlIGRvbU5vZGVzIGZyb20gcmVndWxhciB2ZG9tIGRlc2NyaXB0aW9uc1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTm9kZSh0YWcsIGNoaWxkcmVuKSB7XHJcblx0aWYgKHRhZyA9PT0gVEVYVF9OT0RFKSB7XHJcblx0XHRyZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY2hpbGRyZW5bMF0pO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRyZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xyXG5cdH1cclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy91dGlscy9zdHJlYW15LWRvbS5qcyIsImltcG9ydCB7IGgsIHN0cmVhbSB9IGZyb20gJy4uL3NyYyc7XHJcbmltcG9ydCAnLi9oZWFkZXIuc2Nzcyc7XHJcblxyXG5leHBvcnQgY29uc3QgSGVhZGVyID0gKCkgPT4ge1xyXG4gICAgbGV0IHNjcm9sbCQgPSBzdHJlYW0oKTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzY3JvbGwkKTtcclxuXHJcbiAgICBsZXQgaGVhZGVySGlkZGVuJCA9IHN0cmVhbShmYWxzZSk7XHJcbiAgICBsZXQgaGVhZGVyID0gPGRpdlxyXG4gICAgICAgICAgICBjbGFzcz17aGVhZGVySGlkZGVuJC5tYXAoaGlkZGVuID0+IFwicm93IGJpZy1oZWFkZXIgaGlnaGxpZ2h0LWJhY2tncm91bmQgXCIgKyAoaGlkZGVuID8gJ2hpZGRlbicgOiAnJykpfVxyXG4gICAgICAgICAgICBvbmNsaWNrPXsoZSkgPT4gZS50YXJnZXQudGFnTmFtZSAhPSBcIkFcIiAmJiBzY3JvbGxVcCgpfVxyXG4gICAgICAgID5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wgczEyIGNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIi4vaWNvbi5wbmdcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzcz1cImNvbCBzMTIgY2VudGVyIGhpZ2hsaWdodFwiPlpMSVE8L2gxPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8aDMgY2xhc3M9XCJjZW50ZXIgaGlnaGxpZ2h0LWxlc3NcIj5UaGUgd2ViLWZyYW1ld29yay1mb3JjZSB5b3Ugd2FudCB5b3VyIFBhZGF3YW4gdG8gbGVhcm4uPC9oMz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsaW5rLWxpc3QgY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICA8YSBocmVmPVwiLyNtb3RpdmF0aW9uXCI+TW90aXZhdGlvbjwvYT5cclxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIvI3R1dG9yaWFsXCI+VHV0b3JpYWw8L2E+XHJcbiAgICAgICAgICAgICAgICA8YSBocmVmPVwiLyNzdHJlYW1zXCI+U3RyZWFtczwvYT5cclxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIvI3N0YXRlXCI+U3RhdGU8L2E+XHJcbiAgICAgICAgICAgICAgICA8YSBocmVmPVwiLyNoZWxwZXJzXCI+SGVscGVyczwvYT5cclxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIvI3JvdXRpbmdcIj5Sb3V0aW5nPC9hPlxyXG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cIi8jbGlmZWN5Y2xlXCI+TGlmZWN5Y2xlPC9hPlxyXG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cIi8jdGVzdGluZ1wiPlRlc3Rpbmc8L2E+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PjtcclxuXHJcbiAgICBzY3JvbGwkLm1hcCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKCFoZWFkZXJIaWRkZW4kLnZhbHVlICYmIChkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCA8IDkwMCkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICBsZXQgc2Nyb2xsVG9wID0gd2luZG93LnNjcm9sbFk7XHJcbiAgICAgICAgcmV0dXJuIHNjcm9sbFRvcCA+IDEwMDtcclxuICAgIH0pLm1hcChoZWFkZXJIaWRkZW4kKTtcclxuXHJcbiAgICByZXR1cm4gaGVhZGVyO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzY3JvbGxVcCgpIHtcclxuICAgIHNjcm9sbFRvKGRvY3VtZW50LmJvZHksIDAsIDAuNSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNjcm9sbFRvKGVsZW1lbnQsIHRvLCBkdXJhdGlvbikge1xyXG4gICAgaWYgKGR1cmF0aW9uIDw9IDApIHJldHVybjtcclxuICAgIHZhciBkaWZmZXJlbmNlID0gdG8gLSBlbGVtZW50LnNjcm9sbFRvcDtcclxuICAgIHZhciBwZXJUaWNrID0gZGlmZmVyZW5jZSAvIGR1cmF0aW9uICogMTA7XHJcblxyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICBlbGVtZW50LnNjcm9sbFRvcCA9IGVsZW1lbnQuc2Nyb2xsVG9wICsgcGVyVGljaztcclxuICAgICAgICBpZiAoZWxlbWVudC5zY3JvbGxUb3AgPT09IHRvKSByZXR1cm47XHJcbiAgICAgICAgc2Nyb2xsVG8oZWxlbWVudCwgdG8sIGR1cmF0aW9uIC0gMTApO1xyXG4gICAgfSwgMTApO1xyXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZGVtby9oZWFkZXIuanN4IiwiaW1wb3J0IHsgaCB9IGZyb20gJy4uL3NyYyc7XHJcblxyXG5sZXQgSW5mb0J1bGxldCA9ICh7aWNvbiwgdGl0bGV9LCBjaGlsZHJlbikgPT4ge1xyXG4gICAgcmV0dXJuIDxkaXYgY2xhc3M9XCJjb2wgczEyIG00XCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImNlbnRlciBwcm9tb1wiPlxyXG4gICAgICAgICAgICA8aSBjbGFzcz1cIm1hdGVyaWFsLWljb25zIGhpZ2hsaWdodFwiPntpY29ufTwvaT5cclxuICAgICAgICAgICAgPHAgY2xhc3M9XCJwcm9tby1jYXB0aW9uIGhpZ2hsaWdodC1sZXNzXCI+e3RpdGxlfTwvcD5cclxuICAgICAgICAgICAgPHAgY2xhc3M9XCJsaWdodCBjZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgSW5mb3MgPSAoKSA9PlxyXG4gICAgPGRpdiBjbGFzcz1cInNlY3Rpb25cIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XHJcbiAgICAgICAgICAgIDxJbmZvQnVsbGV0IGljb249XCJmYXN0X2ZvcndhcmRcIiB0aXRsZT1cIkZldyBjb25jZXB0c1wiPlxyXG4gICAgICAgICAgICAgICAgWkxJUSBpcyBtYWlubHkgYmFzZWQgb24gZnVuY3Rpb25zIGFuZCBzdHJlYW1zLiBJZiB5b3Uga25vdyBSZWFjdCB5b3UgYWxyZWFkeSB1bmRlcnN0YW5kIGl0LiBCdXQgaXQgZG9lc24ndCBmb3JjZSB5b3UgaW50byBob3cgdG8gYnVpbGQgeW91ciBjb21wb25lbnRzLlxyXG4gICAgICAgICAgICAgICAgPGJyIC8+QmVuZCBpdCB0byB5b3VyIHdpbGwuXHJcbiAgICAgICAgICAgIDwvSW5mb0J1bGxldD5cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIDxJbmZvQnVsbGV0IGljb249XCJtZXJnZV90eXBlXCIgdGl0bGU9XCJCYXNlZCBvbiBzdHJlYW1zXCI+XHJcbiAgICAgICAgICAgICAgICBaTElRIHVzZXMgc3RyZWFtcyB0byBhcHBseSBjaGFuZ2VzIHRvIHRoZSBET00uIFlvdSBjYW4gcHJvdmlkZSB0aGVzZSBzdHJlYW1zIHBlciBjb21wb25lbnQuIE9yIHlvdSBjYW4gcHJvdmlkZSBhIHN0YXRlIHN0cmVhbSBhbmQgcGFzcyBpdCB0aHJvdWdoIHRvIHlvdXIgY29tcG9uZW50LlxyXG4gICAgICAgICAgICAgICAgPGJyIC8+RmVlbCB0aGUgZmxvdy5cdFxyXG4gICAgICAgICAgICA8L0luZm9CdWxsZXQ+XHJcblxyXG4gICAgICAgICAgICA8SW5mb0J1bGxldCBpY29uPVwibWVyZ2VfdHlwZVwiIHRpdGxlPVwiRmV3IGNvbmNlcHRzXCI+XHJcbiAgICAgICAgICAgICAgICBaTElRIGlzIG1haW5seSBiYXNlZCBvbiBmdW5jdGlvbnMgYW5kIHN0cmVhbXMuIElmIHlvdSBrbm93IFJlYWN0IHlvdSBhbHJlYWR5IHVuZGVyc3RhbmQgaXQuIEJ1dCBpdCBkb2Vzbid0IGZvcmNlIHlvdSBpbnRvIGhvdyB0byBidWlsZCB5b3VyIGNvbXBvbmVudHMuXHJcbiAgICAgICAgICAgICAgICA8YnIgLz5CZW5kIGl0IHRvIHlvdXIgd2lsbC5cclxuICAgICAgICAgICAgPC9JbmZvQnVsbGV0PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RlbW8vaW5mb3MuanN4IiwiaW1wb3J0IHsgaCwgc3RyZWFtLCBtZXJnZSQgfSBmcm9tICcuLi9zcmMnO1xyXG5pbXBvcnQgeyBTdWJoZWFkZXIgfSBmcm9tICcuL3N1YmhlYWRlci5qc3gnO1xyXG5pbXBvcnQgJy4vcGxheWdyb3VuZC5zY3NzJztcclxuXHJcbmV4cG9ydCBjb25zdCBQbGF5Z3JvdW5kID0gKCkgPT5cclxuICAgIDxkaXYgY2xhc3M9XCJzZWN0aW9uXCI+XHJcbiAgICAgICAgPFN1YmhlYWRlciB0aXRsZT1cIkV4cGVyaW1lbnRcIiBzdWJ0aXRsZT1cIkZvcmsgYW5kIGdldCB5b3VyIGhhbmRzIGRpcnR5XCIgLz5cclxuICAgICAgICA8c2NyaXB0IGFzeW5jIHNyYz1cIi8vanNmaWRkbGUubmV0L2h2YmVlOG05LzcvZW1iZWQvanMsaHRtbCxyZXN1bHQvXCI+PC9zY3JpcHQ+XHJcbiAgICA8L2Rpdj47XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZGVtby9wbGF5Z3JvdW5kLmpzeCIsImltcG9ydCB7IGggfSBmcm9tICcuLi9zcmMnO1xyXG5pbXBvcnQge1N1YmhlYWRlcn0gZnJvbSAnLi9zdWJoZWFkZXIuanN4JztcclxuaW1wb3J0IHtNYXJrdXB9IGZyb20gJy4vdXRpbHMuanN4JztcclxuaW1wb3J0ICcuL3R1dG9yaWFsLnNjc3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFR1dG9yaWFsID0gKCkgPT5cclxuICAgIDxkaXYgY2xhc3M9XCJzZWN0aW9uIHR1dG9yaWFsXCI+XHJcbiAgICAgICAgPFN1YmhlYWRlciB0aXRsZT1cIldyaXRpbmcgQ29tcG9uZW50c1wiIHN1YnRpdGxlPVwiSGVsbG8gV29ybGQgaGVyZSB3ZSBjb21lXCIgaWQ9XCJ0dXRvcmlhbFwiLz5cclxuXHJcbiAgICAgICAgPHA+WkxJUSBpcyBsZXZlcmFnaW5nIEVTMjAxNSB0byByZWFkIGVhc2llciBhbmQgdG8gYmUgcmVhZGFibGUgYnkgZXZlcnlib2R5LlxyXG4gICAgICAgIFpMSVEgaXMgdXNpbmcgPGEgaHJlZj1cImh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL2pzeC9cIj5KU1g8L2E+IGFzIGEgRE9NIGFic3RyYWN0aW9uIGluIEpTLiBUaGlzIGFsbG93cyB0ZW1wbGF0aW5nIG9mIHRoZSBjb21wb25lbnRzIGFuZCBhbGxvd3MgWkxJUSB0byBkZWZpbmUgaG93IHByb3BlcnRpZXMgYW5kIGNoaWxkcmVuIGFyZSByZW5kZXJlZC48L3A+XHJcblxyXG4gICAgICAgIDxwPkEgY29tcG9uZW50IGluIFpMSVEgY2FuIGxvb2sgbGlrZSB0aGlzOjwvcD5cclxuXHJcbiAgICAgICAgPE1hcmt1cD5cclxuICAgICAgICAgICAge2BcclxuICAgICAgICAgICAgfGltcG9ydCB7aH0gZnJvbSAnemxpcSc7XHJcbiAgICAgICAgICAgIHxcclxuICAgICAgICAgICAgfC8vIGluc2VydCB2YWx1ZXMgaW4gdGhlIG1hcmt1cCB3aXRoIHt4fVxyXG4gICAgICAgICAgICB8ZXhwb3J0IGNvbnN0IEhpZ2hsaWdodCA9IChwcm9wcywgY2hpbGRyZW4pID0+XHJcbiAgICAgICAgICAgIHwgICAgPHNwYW4gY2xhc3M9J2hpZ2hsaWdodCc+e3Byb3BzLnRleHR9PC9zcGFuPjtcclxuICAgICAgICAgICAgYH1cclxuICAgICAgICA8L01hcmt1cD5cclxuXHJcbiAgICAgICAgPHA+WW91IG5lZWQgdG8gYWx3YXlzIHByb3ZpZGUgdGhlIDxjb2RlPmg8L2NvZGU+IGZ1bmN0aW9uLiBKU1ggZ2V0cyB0cmFuc2Zvcm1lZCB0byBIeXBlcnNjcmlwdCBhbmQgdGhlIDxjb2RlPmg8L2NvZGU+IGlzIHdoYXQgZ2V0cyBldmFsdWF0ZWQgYnkgWkxJUS48L3A+XHJcblxyXG4gICAgICAgIDxNYXJrdXA+XHJcbiAgICAgICAgICAgIHtgXHJcbiAgICAgICAgICAgIHwvLyBiZWZvcmVcclxuICAgICAgICAgICAgfGV4cG9ydCBjb25zdCBIaWdobGlnaHQgPSAoe3RleHR9KSA9PlxyXG4gICAgICAgICAgICB8ICAgIDxzcGFuIGNsYXNzPVwiaGlnaGxpZ2h0XCI+e3RleHR9PC9zcGFuPjtcclxuICAgICAgICAgICAgfFxyXG4gICAgICAgICAgICB8Ly8gYWZ0ZXJcclxuICAgICAgICAgICAgfGV4cG9ydCBjb25zdCBIaWdobGlnaHQgPSAoe3RleHR9KSA9PlxyXG4gICAgICAgICAgICB8ICAgIGgoJ3NwYW4nLCB7J2NsYXNzJzogJ2hpZ2hsaWdodCd9LCBbdGV4dF0pO1xyXG4gICAgICAgICAgICBgfVxyXG4gICAgICAgIDwvTWFya3VwPlxyXG5cclxuICAgICAgICA8cD5aTElRIGlzIGEgcmVhY3RpdmUgdmlldyByZW5kZXJpbmcgZnJhbWV3b3JrLiBNdWNoIGxpa2UgUmVhY3QuIFJlYWN0aXZpdHkgZW5hYmxlcyB0aGUgZGV2ZWxvcGVyIHRvIGRlZmluZSBob3cgdGhlIHJlbmRlcmluZyBwZXJmb3JtcyB3aXRob3V0IG5lZWRpbmcgdG8ga25vdyB3aGVuIG9yIHdoZXJlIHRoZSBkYXRhIGlzIGNvbWluZyBmcm9tLiBTZXBhcmF0aW5nIHRoZSBjb25jZXJucy5cclxuICAgICAgICBaTElRIHdpbGwgcmVyZW5kZXIgdGhlIGFib3ZlIGNvbXBvbmVudCBldmVyeSB0aW1lIHRoZSBpbnB1dCBjaGFuZ2VzLiBEaXNwbGF5aW5nIGl0IHdpdGggdGhlIG5ldyBjb250ZW50LjwvcD5cclxuXHJcbiAgICAgICAgPHA+VG8gdXNlIGNvbXBvbmVudHMgaW4gb3RoZXIgY29tcG9uZW50cyBqdXN0IGltcG9ydCB0aGUgZnVuY3Rpb24gYW5kIHVzZSB0aGUgZnVuY3Rpb24gbmFtZSBhcyBhIHRhZyBuYW1lOjwvcD5cclxuXHJcbiAgICAgICAgPE1hcmt1cD5cclxuICAgICAgICAgICAge2BcclxuICAgICAgICAgICAgfGltcG9ydCB7aH0gZnJvbSAnemxpcSc7XHJcbiAgICAgICAgICAgIHxpbXBvcnQge0hpZ2hsaWdodH0gZnJvbSAnLi9oaWdobGlnaHQuanMnO1xyXG4gICAgICAgICAgICB8XHJcbiAgICAgICAgICAgIHxsZXQgYXBwID0gPGRpdj5cclxuICAgICAgICAgICAgfCAgICAgICAgPEhpZ2hsaWdodCB0ZXh0PVwiSGVsbG8gV29ybGQhISFcIj48L0hpZ2hsaWdodD5cclxuICAgICAgICAgICAgfCAgICA8L2Rpdj47XHJcbiAgICAgICAgICAgIHwuLi5cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICA8L01hcmt1cD5cclxuXHJcbiAgICAgICAgPHA+SW5zZXJ0IHRoZSBnZW5lcmF0ZWQgZWxlbWVudCBpbnRvIHRoZSBET00gd2hlcmUgeW91IHBsZWFzZTo8L3A+XHJcblxyXG4gICAgICAgIDxNYXJrdXA+XHJcbiAgICAgICAgICAgIHtgXHJcbiAgICAgICAgICAgIHxpbXBvcnQge3JlbmRlcn0gZnJvbSAnemxpcSc7XHJcbiAgICAgICAgICAgIHxcclxuICAgICAgICAgICAgfHJlbmRlcihhcHAsIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhcHAnKSk7XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgPC9NYXJrdXA+XHJcblxyXG4gICAgICAgIDxwPlpMSVEgZG9lc24ndCBlbmZvcmNlIHRoZSBwYXJlbnQgZWxlbWVudCBydWxlIGtub3duIGZyb20gUmVhY3QuIERvIHdoYXRldmVyIHlvdSBsaWtlIHdpdGggYW4gZWxlbWVudCBhcnJheS48L3A+XHJcblxyXG4gICAgICAgIDxNYXJrdXA+XHJcbiAgICAgICAgICAgIHtgXHJcbiAgICAgICAgICAgIHxpbXBvcnQge2h9IGZyb20gJ3psaXEnO1xyXG4gICAgICAgICAgICB8XHJcbiAgICAgICAgICAgIHxleHBvcnQgY29uc3QgTGlzdEl0ZW1zID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB8ICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHwgICAgICAgIDxsaT5JIGFtIDE8L2xpPixcclxuICAgICAgICAgICAgfCAgICAgICAgPGxpPkkgYW0gMjwvbGk+XHJcbiAgICAgICAgICAgIHwgICAgXVxyXG4gICAgICAgICAgICB8fVxyXG4gICAgICAgICAgICB8XHJcbiAgICAgICAgICAgIHxsZXQgbGlzdCA9IDx1bD48TGlzdEl0ZW1zIC8+PC91bD47XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgPC9NYXJrdXA+XHJcblxyXG4gICAgICAgIDxwPlpMSVEgYWxsb3dzIEhUTUwgc3R5bGUgZXZlbnQgYmluZGluZyB0byBlbGVtZW50czo8L3A+XHJcblxyXG4gICAgICAgIDxNYXJrdXA+e2B8bGV0IGJ1dHRvbiA9IDxidXR0b24gb25jbGljaz17KCkgPT4gY29uc29sZS5sb2coJ2dvdCBjbGlja2VkJyl9PkNsaWNrIG1lPC9idXR0b24+O2B9XHJcbiAgICAgICAgPC9NYXJrdXA+XHJcblxyXG4gICAgICAgIDxTdWJoZWFkZXIgdGl0bGU9XCJTdHJlYW1zXCIgc3VidGl0bGU9XCJGZWVsIHRoZSBmbG93XCIgaWQ9XCJzdHJlYW1zXCIgLz5cclxuXHJcbiAgICAgICAgPHA+VG8gcmVuZGVyIHN0YXRpYyBjb250ZW50LCB3ZSBkb24ndCBuZWVkIHRvIGZyYW1ld29yay4uLiBBY3R1YWwgdXNlciBpbnRlcmFjdGlvbiB3aXRoIG91ciBhcHBsaWNhdGlvbiB3aWxsIGNoYW5nZSB0aGUgc3RhdGUgYXQgc2V2ZXJhbCBvY2Nhc2lvbnMgb3ZlciB0aW1lLiBTdHJlYW0tbGlicmFyeXMgbGlrZSA8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0aXZlLUV4dGVuc2lvbnMvUnhKU1wiPlJYSlM8L2E+IGFyZSB0aGVyZSBleHBsaWNpdGx5IGZvciB0aGF0IHNjZW5hcmlvLiBaTElRIGluY2x1ZGVzIGEgdmVyeSBsaXRlIGltcGxlbWVudGF0aW9uIG9mIHN0cmVhbXMgaW5zcGlyZWQgYnkgUlhKUyBhbmQgPGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9wYWxkZXBpbmQvZmx5ZFwiPkZseWQ8L2E+LjwvcD5cclxuXHJcbiAgICAgICAgPE1hcmt1cD5cclxuICAgICAgICAgICAge2BcclxuICAgICAgICAgICAgfGltcG9ydCB7c3RyZWFtfSBmcm9tICd6bGlxJztcclxuICAgICAgICAgICAgfFxyXG4gICAgICAgICAgICB8Ly8gc3RyZWFtcyBhcmUgb2JqZWN0cyB3aXRoIGNoYW5naW5nIHZhbHVlc1xyXG4gICAgICAgICAgICB8bGV0IG5ld1N0cmVhbSA9IHN0cmVhbSg1KTtcclxuICAgICAgICAgICAgfGNvbnNvbGUubG9nKG5ld1N0cmVhbSgpKTsgLy8gNVxyXG4gICAgICAgICAgICB8bmV3U3RyZWFtKDYpO1xyXG4gICAgICAgICAgICB8Y29uc29sZS5sb2cobmV3U3RyZWFtKCkpOyAvLyA2XHJcbiAgICAgICAgICAgIHxcclxuICAgICAgICAgICAgfC8vIHRoZSBtYXAgZnVuY3Rpb24gaXMgdGhlIGVhc3kgd2F5IHRvIG1hbmlwdWxhdGUgb3IgaW50ZXJhY3Qgd2l0aCB2YWx1ZXMgb2YgdGhlIHN0cmVhbVxyXG4gICAgICAgICAgICB8bmV3U3RyZWFtLm1hcCh2YWx1ZSA9PiBjb25zb2xlLmxvZyh2YWx1ZSkpO1xyXG4gICAgICAgICAgICB8Ly8gNlxyXG4gICAgICAgICAgICB8bmV3U3RyZWFtKDcpO1xyXG4gICAgICAgICAgICB8Ly8gN1xyXG4gICAgICAgICAgICB8XHJcbiAgICAgICAgICAgIHwvLyB0aGUgZm9ybWF0IG9mIHRoZSBzdGVhbSBhcyBhIGZ1bmN0aW9uIG1ha2VzIGl0IGVhc3kgdG8gcGlwZSBldmVudHMgaW50byBzdHJlYW1zXHJcbiAgICAgICAgICAgIHxlbGVtZW50LmF0dGFjaEV2ZW50TGlzdGVuZXIobmV3U3RyZWFtKTtcclxuICAgICAgICAgICAgfC8vIG9yIHBpcGUgc3RyZWFtcyBpbnRvIHN0cmVhbXNcclxuICAgICAgICAgICAgfG5ld1N0cmVhbS5tYXAob3RoZXJTdHJlYW0pO1xyXG4gICAgICAgICAgICBgfVxyXG4gICAgICAgIDwvTWFya3VwPlxyXG5cclxuICAgICAgICA8cD5BdmFpbGFibGUgc3RyZWFtIG1hbmlwdWxhdGlvbiBmdW5jdGlvbnMgYXJlIDxjb2RlPi5tYXA8L2NvZGU+LCA8Y29kZT4uaXM8L2NvZGU+LCA8Y29kZT4uZmxhdE1hcDwvY29kZT4sIDxjb2RlPi5maWx0ZXI8L2NvZGU+LCA8Y29kZT4uZGVlcFNlbGVjdDwvY29kZT4sIDxjb2RlPi5kaXN0aW5jdDwvY29kZT4sIDxjb2RlPi4kPC9jb2RlPiwgPGNvZGU+LnBhdGNoPC9jb2RlPiBhbmQgPGNvZGU+LnJlZHVjZTwvY29kZT4uIENoZWNrb3V0IDxjb2RlPnNyYy91dGlscy9zdHJlYW15LmpzPC9jb2RlPiBmb3IgZGVzY3JpcHRpb25zLjwvcD5cclxuXHJcbiAgICAgICAgPHA+QSBzcGVjaWFsIG1hbmlwdWxhdGlvbiBpcyB0aGUgPGNvZGU+LiQoKTwvY29kZT4gcXVlcnkgc2VsZWN0b3IuIEFzIGEgZGV2ZWxvcGVyIEkgb2Z0ZW4gd2FudCB0byByZWFjdCB0byBjaGFuZ2VzIG9uIGEgc3BlY2lmaWMgbmVzdGVkIHByb3BlcnR5LiBUaGUgcXVlcnkgc2VsZWN0b3IgdGFrZXMgb25lIG9yIG1vcmUgcHJvcGVydHkgcGF0aHMgYW5kIHdpbGwgcmV0dXJuIGEgbmV3IHN0cmVhbSB3aXRoIHRoZSBjdXJyZW50IHNlbGVjdGVkIHByb3BlcnRpZXM6PC9wPlxyXG5cclxuICAgICAgICA8TWFya3VwPlxyXG4gICAgICAgICAgICB7YFxyXG4gICAgICAgICAgICB8bGV0IG5ld1N0cmVhbSA9IHN0cmVhbSh7XHJcbiAgICAgICAgICAgIHwgICAgcHJvcEE6IDEsXHJcbiAgICAgICAgICAgIHwgICAgcHJvcEI6IHtcclxuICAgICAgICAgICAgfCAgICAgICAgcHJvcEJBOiAyXHJcbiAgICAgICAgICAgIHwgICAgfVxyXG4gICAgICAgICAgICB8fSk7XHJcbiAgICAgICAgICAgIHxjb25zb2xlLmxvZyhuZXdTdHJlYW0uJCgncHJvcEEnKSgpKTsgLy8gMVxyXG4gICAgICAgICAgICB8Y29uc29sZS5sb2cobmV3U3RyZWFtLiQoWydwcm9wQScsICdwcm9wQi5wcm9wQkEnKSgpKTsgLy8gWzEsMl1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICA8L01hcmt1cD5cclxuXHJcbiAgICAgICAgPHA+VGhlIGNvdW50ZXJwYXJ0IGlzIHRoZSA8Y29kZT4ucGF0Y2g8L2NvZGU+IGZ1bmN0aW9ucy4gSXQgd2lsbCB1cGRhdGUganVzdCBwYXJ0cyBvZiB0aGUgb2JqZWN0OjwvcD5cclxuXHJcbiAgICAgICAgPE1hcmt1cD5cclxuICAgICAgICAgICAge2BcclxuICAgICAgICAgICAgfGxldCBuZXdTdHJlYW0gPSBzdHJlYW0oe1xyXG4gICAgICAgICAgICB8ICAgIHByb3BBOiAxXHJcbiAgICAgICAgICAgIHx9KTtcclxuICAgICAgICAgICAgfGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KG5ld1N0cmVhbSgpKSk7IC8vIHsgcHJvcEE6IDEgfVxyXG4gICAgICAgICAgICB8bmV3U3RyZWFtLnBhdGNoKHsgcHJvcEI6IDJ9KTtcclxuICAgICAgICAgICAgfGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KG5ld1N0cmVhbSgpKSk7IC8vIHsgcHJvcEE6IDEsIHByb3BCOiAyIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICA8L01hcmt1cD5cclxuXHJcbiAgICAgICAgPHA+WkxJUSByZWNvZ25pemVzIHBhc3NlZCBzdHJlYW1zIGluIHRoZSBIeXBlcnNjcmlwdCBhbmQgdXBkYXRlcyB0aGUgRE9NIG9uIG5ldyBzdHJlYW0gdmFsdWVzOjwvcD5cclxuXHJcbiAgICAgICAgPE1hcmt1cD5cclxuICAgICAgICAgICAge2BcclxuICAgICAgICAgICAgfGxldCBuZXdTdHJlYW0gPSBzdHJlYW0oJ0hlbGxvIFdvcmxkJyk7XHJcbiAgICAgICAgICAgIHxsZXQgYXBwIDxzcGFuPntuZXdTdHJlYW19PC9zcGFuPjtcclxuICAgICAgICAgICAgfGFzc2VydChhcHAub3V0ZXJIVE1MID09PSAnPHNwYW4+SGVsbG8gV29ybGQ8L3NwYW4+Jyk7XHJcbiAgICAgICAgICAgIHxuZXdTdHJlYW0oJ0J5ZSBXb3JsZCcpO1xyXG4gICAgICAgICAgICB8YXNzZXJ0KGFwcC5vdXRlckhUTUwgPT09ICc8c3Bhbj5CeWUgV29ybGQ8L3NwYW4+Jyk7XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgPC9NYXJrdXA+XHJcblxyXG4gICAgICAgIDxwPlpMSVEgYXJlIGFsd2F5cyBob3QsIG1lYW5pbmcgdGhleSB3aWxsIHNlbmQgdGhlaXIgbGFzdCB2YWx1ZSBvbiBob29raW5nIGludG8gaXQuIEJVVCB0aGUgc3RyZWFtcyB3aWxsIG5vdCBlbWl0IGB1bmRlZmluZWRgITwvcD5cclxuXHJcbiAgICAgICAgPE1hcmt1cD5cclxuICAgICAgICAgICAge2BcclxuICAgICAgICAgICAgfGxldCBuZXdTdHJlYW0gPSBzdHJlYW0oKTtcclxuICAgICAgICAgICAgfGFzc2VydChuZXdTdHJlYW0oKSA9PSB1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICB8bmV3U3RyZWFtLm1hcChjb25zb2xlLmxvZyk7IC8vIG5vdGhpbmcgaXMgd3JpdHRlblxyXG4gICAgICAgICAgICB8bmV3U3RyZWFtKCdIYWxsbyBXb3JsZCcpOyAvLyBIYWxsbyBXb3JsZCBpcyB3cml0dGVuXHJcbiAgICAgICAgICAgIHxcclxuICAgICAgICAgICAgfG5ld1N0cmVhbS5tYXAoY29uc29sZS5sb2cpOyAvLyBIYWxsbyBXb3JsZCBpcyB3cml0dGVuIGFnYWluXHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgPC9NYXJrdXA+XHJcblxyXG4gICAgICAgIDxTdWJoZWFkZXIgdGl0bGU9XCJTdGF0ZSBNYW5hZ2VtZW50XCIgc3VidGl0bGU9XCJGKioqIFJlZHV4LiBaTElRICYjOTgyOTsgc3RyZWFtc1wiIGlkPVwic3RhdGVcIiAvPlxyXG5cclxuICAgICAgICA8cD5BIGNvcmUgcmVhc29uIGZvciB3ZWIgVUkgZnJhbWV3b3JrcyBpcyB0aGUgYXV0b21hdGljIHVwZGF0aW5nIG9mIHRoZSBVSSBhY2NvcmRpbmcgdG8gc29tZSBzdGF0ZS4gVGhpcyBpcyBoYW5kbGVkIHZlcnkgZGlmZmVyZW50IGluIHRoZSBrbm93biBmcmFtZXdvcmtzLiBaTElRIGhhcyBubyBkZWRpY2F0ZWQgc3RhdGUgbWFuYWdlbWVudC4gV2UgYWxyZWFkeSBzYXcgdGhhdCBaTElRIHJlYWN0cyB0byBzdHJlYW1zIGluIHRoZSBIeXBlcnNjcmlwdC4gVGhpcyB3YXkgeW91IGFyZSBmcmVlIHRvIGRlY2lkZSBpZiB5b3Ugd2FudCB0byBwdXQgdGhlIHN0YXRlIGxvY2FsbHkgb3IgZ2xvYmFsbHkgb3Igd2hlcmUgZXZlci48L3A+XHJcblxyXG4gICAgICAgIDxwPkZvciBhIGNvbXBvbmVudCBiYXNlZCBzdGF0ZSBsaWtlIGluIHVzZWQgaW4gdGhlIG1vc3QgTVYqIGZyYW1ld29ya3MganVzdCBkZWZpbmUgYSBzdGF0ZSBzdHJlYW0gbG9jYWxseS48L3A+XHJcblxyXG4gICAgICAgIDxNYXJrdXA+XHJcbiAgICAgICAgICAgIHtgXHJcbiAgICAgICAgICAgIHxsZXQgc3RhdGUkID0gc3RyZWFtKHsgY2xpY2tzOiAwIH0pO1xyXG4gICAgICAgICAgICB8bGV0IENvbXBvbmVudCA9ICgpID0+IDxkaXY+XHJcbiAgICAgICAgICAgIHwgIENsaWNrczoge3N0YXRlJC4kKCdjbGlja3MnKX1cclxuICAgICAgICAgICAgfDwvZGl2PjtcclxuICAgICAgICAgICAgYH1cclxuICAgICAgICA8L01hcmt1cD5cclxuXHJcbiAgICAgICAgPHA+Rm9yIGEgY2VudHJhbGl6ZWQgc3RhdGUgbGlrZSBpbiA8YSBocmVmPVwiaHR0cDovL3JlZHV4LmpzLm9yZy9cIj5SZWR1eDwvYT4gZGVmaW5lIGEgc3RhdGUgZm9yIHRoZSBhcHBsaWNhdGlvbiBhbmQgdGhlbiBwYXNzIGl0IG9uIHRvIGVhY2ggY29tcG9uZW50LjwvcD5cclxuXHJcbiAgICAgICAgPE1hcmt1cD5cclxuICAgICAgICAgICAge2BcclxuICAgICAgICAgICAgfGxldCBzdGF0ZSQgPSBzdHJlYW0oeyBjbGlja3M6IDAgfSk7XHJcbiAgICAgICAgICAgIHxcclxuICAgICAgICAgICAgfGxldCBDb21wb25lbnQgPSAoe3N0YXRlJH0pID0+IDxkaXY+XHJcbiAgICAgICAgICAgIHwgIENsaWNrczoge3N0YXRlJC4kKCdjbGlja3MnKX1cclxuICAgICAgICAgICAgfDwvZGl2PjtcclxuICAgICAgICAgICAgfFxyXG4gICAgICAgICAgICB8bGV0IGFwcCA9IDxDb21wb25lbnQgc3RhdGUkPXtzdGF0ZSR9IC8+O1xyXG4gICAgICAgICAgICBgfVxyXG4gICAgICAgIDwvTWFya3VwPlxyXG5cclxuICAgICAgICA8cD5UbyBtYW5pcHVsYXRlIHRoZSBsb2NhbCBvciBnbG9iYWwgc3RhdGUgeW91IGNhbiBlbWl0IGEgY29tcGxldGVseSBuZXcgc3RhdGUgdG8gdGhlIHN0YXRlIHN0cmVhbS4gT3IgdXNlIHRoZSBgLnBhdGNoYCBmdW5jdGlvbiB0byB1cGRhdGUgb25seSBwYXJ0cyBvZiB0aGUgc3RhdGU6PC9wPlxyXG5cclxuICAgICAgICA8TWFya3VwPlxyXG4gICAgICAgICAgICB7YFxyXG4gICAgICAgICAgICB8Ly8gUmVkdXggbGlrZSBhY3Rpb25cclxuICAgICAgICAgICAgfGxldCBpbmNyZW1lbnQgPSAoc3RhdGUkKSA9PiAoKSA9PiB7XHJcbiAgICAgICAgICAgIHwgICAgc3RhdGUkLnBhdGNoKHsgY2xpY2tzOiBzdGF0ZSQuJCgnY2xpY2tzJykoKSArIDEgfSlcclxuICAgICAgICAgICAgfH07XHJcbiAgICAgICAgICAgIHxcclxuICAgICAgICAgICAgfGxldCBhcHAgPSA8ZGl2PlxyXG4gICAgICAgICAgICB8ICAgIDxidXR0b24gb25jbGljaz17aW5jcmVtZW50KHN0YXRlJCl9PkNsaWNrICsgMTwvYnV0dG9uPlxyXG4gICAgICAgICAgICB8PC9kaXY+O1xyXG4gICAgICAgICAgICBgfVxyXG4gICAgICAgIDwvTWFya3VwPlxyXG5cclxuICAgICAgICA8U3ViaGVhZGVyIHRpdGxlPVwiSGVscGVyc1wiIHN1YnRpdGxlPVwiQmVjYXVzZSBpbiBzb21lIHNpdHVhdGlvbiB5b3UgbmVlZCBhIGZyaWVuZFwiIGlkPVwiaGVscGVyc1wiIC8+XHJcblxyXG4gICAgICAgIDxwPlpMSVEgYWNrbm93bGVkZ2VzIHRoYXQgYSB3ZWIgZGV2ZWxvcGVyIGhhcyBhIGJ1bmNoIG9mIHRhc2tzIGhlIHBlcmZvcm1zIGZyZXF1ZW50bHkuIFdpdGggWkxJUSB0aGlzIGRldmVsb3BlciBjb3VsZCBidWlsZCBoaXMgb3duIGhlbHBlcnMuIEJ1dCB3ZSBkZXZlbG9wZXJzIGFyZSBsYXp5LCBzbyBaTElRIHByb3ZpZGVzIHNvbWUgYmFzaWNzIHlvdSBwcm9iYWJseSB3aWxsIHVzZSBpbiB5b3UgWkxJUSBhcHBsaWNhdGlvbi48L3A+XHJcblxyXG4gICAgICAgIDxoNj5pZiQgLSBib29sZWFuIHN3aXRjaDwvaDY+XHJcblxyXG4gICAgICAgIDxwPk9mdGVuIHlvdSB3YW50IHRvIHNob3cgY29udGVudCBkZXBlbmRlbnQgb24gYm9vbGVhbi1zdGF0ZTo8L3A+XHJcblxyXG4gICAgICAgIDxNYXJrdXA+XHJcbiAgICAgICAgICAgIHtgXHJcbiAgICAgICAgICAgIHw8ZGl2PlxyXG4gICAgICAgICAgICB8ICAgIHtcclxuICAgICAgICAgICAgfCAgICAgICAgb3BlbiQubWFwKG9wZW4gPT4ge1xyXG4gICAgICAgICAgICB8ICAgICAgICAgICAgaWYgKG9wZW4pIHtcclxuICAgICAgICAgICAgfCAgICAgICAgICAgICAgICByZXR1cm4gPHNwYW4+T3Blbjwvc3Bhbj47XHJcbiAgICAgICAgICAgIHwgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB8ICAgICAgICAgICAgICAgIHJldHVybiA8c3Bhbj5DbG9zZWQ8L3NwYW4+O1xyXG4gICAgICAgICAgICB8ICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB8ICAgICAgICB9KVxyXG4gICAgICAgICAgICB8ICAgIH1cclxuICAgICAgICAgICAgfDwvZGl2PlxyXG4gICAgICAgICAgICBgfVxyXG4gICAgICAgIDwvTWFya3VwPlxyXG5cclxuICAgICAgICA8cD5aTElRIHByb3ZpZGVzIGEgYm9vbGVhbiBzd2l0Y2ggZm9yIHRoZXNlIGNhc2VzOjwvcD5cclxuXHJcbiAgICAgICAgPE1hcmt1cD5cclxuICAgICAgICAgICAge2BcclxuICAgICAgICAgICAgfDxkaXY+XHJcbiAgICAgICAgICAgIHwgICAge1xyXG4gICAgICAgICAgICB8ICAgICAgICBpZiQob3BlbiQsXHJcbiAgICAgICAgICAgIHwgICAgICAgICAgICA8c3Bhbj5PcGVuPC9zcGFuPixcclxuICAgICAgICAgICAgfCAgICAgICAgICAgIDxzcGFuPkNsb3NlZDwvc3Bhbj4pXHJcbiAgICAgICAgICAgIHwgICAgfVxyXG4gICAgICAgICAgICB8PC9kaXY+XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgPC9NYXJrdXA+XHJcblxyXG4gICAgICAgIDxoNj5qb2luJCAtIHN0cmluZyBtZXJnZTwvaDY+XHJcblxyXG4gICAgICAgIDxwPlBlcmZvcm1pbmcgY2xhc3MgbWFuaXB1bGF0aW9uIG9uIGFuIGVsZW1lbnQgY2FuIGJlIGEgcGFpbjo8L3A+XHJcblxyXG4gICAgICAgIDxNYXJrdXA+XHJcbiAgICAgICAgICAgIHtgXHJcbiAgICAgICAgICAgIHw8ZGl2IGNsYXNzPXtvcGVuJC5tYXAob3BlbiA9PiAnY29udGFpbmVyICcgKyBvcGVuID8gJ29wZW4nIDogJ2Nsb3NlZCcpfT5cclxuICAgICAgICAgICAgfDwvZGl2PlxyXG4gICAgICAgICAgICBgfVxyXG4gICAgICAgIDwvTWFya3VwPlxyXG5cclxuICAgICAgICA8cD5JbWFnaW5lIHRoaXMgd2l0aCBtb3JlIHRoZW4gb25lIGNvbmRpdGlvbi4uLiBaTElRIHByb3ZpZGVzIGEgaGVscGVyIGZvciBqb2luaW5nIHN0cmluZ3MgZXZlbiBmcm9tIHN0cmVhbXM6PC9wPlxyXG5cclxuICAgICAgICA8TWFya3VwPlxyXG4gICAgICAgICAgICB7YFxyXG4gICAgICAgICAgICB8PGRpdiBjbGFzcz17am9pbiQoJ2NvbnRhaW5lcicsIGlmJChvcGVuJCwgJ29wZW4nLCAnY2xvc2VkJykpfT5cclxuICAgICAgICAgICAgfDwvZGl2PlxyXG4gICAgICAgICAgICBgfVxyXG4gICAgICAgIDwvTWFya3VwPlxyXG5cclxuICAgICAgICA8aDY+cHJvbWlzZSQgLSBwcm9taXNlIGVuaGFuY2VyPC9oNj5cclxuXHJcbiAgICAgICAgPHA+WkxJUSBwcm92aWRlcyBhIGxpdHRsZSB3cmFwcGVyIGFyb3VuZCBwcm9taXNlcy4gSXQgcHJvdmlkZXMgYSBmbGFnIGZvciB0aGUgb25nb2luZyByZXF1ZXN0LiBUaGlzIHdheSB5b3UgY2FuIHNob3cgbG9hZGluZyBiYXJzIGVhc2lseTo8L3A+XHJcblxyXG4gICAgICAgIDxNYXJrdXA+XHJcbiAgICAgICAgICAgIHtgXHJcbiAgICAgICAgICAgIHxpbXBvcnQgeyBwcm9taXNlJCB9IGZyb20gJy4uL3NyYyc7XHJcbiAgICAgICAgICAgIHxcclxuICAgICAgICAgICAgfGxldCBmZXRjaFF1b3RlID0gKGludG8kKSA9PiAoKSA9PiB7XHJcbiAgICAgICAgICAgIHxcdHByb21pc2UkKGZldGNoKCdodHRwOi8vcXVvdGVzLnJlc3QvcW9kLmpzb24/Y2F0ZWdvcnk9aW5zcGlyZScpXHJcbiAgICAgICAgICAgIHwgICAgICAgIC50aGVuKHJlcyA9PiByZXMuanNvbigpKVxyXG4gICAgICAgICAgICB8ICAgICAgICAudGhlbihkYXRhID0+IHtcclxuICAgICAgICAgICAgfFx0XHQgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgfFx0XHQgICAgXHRxdW90ZTogZGF0YS5jb250ZW50cy5xdW90ZXNbXCIwXCJdLnF1b3RlLFxyXG4gICAgICAgICAgICB8XHRcdCAgICBcdGF1dGhvcjogZGF0YS5jb250ZW50cy5xdW90ZXNbXCIwXCJdLmF1dGhvclxyXG4gICAgICAgICAgICB8XHRcdCAgICB9O1xyXG4gICAgICAgICAgICB8XHR9KS5tYXAoaW50byQpO1xyXG4gICAgICAgICAgICB8fVxyXG4gICAgICAgICAgICB8bGV0IHF1b3RlUmVxdWVzdCQgPSBzdHJlYW0oe2luaXRpYWw6IHRydWV9KTtcclxuICAgICAgICAgICAgfFxyXG4gICAgICAgICAgICB8bGV0IGFwcCA9IDxkaXY+XHJcbiAgICAgICAgICAgIHwgICAgPGJ1dHRvbiBvbmNsaWNrPXtmZXRjaFF1b3RlKHF1b3RlUmVxdWVzdCQpfT5HZXQgUXVvdGUgb2YgdGhlIERheTwvYnV0dG9uPlxyXG4gICAgICAgICAgICB8ICAgIDxwPlxyXG4gICAgICAgICAgICB8ICAgICAgICB7XHJcbiAgICAgICAgICAgIHwgICAgICAgICAgICBxdW90ZVJlcXVlc3QkLm1hcCgoe2luaXRpYWwsIGRhdGEsIGxvYWRpbmd9KSA9PiB7XHJcbiAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwpIHtcclxuICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfCAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgaWYgKGxvYWRpbmcpIHtcclxuICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdMb2FkaW5nLi4uJztcclxuICAgICAgICAgICAgfCAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgcmV0dXJuIDxwPntkYXRhLnF1b3RlfSAtIHtkYXRhLmF1dGhvcn08L3A+O1xyXG4gICAgICAgICAgICB8ICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfCAgICAgICAgfVxyXG4gICAgICAgICAgICB8ICAgIDwvcD5cclxuICAgICAgICAgICAgfDwvZGl2PjtcclxuICAgICAgICAgICAgYH1cclxuICAgICAgICA8L01hcmt1cD5cclxuXHJcbiAgICAgICAgPFN1YmhlYWRlciB0aXRsZT1cIlJvdXRpbmdcIiBzdWJ0aXRsZT1cIlRvIGFsbG93IGRlZXBsaW5rcyBhbmQgYnJvd3NlciBoaXN0b3J5XCIgaWQ9XCJyb3V0aW5nXCIgLz5cclxuXHJcbiAgICAgICAgPHA+WkxJUSBjdXJyZW50bHkgaGFzIGEgYmFzaWMgcm91dGVyLiBUaGUgcm91dGVyIHByZXZlbnRzIHBhZ2UgcmVsb2FkaW5nIGZvciBsb2NhbCBsaW5rcyBhbmQgZ2l2ZXMgeW91IGEgc3RyZWFtIGZvciB0aGUgY3VycmVudCByb3V0aW5nIGluZm9ybWF0aW9uOjwvcD5cclxuXHJcbiAgICAgICAgPE1hcmt1cD5cclxuICAgICAgICAgICAge2BcclxuICAgICAgICAgICAgfGltcG9ydCB7IGluaXRSb3V0ZXIgfSBmcm9tICcuLi9zcmMnO1xyXG4gICAgICAgICAgICB8bGV0IHJvdXRlciQgPSBpbml0Um91dGVyKCk7XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgPC9NYXJrdXA+XHJcblxyXG4gICAgICAgIDxwPlRoZSByb3V0ZXIgZWxlbWVudCBpcyB0aGUgY291bnRlcnBhcnQgaW4gdGhlIEh5cGVyc2NyaXB0LiBJdCByZWdpc3RlcnMgYSBwcm92aWRlZCByb3V0ZSBpbiB0aGUgZ2xvYmFsIHJvdXRlciBzbyB3ZSBjYW4gZGVjaWRlIG9uIHJvdXRlcyB3aGVyZSB3ZSBuZWVkIHRoZW0sIGluIHRoZSB2aWV3OjwvcD5cclxuXHJcbiAgICAgICAgPE1hcmt1cD5cclxuICAgICAgICAgICAge2BcclxuICAgICAgICAgICAgfGltcG9ydCB7IFJvdXRlciB9IGZyb20gJy4uL3NyYyc7XHJcbiAgICAgICAgICAgIHxsZXQgcm91dGVzID0gW1xyXG4gICAgICAgICAgICB8ICAgIDxSb3V0ZXIgcm91dGVyJD17cm91dGVyJH0gcm91dGU9eycvJ30+XHJcbiAgICAgICAgICAgIHwgICAgICAgIDxhIGhyZWY9Jy9wbGFjZT9mb289YmFyJz5HbyB0byBwbGFjZSBiYXI8L2E+XHJcbiAgICAgICAgICAgIHwgICAgPC9Sb3V0ZXI+LFxyXG4gICAgICAgICAgICB8ICAgIDxSb3V0ZXIgcm91dGVyJD17cm91dGVyJH0gcm91dGU9eycvcGxhY2UnfT5cclxuICAgICAgICAgICAgfCAgICAgICAgWW91IGFyZSBhdCBwbGFjZSB7cm91dGVyJC4kKCdwYXJhbXMuZm9vJyl9LlxyXG4gICAgICAgICAgICB8ICAgICAgICA8YSBocmVmPScvJz5HbyBob21lPC9hPlxyXG4gICAgICAgICAgICB8ICAgIDwvUm91dGVyPlxyXG4gICAgICAgICAgICB8XTtcclxuICAgICAgICAgICAgYH1cclxuICAgICAgICA8L01hcmt1cD5cclxuXHJcbiAgICAgICAgPHA+VGhlIHJvdXRlciBpcyBjdXJyZW50bHkgbm90IGFsbG93aW5nIGZvciBzb21lIGtpbmQgb2YgY2hpbGQtcm91dGVzLjwvcD5cclxuXHJcbiAgICAgICAgPHA+VGVzdCB0aGUgcm91dGVyIG9uIHRoaXMgcGFnZTogPGEgaHJlZj1cIi9zdWJwYWdlP2Zvbz1iYXJcIj5HbyB0byBTdWJwYWdlPC9hPjwvcD5cclxuXHJcbiAgICAgICAgey8qIDxTdWJoZWFkZXIgdGl0bGU9XCJMaWZlY3ljbGVcIiBzdWJ0aXRsZT1cIlRvIGNsZWFudXAgeW91ciBzKioqIGFmdGVyIHlvdXIgZG9uZVwiIGlkPVwibGlmZWN5Y2xlXCIgLz5cclxuXHJcbiAgICAgICAgPHA+WkxJUSBkaXNwYXRjaGVzIGxpZmVjeWNsZSBldmVudHMgYENISUxEUkVOX0NIQU5HRURgLCBgQURERURgLCBgUkVNT1ZFRGAgYW5kIGBVUERBVEVEYCBvbiB0aGUgZWxlbWVudC4gVGhpcyB3YXkgeW91IGNhbiBwZXJmb3JtIGFjdGlvbnMgbGlrZSBpbml0aWFsaXphdGlvbiBqUXVlcnkgcGx1Z2lucyBvbiB0aGUgZWxlbWVudC48L3A+XHJcblxyXG4gICAgICAgIDxNYXJrdXA+XHJcbiAgICAgICAgICAgIHtgXHJcbiAgICAgICAgICAgIHxsZXQgQ2hpbGQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHwgICAgbGV0IGVsZW0gPSA8ZGl2IGNsYXNzPVwiY2hpbGRcIj48L2Rpdj47XHJcbiAgICAgICAgICAgIHwgICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKEFEREVELCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHwgICAgICAgIC8vIG1hbmlwdWxhdGUgZWxlbWVudFxyXG4gICAgICAgICAgICB8ICAgIH0pO1xyXG4gICAgICAgICAgICB8ICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcihSRU1PVkVELCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHwgICAgICAgIC8vIGNsZWFudXBcclxuICAgICAgICAgICAgfCAgICB9KTtcclxuICAgICAgICAgICAgfCAgICByZXR1cm4gZWxlbTtcclxuICAgICAgICAgICAgfH07XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgPC9NYXJrdXA+XHJcblxyXG4gICAgICAgIDxwPlpMSVEgYmF0Y2hlcyBjaGFuZ2VzIHRoYXQgZXhjZWVkIGEgY2VydGFpbiB0aHJlc2hvbGQgdG9nZXRoZXIuIFRoaXMgYmF0Y2ggdGhlbiBpcyB0aGUgcmVuZGVyZWQgaW4gYSBicm93c2VyIDxhIGhyZWY9XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kZS9kb2NzL1dlYi9BUEkvd2luZG93L3JlcXVlc3RBbmltYXRpb25GcmFtZVwiPmFuaW1hdGlvbmZyYW1lPC9hPi4gVGhvc2UgY2hhbmdlcyBhcmUgbm90IGltbWVkaWF0ZWx5IGFwcGxpZWQgdG8gdGhlIHJldHVybmVkIGVsZW1lbnQuIEluIHRob3NlIGNhc2VzIHdlIGNhbiB3YWl0IGZvciBhIFpMSVEgZ2VuZXJhdGVkIGBDSElMRFJFTl9DSEFOR0VEYCBldmVudC4gPC9wPlxyXG5cclxuICAgICAgICA8TWFya3VwPlxyXG4gICAgICAgICAgICB7YFxyXG4gICAgICAgICAgICB8bGV0IGxpc3RFbGVtcyA9IC8vIGhhcyBtYW55IGxpLWVsZW1lbnRzLlxyXG4gICAgICAgICAgICB8bGV0IGxpc3RFbGVtID0gPHVsPlxyXG4gICAgICAgICAgICB8ICAgIHsgbGlzdEVsZW1zIH1cclxuICAgICAgICAgICAgfDwvdWw+O1xyXG4gICAgICAgICAgICB8Ly8gbGlzdCBpdGVtcyBhcmUgbm90IHJlbmRlcmVkIHlldCBhcyB0aGV5IGFyZSBidW5kbGVkIGludG8gb25lIGFuaW1hdGlvbiBmcmFtZVxyXG4gICAgICAgICAgICB8YXNzZXJ0LmVxdWFsKGxpc3RFbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJykubGVuZ3RoLCAwKTtcclxuICAgICAgICAgICAgfC8vIHdlIHdhaXQgZm9yIHRoZSB1cGRhdGVzIG9uIHRoZSBwYXJlbnQgdG8gaGF2ZSBoYXBwZW5lZFxyXG4gICAgICAgICAgICB8bGlzdEVsZW0uYWRkRXZlbnRMaXN0ZW5lcihDSElMRFJFTl9DSEFOR0VELCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHwgICAgYXNzZXJ0LmVxdWFsKGxpc3RFbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJykubGVuZ3RoLCBsZW5ndGgpO1xyXG4gICAgICAgICAgICB8ICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgfH0pO1xyXG4gICAgICAgICAgICBgfVxyXG4gICAgICAgIDwvTWFya3VwPiAqL31cclxuXHJcbiAgICAgICAgPFN1YmhlYWRlciB0aXRsZT1cIlRlc3RpbmdcIiBzdWJ0aXRsZT1cIkEgZ29vZCBmcmFtZXdvcmsgaXMgZWFzeSB0byB0ZXN0XCIgaWQ9XCJ0ZXN0aW5nXCIgLz5cclxuXHJcbiAgICAgICAgPHA+WkxJUSBwcm92aWRlcyBhIGhlbHBlciB0byB0ZXN0IHRoZSBvdXRwdXQgb2YgeW91ciBjb21wb25lbnRzIG92ZXIgdGltZTo8L3A+XHJcblxyXG4gICAgICAgIDxNYXJrdXA+XHJcbiAgICAgICAgICAgIHtgXHJcbiAgICAgICAgICAgIHxpbXBvcnQge3Rlc3R9IGZyb20gJ3psaXEnO1xyXG4gICAgICAgICAgICB8aW1wb3J0IHtIaWdobGlnaHR9IGZyb20gJy4vaGlnaGxpZ2h0LmpzJztcclxuICAgICAgICAgICAgfFxyXG4gICAgICAgICAgICB8bGV0IHRleHQkID0gc3RyZWFtKCdIZWxsbyBXb3JsZCEhIScpO1xyXG4gICAgICAgICAgICB8dGVzdCg8cD57dGV4dCR9PjwvcD4sIFtcclxuICAgICAgICAgICAgfCAgICAvLyBvbiBlYWNoIHVwZGF0ZSBvZiBhbiBlbGVtZW50LCB3ZSBjYW4gdGVzdCBpdFxyXG4gICAgICAgICAgICB8ICAgIGVsZW1lbnQgPT4gYXNzZXJ0LmVxdWFsKGVsZW1lbnQub3V0ZXJIVE1MLCAnPHA+SGVsbG8gV29ybGQhISE8L3A+JyksXHJcbiAgICAgICAgICAgIHwgICAgZWxlbWVudCA9PiBhc3NlcnQuZXF1YWwoZWxlbWVudC5vdXRlckhUTUwsICc8cD5CeWUgV29ybGQhISE8L3A+JyksXHJcbiAgICAgICAgICAgIHxdKTtcclxuICAgICAgICAgICAgfHRleHQkKCdCeWUgV29ybGQhISEnKTtcclxuICAgICAgICAgICAgYH1cclxuICAgICAgICA8L01hcmt1cD5cclxuXHJcbiAgICAgICAgPHA+SWYgeW91IG5lZWQgYW4gZWFzeSB0ZXN0IHNldHVwIGNoZWNrb3V0IGhvdyB0aGUgWkxJUSBwcm9qZWN0IHVzZXMgPGEgaHJlZj1cImh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL2plc3QvXCI+SmVzdDwvYT4gd2l0aCBhbG1vc3QgMCBjb25maWd1cmF0aW9uLjwvcD5cclxuICAgIDwvZGl2PlxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RlbW8vdHV0b3JpYWwuanN4IiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vc3R5bGVzLnNjc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIHt9KTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zdHlsZXMuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zdHlsZXMuc2Nzc1wiKTtcblx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9kZW1vL3N0eWxlcy5zY3NzXG4vLyBtb2R1bGUgaWQgPSAxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vZ2hwYWdlcy1tYXRlcmlhbGl6ZS5jc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL3N0eWxlLWxvYWRlci9hZGRTdHlsZXMuanNcIikoY29udGVudCwge30pO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9naHBhZ2VzLW1hdGVyaWFsaXplLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vZ2hwYWdlcy1tYXRlcmlhbGl6ZS5jc3NcIik7XG5cdFx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHR9KTtcblx0fVxuXHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9tYXRlcmlhbGl6ZS1jc3MvY3NzL2docGFnZXMtbWF0ZXJpYWxpemUuY3NzXG4vLyBtb2R1bGUgaWQgPSAxN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBkZXBlbmRlbmNpZXNcclxuaW1wb3J0ICdtYXRlcmlhbGl6ZS1jc3MvY3NzL2docGFnZXMtbWF0ZXJpYWxpemUuY3NzJztcclxuXHJcbi8vIGNvcmVcclxuaW1wb3J0IHsgcmVuZGVyLCBoLCBzdHJlYW0sIG1lcmdlJCB9IGZyb20gJy4uL3NyYyc7XHJcblxyXG4vLyByb3V0ZXJcclxuaW1wb3J0IHsgaW5pdFJvdXRlciwgUm91dGVyIH0gZnJvbSAnLi4vc3JjJztcclxuXHJcbi8vIHN0YWNrdHJhY2VcclxuaW1wb3J0IHsgc2hyaW5rX3N0YWNrdHJhY2UgfSBmcm9tICcuLi9zcmMnO1xyXG5cclxuLy8gY29tcG9uZW50c1xyXG5pbXBvcnQgeyBTdWJoZWFkZXIgfSBmcm9tICcuL3N1YmhlYWRlci5qc3gnO1xyXG5pbXBvcnQgeyBJbmZvcyB9IGZyb20gJy4vaW5mb3MuanN4JztcclxuaW1wb3J0IHsgSGVhZGVyIH0gZnJvbSAnLi9oZWFkZXIuanN4JztcclxuaW1wb3J0IHsgVHV0b3JpYWwgfSBmcm9tICcuL3R1dG9yaWFsLmpzeCc7XHJcbmltcG9ydCB7IFBsYXlncm91bmQgfSBmcm9tICcuL3BsYXlncm91bmQuanN4JztcclxuXHJcbi8vc3R5bGVzXHJcbmltcG9ydCAnLi9zdHlsZXMuc2Nzcyc7XHJcblxyXG5zaHJpbmtfc3RhY2t0cmFjZSgpO1xyXG5cclxubGV0IHJvdXRlciQgPSBpbml0Um91dGVyKCk7XHJcblxyXG4vLyBtYWluIHJlbmRlciBmdW5jdGlvbiBmb3IgdGhlIGFwcGxpY2F0aW9uXHJcbi8vIHJlbmRlciBwcm92aWRlZCBoeXBlcnNjcmlwdCBpbnRvIGEgcGFyZW50IGVsZW1lbnRcclxuLy8gemxpcSBwYXNzZXMgYXJvdW5kIEhUTUxFbGVtZW50IGVsZW1lbnRzIHNvIHlvdSBjYW4gZGVjaWRlIHdoYXQgdG8gZG8gd2l0aCB0aGVtXHJcbmxldCBhcHAgPSA8ZGl2PlxyXG5cdDxIZWFkZXIgLz5cclxuXHQ8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XHJcblx0XHQ8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL2ZhYm93ZWIvemxpcVwiPjxpbWcgc3R5bGU9XCJwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogMDsgcmlnaHQ6IDA7IGJvcmRlcjogMDtcIiBzcmM9XCJodHRwczovL2NhbW8uZ2l0aHVidXNlcmNvbnRlbnQuY29tLzM4ZWY4MWY4YWNhNjRiYjlhNjQ0NDhkMGQ3MGYxMzA4ZWY1MzQxYWIvNjg3NDc0NzA3MzNhMmYyZjczMzMyZTYxNmQ2MTdhNmY2ZTYxNzc3MzJlNjM2ZjZkMmY2NzY5NzQ2ODc1NjIyZjcyNjk2MjYyNmY2ZTczMmY2NjZmNzI2YjZkNjU1ZjcyNjk2NzY4NzQ1ZjY0NjE3MjZiNjI2Yzc1NjU1ZjMxMzIzMTM2MzIzMTJlNzA2ZTY3XCIgYWx0PVwiRm9yayBtZSBvbiBHaXRIdWJcIiBkYXRhLWNhbm9uaWNhbC1zcmM9XCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vZ2l0aHViL3JpYmJvbnMvZm9ya21lX3JpZ2h0X2RhcmtibHVlXzEyMTYyMS5wbmdcIiAvPjwvYT5cclxuXHRcdDxSb3V0ZXIgcm91dGVyJD17cm91dGVyJH0gcm91dGU9eycvJ30+XHJcblx0XHRcdDxJbmZvcyAvPlxyXG5cdFx0XHQ8ZGl2IGNsYXNzPSdzZWN0aW9uJz5cclxuICAgICAgICBcdFx0PFN1YmhlYWRlciB0aXRsZT1cIk1vdGl2YXRpb25cIiBzdWJ0aXRsZT1cIldoeSB5ZXQgYW5vdGhlciB3ZWIgZnJhbWV3b3JrP1wiIGlkPVwibW90aXZhdGlvblwiLz5cclxuXHJcblx0XHRcdFx0PGRpdiBjbGFzcz1cInJvd1wiPlxyXG5cdFx0XHRcdFx0PHA+TW9kZXJuIHdlYiBmcmFtZXdvcmtzIGdvdCByZWFsbHkgYmlnIChSZWFjdCArIFJlZHV4IDEzOUtiIGFuZCBBbmd1bGFyIDIgKyBSeCA3NjZLYiwgPGEgaHJlZj1cImh0dHBzOi8vZ2lzdC5naXRodWIuY29tL1Jlc3R1dGEvY2RhNjllNTBhODUzYWE2NDkxMmRcIj5zcmM8L2E+KS4gQXMgYSBkZXZlbG9wZXIgSSBjYW1lIGludG8gdGhlICh1bilwbGVhc2FudCBzaXR1YXRpb24gdG8gdGVhY2ggcGVvcGxlIGhvdyB0aGVzZSB3b3JrLiBCdXQgSSBjb3VsZG4ndCByZWFsbHkgc2F5LCBhcyBJIGhhdmVuJ3QgYWN0dWFsbHkgdW5kZXJzdG9vZCBlYWNoIGxpbmUgb2YgY29kZSBpbiB0aGVzZSBiZWFzdHMuIEJ1dCBub3Qgb25seSB0aGF0LCB0aGV5IGFsc28gaGF2ZSBhIGxvdCBvZiBzdHJ1Y3R1cmVzIEkgYXMgYSBkZXZlbG9wZXIgaGF2ZSB0byBsZWFybiB0byBnZXQgd2hlcmUgSSB3YW50IHRvIGdvLiBJdCBmZWVscyBsaWtlIGxlYXJuaW5nIHByb2dyYW1taW5nIGFnYWluIGp1c3QgdG8gYmUgYWJsZSB0byByZW5kZXIgc29tZSBkYXRhLjwvcD5cclxuXHRcdFx0XHRcdDxwPlpMSVEgdHJpZXMgdG8gYmUgc29tZXRoaW5nIHNpbXBsZS4gU29tZXRoaW5nIHRoYXQgcmVhZHMgaW4gYW4gZXZlbmluZy4gQnV0IHRoYXQgaXMgc3RpbGwgc28gcG93ZXJmdWwgeW91IGNhbiBqdXN0IGdvIGFuZCBkaXNwbGF5IGNvbXBsZXggVUlzIHdpdGggaXQuIFNvbWV0aGluZyB0aGF0IGZlZWxzIG1vcmUgSlMgbGVzcyBKYXZhLjwvcD5cclxuXHRcdFx0XHRcdDxwPlN0aWxsIFpMSVEgZG9lc24ndCB0cnkgdG8gYmUgdGhlIG5leHQgUmVhY3Qgb3IgQW5ndWxhciEgWkxJUSBoYXMgYSBkZWNlbnQgcmVuZGVyIHNwZWVkIGV2ZW4gdXAgdG8gc2V2ZXJhbCBodW5kcmVkIHNpbXVsdGFuZW91cyB1cGRhdGVzIGJ1dCBpdCdzIG5vdCBhcyBmYXN0IGFzIDxhIGhyZWY9XCIoaHR0cHM6Ly9wcmVhY3Rqcy5jb20vXCI+UHJlYWN0PC9hPi4gQW5kIGl0IG9uIHB1cnBvc2UgZG9lcyBub3Qgc29sdmUgZXZlcnkgcHJvYmxlbSB5b3Ugd2lsbCBldmVyIGhhdmUuIFpMSVEgaXMgYSB0b29sIHRvIGhlbHAgeW91IGNyZWF0ZSB0aGUgc29sdXRpb24gdGhhdCBmaXRzIHlvdXIgbmVlZC48L3A+XHJcblx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0XHQ8VHV0b3JpYWwvPlxyXG5cdFx0XHQ8UGxheWdyb3VuZCAvPlxyXG5cdFx0PC9Sb3V0ZXI+XHJcblx0XHQ8Um91dGVyIHJvdXRlciQ9e3JvdXRlciR9IHJvdXRlPVwiL3N1YnBhZ2VcIj5cclxuXHRcdFx0WW91IGFyZSBhdCBhIHN1YnBhZ2UuIFRoZSByb3V0ZXIgZGV0ZWN0ZWQgdGhlIHBhcmFtczpcclxuXHRcdFx0e3JvdXRlciQuJCgncGFyYW1zJykubWFwKHBhcmFtcyA9PiBKU09OLnN0cmluZ2lmeShwYXJhbXMpKX0uXHJcblx0XHRcdDxhIGhyZWY9XCIvI3JvdXRpbmdcIj5HbyBCYWNrPC9hPlxyXG5cdFx0PC9Sb3V0ZXI+XHJcblx0PC9kaXY+XHJcbjwvZGl2PjtcclxucmVuZGVyKGFwcCwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2FwcCcpKTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZGVtby9kZW1vX2FwcC5qc3giLCJpbXBvcnQgUHJpc20gZnJvbSAncHJpc21qcyc7XHJcbmltcG9ydCAncHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWpzeC5qcyc7XHJcbmltcG9ydCAncHJpc21qcy90aGVtZXMvcHJpc20tc29sYXJpemVkbGlnaHQuY3NzJztcclxuaW1wb3J0IHsgaCwgc3RyZWFtIH0gZnJvbSAnLi4vc3JjJztcclxuXHJcbmV4cG9ydCBjb25zdCBNYXJrdXAgPSAocHJvcHMsIGNoaWxkcmVuJCkgPT4ge1xyXG4gICAgLy8gY2hpbGRyZW4gYXJlIGFsd2F5cyBhcnJheXMgb2YgYXJyYXlzIHRvIGFsbG93IGNoaWxkcmVuIHRoYXQgc3RyZWFtIGFycmF5c1xyXG4gICAgbGV0IGNvZGUkID0gc3RyZWFtKCcnKTtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGNoaWxkcmVuJC5tYXAoY2hpbGRyZW4gPT4ge1xyXG4gICAgICAgICAgICBsZXQgY29kZSA9IGNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICBsZXQgc3RyaXBwZWRNYXJnaW5Db2RlID0gY29kZVxyXG4gICAgICAgICAgICAgICAgLnNwbGl0KCdcXG4nKVxyXG4gICAgICAgICAgICAgICAgLmZpbHRlcihsaW5lID0+IGxpbmUudHJpbSgpICE9PSAnJylcclxuICAgICAgICAgICAgICAgIC5tYXAobGluZSA9PiBsaW5lLnRyaW0oKS5zdWJzdHIoMSkpXHJcbiAgICAgICAgICAgICAgICAuam9pbignXFxuJyk7XHJcbiAgICAgICAgICAgIGxldCBodG1sID0gUHJpc20uaGlnaGxpZ2h0KHN0cmlwcGVkTWFyZ2luQ29kZSwgUHJpc20ubGFuZ3VhZ2VzLmpzeCk7XHJcbiAgICAgICAgICAgIHJldHVybiBodG1sO1xyXG4gICAgICAgIH0pLm1hcChjb2RlJCk7XHJcbiAgICB9LCAxMCk7XHJcbiAgICByZXR1cm4gPHByZSBjbGFzcz1cImxhbmd1YWdlLWpzeFwiPlxyXG4gICAgICAgIDxjb2RlIGNsYXNzPVwibGFuZ3VhZ2UtanN4XCIgaW5uZXJIVE1MPXtjb2RlJH0gLz5cclxuICAgIDwvcHJlPjtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBPdXRwdXQgPSAocHJvcHMsIGNoaWxkcmVuKSA9PiB7XHJcbiAgICByZXR1cm4gPHByZSBjbGFzcz1cImV4YW1wbGUtb3V0cHV0XCI+XHJcbiAgICAgICAge2NoaWxkcmVufVxyXG4gICAgPC9wcmU+O1xyXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZGVtby91dGlscy5qc3giLCJ2YXIgcFNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuL2xpYi9rZXlzLmpzJyk7XG52YXIgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2xpYi9pc19hcmd1bWVudHMuanMnKTtcblxudmFyIGRlZXBFcXVhbCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFjdHVhbCwgZXhwZWN0ZWQsIG9wdHMpIHtcbiAgaWYgKCFvcHRzKSBvcHRzID0ge307XG4gIC8vIDcuMS4gQWxsIGlkZW50aWNhbCB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGFzIGRldGVybWluZWQgYnkgPT09LlxuICBpZiAoYWN0dWFsID09PSBleHBlY3RlZCkge1xuICAgIHJldHVybiB0cnVlO1xuXG4gIH0gZWxzZSBpZiAoYWN0dWFsIGluc3RhbmNlb2YgRGF0ZSAmJiBleHBlY3RlZCBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICByZXR1cm4gYWN0dWFsLmdldFRpbWUoKSA9PT0gZXhwZWN0ZWQuZ2V0VGltZSgpO1xuXG4gIC8vIDcuMy4gT3RoZXIgcGFpcnMgdGhhdCBkbyBub3QgYm90aCBwYXNzIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyxcbiAgLy8gZXF1aXZhbGVuY2UgaXMgZGV0ZXJtaW5lZCBieSA9PS5cbiAgfSBlbHNlIGlmICghYWN0dWFsIHx8ICFleHBlY3RlZCB8fCB0eXBlb2YgYWN0dWFsICE9ICdvYmplY3QnICYmIHR5cGVvZiBleHBlY3RlZCAhPSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBvcHRzLnN0cmljdCA/IGFjdHVhbCA9PT0gZXhwZWN0ZWQgOiBhY3R1YWwgPT0gZXhwZWN0ZWQ7XG5cbiAgLy8gNy40LiBGb3IgYWxsIG90aGVyIE9iamVjdCBwYWlycywgaW5jbHVkaW5nIEFycmF5IG9iamVjdHMsIGVxdWl2YWxlbmNlIGlzXG4gIC8vIGRldGVybWluZWQgYnkgaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChhcyB2ZXJpZmllZFxuICAvLyB3aXRoIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCksIHRoZSBzYW1lIHNldCBvZiBrZXlzXG4gIC8vIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpLCBlcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnlcbiAgLy8gY29ycmVzcG9uZGluZyBrZXksIGFuZCBhbiBpZGVudGljYWwgJ3Byb3RvdHlwZScgcHJvcGVydHkuIE5vdGU6IHRoaXNcbiAgLy8gYWNjb3VudHMgZm9yIGJvdGggbmFtZWQgYW5kIGluZGV4ZWQgcHJvcGVydGllcyBvbiBBcnJheXMuXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG9iakVxdWl2KGFjdHVhbCwgZXhwZWN0ZWQsIG9wdHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkT3JOdWxsKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBpc0J1ZmZlciAoeCkge1xuICBpZiAoIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnIHx8IHR5cGVvZiB4Lmxlbmd0aCAhPT0gJ251bWJlcicpIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiB4LmNvcHkgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHguc2xpY2UgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHgubGVuZ3RoID4gMCAmJiB0eXBlb2YgeFswXSAhPT0gJ251bWJlcicpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIG9iakVxdWl2KGEsIGIsIG9wdHMpIHtcbiAgdmFyIGksIGtleTtcbiAgaWYgKGlzVW5kZWZpbmVkT3JOdWxsKGEpIHx8IGlzVW5kZWZpbmVkT3JOdWxsKGIpKVxuICAgIHJldHVybiBmYWxzZTtcbiAgLy8gYW4gaWRlbnRpY2FsICdwcm90b3R5cGUnIHByb3BlcnR5LlxuICBpZiAoYS5wcm90b3R5cGUgIT09IGIucHJvdG90eXBlKSByZXR1cm4gZmFsc2U7XG4gIC8vfn5+SSd2ZSBtYW5hZ2VkIHRvIGJyZWFrIE9iamVjdC5rZXlzIHRocm91Z2ggc2NyZXd5IGFyZ3VtZW50cyBwYXNzaW5nLlxuICAvLyAgIENvbnZlcnRpbmcgdG8gYXJyYXkgc29sdmVzIHRoZSBwcm9ibGVtLlxuICBpZiAoaXNBcmd1bWVudHMoYSkpIHtcbiAgICBpZiAoIWlzQXJndW1lbnRzKGIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGEgPSBwU2xpY2UuY2FsbChhKTtcbiAgICBiID0gcFNsaWNlLmNhbGwoYik7XG4gICAgcmV0dXJuIGRlZXBFcXVhbChhLCBiLCBvcHRzKTtcbiAgfVxuICBpZiAoaXNCdWZmZXIoYSkpIHtcbiAgICBpZiAoIWlzQnVmZmVyKGIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGFbaV0gIT09IGJbaV0pIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdHJ5IHtcbiAgICB2YXIga2EgPSBvYmplY3RLZXlzKGEpLFxuICAgICAgICBrYiA9IG9iamVjdEtleXMoYik7XG4gIH0gY2F0Y2ggKGUpIHsvL2hhcHBlbnMgd2hlbiBvbmUgaXMgYSBzdHJpbmcgbGl0ZXJhbCBhbmQgdGhlIG90aGVyIGlzbid0XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoa2V5cyBpbmNvcnBvcmF0ZXNcbiAgLy8gaGFzT3duUHJvcGVydHkpXG4gIGlmIChrYS5sZW5ndGggIT0ga2IubGVuZ3RoKVxuICAgIHJldHVybiBmYWxzZTtcbiAgLy90aGUgc2FtZSBzZXQgb2Yga2V5cyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSxcbiAga2Euc29ydCgpO1xuICBrYi5zb3J0KCk7XG4gIC8vfn5+Y2hlYXAga2V5IHRlc3RcbiAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoa2FbaV0gIT0ga2JbaV0pXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy9lcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnkgY29ycmVzcG9uZGluZyBrZXksIGFuZFxuICAvL35+fnBvc3NpYmx5IGV4cGVuc2l2ZSBkZWVwIHRlc3RcbiAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBrZXkgPSBrYVtpXTtcbiAgICBpZiAoIWRlZXBFcXVhbChhW2tleV0sIGJba2V5XSwgb3B0cykpIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHlwZW9mIGEgPT09IHR5cGVvZiBiO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9kZWVwLWVxdWFsL2luZGV4LmpzIiwidmFyIHN1cHBvcnRzQXJndW1lbnRzQ2xhc3MgPSAoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudHMpXG59KSgpID09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBzdXBwb3J0c0FyZ3VtZW50c0NsYXNzID8gc3VwcG9ydGVkIDogdW5zdXBwb3J0ZWQ7XG5cbmV4cG9ydHMuc3VwcG9ydGVkID0gc3VwcG9ydGVkO1xuZnVuY3Rpb24gc3VwcG9ydGVkKG9iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgPT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG59O1xuXG5leHBvcnRzLnVuc3VwcG9ydGVkID0gdW5zdXBwb3J0ZWQ7XG5mdW5jdGlvbiB1bnN1cHBvcnRlZChvYmplY3Qpe1xuICByZXR1cm4gb2JqZWN0ICYmXG4gICAgdHlwZW9mIG9iamVjdCA9PSAnb2JqZWN0JyAmJlxuICAgIHR5cGVvZiBvYmplY3QubGVuZ3RoID09ICdudW1iZXInICYmXG4gICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ2NhbGxlZScpICYmXG4gICAgIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsICdjYWxsZWUnKSB8fFxuICAgIGZhbHNlO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZGVlcC1lcXVhbC9saWIvaXNfYXJndW1lbnRzLmpzIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIE9iamVjdC5rZXlzID09PSAnZnVuY3Rpb24nXG4gID8gT2JqZWN0LmtleXMgOiBzaGltO1xuXG5leHBvcnRzLnNoaW0gPSBzaGltO1xuZnVuY3Rpb24gc2hpbSAob2JqKSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIGtleXMucHVzaChrZXkpO1xuICByZXR1cm4ga2V5cztcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZGVlcC1lcXVhbC9saWIva2V5cy5qcyIsIihmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIC8vIFVuaXZlcnNhbCBNb2R1bGUgRGVmaW5pdGlvbiAoVU1EKSB0byBzdXBwb3J0IEFNRCwgQ29tbW9uSlMvTm9kZS5qcywgUmhpbm8sIGFuZCBicm93c2Vycy5cblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoJ2Vycm9yLXN0YWNrLXBhcnNlcicsIFsnc3RhY2tmcmFtZSddLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnc3RhY2tmcmFtZScpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByb290LkVycm9yU3RhY2tQYXJzZXIgPSBmYWN0b3J5KHJvb3QuU3RhY2tGcmFtZSk7XG4gICAgfVxufSh0aGlzLCBmdW5jdGlvbiBFcnJvclN0YWNrUGFyc2VyKFN0YWNrRnJhbWUpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgRklSRUZPWF9TQUZBUklfU1RBQ0tfUkVHRVhQID0gLyhefEApXFxTK1xcOlxcZCsvO1xuICAgIHZhciBDSFJPTUVfSUVfU1RBQ0tfUkVHRVhQID0gL15cXHMqYXQgLiooXFxTK1xcOlxcZCt8XFwobmF0aXZlXFwpKS9tO1xuICAgIHZhciBTQUZBUklfTkFUSVZFX0NPREVfUkVHRVhQID0gL14oZXZhbEApPyhcXFtuYXRpdmUgY29kZVxcXSk/JC87XG5cbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogR2l2ZW4gYW4gRXJyb3Igb2JqZWN0LCBleHRyYWN0IHRoZSBtb3N0IGluZm9ybWF0aW9uIGZyb20gaXQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJuIHtBcnJheX0gb2YgU3RhY2tGcmFtZXNcbiAgICAgICAgICovXG4gICAgICAgIHBhcnNlOiBmdW5jdGlvbiBFcnJvclN0YWNrUGFyc2VyJCRwYXJzZShlcnJvcikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlcnJvci5zdGFja3RyYWNlICE9PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgZXJyb3JbJ29wZXJhI3NvdXJjZWxvYyddICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3BlcmEoZXJyb3IpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvci5zdGFjayAmJiBlcnJvci5zdGFjay5tYXRjaChDSFJPTUVfSUVfU1RBQ0tfUkVHRVhQKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlVjhPcklFKGVycm9yKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3Iuc3RhY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUZGT3JTYWZhcmkoZXJyb3IpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBwYXJzZSBnaXZlbiBFcnJvciBvYmplY3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvLyBTZXBhcmF0ZSBsaW5lIGFuZCBjb2x1bW4gbnVtYmVycyBmcm9tIGEgc3RyaW5nIG9mIHRoZSBmb3JtOiAoVVJJOkxpbmU6Q29sdW1uKVxuICAgICAgICBleHRyYWN0TG9jYXRpb246IGZ1bmN0aW9uIEVycm9yU3RhY2tQYXJzZXIkJGV4dHJhY3RMb2NhdGlvbih1cmxMaWtlKSB7XG4gICAgICAgICAgICAvLyBGYWlsLWZhc3QgYnV0IHJldHVybiBsb2NhdGlvbnMgbGlrZSBcIihuYXRpdmUpXCJcbiAgICAgICAgICAgIGlmICh1cmxMaWtlLmluZGV4T2YoJzonKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW3VybExpa2VdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcmVnRXhwID0gLyguKz8pKD86XFw6KFxcZCspKT8oPzpcXDooXFxkKykpPyQvO1xuICAgICAgICAgICAgdmFyIHBhcnRzID0gcmVnRXhwLmV4ZWModXJsTGlrZS5yZXBsYWNlKC9bXFwoXFwpXS9nLCAnJykpO1xuICAgICAgICAgICAgcmV0dXJuIFtwYXJ0c1sxXSwgcGFydHNbMl0gfHwgdW5kZWZpbmVkLCBwYXJ0c1szXSB8fCB1bmRlZmluZWRdO1xuICAgICAgICB9LFxuXG4gICAgICAgIHBhcnNlVjhPcklFOiBmdW5jdGlvbiBFcnJvclN0YWNrUGFyc2VyJCRwYXJzZVY4T3JJRShlcnJvcikge1xuICAgICAgICAgICAgdmFyIGZpbHRlcmVkID0gZXJyb3Iuc3RhY2suc3BsaXQoJ1xcbicpLmZpbHRlcihmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhbGluZS5tYXRjaChDSFJPTUVfSUVfU1RBQ0tfUkVHRVhQKTtcbiAgICAgICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgICAgICByZXR1cm4gZmlsdGVyZWQubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgICAgICBpZiAobGluZS5pbmRleE9mKCcoZXZhbCAnKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRocm93IGF3YXkgZXZhbCBpbmZvcm1hdGlvbiB1bnRpbCB3ZSBpbXBsZW1lbnQgc3RhY2t0cmFjZS5qcy9zdGFja2ZyYW1lIzhcbiAgICAgICAgICAgICAgICAgICAgbGluZSA9IGxpbmUucmVwbGFjZSgvZXZhbCBjb2RlL2csICdldmFsJykucmVwbGFjZSgvKFxcKGV2YWwgYXQgW15cXCgpXSopfChcXClcXCwuKiQpL2csICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHRva2VucyA9IGxpbmUucmVwbGFjZSgvXlxccysvLCAnJykucmVwbGFjZSgvXFwoZXZhbCBjb2RlL2csICcoJykuc3BsaXQoL1xccysvKS5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb25QYXJ0cyA9IHRoaXMuZXh0cmFjdExvY2F0aW9uKHRva2Vucy5wb3AoKSk7XG4gICAgICAgICAgICAgICAgdmFyIGZ1bmN0aW9uTmFtZSA9IHRva2Vucy5qb2luKCcgJykgfHwgdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHZhciBmaWxlTmFtZSA9IFsnZXZhbCcsICc8YW5vbnltb3VzPiddLmluZGV4T2YobG9jYXRpb25QYXJ0c1swXSkgPiAtMSA/IHVuZGVmaW5lZCA6IGxvY2F0aW9uUGFydHNbMF07XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFN0YWNrRnJhbWUoe1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbk5hbWU6IGZ1bmN0aW9uTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IGZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiBsb2NhdGlvblBhcnRzWzFdLFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5OdW1iZXI6IGxvY2F0aW9uUGFydHNbMl0sXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbGluZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcGFyc2VGRk9yU2FmYXJpOiBmdW5jdGlvbiBFcnJvclN0YWNrUGFyc2VyJCRwYXJzZUZGT3JTYWZhcmkoZXJyb3IpIHtcbiAgICAgICAgICAgIHZhciBmaWx0ZXJlZCA9IGVycm9yLnN0YWNrLnNwbGl0KCdcXG4nKS5maWx0ZXIoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhbGluZS5tYXRjaChTQUZBUklfTkFUSVZFX0NPREVfUkVHRVhQKTtcbiAgICAgICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgICAgICByZXR1cm4gZmlsdGVyZWQubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgICAgICAvLyBUaHJvdyBhd2F5IGV2YWwgaW5mb3JtYXRpb24gdW50aWwgd2UgaW1wbGVtZW50IHN0YWNrdHJhY2UuanMvc3RhY2tmcmFtZSM4XG4gICAgICAgICAgICAgICAgaWYgKGxpbmUuaW5kZXhPZignID4gZXZhbCcpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgbGluZSA9IGxpbmUucmVwbGFjZSgvIGxpbmUgKFxcZCspKD86ID4gZXZhbCBsaW5lIFxcZCspKiA+IGV2YWxcXDpcXGQrXFw6XFxkKy9nLCAnOiQxJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGxpbmUuaW5kZXhPZignQCcpID09PSAtMSAmJiBsaW5lLmluZGV4T2YoJzonKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2FmYXJpIGV2YWwgZnJhbWVzIG9ubHkgaGF2ZSBmdW5jdGlvbiBuYW1lcyBhbmQgbm90aGluZyBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU3RhY2tGcmFtZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbk5hbWU6IGxpbmVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRva2VucyA9IGxpbmUuc3BsaXQoJ0AnKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uUGFydHMgPSB0aGlzLmV4dHJhY3RMb2NhdGlvbih0b2tlbnMucG9wKCkpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZnVuY3Rpb25OYW1lID0gdG9rZW5zLmpvaW4oJ0AnKSB8fCB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTdGFja0ZyYW1lKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uTmFtZTogZnVuY3Rpb25OYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IGxvY2F0aW9uUGFydHNbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiBsb2NhdGlvblBhcnRzWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uTnVtYmVyOiBsb2NhdGlvblBhcnRzWzJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBsaW5lXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHBhcnNlT3BlcmE6IGZ1bmN0aW9uIEVycm9yU3RhY2tQYXJzZXIkJHBhcnNlT3BlcmEoZSkge1xuICAgICAgICAgICAgaWYgKCFlLnN0YWNrdHJhY2UgfHwgKGUubWVzc2FnZS5pbmRleE9mKCdcXG4nKSA+IC0xICYmXG4gICAgICAgICAgICAgICAgZS5tZXNzYWdlLnNwbGl0KCdcXG4nKS5sZW5ndGggPiBlLnN0YWNrdHJhY2Uuc3BsaXQoJ1xcbicpLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9wZXJhOShlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWUuc3RhY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9wZXJhMTAoZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3BlcmExMShlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBwYXJzZU9wZXJhOTogZnVuY3Rpb24gRXJyb3JTdGFja1BhcnNlciQkcGFyc2VPcGVyYTkoZSkge1xuICAgICAgICAgICAgdmFyIGxpbmVSRSA9IC9MaW5lIChcXGQrKS4qc2NyaXB0ICg/OmluICk/KFxcUyspL2k7XG4gICAgICAgICAgICB2YXIgbGluZXMgPSBlLm1lc3NhZ2Uuc3BsaXQoJ1xcbicpO1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMiwgbGVuID0gbGluZXMubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBsaW5lUkUuZXhlYyhsaW5lc1tpXSk7XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ldyBTdGFja0ZyYW1lKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBtYXRjaFsyXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IG1hdGNoWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBsaW5lc1tpXVxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuXG4gICAgICAgIHBhcnNlT3BlcmExMDogZnVuY3Rpb24gRXJyb3JTdGFja1BhcnNlciQkcGFyc2VPcGVyYTEwKGUpIHtcbiAgICAgICAgICAgIHZhciBsaW5lUkUgPSAvTGluZSAoXFxkKykuKnNjcmlwdCAoPzppbiApPyhcXFMrKSg/OjogSW4gZnVuY3Rpb24gKFxcUyspKT8kL2k7XG4gICAgICAgICAgICB2YXIgbGluZXMgPSBlLnN0YWNrdHJhY2Uuc3BsaXQoJ1xcbicpO1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbGluZXMubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBsaW5lUkUuZXhlYyhsaW5lc1tpXSk7XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFN0YWNrRnJhbWUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uTmFtZTogbWF0Y2hbM10gfHwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBtYXRjaFsyXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiBtYXRjaFsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IGxpbmVzW2ldXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBPcGVyYSAxMC42NSsgRXJyb3Iuc3RhY2sgdmVyeSBzaW1pbGFyIHRvIEZGL1NhZmFyaVxuICAgICAgICBwYXJzZU9wZXJhMTE6IGZ1bmN0aW9uIEVycm9yU3RhY2tQYXJzZXIkJHBhcnNlT3BlcmExMShlcnJvcikge1xuICAgICAgICAgICAgdmFyIGZpbHRlcmVkID0gZXJyb3Iuc3RhY2suc3BsaXQoJ1xcbicpLmZpbHRlcihmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhbGluZS5tYXRjaChGSVJFRk9YX1NBRkFSSV9TVEFDS19SRUdFWFApICYmICFsaW5lLm1hdGNoKC9eRXJyb3IgY3JlYXRlZCBhdC8pO1xuICAgICAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgICAgIHJldHVybiBmaWx0ZXJlZC5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgICAgIHZhciB0b2tlbnMgPSBsaW5lLnNwbGl0KCdAJyk7XG4gICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uUGFydHMgPSB0aGlzLmV4dHJhY3RMb2NhdGlvbih0b2tlbnMucG9wKCkpO1xuICAgICAgICAgICAgICAgIHZhciBmdW5jdGlvbkNhbGwgPSAodG9rZW5zLnNoaWZ0KCkgfHwgJycpO1xuICAgICAgICAgICAgICAgIHZhciBmdW5jdGlvbk5hbWUgPSBmdW5jdGlvbkNhbGxcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC88YW5vbnltb3VzIGZ1bmN0aW9uKDogKFxcdyspKT8+LywgJyQyJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXChbXlxcKV0qXFwpL2csICcnKSB8fCB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3NSYXc7XG4gICAgICAgICAgICAgICAgaWYgKGZ1bmN0aW9uQ2FsbC5tYXRjaCgvXFwoKFteXFwpXSopXFwpLykpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnc1JhdyA9IGZ1bmN0aW9uQ2FsbC5yZXBsYWNlKC9eW15cXChdK1xcKChbXlxcKV0qKVxcKSQvLCAnJDEnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSAoYXJnc1JhdyA9PT0gdW5kZWZpbmVkIHx8IGFyZ3NSYXcgPT09ICdbYXJndW1lbnRzIG5vdCBhdmFpbGFibGVdJykgP1xuICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQgOiBhcmdzUmF3LnNwbGl0KCcsJyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFN0YWNrRnJhbWUoe1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbk5hbWU6IGZ1bmN0aW9uTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgYXJnczogYXJncyxcbiAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IGxvY2F0aW9uUGFydHNbMF0sXG4gICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IGxvY2F0aW9uUGFydHNbMV0sXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbk51bWJlcjogbG9jYXRpb25QYXJ0c1syXSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiBsaW5lXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG59KSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2Vycm9yLXN0YWNrLXBhcnNlci9lcnJvci1zdGFjay1wYXJzZXIuanMiLCIoZnVuY3Rpb24oUHJpc20pIHtcblxudmFyIGphdmFzY3JpcHQgPSBQcmlzbS51dGlsLmNsb25lKFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0KTtcblxuUHJpc20ubGFuZ3VhZ2VzLmpzeCA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ21hcmt1cCcsIGphdmFzY3JpcHQpO1xuUHJpc20ubGFuZ3VhZ2VzLmpzeC50YWcucGF0dGVybj0gLzxcXC8/W1xcd1xcLjotXStcXHMqKD86XFxzK1tcXHdcXC46LV0rKD86PSg/OihcInwnKShcXFxcP1tcXHdcXFddKSo/XFwxfFteXFxzJ1wiPj1dK3woXFx7W1xcd1xcV10qP1xcfSkpKT9cXHMqKSpcXC8/Pi9pO1xuXG5QcmlzbS5sYW5ndWFnZXMuanN4LnRhZy5pbnNpZGVbJ2F0dHItdmFsdWUnXS5wYXR0ZXJuID0gLz1bXlxce10oPzooJ3xcIilbXFx3XFxXXSo/KFxcMSl8W15cXHM+XSspL2k7XG5cbnZhciBqc3hFeHByZXNzaW9uID0gUHJpc20udXRpbC5jbG9uZShQcmlzbS5sYW5ndWFnZXMuanN4KTtcblxuZGVsZXRlIGpzeEV4cHJlc3Npb24ucHVuY3R1YXRpb25cblxuanN4RXhwcmVzc2lvbiA9IFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2pzeCcsICdvcGVyYXRvcicsIHtcbiAgJ3B1bmN0dWF0aW9uJzogLz0oPz17KXxbe31bXFxdOygpLC46XS9cbn0sIHsganN4OiBqc3hFeHByZXNzaW9uIH0pO1xuXG5QcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdpbnNpZGUnLCAnYXR0ci12YWx1ZScse1xuXHQnc2NyaXB0Jzoge1xuXHRcdC8vIEFsbG93IGZvciBvbmUgbGV2ZWwgb2YgbmVzdGluZ1xuXHRcdHBhdHRlcm46IC89KFxceyg/Olxce1tefV0qXFx9fFtefV0pK1xcfSkvaSxcblx0XHRpbnNpZGU6IGpzeEV4cHJlc3Npb24sXG5cdFx0J2FsaWFzJzogJ2xhbmd1YWdlLWphdmFzY3JpcHQnXG5cdH1cbn0sIFByaXNtLmxhbmd1YWdlcy5qc3gudGFnKTtcblxufShQcmlzbSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9wcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tanN4LmpzIiwiXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgIEJlZ2luIHByaXNtLWNvcmUuanNcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxudmFyIF9zZWxmID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKVxuXHQ/IHdpbmRvdyAgIC8vIGlmIGluIGJyb3dzZXJcblx0OiAoXG5cdFx0KHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlKVxuXHRcdD8gc2VsZiAvLyBpZiBpbiB3b3JrZXJcblx0XHQ6IHt9ICAgLy8gaWYgaW4gbm9kZSBqc1xuXHQpO1xuXG4vKipcbiAqIFByaXNtOiBMaWdodHdlaWdodCwgcm9idXN0LCBlbGVnYW50IHN5bnRheCBoaWdobGlnaHRpbmdcbiAqIE1JVCBsaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwL1xuICogQGF1dGhvciBMZWEgVmVyb3UgaHR0cDovL2xlYS52ZXJvdS5tZVxuICovXG5cbnZhciBQcmlzbSA9IChmdW5jdGlvbigpe1xuXG4vLyBQcml2YXRlIGhlbHBlciB2YXJzXG52YXIgbGFuZyA9IC9cXGJsYW5nKD86dWFnZSk/LShcXHcrKVxcYi9pO1xudmFyIHVuaXF1ZUlkID0gMDtcblxudmFyIF8gPSBfc2VsZi5QcmlzbSA9IHtcblx0dXRpbDoge1xuXHRcdGVuY29kZTogZnVuY3Rpb24gKHRva2Vucykge1xuXHRcdFx0aWYgKHRva2VucyBpbnN0YW5jZW9mIFRva2VuKSB7XG5cdFx0XHRcdHJldHVybiBuZXcgVG9rZW4odG9rZW5zLnR5cGUsIF8udXRpbC5lbmNvZGUodG9rZW5zLmNvbnRlbnQpLCB0b2tlbnMuYWxpYXMpO1xuXHRcdFx0fSBlbHNlIGlmIChfLnV0aWwudHlwZSh0b2tlbnMpID09PSAnQXJyYXknKSB7XG5cdFx0XHRcdHJldHVybiB0b2tlbnMubWFwKF8udXRpbC5lbmNvZGUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRva2Vucy5yZXBsYWNlKC8mL2csICcmYW1wOycpLnJlcGxhY2UoLzwvZywgJyZsdDsnKS5yZXBsYWNlKC9cXHUwMGEwL2csICcgJyk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHR5cGU6IGZ1bmN0aW9uIChvKSB7XG5cdFx0XHRyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLm1hdGNoKC9cXFtvYmplY3QgKFxcdyspXFxdLylbMV07XG5cdFx0fSxcblxuXHRcdG9iaklkOiBmdW5jdGlvbiAob2JqKSB7XG5cdFx0XHRpZiAoIW9ialsnX19pZCddKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosICdfX2lkJywgeyB2YWx1ZTogKyt1bmlxdWVJZCB9KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBvYmpbJ19faWQnXTtcblx0XHR9LFxuXG5cdFx0Ly8gRGVlcCBjbG9uZSBhIGxhbmd1YWdlIGRlZmluaXRpb24gKGUuZy4gdG8gZXh0ZW5kIGl0KVxuXHRcdGNsb25lOiBmdW5jdGlvbiAobykge1xuXHRcdFx0dmFyIHR5cGUgPSBfLnV0aWwudHlwZShvKTtcblxuXHRcdFx0c3dpdGNoICh0eXBlKSB7XG5cdFx0XHRcdGNhc2UgJ09iamVjdCc6XG5cdFx0XHRcdFx0dmFyIGNsb25lID0ge307XG5cblx0XHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gbykge1xuXHRcdFx0XHRcdFx0aWYgKG8uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHRcdFx0XHRcdFx0XHRjbG9uZVtrZXldID0gXy51dGlsLmNsb25lKG9ba2V5XSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGNsb25lO1xuXG5cdFx0XHRcdGNhc2UgJ0FycmF5Jzpcblx0XHRcdFx0XHQvLyBDaGVjayBmb3IgZXhpc3RlbmNlIGZvciBJRThcblx0XHRcdFx0XHRyZXR1cm4gby5tYXAgJiYgby5tYXAoZnVuY3Rpb24odikgeyByZXR1cm4gXy51dGlsLmNsb25lKHYpOyB9KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG87XG5cdFx0fVxuXHR9LFxuXG5cdGxhbmd1YWdlczoge1xuXHRcdGV4dGVuZDogZnVuY3Rpb24gKGlkLCByZWRlZikge1xuXHRcdFx0dmFyIGxhbmcgPSBfLnV0aWwuY2xvbmUoXy5sYW5ndWFnZXNbaWRdKTtcblxuXHRcdFx0Zm9yICh2YXIga2V5IGluIHJlZGVmKSB7XG5cdFx0XHRcdGxhbmdba2V5XSA9IHJlZGVmW2tleV07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBsYW5nO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBJbnNlcnQgYSB0b2tlbiBiZWZvcmUgYW5vdGhlciB0b2tlbiBpbiBhIGxhbmd1YWdlIGxpdGVyYWxcblx0XHQgKiBBcyB0aGlzIG5lZWRzIHRvIHJlY3JlYXRlIHRoZSBvYmplY3QgKHdlIGNhbm5vdCBhY3R1YWxseSBpbnNlcnQgYmVmb3JlIGtleXMgaW4gb2JqZWN0IGxpdGVyYWxzKSxcblx0XHQgKiB3ZSBjYW5ub3QganVzdCBwcm92aWRlIGFuIG9iamVjdCwgd2UgbmVlZCBhbm9iamVjdCBhbmQgYSBrZXkuXG5cdFx0ICogQHBhcmFtIGluc2lkZSBUaGUga2V5IChvciBsYW5ndWFnZSBpZCkgb2YgdGhlIHBhcmVudFxuXHRcdCAqIEBwYXJhbSBiZWZvcmUgVGhlIGtleSB0byBpbnNlcnQgYmVmb3JlLiBJZiBub3QgcHJvdmlkZWQsIHRoZSBmdW5jdGlvbiBhcHBlbmRzIGluc3RlYWQuXG5cdFx0ICogQHBhcmFtIGluc2VydCBPYmplY3Qgd2l0aCB0aGUga2V5L3ZhbHVlIHBhaXJzIHRvIGluc2VydFxuXHRcdCAqIEBwYXJhbSByb290IFRoZSBvYmplY3QgdGhhdCBjb250YWlucyBgaW5zaWRlYC4gSWYgZXF1YWwgdG8gUHJpc20ubGFuZ3VhZ2VzLCBpdCBjYW4gYmUgb21pdHRlZC5cblx0XHQgKi9cblx0XHRpbnNlcnRCZWZvcmU6IGZ1bmN0aW9uIChpbnNpZGUsIGJlZm9yZSwgaW5zZXJ0LCByb290KSB7XG5cdFx0XHRyb290ID0gcm9vdCB8fCBfLmxhbmd1YWdlcztcblx0XHRcdHZhciBncmFtbWFyID0gcm9vdFtpbnNpZGVdO1xuXG5cdFx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAyKSB7XG5cdFx0XHRcdGluc2VydCA9IGFyZ3VtZW50c1sxXTtcblxuXHRcdFx0XHRmb3IgKHZhciBuZXdUb2tlbiBpbiBpbnNlcnQpIHtcblx0XHRcdFx0XHRpZiAoaW5zZXJ0Lmhhc093blByb3BlcnR5KG5ld1Rva2VuKSkge1xuXHRcdFx0XHRcdFx0Z3JhbW1hcltuZXdUb2tlbl0gPSBpbnNlcnRbbmV3VG9rZW5dO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBncmFtbWFyO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgcmV0ID0ge307XG5cblx0XHRcdGZvciAodmFyIHRva2VuIGluIGdyYW1tYXIpIHtcblxuXHRcdFx0XHRpZiAoZ3JhbW1hci5oYXNPd25Qcm9wZXJ0eSh0b2tlbikpIHtcblxuXHRcdFx0XHRcdGlmICh0b2tlbiA9PSBiZWZvcmUpIHtcblxuXHRcdFx0XHRcdFx0Zm9yICh2YXIgbmV3VG9rZW4gaW4gaW5zZXJ0KSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKGluc2VydC5oYXNPd25Qcm9wZXJ0eShuZXdUb2tlbikpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXRbbmV3VG9rZW5dID0gaW5zZXJ0W25ld1Rva2VuXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldFt0b2tlbl0gPSBncmFtbWFyW3Rva2VuXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBVcGRhdGUgcmVmZXJlbmNlcyBpbiBvdGhlciBsYW5ndWFnZSBkZWZpbml0aW9uc1xuXHRcdFx0Xy5sYW5ndWFnZXMuREZTKF8ubGFuZ3VhZ2VzLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG5cdFx0XHRcdGlmICh2YWx1ZSA9PT0gcm9vdFtpbnNpZGVdICYmIGtleSAhPSBpbnNpZGUpIHtcblx0XHRcdFx0XHR0aGlzW2tleV0gPSByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gcm9vdFtpbnNpZGVdID0gcmV0O1xuXHRcdH0sXG5cblx0XHQvLyBUcmF2ZXJzZSBhIGxhbmd1YWdlIGRlZmluaXRpb24gd2l0aCBEZXB0aCBGaXJzdCBTZWFyY2hcblx0XHRERlM6IGZ1bmN0aW9uKG8sIGNhbGxiYWNrLCB0eXBlLCB2aXNpdGVkKSB7XG5cdFx0XHR2aXNpdGVkID0gdmlzaXRlZCB8fCB7fTtcblx0XHRcdGZvciAodmFyIGkgaW4gbykge1xuXHRcdFx0XHRpZiAoby5oYXNPd25Qcm9wZXJ0eShpKSkge1xuXHRcdFx0XHRcdGNhbGxiYWNrLmNhbGwobywgaSwgb1tpXSwgdHlwZSB8fCBpKTtcblxuXHRcdFx0XHRcdGlmIChfLnV0aWwudHlwZShvW2ldKSA9PT0gJ09iamVjdCcgJiYgIXZpc2l0ZWRbXy51dGlsLm9iaklkKG9baV0pXSkge1xuXHRcdFx0XHRcdFx0dmlzaXRlZFtfLnV0aWwub2JqSWQob1tpXSldID0gdHJ1ZTtcblx0XHRcdFx0XHRcdF8ubGFuZ3VhZ2VzLkRGUyhvW2ldLCBjYWxsYmFjaywgbnVsbCwgdmlzaXRlZCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2UgaWYgKF8udXRpbC50eXBlKG9baV0pID09PSAnQXJyYXknICYmICF2aXNpdGVkW18udXRpbC5vYmpJZChvW2ldKV0pIHtcblx0XHRcdFx0XHRcdHZpc2l0ZWRbXy51dGlsLm9iaklkKG9baV0pXSA9IHRydWU7XG5cdFx0XHRcdFx0XHRfLmxhbmd1YWdlcy5ERlMob1tpXSwgY2FsbGJhY2ssIGksIHZpc2l0ZWQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0cGx1Z2luczoge30sXG5cblx0aGlnaGxpZ2h0QWxsOiBmdW5jdGlvbihhc3luYywgY2FsbGJhY2spIHtcblx0XHR2YXIgZW52ID0ge1xuXHRcdFx0Y2FsbGJhY2s6IGNhbGxiYWNrLFxuXHRcdFx0c2VsZWN0b3I6ICdjb2RlW2NsYXNzKj1cImxhbmd1YWdlLVwiXSwgW2NsYXNzKj1cImxhbmd1YWdlLVwiXSBjb2RlLCBjb2RlW2NsYXNzKj1cImxhbmctXCJdLCBbY2xhc3MqPVwibGFuZy1cIl0gY29kZSdcblx0XHR9O1xuXG5cdFx0Xy5ob29rcy5ydW4oXCJiZWZvcmUtaGlnaGxpZ2h0YWxsXCIsIGVudik7XG5cblx0XHR2YXIgZWxlbWVudHMgPSBlbnYuZWxlbWVudHMgfHwgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbnYuc2VsZWN0b3IpO1xuXG5cdFx0Zm9yICh2YXIgaT0wLCBlbGVtZW50OyBlbGVtZW50ID0gZWxlbWVudHNbaSsrXTspIHtcblx0XHRcdF8uaGlnaGxpZ2h0RWxlbWVudChlbGVtZW50LCBhc3luYyA9PT0gdHJ1ZSwgZW52LmNhbGxiYWNrKTtcblx0XHR9XG5cdH0sXG5cblx0aGlnaGxpZ2h0RWxlbWVudDogZnVuY3Rpb24oZWxlbWVudCwgYXN5bmMsIGNhbGxiYWNrKSB7XG5cdFx0Ly8gRmluZCBsYW5ndWFnZVxuXHRcdHZhciBsYW5ndWFnZSwgZ3JhbW1hciwgcGFyZW50ID0gZWxlbWVudDtcblxuXHRcdHdoaWxlIChwYXJlbnQgJiYgIWxhbmcudGVzdChwYXJlbnQuY2xhc3NOYW1lKSkge1xuXHRcdFx0cGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG5cdFx0fVxuXG5cdFx0aWYgKHBhcmVudCkge1xuXHRcdFx0bGFuZ3VhZ2UgPSAocGFyZW50LmNsYXNzTmFtZS5tYXRjaChsYW5nKSB8fCBbLCcnXSlbMV0udG9Mb3dlckNhc2UoKTtcblx0XHRcdGdyYW1tYXIgPSBfLmxhbmd1YWdlc1tsYW5ndWFnZV07XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IGxhbmd1YWdlIG9uIHRoZSBlbGVtZW50LCBpZiBub3QgcHJlc2VudFxuXHRcdGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUucmVwbGFjZShsYW5nLCAnJykucmVwbGFjZSgvXFxzKy9nLCAnICcpICsgJyBsYW5ndWFnZS0nICsgbGFuZ3VhZ2U7XG5cblx0XHQvLyBTZXQgbGFuZ3VhZ2Ugb24gdGhlIHBhcmVudCwgZm9yIHN0eWxpbmdcblx0XHRwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG5cblx0XHRpZiAoL3ByZS9pLnRlc3QocGFyZW50Lm5vZGVOYW1lKSkge1xuXHRcdFx0cGFyZW50LmNsYXNzTmFtZSA9IHBhcmVudC5jbGFzc05hbWUucmVwbGFjZShsYW5nLCAnJykucmVwbGFjZSgvXFxzKy9nLCAnICcpICsgJyBsYW5ndWFnZS0nICsgbGFuZ3VhZ2U7XG5cdFx0fVxuXG5cdFx0dmFyIGNvZGUgPSBlbGVtZW50LnRleHRDb250ZW50O1xuXG5cdFx0dmFyIGVudiA9IHtcblx0XHRcdGVsZW1lbnQ6IGVsZW1lbnQsXG5cdFx0XHRsYW5ndWFnZTogbGFuZ3VhZ2UsXG5cdFx0XHRncmFtbWFyOiBncmFtbWFyLFxuXHRcdFx0Y29kZTogY29kZVxuXHRcdH07XG5cblx0XHRfLmhvb2tzLnJ1bignYmVmb3JlLXNhbml0eS1jaGVjaycsIGVudik7XG5cblx0XHRpZiAoIWVudi5jb2RlIHx8ICFlbnYuZ3JhbW1hcikge1xuXHRcdFx0aWYgKGVudi5jb2RlKSB7XG5cdFx0XHRcdGVudi5lbGVtZW50LnRleHRDb250ZW50ID0gZW52LmNvZGU7XG5cdFx0XHR9XG5cdFx0XHRfLmhvb2tzLnJ1bignY29tcGxldGUnLCBlbnYpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdF8uaG9va3MucnVuKCdiZWZvcmUtaGlnaGxpZ2h0JywgZW52KTtcblxuXHRcdGlmIChhc3luYyAmJiBfc2VsZi5Xb3JrZXIpIHtcblx0XHRcdHZhciB3b3JrZXIgPSBuZXcgV29ya2VyKF8uZmlsZW5hbWUpO1xuXG5cdFx0XHR3b3JrZXIub25tZXNzYWdlID0gZnVuY3Rpb24oZXZ0KSB7XG5cdFx0XHRcdGVudi5oaWdobGlnaHRlZENvZGUgPSBldnQuZGF0YTtcblxuXHRcdFx0XHRfLmhvb2tzLnJ1bignYmVmb3JlLWluc2VydCcsIGVudik7XG5cblx0XHRcdFx0ZW52LmVsZW1lbnQuaW5uZXJIVE1MID0gZW52LmhpZ2hsaWdodGVkQ29kZTtcblxuXHRcdFx0XHRjYWxsYmFjayAmJiBjYWxsYmFjay5jYWxsKGVudi5lbGVtZW50KTtcblx0XHRcdFx0Xy5ob29rcy5ydW4oJ2FmdGVyLWhpZ2hsaWdodCcsIGVudik7XG5cdFx0XHRcdF8uaG9va3MucnVuKCdjb21wbGV0ZScsIGVudik7XG5cdFx0XHR9O1xuXG5cdFx0XHR3b3JrZXIucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoe1xuXHRcdFx0XHRsYW5ndWFnZTogZW52Lmxhbmd1YWdlLFxuXHRcdFx0XHRjb2RlOiBlbnYuY29kZSxcblx0XHRcdFx0aW1tZWRpYXRlQ2xvc2U6IHRydWVcblx0XHRcdH0pKTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRlbnYuaGlnaGxpZ2h0ZWRDb2RlID0gXy5oaWdobGlnaHQoZW52LmNvZGUsIGVudi5ncmFtbWFyLCBlbnYubGFuZ3VhZ2UpO1xuXG5cdFx0XHRfLmhvb2tzLnJ1bignYmVmb3JlLWluc2VydCcsIGVudik7XG5cblx0XHRcdGVudi5lbGVtZW50LmlubmVySFRNTCA9IGVudi5oaWdobGlnaHRlZENvZGU7XG5cblx0XHRcdGNhbGxiYWNrICYmIGNhbGxiYWNrLmNhbGwoZWxlbWVudCk7XG5cblx0XHRcdF8uaG9va3MucnVuKCdhZnRlci1oaWdobGlnaHQnLCBlbnYpO1xuXHRcdFx0Xy5ob29rcy5ydW4oJ2NvbXBsZXRlJywgZW52KTtcblx0XHR9XG5cdH0sXG5cblx0aGlnaGxpZ2h0OiBmdW5jdGlvbiAodGV4dCwgZ3JhbW1hciwgbGFuZ3VhZ2UpIHtcblx0XHR2YXIgdG9rZW5zID0gXy50b2tlbml6ZSh0ZXh0LCBncmFtbWFyKTtcblx0XHRyZXR1cm4gVG9rZW4uc3RyaW5naWZ5KF8udXRpbC5lbmNvZGUodG9rZW5zKSwgbGFuZ3VhZ2UpO1xuXHR9LFxuXG5cdHRva2VuaXplOiBmdW5jdGlvbih0ZXh0LCBncmFtbWFyLCBsYW5ndWFnZSkge1xuXHRcdHZhciBUb2tlbiA9IF8uVG9rZW47XG5cblx0XHR2YXIgc3RyYXJyID0gW3RleHRdO1xuXG5cdFx0dmFyIHJlc3QgPSBncmFtbWFyLnJlc3Q7XG5cblx0XHRpZiAocmVzdCkge1xuXHRcdFx0Zm9yICh2YXIgdG9rZW4gaW4gcmVzdCkge1xuXHRcdFx0XHRncmFtbWFyW3Rva2VuXSA9IHJlc3RbdG9rZW5dO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWxldGUgZ3JhbW1hci5yZXN0O1xuXHRcdH1cblxuXHRcdHRva2VubG9vcDogZm9yICh2YXIgdG9rZW4gaW4gZ3JhbW1hcikge1xuXHRcdFx0aWYoIWdyYW1tYXIuaGFzT3duUHJvcGVydHkodG9rZW4pIHx8ICFncmFtbWFyW3Rva2VuXSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHBhdHRlcm5zID0gZ3JhbW1hclt0b2tlbl07XG5cdFx0XHRwYXR0ZXJucyA9IChfLnV0aWwudHlwZShwYXR0ZXJucykgPT09IFwiQXJyYXlcIikgPyBwYXR0ZXJucyA6IFtwYXR0ZXJuc107XG5cblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgcGF0dGVybnMubGVuZ3RoOyArK2opIHtcblx0XHRcdFx0dmFyIHBhdHRlcm4gPSBwYXR0ZXJuc1tqXSxcblx0XHRcdFx0XHRpbnNpZGUgPSBwYXR0ZXJuLmluc2lkZSxcblx0XHRcdFx0XHRsb29rYmVoaW5kID0gISFwYXR0ZXJuLmxvb2tiZWhpbmQsXG5cdFx0XHRcdFx0Z3JlZWR5ID0gISFwYXR0ZXJuLmdyZWVkeSxcblx0XHRcdFx0XHRsb29rYmVoaW5kTGVuZ3RoID0gMCxcblx0XHRcdFx0XHRhbGlhcyA9IHBhdHRlcm4uYWxpYXM7XG5cblx0XHRcdFx0aWYgKGdyZWVkeSAmJiAhcGF0dGVybi5wYXR0ZXJuLmdsb2JhbCkge1xuXHRcdFx0XHRcdC8vIFdpdGhvdXQgdGhlIGdsb2JhbCBmbGFnLCBsYXN0SW5kZXggd29uJ3Qgd29ya1xuXHRcdFx0XHRcdHZhciBmbGFncyA9IHBhdHRlcm4ucGF0dGVybi50b1N0cmluZygpLm1hdGNoKC9baW11eV0qJC8pWzBdO1xuXHRcdFx0XHRcdHBhdHRlcm4ucGF0dGVybiA9IFJlZ0V4cChwYXR0ZXJuLnBhdHRlcm4uc291cmNlLCBmbGFncyArIFwiZ1wiKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHBhdHRlcm4gPSBwYXR0ZXJuLnBhdHRlcm4gfHwgcGF0dGVybjtcblxuXHRcdFx0XHQvLyBEb27igJl0IGNhY2hlIGxlbmd0aCBhcyBpdCBjaGFuZ2VzIGR1cmluZyB0aGUgbG9vcFxuXHRcdFx0XHRmb3IgKHZhciBpPTAsIHBvcyA9IDA7IGk8c3RyYXJyLmxlbmd0aDsgcG9zICs9IHN0cmFycltpXS5sZW5ndGgsICsraSkge1xuXG5cdFx0XHRcdFx0dmFyIHN0ciA9IHN0cmFycltpXTtcblxuXHRcdFx0XHRcdGlmIChzdHJhcnIubGVuZ3RoID4gdGV4dC5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdC8vIFNvbWV0aGluZyB3ZW50IHRlcnJpYmx5IHdyb25nLCBBQk9SVCwgQUJPUlQhXG5cdFx0XHRcdFx0XHRicmVhayB0b2tlbmxvb3A7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKHN0ciBpbnN0YW5jZW9mIFRva2VuKSB7XG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRwYXR0ZXJuLmxhc3RJbmRleCA9IDA7XG5cblx0XHRcdFx0XHR2YXIgbWF0Y2ggPSBwYXR0ZXJuLmV4ZWMoc3RyKSxcblx0XHRcdFx0XHQgICAgZGVsTnVtID0gMTtcblxuXHRcdFx0XHRcdC8vIEdyZWVkeSBwYXR0ZXJucyBjYW4gb3ZlcnJpZGUvcmVtb3ZlIHVwIHRvIHR3byBwcmV2aW91c2x5IG1hdGNoZWQgdG9rZW5zXG5cdFx0XHRcdFx0aWYgKCFtYXRjaCAmJiBncmVlZHkgJiYgaSAhPSBzdHJhcnIubGVuZ3RoIC0gMSkge1xuXHRcdFx0XHRcdFx0cGF0dGVybi5sYXN0SW5kZXggPSBwb3M7XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHBhdHRlcm4uZXhlYyh0ZXh0KTtcblx0XHRcdFx0XHRcdGlmICghbWF0Y2gpIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHZhciBmcm9tID0gbWF0Y2guaW5kZXggKyAobG9va2JlaGluZCA/IG1hdGNoWzFdLmxlbmd0aCA6IDApLFxuXHRcdFx0XHRcdFx0ICAgIHRvID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGgsXG5cdFx0XHRcdFx0XHQgICAgayA9IGksXG5cdFx0XHRcdFx0XHQgICAgcCA9IHBvcztcblxuXHRcdFx0XHRcdFx0Zm9yICh2YXIgbGVuID0gc3RyYXJyLmxlbmd0aDsgayA8IGxlbiAmJiBwIDwgdG87ICsraykge1xuXHRcdFx0XHRcdFx0XHRwICs9IHN0cmFycltrXS5sZW5ndGg7XG5cdFx0XHRcdFx0XHRcdC8vIE1vdmUgdGhlIGluZGV4IGkgdG8gdGhlIGVsZW1lbnQgaW4gc3RyYXJyIHRoYXQgaXMgY2xvc2VzdCB0byBmcm9tXG5cdFx0XHRcdFx0XHRcdGlmIChmcm9tID49IHApIHtcblx0XHRcdFx0XHRcdFx0XHQrK2k7XG5cdFx0XHRcdFx0XHRcdFx0cG9zID0gcDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvKlxuXHRcdFx0XHRcdFx0ICogSWYgc3RyYXJyW2ldIGlzIGEgVG9rZW4sIHRoZW4gdGhlIG1hdGNoIHN0YXJ0cyBpbnNpZGUgYW5vdGhlciBUb2tlbiwgd2hpY2ggaXMgaW52YWxpZFxuXHRcdFx0XHRcdFx0ICogSWYgc3RyYXJyW2sgLSAxXSBpcyBncmVlZHkgd2UgYXJlIGluIGNvbmZsaWN0IHdpdGggYW5vdGhlciBncmVlZHkgcGF0dGVyblxuXHRcdFx0XHRcdFx0ICovXG5cdFx0XHRcdFx0XHRpZiAoc3RyYXJyW2ldIGluc3RhbmNlb2YgVG9rZW4gfHwgc3RyYXJyW2sgLSAxXS5ncmVlZHkpIHtcblx0XHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE51bWJlciBvZiB0b2tlbnMgdG8gZGVsZXRlIGFuZCByZXBsYWNlIHdpdGggdGhlIG5ldyBtYXRjaFxuXHRcdFx0XHRcdFx0ZGVsTnVtID0gayAtIGk7XG5cdFx0XHRcdFx0XHRzdHIgPSB0ZXh0LnNsaWNlKHBvcywgcCk7XG5cdFx0XHRcdFx0XHRtYXRjaC5pbmRleCAtPSBwb3M7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCFtYXRjaCkge1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYobG9va2JlaGluZCkge1xuXHRcdFx0XHRcdFx0bG9va2JlaGluZExlbmd0aCA9IG1hdGNoWzFdLmxlbmd0aDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgZnJvbSA9IG1hdGNoLmluZGV4ICsgbG9va2JlaGluZExlbmd0aCxcblx0XHRcdFx0XHQgICAgbWF0Y2ggPSBtYXRjaFswXS5zbGljZShsb29rYmVoaW5kTGVuZ3RoKSxcblx0XHRcdFx0XHQgICAgdG8gPSBmcm9tICsgbWF0Y2gubGVuZ3RoLFxuXHRcdFx0XHRcdCAgICBiZWZvcmUgPSBzdHIuc2xpY2UoMCwgZnJvbSksXG5cdFx0XHRcdFx0ICAgIGFmdGVyID0gc3RyLnNsaWNlKHRvKTtcblxuXHRcdFx0XHRcdHZhciBhcmdzID0gW2ksIGRlbE51bV07XG5cblx0XHRcdFx0XHRpZiAoYmVmb3JlKSB7XG5cdFx0XHRcdFx0XHRhcmdzLnB1c2goYmVmb3JlKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgd3JhcHBlZCA9IG5ldyBUb2tlbih0b2tlbiwgaW5zaWRlPyBfLnRva2VuaXplKG1hdGNoLCBpbnNpZGUpIDogbWF0Y2gsIGFsaWFzLCBtYXRjaCwgZ3JlZWR5KTtcblxuXHRcdFx0XHRcdGFyZ3MucHVzaCh3cmFwcGVkKTtcblxuXHRcdFx0XHRcdGlmIChhZnRlcikge1xuXHRcdFx0XHRcdFx0YXJncy5wdXNoKGFmdGVyKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRBcnJheS5wcm90b3R5cGUuc3BsaWNlLmFwcGx5KHN0cmFyciwgYXJncyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gc3RyYXJyO1xuXHR9LFxuXG5cdGhvb2tzOiB7XG5cdFx0YWxsOiB7fSxcblxuXHRcdGFkZDogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrKSB7XG5cdFx0XHR2YXIgaG9va3MgPSBfLmhvb2tzLmFsbDtcblxuXHRcdFx0aG9va3NbbmFtZV0gPSBob29rc1tuYW1lXSB8fCBbXTtcblxuXHRcdFx0aG9va3NbbmFtZV0ucHVzaChjYWxsYmFjayk7XG5cdFx0fSxcblxuXHRcdHJ1bjogZnVuY3Rpb24gKG5hbWUsIGVudikge1xuXHRcdFx0dmFyIGNhbGxiYWNrcyA9IF8uaG9va3MuYWxsW25hbWVdO1xuXG5cdFx0XHRpZiAoIWNhbGxiYWNrcyB8fCAhY2FsbGJhY2tzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGZvciAodmFyIGk9MCwgY2FsbGJhY2s7IGNhbGxiYWNrID0gY2FsbGJhY2tzW2krK107KSB7XG5cdFx0XHRcdGNhbGxiYWNrKGVudik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG52YXIgVG9rZW4gPSBfLlRva2VuID0gZnVuY3Rpb24odHlwZSwgY29udGVudCwgYWxpYXMsIG1hdGNoZWRTdHIsIGdyZWVkeSkge1xuXHR0aGlzLnR5cGUgPSB0eXBlO1xuXHR0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xuXHR0aGlzLmFsaWFzID0gYWxpYXM7XG5cdC8vIENvcHkgb2YgdGhlIGZ1bGwgc3RyaW5nIHRoaXMgdG9rZW4gd2FzIGNyZWF0ZWQgZnJvbVxuXHR0aGlzLmxlbmd0aCA9IChtYXRjaGVkU3RyIHx8IFwiXCIpLmxlbmd0aHwwO1xuXHR0aGlzLmdyZWVkeSA9ICEhZ3JlZWR5O1xufTtcblxuVG9rZW4uc3RyaW5naWZ5ID0gZnVuY3Rpb24obywgbGFuZ3VhZ2UsIHBhcmVudCkge1xuXHRpZiAodHlwZW9mIG8gPT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdGlmIChfLnV0aWwudHlwZShvKSA9PT0gJ0FycmF5Jykge1xuXHRcdHJldHVybiBvLm1hcChmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0XHRyZXR1cm4gVG9rZW4uc3RyaW5naWZ5KGVsZW1lbnQsIGxhbmd1YWdlLCBvKTtcblx0XHR9KS5qb2luKCcnKTtcblx0fVxuXG5cdHZhciBlbnYgPSB7XG5cdFx0dHlwZTogby50eXBlLFxuXHRcdGNvbnRlbnQ6IFRva2VuLnN0cmluZ2lmeShvLmNvbnRlbnQsIGxhbmd1YWdlLCBwYXJlbnQpLFxuXHRcdHRhZzogJ3NwYW4nLFxuXHRcdGNsYXNzZXM6IFsndG9rZW4nLCBvLnR5cGVdLFxuXHRcdGF0dHJpYnV0ZXM6IHt9LFxuXHRcdGxhbmd1YWdlOiBsYW5ndWFnZSxcblx0XHRwYXJlbnQ6IHBhcmVudFxuXHR9O1xuXG5cdGlmIChlbnYudHlwZSA9PSAnY29tbWVudCcpIHtcblx0XHRlbnYuYXR0cmlidXRlc1snc3BlbGxjaGVjayddID0gJ3RydWUnO1xuXHR9XG5cblx0aWYgKG8uYWxpYXMpIHtcblx0XHR2YXIgYWxpYXNlcyA9IF8udXRpbC50eXBlKG8uYWxpYXMpID09PSAnQXJyYXknID8gby5hbGlhcyA6IFtvLmFsaWFzXTtcblx0XHRBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShlbnYuY2xhc3NlcywgYWxpYXNlcyk7XG5cdH1cblxuXHRfLmhvb2tzLnJ1bignd3JhcCcsIGVudik7XG5cblx0dmFyIGF0dHJpYnV0ZXMgPSBPYmplY3Qua2V5cyhlbnYuYXR0cmlidXRlcykubWFwKGZ1bmN0aW9uKG5hbWUpIHtcblx0XHRyZXR1cm4gbmFtZSArICc9XCInICsgKGVudi5hdHRyaWJ1dGVzW25hbWVdIHx8ICcnKS5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JykgKyAnXCInO1xuXHR9KS5qb2luKCcgJyk7XG5cblx0cmV0dXJuICc8JyArIGVudi50YWcgKyAnIGNsYXNzPVwiJyArIGVudi5jbGFzc2VzLmpvaW4oJyAnKSArICdcIicgKyAoYXR0cmlidXRlcyA/ICcgJyArIGF0dHJpYnV0ZXMgOiAnJykgKyAnPicgKyBlbnYuY29udGVudCArICc8LycgKyBlbnYudGFnICsgJz4nO1xuXG59O1xuXG5pZiAoIV9zZWxmLmRvY3VtZW50KSB7XG5cdGlmICghX3NlbGYuYWRkRXZlbnRMaXN0ZW5lcikge1xuXHRcdC8vIGluIE5vZGUuanNcblx0XHRyZXR1cm4gX3NlbGYuUHJpc207XG5cdH1cbiBcdC8vIEluIHdvcmtlclxuXHRfc2VsZi5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZnVuY3Rpb24oZXZ0KSB7XG5cdFx0dmFyIG1lc3NhZ2UgPSBKU09OLnBhcnNlKGV2dC5kYXRhKSxcblx0XHQgICAgbGFuZyA9IG1lc3NhZ2UubGFuZ3VhZ2UsXG5cdFx0ICAgIGNvZGUgPSBtZXNzYWdlLmNvZGUsXG5cdFx0ICAgIGltbWVkaWF0ZUNsb3NlID0gbWVzc2FnZS5pbW1lZGlhdGVDbG9zZTtcblxuXHRcdF9zZWxmLnBvc3RNZXNzYWdlKF8uaGlnaGxpZ2h0KGNvZGUsIF8ubGFuZ3VhZ2VzW2xhbmddLCBsYW5nKSk7XG5cdFx0aWYgKGltbWVkaWF0ZUNsb3NlKSB7XG5cdFx0XHRfc2VsZi5jbG9zZSgpO1xuXHRcdH1cblx0fSwgZmFsc2UpO1xuXG5cdHJldHVybiBfc2VsZi5QcmlzbTtcbn1cblxuLy9HZXQgY3VycmVudCBzY3JpcHQgYW5kIGhpZ2hsaWdodFxudmFyIHNjcmlwdCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgfHwgW10uc2xpY2UuY2FsbChkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKSkucG9wKCk7XG5cbmlmIChzY3JpcHQpIHtcblx0Xy5maWxlbmFtZSA9IHNjcmlwdC5zcmM7XG5cblx0aWYgKGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgJiYgIXNjcmlwdC5oYXNBdHRyaWJ1dGUoJ2RhdGEtbWFudWFsJykpIHtcblx0XHRpZihkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIikge1xuXHRcdFx0aWYgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcblx0XHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShfLmhpZ2hsaWdodEFsbCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dChfLmhpZ2hsaWdodEFsbCwgMTYpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBfLmhpZ2hsaWdodEFsbCk7XG5cdFx0fVxuXHR9XG59XG5cbnJldHVybiBfc2VsZi5QcmlzbTtcblxufSkoKTtcblxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdG1vZHVsZS5leHBvcnRzID0gUHJpc207XG59XG5cbi8vIGhhY2sgZm9yIGNvbXBvbmVudHMgdG8gd29yayBjb3JyZWN0bHkgaW4gbm9kZS5qc1xuaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG5cdGdsb2JhbC5QcmlzbSA9IFByaXNtO1xufVxuXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgQmVnaW4gcHJpc20tbWFya3VwLmpzXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cblByaXNtLmxhbmd1YWdlcy5tYXJrdXAgPSB7XG5cdCdjb21tZW50JzogLzwhLS1bXFx3XFxXXSo/LS0+Lyxcblx0J3Byb2xvZyc6IC88XFw/W1xcd1xcV10rP1xcPz4vLFxuXHQnZG9jdHlwZSc6IC88IURPQ1RZUEVbXFx3XFxXXSs/Pi9pLFxuXHQnY2RhdGEnOiAvPCFcXFtDREFUQVxcW1tcXHdcXFddKj9dXT4vaSxcblx0J3RhZyc6IHtcblx0XHRwYXR0ZXJuOiAvPFxcLz8oPyFcXGQpW15cXHM+XFwvPSQ8XSsoPzpcXHMrW15cXHM+XFwvPV0rKD86PSg/OihcInwnKSg/OlxcXFxcXDF8XFxcXD8oPyFcXDEpW1xcd1xcV10pKlxcMXxbXlxccydcIj49XSspKT8pKlxccypcXC8/Pi9pLFxuXHRcdGluc2lkZToge1xuXHRcdFx0J3RhZyc6IHtcblx0XHRcdFx0cGF0dGVybjogL148XFwvP1teXFxzPlxcL10rL2ksXG5cdFx0XHRcdGluc2lkZToge1xuXHRcdFx0XHRcdCdwdW5jdHVhdGlvbic6IC9ePFxcLz8vLFxuXHRcdFx0XHRcdCduYW1lc3BhY2UnOiAvXlteXFxzPlxcLzpdKzovXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHQnYXR0ci12YWx1ZSc6IHtcblx0XHRcdFx0cGF0dGVybjogLz0oPzooJ3xcIilbXFx3XFxXXSo/KFxcMSl8W15cXHM+XSspL2ksXG5cdFx0XHRcdGluc2lkZToge1xuXHRcdFx0XHRcdCdwdW5jdHVhdGlvbic6IC9bPT5cIiddL1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0J3B1bmN0dWF0aW9uJzogL1xcLz8+Lyxcblx0XHRcdCdhdHRyLW5hbWUnOiB7XG5cdFx0XHRcdHBhdHRlcm46IC9bXlxccz5cXC9dKy8sXG5cdFx0XHRcdGluc2lkZToge1xuXHRcdFx0XHRcdCduYW1lc3BhY2UnOiAvXlteXFxzPlxcLzpdKzovXG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH1cblx0fSxcblx0J2VudGl0eSc6IC8mIz9bXFxkYS16XXsxLDh9Oy9pXG59O1xuXG4vLyBQbHVnaW4gdG8gbWFrZSBlbnRpdHkgdGl0bGUgc2hvdyB0aGUgcmVhbCBlbnRpdHksIGlkZWEgYnkgUm9tYW4gS29tYXJvdlxuUHJpc20uaG9va3MuYWRkKCd3cmFwJywgZnVuY3Rpb24oZW52KSB7XG5cblx0aWYgKGVudi50eXBlID09PSAnZW50aXR5Jykge1xuXHRcdGVudi5hdHRyaWJ1dGVzWyd0aXRsZSddID0gZW52LmNvbnRlbnQucmVwbGFjZSgvJmFtcDsvLCAnJicpO1xuXHR9XG59KTtcblxuUHJpc20ubGFuZ3VhZ2VzLnhtbCA9IFByaXNtLmxhbmd1YWdlcy5tYXJrdXA7XG5QcmlzbS5sYW5ndWFnZXMuaHRtbCA9IFByaXNtLmxhbmd1YWdlcy5tYXJrdXA7XG5QcmlzbS5sYW5ndWFnZXMubWF0aG1sID0gUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cDtcblByaXNtLmxhbmd1YWdlcy5zdmcgPSBQcmlzbS5sYW5ndWFnZXMubWFya3VwO1xuXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgQmVnaW4gcHJpc20tY3NzLmpzXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cblByaXNtLmxhbmd1YWdlcy5jc3MgPSB7XG5cdCdjb21tZW50JzogL1xcL1xcKltcXHdcXFddKj9cXCpcXC8vLFxuXHQnYXRydWxlJzoge1xuXHRcdHBhdHRlcm46IC9AW1xcdy1dKz8uKj8oO3woPz1cXHMqXFx7KSkvaSxcblx0XHRpbnNpZGU6IHtcblx0XHRcdCdydWxlJzogL0BbXFx3LV0rL1xuXHRcdFx0Ly8gU2VlIHJlc3QgYmVsb3dcblx0XHR9XG5cdH0sXG5cdCd1cmwnOiAvdXJsXFwoKD86KFtcIiddKShcXFxcKD86XFxyXFxufFtcXHdcXFddKXwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxfC4qPylcXCkvaSxcblx0J3NlbGVjdG9yJzogL1teXFx7XFx9XFxzXVteXFx7XFx9O10qPyg/PVxccypcXHspLyxcblx0J3N0cmluZyc6IHtcblx0XHRwYXR0ZXJuOiAvKFwifCcpKFxcXFwoPzpcXHJcXG58W1xcd1xcV10pfCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvLFxuXHRcdGdyZWVkeTogdHJ1ZVxuXHR9LFxuXHQncHJvcGVydHknOiAvKFxcYnxcXEIpW1xcdy1dKyg/PVxccyo6KS9pLFxuXHQnaW1wb3J0YW50JzogL1xcQiFpbXBvcnRhbnRcXGIvaSxcblx0J2Z1bmN0aW9uJzogL1stYS16MC05XSsoPz1cXCgpL2ksXG5cdCdwdW5jdHVhdGlvbic6IC9bKCl7fTs6XS9cbn07XG5cblByaXNtLmxhbmd1YWdlcy5jc3NbJ2F0cnVsZSddLmluc2lkZS5yZXN0ID0gUHJpc20udXRpbC5jbG9uZShQcmlzbS5sYW5ndWFnZXMuY3NzKTtcblxuaWYgKFByaXNtLmxhbmd1YWdlcy5tYXJrdXApIHtcblx0UHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnbWFya3VwJywgJ3RhZycsIHtcblx0XHQnc3R5bGUnOiB7XG5cdFx0XHRwYXR0ZXJuOiAvKDxzdHlsZVtcXHdcXFddKj8+KVtcXHdcXFddKj8oPz08XFwvc3R5bGU+KS9pLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLmNzcyxcblx0XHRcdGFsaWFzOiAnbGFuZ3VhZ2UtY3NzJ1xuXHRcdH1cblx0fSk7XG5cdFxuXHRQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdpbnNpZGUnLCAnYXR0ci12YWx1ZScsIHtcblx0XHQnc3R5bGUtYXR0cic6IHtcblx0XHRcdHBhdHRlcm46IC9cXHMqc3R5bGU9KFwifCcpLio/XFwxL2ksXG5cdFx0XHRpbnNpZGU6IHtcblx0XHRcdFx0J2F0dHItbmFtZSc6IHtcblx0XHRcdFx0XHRwYXR0ZXJuOiAvXlxccypzdHlsZS9pLFxuXHRcdFx0XHRcdGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cC50YWcuaW5zaWRlXG5cdFx0XHRcdH0sXG5cdFx0XHRcdCdwdW5jdHVhdGlvbic6IC9eXFxzKj1cXHMqWydcIl18WydcIl1cXHMqJC8sXG5cdFx0XHRcdCdhdHRyLXZhbHVlJzoge1xuXHRcdFx0XHRcdHBhdHRlcm46IC8uKy9pLFxuXHRcdFx0XHRcdGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLmNzc1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0YWxpYXM6ICdsYW5ndWFnZS1jc3MnXG5cdFx0fVxuXHR9LCBQcmlzbS5sYW5ndWFnZXMubWFya3VwLnRhZyk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgQmVnaW4gcHJpc20tY2xpa2UuanNcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuUHJpc20ubGFuZ3VhZ2VzLmNsaWtlID0ge1xuXHQnY29tbWVudCc6IFtcblx0XHR7XG5cdFx0XHRwYXR0ZXJuOiAvKF58W15cXFxcXSlcXC9cXCpbXFx3XFxXXSo/XFwqXFwvLyxcblx0XHRcdGxvb2tiZWhpbmQ6IHRydWVcblx0XHR9LFxuXHRcdHtcblx0XHRcdHBhdHRlcm46IC8oXnxbXlxcXFw6XSlcXC9cXC8uKi8sXG5cdFx0XHRsb29rYmVoaW5kOiB0cnVlXG5cdFx0fVxuXHRdLFxuXHQnc3RyaW5nJzoge1xuXHRcdHBhdHRlcm46IC8oW1wiJ10pKFxcXFwoPzpcXHJcXG58W1xcc1xcU10pfCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvLFxuXHRcdGdyZWVkeTogdHJ1ZVxuXHR9LFxuXHQnY2xhc3MtbmFtZSc6IHtcblx0XHRwYXR0ZXJuOiAvKCg/OlxcYig/OmNsYXNzfGludGVyZmFjZXxleHRlbmRzfGltcGxlbWVudHN8dHJhaXR8aW5zdGFuY2VvZnxuZXcpXFxzKyl8KD86Y2F0Y2hcXHMrXFwoKSlbYS16MC05X1xcLlxcXFxdKy9pLFxuXHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0aW5zaWRlOiB7XG5cdFx0XHRwdW5jdHVhdGlvbjogLyhcXC58XFxcXCkvXG5cdFx0fVxuXHR9LFxuXHQna2V5d29yZCc6IC9cXGIoaWZ8ZWxzZXx3aGlsZXxkb3xmb3J8cmV0dXJufGlufGluc3RhbmNlb2Z8ZnVuY3Rpb258bmV3fHRyeXx0aHJvd3xjYXRjaHxmaW5hbGx5fG51bGx8YnJlYWt8Y29udGludWUpXFxiLyxcblx0J2Jvb2xlYW4nOiAvXFxiKHRydWV8ZmFsc2UpXFxiLyxcblx0J2Z1bmN0aW9uJzogL1thLXowLTlfXSsoPz1cXCgpL2ksXG5cdCdudW1iZXInOiAvXFxiLT8oPzoweFtcXGRhLWZdK3xcXGQqXFwuP1xcZCsoPzplWystXT9cXGQrKT8pXFxiL2ksXG5cdCdvcGVyYXRvcic6IC8tLT98XFwrXFwrP3whPT89P3w8PT98Pj0/fD09Pz0/fCYmP3xcXHxcXHw/fFxcP3xcXCp8XFwvfH58XFxefCUvLFxuXHQncHVuY3R1YXRpb24nOiAvW3t9W1xcXTsoKSwuOl0vXG59O1xuXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgQmVnaW4gcHJpc20tamF2YXNjcmlwdC5qc1xuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5QcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdCA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2NsaWtlJywge1xuXHQna2V5d29yZCc6IC9cXGIoYXN8YXN5bmN8YXdhaXR8YnJlYWt8Y2FzZXxjYXRjaHxjbGFzc3xjb25zdHxjb250aW51ZXxkZWJ1Z2dlcnxkZWZhdWx0fGRlbGV0ZXxkb3xlbHNlfGVudW18ZXhwb3J0fGV4dGVuZHN8ZmluYWxseXxmb3J8ZnJvbXxmdW5jdGlvbnxnZXR8aWZ8aW1wbGVtZW50c3xpbXBvcnR8aW58aW5zdGFuY2VvZnxpbnRlcmZhY2V8bGV0fG5ld3xudWxsfG9mfHBhY2thZ2V8cHJpdmF0ZXxwcm90ZWN0ZWR8cHVibGljfHJldHVybnxzZXR8c3RhdGljfHN1cGVyfHN3aXRjaHx0aGlzfHRocm93fHRyeXx0eXBlb2Z8dmFyfHZvaWR8d2hpbGV8d2l0aHx5aWVsZClcXGIvLFxuXHQnbnVtYmVyJzogL1xcYi0/KDB4W1xcZEEtRmEtZl0rfDBiWzAxXSt8MG9bMC03XSt8XFxkKlxcLj9cXGQrKFtFZV1bKy1dP1xcZCspP3xOYU58SW5maW5pdHkpXFxiLyxcblx0Ly8gQWxsb3cgZm9yIGFsbCBub24tQVNDSUkgY2hhcmFjdGVycyAoU2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIwMDg0NDQpXG5cdCdmdW5jdGlvbic6IC9bXyRhLXpBLVpcXHhBMC1cXHVGRkZGXVtfJGEtekEtWjAtOVxceEEwLVxcdUZGRkZdKig/PVxcKCkvaSxcblx0J29wZXJhdG9yJzogLy0tP3xcXCtcXCs/fCE9Pz0/fDw9P3w+PT98PT0/PT98JiY/fFxcfFxcfD98XFw/fFxcKlxcKj98XFwvfH58XFxefCV8XFwuezN9L1xufSk7XG5cblByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2phdmFzY3JpcHQnLCAna2V5d29yZCcsIHtcblx0J3JlZ2V4Jzoge1xuXHRcdHBhdHRlcm46IC8oXnxbXi9dKVxcLyg/IVxcLykoXFxbLis/XXxcXFxcLnxbXi9cXFxcXFxyXFxuXSkrXFwvW2dpbXl1XXswLDV9KD89XFxzKigkfFtcXHJcXG4sLjt9KV0pKS8sXG5cdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRncmVlZHk6IHRydWVcblx0fVxufSk7XG5cblByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2phdmFzY3JpcHQnLCAnc3RyaW5nJywge1xuXHQndGVtcGxhdGUtc3RyaW5nJzoge1xuXHRcdHBhdHRlcm46IC9gKD86XFxcXFxcXFx8XFxcXD9bXlxcXFxdKSo/YC8sXG5cdFx0Z3JlZWR5OiB0cnVlLFxuXHRcdGluc2lkZToge1xuXHRcdFx0J2ludGVycG9sYXRpb24nOiB7XG5cdFx0XHRcdHBhdHRlcm46IC9cXCRcXHtbXn1dK1xcfS8sXG5cdFx0XHRcdGluc2lkZToge1xuXHRcdFx0XHRcdCdpbnRlcnBvbGF0aW9uLXB1bmN0dWF0aW9uJzoge1xuXHRcdFx0XHRcdFx0cGF0dGVybjogL15cXCRcXHt8XFx9JC8sXG5cdFx0XHRcdFx0XHRhbGlhczogJ3B1bmN0dWF0aW9uJ1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0cmVzdDogUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHRcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdCdzdHJpbmcnOiAvW1xcc1xcU10rL1xuXHRcdH1cblx0fVxufSk7XG5cbmlmIChQcmlzbS5sYW5ndWFnZXMubWFya3VwKSB7XG5cdFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ21hcmt1cCcsICd0YWcnLCB7XG5cdFx0J3NjcmlwdCc6IHtcblx0XHRcdHBhdHRlcm46IC8oPHNjcmlwdFtcXHdcXFddKj8+KVtcXHdcXFddKj8oPz08XFwvc2NyaXB0PikvaSxcblx0XHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0XHRpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0LFxuXHRcdFx0YWxpYXM6ICdsYW5ndWFnZS1qYXZhc2NyaXB0J1xuXHRcdH1cblx0fSk7XG59XG5cblByaXNtLmxhbmd1YWdlcy5qcyA9IFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgIEJlZ2luIHByaXNtLWZpbGUtaGlnaGxpZ2h0LmpzXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdGlmICh0eXBlb2Ygc2VsZiA9PT0gJ3VuZGVmaW5lZCcgfHwgIXNlbGYuUHJpc20gfHwgIXNlbGYuZG9jdW1lbnQgfHwgIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRzZWxmLlByaXNtLmZpbGVIaWdobGlnaHQgPSBmdW5jdGlvbigpIHtcblxuXHRcdHZhciBFeHRlbnNpb25zID0ge1xuXHRcdFx0J2pzJzogJ2phdmFzY3JpcHQnLFxuXHRcdFx0J3B5JzogJ3B5dGhvbicsXG5cdFx0XHQncmInOiAncnVieScsXG5cdFx0XHQncHMxJzogJ3Bvd2Vyc2hlbGwnLFxuXHRcdFx0J3BzbTEnOiAncG93ZXJzaGVsbCcsXG5cdFx0XHQnc2gnOiAnYmFzaCcsXG5cdFx0XHQnYmF0JzogJ2JhdGNoJyxcblx0XHRcdCdoJzogJ2MnLFxuXHRcdFx0J3RleCc6ICdsYXRleCdcblx0XHR9O1xuXG5cdFx0aWYoQXJyYXkucHJvdG90eXBlLmZvckVhY2gpIHsgLy8gQ2hlY2sgdG8gcHJldmVudCBlcnJvciBpbiBJRThcblx0XHRcdEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3ByZVtkYXRhLXNyY10nKSkuZm9yRWFjaChmdW5jdGlvbiAocHJlKSB7XG5cdFx0XHRcdHZhciBzcmMgPSBwcmUuZ2V0QXR0cmlidXRlKCdkYXRhLXNyYycpO1xuXG5cdFx0XHRcdHZhciBsYW5ndWFnZSwgcGFyZW50ID0gcHJlO1xuXHRcdFx0XHR2YXIgbGFuZyA9IC9cXGJsYW5nKD86dWFnZSk/LSg/IVxcKikoXFx3KylcXGIvaTtcblx0XHRcdFx0d2hpbGUgKHBhcmVudCAmJiAhbGFuZy50ZXN0KHBhcmVudC5jbGFzc05hbWUpKSB7XG5cdFx0XHRcdFx0cGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAocGFyZW50KSB7XG5cdFx0XHRcdFx0bGFuZ3VhZ2UgPSAocHJlLmNsYXNzTmFtZS5tYXRjaChsYW5nKSB8fCBbLCAnJ10pWzFdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCFsYW5ndWFnZSkge1xuXHRcdFx0XHRcdHZhciBleHRlbnNpb24gPSAoc3JjLm1hdGNoKC9cXC4oXFx3KykkLykgfHwgWywgJyddKVsxXTtcblx0XHRcdFx0XHRsYW5ndWFnZSA9IEV4dGVuc2lvbnNbZXh0ZW5zaW9uXSB8fCBleHRlbnNpb247XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgY29kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NvZGUnKTtcblx0XHRcdFx0Y29kZS5jbGFzc05hbWUgPSAnbGFuZ3VhZ2UtJyArIGxhbmd1YWdlO1xuXG5cdFx0XHRcdHByZS50ZXh0Q29udGVudCA9ICcnO1xuXG5cdFx0XHRcdGNvZGUudGV4dENvbnRlbnQgPSAnTG9hZGluZ+KApic7XG5cblx0XHRcdFx0cHJlLmFwcGVuZENoaWxkKGNvZGUpO1xuXG5cdFx0XHRcdHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuXHRcdFx0XHR4aHIub3BlbignR0VUJywgc3JjLCB0cnVlKTtcblxuXHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGlmICh4aHIucmVhZHlTdGF0ZSA9PSA0KSB7XG5cblx0XHRcdFx0XHRcdGlmICh4aHIuc3RhdHVzIDwgNDAwICYmIHhoci5yZXNwb25zZVRleHQpIHtcblx0XHRcdFx0XHRcdFx0Y29kZS50ZXh0Q29udGVudCA9IHhoci5yZXNwb25zZVRleHQ7XG5cblx0XHRcdFx0XHRcdFx0UHJpc20uaGlnaGxpZ2h0RWxlbWVudChjb2RlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2UgaWYgKHhoci5zdGF0dXMgPj0gNDAwKSB7XG5cdFx0XHRcdFx0XHRcdGNvZGUudGV4dENvbnRlbnQgPSAn4pyWIEVycm9yICcgKyB4aHIuc3RhdHVzICsgJyB3aGlsZSBmZXRjaGluZyBmaWxlOiAnICsgeGhyLnN0YXR1c1RleHQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y29kZS50ZXh0Q29udGVudCA9ICfinJYgRXJyb3I6IEZpbGUgZG9lcyBub3QgZXhpc3Qgb3IgaXMgZW1wdHknO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblxuXHRcdFx0XHR4aHIuc2VuZChudWxsKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHR9O1xuXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBzZWxmLlByaXNtLmZpbGVIaWdobGlnaHQpO1xuXG59KSgpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9wcmlzbWpzL3ByaXNtLmpzIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG52YXIgaW50VG9DaGFyTWFwID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nLnNwbGl0KCcnKTtcblxuLyoqXG4gKiBFbmNvZGUgYW4gaW50ZWdlciBpbiB0aGUgcmFuZ2Ugb2YgMCB0byA2MyB0byBhIHNpbmdsZSBiYXNlIDY0IGRpZ2l0LlxuICovXG5leHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgaWYgKDAgPD0gbnVtYmVyICYmIG51bWJlciA8IGludFRvQ2hhck1hcC5sZW5ndGgpIHtcbiAgICByZXR1cm4gaW50VG9DaGFyTWFwW251bWJlcl07XG4gIH1cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk11c3QgYmUgYmV0d2VlbiAwIGFuZCA2MzogXCIgKyBudW1iZXIpO1xufTtcblxuLyoqXG4gKiBEZWNvZGUgYSBzaW5nbGUgYmFzZSA2NCBjaGFyYWN0ZXIgY29kZSBkaWdpdCB0byBhbiBpbnRlZ2VyLiBSZXR1cm5zIC0xIG9uXG4gKiBmYWlsdXJlLlxuICovXG5leHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uIChjaGFyQ29kZSkge1xuICB2YXIgYmlnQSA9IDY1OyAgICAgLy8gJ0EnXG4gIHZhciBiaWdaID0gOTA7ICAgICAvLyAnWidcblxuICB2YXIgbGl0dGxlQSA9IDk3OyAgLy8gJ2EnXG4gIHZhciBsaXR0bGVaID0gMTIyOyAvLyAneidcblxuICB2YXIgemVybyA9IDQ4OyAgICAgLy8gJzAnXG4gIHZhciBuaW5lID0gNTc7ICAgICAvLyAnOSdcblxuICB2YXIgcGx1cyA9IDQzOyAgICAgLy8gJysnXG4gIHZhciBzbGFzaCA9IDQ3OyAgICAvLyAnLydcblxuICB2YXIgbGl0dGxlT2Zmc2V0ID0gMjY7XG4gIHZhciBudW1iZXJPZmZzZXQgPSA1MjtcblxuICAvLyAwIC0gMjU6IEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaXG4gIGlmIChiaWdBIDw9IGNoYXJDb2RlICYmIGNoYXJDb2RlIDw9IGJpZ1opIHtcbiAgICByZXR1cm4gKGNoYXJDb2RlIC0gYmlnQSk7XG4gIH1cblxuICAvLyAyNiAtIDUxOiBhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elxuICBpZiAobGl0dGxlQSA8PSBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8PSBsaXR0bGVaKSB7XG4gICAgcmV0dXJuIChjaGFyQ29kZSAtIGxpdHRsZUEgKyBsaXR0bGVPZmZzZXQpO1xuICB9XG5cbiAgLy8gNTIgLSA2MTogMDEyMzQ1Njc4OVxuICBpZiAoemVybyA8PSBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8PSBuaW5lKSB7XG4gICAgcmV0dXJuIChjaGFyQ29kZSAtIHplcm8gKyBudW1iZXJPZmZzZXQpO1xuICB9XG5cbiAgLy8gNjI6ICtcbiAgaWYgKGNoYXJDb2RlID09IHBsdXMpIHtcbiAgICByZXR1cm4gNjI7XG4gIH1cblxuICAvLyA2MzogL1xuICBpZiAoY2hhckNvZGUgPT0gc2xhc2gpIHtcbiAgICByZXR1cm4gNjM7XG4gIH1cblxuICAvLyBJbnZhbGlkIGJhc2U2NCBkaWdpdC5cbiAgcmV0dXJuIC0xO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC9saWIvYmFzZTY0LmpzIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG5leHBvcnRzLkdSRUFURVNUX0xPV0VSX0JPVU5EID0gMTtcbmV4cG9ydHMuTEVBU1RfVVBQRVJfQk9VTkQgPSAyO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZSBpbXBsZW1lbnRhdGlvbiBvZiBiaW5hcnkgc2VhcmNoLlxuICpcbiAqIEBwYXJhbSBhTG93IEluZGljZXMgaGVyZSBhbmQgbG93ZXIgZG8gbm90IGNvbnRhaW4gdGhlIG5lZWRsZS5cbiAqIEBwYXJhbSBhSGlnaCBJbmRpY2VzIGhlcmUgYW5kIGhpZ2hlciBkbyBub3QgY29udGFpbiB0aGUgbmVlZGxlLlxuICogQHBhcmFtIGFOZWVkbGUgVGhlIGVsZW1lbnQgYmVpbmcgc2VhcmNoZWQgZm9yLlxuICogQHBhcmFtIGFIYXlzdGFjayBUaGUgbm9uLWVtcHR5IGFycmF5IGJlaW5nIHNlYXJjaGVkLlxuICogQHBhcmFtIGFDb21wYXJlIEZ1bmN0aW9uIHdoaWNoIHRha2VzIHR3byBlbGVtZW50cyBhbmQgcmV0dXJucyAtMSwgMCwgb3IgMS5cbiAqIEBwYXJhbSBhQmlhcyBFaXRoZXIgJ2JpbmFyeVNlYXJjaC5HUkVBVEVTVF9MT1dFUl9CT1VORCcgb3JcbiAqICAgICAnYmluYXJ5U2VhcmNoLkxFQVNUX1VQUEVSX0JPVU5EJy4gU3BlY2lmaWVzIHdoZXRoZXIgdG8gcmV0dXJuIHRoZVxuICogICAgIGNsb3Nlc3QgZWxlbWVudCB0aGF0IGlzIHNtYWxsZXIgdGhhbiBvciBncmVhdGVyIHRoYW4gdGhlIG9uZSB3ZSBhcmVcbiAqICAgICBzZWFyY2hpbmcgZm9yLCByZXNwZWN0aXZlbHksIGlmIHRoZSBleGFjdCBlbGVtZW50IGNhbm5vdCBiZSBmb3VuZC5cbiAqL1xuZnVuY3Rpb24gcmVjdXJzaXZlU2VhcmNoKGFMb3csIGFIaWdoLCBhTmVlZGxlLCBhSGF5c3RhY2ssIGFDb21wYXJlLCBhQmlhcykge1xuICAvLyBUaGlzIGZ1bmN0aW9uIHRlcm1pbmF0ZXMgd2hlbiBvbmUgb2YgdGhlIGZvbGxvd2luZyBpcyB0cnVlOlxuICAvL1xuICAvLyAgIDEuIFdlIGZpbmQgdGhlIGV4YWN0IGVsZW1lbnQgd2UgYXJlIGxvb2tpbmcgZm9yLlxuICAvL1xuICAvLyAgIDIuIFdlIGRpZCBub3QgZmluZCB0aGUgZXhhY3QgZWxlbWVudCwgYnV0IHdlIGNhbiByZXR1cm4gdGhlIGluZGV4IG9mXG4gIC8vICAgICAgdGhlIG5leHQtY2xvc2VzdCBlbGVtZW50LlxuICAvL1xuICAvLyAgIDMuIFdlIGRpZCBub3QgZmluZCB0aGUgZXhhY3QgZWxlbWVudCwgYW5kIHRoZXJlIGlzIG5vIG5leHQtY2xvc2VzdFxuICAvLyAgICAgIGVsZW1lbnQgdGhhbiB0aGUgb25lIHdlIGFyZSBzZWFyY2hpbmcgZm9yLCBzbyB3ZSByZXR1cm4gLTEuXG4gIHZhciBtaWQgPSBNYXRoLmZsb29yKChhSGlnaCAtIGFMb3cpIC8gMikgKyBhTG93O1xuICB2YXIgY21wID0gYUNvbXBhcmUoYU5lZWRsZSwgYUhheXN0YWNrW21pZF0sIHRydWUpO1xuICBpZiAoY21wID09PSAwKSB7XG4gICAgLy8gRm91bmQgdGhlIGVsZW1lbnQgd2UgYXJlIGxvb2tpbmcgZm9yLlxuICAgIHJldHVybiBtaWQ7XG4gIH1cbiAgZWxzZSBpZiAoY21wID4gMCkge1xuICAgIC8vIE91ciBuZWVkbGUgaXMgZ3JlYXRlciB0aGFuIGFIYXlzdGFja1ttaWRdLlxuICAgIGlmIChhSGlnaCAtIG1pZCA+IDEpIHtcbiAgICAgIC8vIFRoZSBlbGVtZW50IGlzIGluIHRoZSB1cHBlciBoYWxmLlxuICAgICAgcmV0dXJuIHJlY3Vyc2l2ZVNlYXJjaChtaWQsIGFIaWdoLCBhTmVlZGxlLCBhSGF5c3RhY2ssIGFDb21wYXJlLCBhQmlhcyk7XG4gICAgfVxuXG4gICAgLy8gVGhlIGV4YWN0IG5lZWRsZSBlbGVtZW50IHdhcyBub3QgZm91bmQgaW4gdGhpcyBoYXlzdGFjay4gRGV0ZXJtaW5lIGlmXG4gICAgLy8gd2UgYXJlIGluIHRlcm1pbmF0aW9uIGNhc2UgKDMpIG9yICgyKSBhbmQgcmV0dXJuIHRoZSBhcHByb3ByaWF0ZSB0aGluZy5cbiAgICBpZiAoYUJpYXMgPT0gZXhwb3J0cy5MRUFTVF9VUFBFUl9CT1VORCkge1xuICAgICAgcmV0dXJuIGFIaWdoIDwgYUhheXN0YWNrLmxlbmd0aCA/IGFIaWdoIDogLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtaWQ7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIC8vIE91ciBuZWVkbGUgaXMgbGVzcyB0aGFuIGFIYXlzdGFja1ttaWRdLlxuICAgIGlmIChtaWQgLSBhTG93ID4gMSkge1xuICAgICAgLy8gVGhlIGVsZW1lbnQgaXMgaW4gdGhlIGxvd2VyIGhhbGYuXG4gICAgICByZXR1cm4gcmVjdXJzaXZlU2VhcmNoKGFMb3csIG1pZCwgYU5lZWRsZSwgYUhheXN0YWNrLCBhQ29tcGFyZSwgYUJpYXMpO1xuICAgIH1cblxuICAgIC8vIHdlIGFyZSBpbiB0ZXJtaW5hdGlvbiBjYXNlICgzKSBvciAoMikgYW5kIHJldHVybiB0aGUgYXBwcm9wcmlhdGUgdGhpbmcuXG4gICAgaWYgKGFCaWFzID09IGV4cG9ydHMuTEVBU1RfVVBQRVJfQk9VTkQpIHtcbiAgICAgIHJldHVybiBtaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhTG93IDwgMCA/IC0xIDogYUxvdztcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGJpbmFyeSBzZWFyY2ggd2hpY2ggd2lsbCBhbHdheXMgdHJ5IGFuZCByZXR1cm5cbiAqIHRoZSBpbmRleCBvZiB0aGUgY2xvc2VzdCBlbGVtZW50IGlmIHRoZXJlIGlzIG5vIGV4YWN0IGhpdC4gVGhpcyBpcyBiZWNhdXNlXG4gKiBtYXBwaW5ncyBiZXR3ZWVuIG9yaWdpbmFsIGFuZCBnZW5lcmF0ZWQgbGluZS9jb2wgcGFpcnMgYXJlIHNpbmdsZSBwb2ludHMsXG4gKiBhbmQgdGhlcmUgaXMgYW4gaW1wbGljaXQgcmVnaW9uIGJldHdlZW4gZWFjaCBvZiB0aGVtLCBzbyBhIG1pc3MganVzdCBtZWFuc1xuICogdGhhdCB5b3UgYXJlbid0IG9uIHRoZSB2ZXJ5IHN0YXJ0IG9mIGEgcmVnaW9uLlxuICpcbiAqIEBwYXJhbSBhTmVlZGxlIFRoZSBlbGVtZW50IHlvdSBhcmUgbG9va2luZyBmb3IuXG4gKiBAcGFyYW0gYUhheXN0YWNrIFRoZSBhcnJheSB0aGF0IGlzIGJlaW5nIHNlYXJjaGVkLlxuICogQHBhcmFtIGFDb21wYXJlIEEgZnVuY3Rpb24gd2hpY2ggdGFrZXMgdGhlIG5lZWRsZSBhbmQgYW4gZWxlbWVudCBpbiB0aGVcbiAqICAgICBhcnJheSBhbmQgcmV0dXJucyAtMSwgMCwgb3IgMSBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgbmVlZGxlIGlzIGxlc3NcbiAqICAgICB0aGFuLCBlcXVhbCB0bywgb3IgZ3JlYXRlciB0aGFuIHRoZSBlbGVtZW50LCByZXNwZWN0aXZlbHkuXG4gKiBAcGFyYW0gYUJpYXMgRWl0aGVyICdiaW5hcnlTZWFyY2guR1JFQVRFU1RfTE9XRVJfQk9VTkQnIG9yXG4gKiAgICAgJ2JpbmFyeVNlYXJjaC5MRUFTVF9VUFBFUl9CT1VORCcuIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiB0aGVcbiAqICAgICBjbG9zZXN0IGVsZW1lbnQgdGhhdCBpcyBzbWFsbGVyIHRoYW4gb3IgZ3JlYXRlciB0aGFuIHRoZSBvbmUgd2UgYXJlXG4gKiAgICAgc2VhcmNoaW5nIGZvciwgcmVzcGVjdGl2ZWx5LCBpZiB0aGUgZXhhY3QgZWxlbWVudCBjYW5ub3QgYmUgZm91bmQuXG4gKiAgICAgRGVmYXVsdHMgdG8gJ2JpbmFyeVNlYXJjaC5HUkVBVEVTVF9MT1dFUl9CT1VORCcuXG4gKi9cbmV4cG9ydHMuc2VhcmNoID0gZnVuY3Rpb24gc2VhcmNoKGFOZWVkbGUsIGFIYXlzdGFjaywgYUNvbXBhcmUsIGFCaWFzKSB7XG4gIGlmIChhSGF5c3RhY2subGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gcmVjdXJzaXZlU2VhcmNoKC0xLCBhSGF5c3RhY2subGVuZ3RoLCBhTmVlZGxlLCBhSGF5c3RhY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhQ29tcGFyZSwgYUJpYXMgfHwgZXhwb3J0cy5HUkVBVEVTVF9MT1dFUl9CT1VORCk7XG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvLyBXZSBoYXZlIGZvdW5kIGVpdGhlciB0aGUgZXhhY3QgZWxlbWVudCwgb3IgdGhlIG5leHQtY2xvc2VzdCBlbGVtZW50IHRoYW5cbiAgLy8gdGhlIG9uZSB3ZSBhcmUgc2VhcmNoaW5nIGZvci4gSG93ZXZlciwgdGhlcmUgbWF5IGJlIG1vcmUgdGhhbiBvbmUgc3VjaFxuICAvLyBlbGVtZW50LiBNYWtlIHN1cmUgd2UgYWx3YXlzIHJldHVybiB0aGUgc21hbGxlc3Qgb2YgdGhlc2UuXG4gIHdoaWxlIChpbmRleCAtIDEgPj0gMCkge1xuICAgIGlmIChhQ29tcGFyZShhSGF5c3RhY2tbaW5kZXhdLCBhSGF5c3RhY2tbaW5kZXggLSAxXSwgdHJ1ZSkgIT09IDApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAtLWluZGV4O1xuICB9XG5cbiAgcmV0dXJuIGluZGV4O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC9saWIvYmluYXJ5LXNlYXJjaC5qcyIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxNCBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciBtYXBwaW5nQiBpcyBhZnRlciBtYXBwaW5nQSB3aXRoIHJlc3BlY3QgdG8gZ2VuZXJhdGVkXG4gKiBwb3NpdGlvbi5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVkUG9zaXRpb25BZnRlcihtYXBwaW5nQSwgbWFwcGluZ0IpIHtcbiAgLy8gT3B0aW1pemVkIGZvciBtb3N0IGNvbW1vbiBjYXNlXG4gIHZhciBsaW5lQSA9IG1hcHBpbmdBLmdlbmVyYXRlZExpbmU7XG4gIHZhciBsaW5lQiA9IG1hcHBpbmdCLmdlbmVyYXRlZExpbmU7XG4gIHZhciBjb2x1bW5BID0gbWFwcGluZ0EuZ2VuZXJhdGVkQ29sdW1uO1xuICB2YXIgY29sdW1uQiA9IG1hcHBpbmdCLmdlbmVyYXRlZENvbHVtbjtcbiAgcmV0dXJuIGxpbmVCID4gbGluZUEgfHwgbGluZUIgPT0gbGluZUEgJiYgY29sdW1uQiA+PSBjb2x1bW5BIHx8XG4gICAgICAgICB1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkKG1hcHBpbmdBLCBtYXBwaW5nQikgPD0gMDtcbn1cblxuLyoqXG4gKiBBIGRhdGEgc3RydWN0dXJlIHRvIHByb3ZpZGUgYSBzb3J0ZWQgdmlldyBvZiBhY2N1bXVsYXRlZCBtYXBwaW5ncyBpbiBhXG4gKiBwZXJmb3JtYW5jZSBjb25zY2lvdXMgbWFubmVyLiBJdCB0cmFkZXMgYSBuZWdsaWJhYmxlIG92ZXJoZWFkIGluIGdlbmVyYWxcbiAqIGNhc2UgZm9yIGEgbGFyZ2Ugc3BlZWR1cCBpbiBjYXNlIG9mIG1hcHBpbmdzIGJlaW5nIGFkZGVkIGluIG9yZGVyLlxuICovXG5mdW5jdGlvbiBNYXBwaW5nTGlzdCgpIHtcbiAgdGhpcy5fYXJyYXkgPSBbXTtcbiAgdGhpcy5fc29ydGVkID0gdHJ1ZTtcbiAgLy8gU2VydmVzIGFzIGluZmltdW1cbiAgdGhpcy5fbGFzdCA9IHtnZW5lcmF0ZWRMaW5lOiAtMSwgZ2VuZXJhdGVkQ29sdW1uOiAwfTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIHRocm91Z2ggaW50ZXJuYWwgaXRlbXMuIFRoaXMgbWV0aG9kIHRha2VzIHRoZSBzYW1lIGFyZ3VtZW50cyB0aGF0XG4gKiBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIHRha2VzLlxuICpcbiAqIE5PVEU6IFRoZSBvcmRlciBvZiB0aGUgbWFwcGluZ3MgaXMgTk9UIGd1YXJhbnRlZWQuXG4gKi9cbk1hcHBpbmdMaXN0LnByb3RvdHlwZS51bnNvcnRlZEZvckVhY2ggPVxuICBmdW5jdGlvbiBNYXBwaW5nTGlzdF9mb3JFYWNoKGFDYWxsYmFjaywgYVRoaXNBcmcpIHtcbiAgICB0aGlzLl9hcnJheS5mb3JFYWNoKGFDYWxsYmFjaywgYVRoaXNBcmcpO1xuICB9O1xuXG4vKipcbiAqIEFkZCB0aGUgZ2l2ZW4gc291cmNlIG1hcHBpbmcuXG4gKlxuICogQHBhcmFtIE9iamVjdCBhTWFwcGluZ1xuICovXG5NYXBwaW5nTGlzdC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gTWFwcGluZ0xpc3RfYWRkKGFNYXBwaW5nKSB7XG4gIGlmIChnZW5lcmF0ZWRQb3NpdGlvbkFmdGVyKHRoaXMuX2xhc3QsIGFNYXBwaW5nKSkge1xuICAgIHRoaXMuX2xhc3QgPSBhTWFwcGluZztcbiAgICB0aGlzLl9hcnJheS5wdXNoKGFNYXBwaW5nKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9zb3J0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9hcnJheS5wdXNoKGFNYXBwaW5nKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmbGF0LCBzb3J0ZWQgYXJyYXkgb2YgbWFwcGluZ3MuIFRoZSBtYXBwaW5ncyBhcmUgc29ydGVkIGJ5XG4gKiBnZW5lcmF0ZWQgcG9zaXRpb24uXG4gKlxuICogV0FSTklORzogVGhpcyBtZXRob2QgcmV0dXJucyBpbnRlcm5hbCBkYXRhIHdpdGhvdXQgY29weWluZywgZm9yXG4gKiBwZXJmb3JtYW5jZS4gVGhlIHJldHVybiB2YWx1ZSBtdXN0IE5PVCBiZSBtdXRhdGVkLCBhbmQgc2hvdWxkIGJlIHRyZWF0ZWQgYXNcbiAqIGFuIGltbXV0YWJsZSBib3Jyb3cuIElmIHlvdSB3YW50IHRvIHRha2Ugb3duZXJzaGlwLCB5b3UgbXVzdCBtYWtlIHlvdXIgb3duXG4gKiBjb3B5LlxuICovXG5NYXBwaW5nTGlzdC5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIE1hcHBpbmdMaXN0X3RvQXJyYXkoKSB7XG4gIGlmICghdGhpcy5fc29ydGVkKSB7XG4gICAgdGhpcy5fYXJyYXkuc29ydCh1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkKTtcbiAgICB0aGlzLl9zb3J0ZWQgPSB0cnVlO1xuICB9XG4gIHJldHVybiB0aGlzLl9hcnJheTtcbn07XG5cbmV4cG9ydHMuTWFwcGluZ0xpc3QgPSBNYXBwaW5nTGlzdDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC9saWIvbWFwcGluZy1saXN0LmpzIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG4vLyBJdCB0dXJucyBvdXQgdGhhdCBzb21lIChtb3N0PykgSmF2YVNjcmlwdCBlbmdpbmVzIGRvbid0IHNlbGYtaG9zdFxuLy8gYEFycmF5LnByb3RvdHlwZS5zb3J0YC4gVGhpcyBtYWtlcyBzZW5zZSBiZWNhdXNlIEMrKyB3aWxsIGxpa2VseSByZW1haW5cbi8vIGZhc3RlciB0aGFuIEpTIHdoZW4gZG9pbmcgcmF3IENQVS1pbnRlbnNpdmUgc29ydGluZy4gSG93ZXZlciwgd2hlbiB1c2luZyBhXG4vLyBjdXN0b20gY29tcGFyYXRvciBmdW5jdGlvbiwgY2FsbGluZyBiYWNrIGFuZCBmb3J0aCBiZXR3ZWVuIHRoZSBWTSdzIEMrKyBhbmRcbi8vIEpJVCdkIEpTIGlzIHJhdGhlciBzbG93ICphbmQqIGxvc2VzIEpJVCB0eXBlIGluZm9ybWF0aW9uLCByZXN1bHRpbmcgaW5cbi8vIHdvcnNlIGdlbmVyYXRlZCBjb2RlIGZvciB0aGUgY29tcGFyYXRvciBmdW5jdGlvbiB0aGFuIHdvdWxkIGJlIG9wdGltYWwuIEluXG4vLyBmYWN0LCB3aGVuIHNvcnRpbmcgd2l0aCBhIGNvbXBhcmF0b3IsIHRoZXNlIGNvc3RzIG91dHdlaWdoIHRoZSBiZW5lZml0cyBvZlxuLy8gc29ydGluZyBpbiBDKysuIEJ5IHVzaW5nIG91ciBvd24gSlMtaW1wbGVtZW50ZWQgUXVpY2sgU29ydCAoYmVsb3cpLCB3ZSBnZXRcbi8vIGEgfjM1MDBtcyBtZWFuIHNwZWVkLXVwIGluIGBiZW5jaC9iZW5jaC5odG1sYC5cblxuLyoqXG4gKiBTd2FwIHRoZSBlbGVtZW50cyBpbmRleGVkIGJ5IGB4YCBhbmQgYHlgIGluIHRoZSBhcnJheSBgYXJ5YC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnlcbiAqICAgICAgICBUaGUgYXJyYXkuXG4gKiBAcGFyYW0ge051bWJlcn0geFxuICogICAgICAgIFRoZSBpbmRleCBvZiB0aGUgZmlyc3QgaXRlbS5cbiAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gKiAgICAgICAgVGhlIGluZGV4IG9mIHRoZSBzZWNvbmQgaXRlbS5cbiAqL1xuZnVuY3Rpb24gc3dhcChhcnksIHgsIHkpIHtcbiAgdmFyIHRlbXAgPSBhcnlbeF07XG4gIGFyeVt4XSA9IGFyeVt5XTtcbiAgYXJ5W3ldID0gdGVtcDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcmFuZG9tIGludGVnZXIgd2l0aGluIHRoZSByYW5nZSBgbG93IC4uIGhpZ2hgIGluY2x1c2l2ZS5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbG93XG4gKiAgICAgICAgVGhlIGxvd2VyIGJvdW5kIG9uIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBoaWdoXG4gKiAgICAgICAgVGhlIHVwcGVyIGJvdW5kIG9uIHRoZSByYW5nZS5cbiAqL1xuZnVuY3Rpb24gcmFuZG9tSW50SW5SYW5nZShsb3csIGhpZ2gpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQobG93ICsgKE1hdGgucmFuZG9tKCkgKiAoaGlnaCAtIGxvdykpKTtcbn1cblxuLyoqXG4gKiBUaGUgUXVpY2sgU29ydCBhbGdvcml0aG0uXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJ5XG4gKiAgICAgICAgQW4gYXJyYXkgdG8gc29ydC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbXBhcmF0b3JcbiAqICAgICAgICBGdW5jdGlvbiB0byB1c2UgdG8gY29tcGFyZSB0d28gaXRlbXMuXG4gKiBAcGFyYW0ge051bWJlcn0gcFxuICogICAgICAgIFN0YXJ0IGluZGV4IG9mIHRoZSBhcnJheVxuICogQHBhcmFtIHtOdW1iZXJ9IHJcbiAqICAgICAgICBFbmQgaW5kZXggb2YgdGhlIGFycmF5XG4gKi9cbmZ1bmN0aW9uIGRvUXVpY2tTb3J0KGFyeSwgY29tcGFyYXRvciwgcCwgcikge1xuICAvLyBJZiBvdXIgbG93ZXIgYm91bmQgaXMgbGVzcyB0aGFuIG91ciB1cHBlciBib3VuZCwgd2UgKDEpIHBhcnRpdGlvbiB0aGVcbiAgLy8gYXJyYXkgaW50byB0d28gcGllY2VzIGFuZCAoMikgcmVjdXJzZSBvbiBlYWNoIGhhbGYuIElmIGl0IGlzIG5vdCwgdGhpcyBpc1xuICAvLyB0aGUgZW1wdHkgYXJyYXkgYW5kIG91ciBiYXNlIGNhc2UuXG5cbiAgaWYgKHAgPCByKSB7XG4gICAgLy8gKDEpIFBhcnRpdGlvbmluZy5cbiAgICAvL1xuICAgIC8vIFRoZSBwYXJ0aXRpb25pbmcgY2hvb3NlcyBhIHBpdm90IGJldHdlZW4gYHBgIGFuZCBgcmAgYW5kIG1vdmVzIGFsbFxuICAgIC8vIGVsZW1lbnRzIHRoYXQgYXJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgcGl2b3QgdG8gdGhlIGJlZm9yZSBpdCwgYW5kXG4gICAgLy8gYWxsIHRoZSBlbGVtZW50cyB0aGF0IGFyZSBncmVhdGVyIHRoYW4gaXQgYWZ0ZXIgaXQuIFRoZSBlZmZlY3QgaXMgdGhhdFxuICAgIC8vIG9uY2UgcGFydGl0aW9uIGlzIGRvbmUsIHRoZSBwaXZvdCBpcyBpbiB0aGUgZXhhY3QgcGxhY2UgaXQgd2lsbCBiZSB3aGVuXG4gICAgLy8gdGhlIGFycmF5IGlzIHB1dCBpbiBzb3J0ZWQgb3JkZXIsIGFuZCBpdCB3aWxsIG5vdCBuZWVkIHRvIGJlIG1vdmVkXG4gICAgLy8gYWdhaW4uIFRoaXMgcnVucyBpbiBPKG4pIHRpbWUuXG5cbiAgICAvLyBBbHdheXMgY2hvb3NlIGEgcmFuZG9tIHBpdm90IHNvIHRoYXQgYW4gaW5wdXQgYXJyYXkgd2hpY2ggaXMgcmV2ZXJzZVxuICAgIC8vIHNvcnRlZCBkb2VzIG5vdCBjYXVzZSBPKG5eMikgcnVubmluZyB0aW1lLlxuICAgIHZhciBwaXZvdEluZGV4ID0gcmFuZG9tSW50SW5SYW5nZShwLCByKTtcbiAgICB2YXIgaSA9IHAgLSAxO1xuXG4gICAgc3dhcChhcnksIHBpdm90SW5kZXgsIHIpO1xuICAgIHZhciBwaXZvdCA9IGFyeVtyXTtcblxuICAgIC8vIEltbWVkaWF0ZWx5IGFmdGVyIGBqYCBpcyBpbmNyZW1lbnRlZCBpbiB0aGlzIGxvb3AsIHRoZSBmb2xsb3dpbmcgaG9sZFxuICAgIC8vIHRydWU6XG4gICAgLy9cbiAgICAvLyAgICogRXZlcnkgZWxlbWVudCBpbiBgYXJ5W3AgLi4gaV1gIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgcGl2b3QuXG4gICAgLy9cbiAgICAvLyAgICogRXZlcnkgZWxlbWVudCBpbiBgYXJ5W2krMSAuLiBqLTFdYCBpcyBncmVhdGVyIHRoYW4gdGhlIHBpdm90LlxuICAgIGZvciAodmFyIGogPSBwOyBqIDwgcjsgaisrKSB7XG4gICAgICBpZiAoY29tcGFyYXRvcihhcnlbal0sIHBpdm90KSA8PSAwKSB7XG4gICAgICAgIGkgKz0gMTtcbiAgICAgICAgc3dhcChhcnksIGksIGopO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN3YXAoYXJ5LCBpICsgMSwgaik7XG4gICAgdmFyIHEgPSBpICsgMTtcblxuICAgIC8vICgyKSBSZWN1cnNlIG9uIGVhY2ggaGFsZi5cblxuICAgIGRvUXVpY2tTb3J0KGFyeSwgY29tcGFyYXRvciwgcCwgcSAtIDEpO1xuICAgIGRvUXVpY2tTb3J0KGFyeSwgY29tcGFyYXRvciwgcSArIDEsIHIpO1xuICB9XG59XG5cbi8qKlxuICogU29ydCB0aGUgZ2l2ZW4gYXJyYXkgaW4tcGxhY2Ugd2l0aCB0aGUgZ2l2ZW4gY29tcGFyYXRvciBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnlcbiAqICAgICAgICBBbiBhcnJheSB0byBzb3J0LlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29tcGFyYXRvclxuICogICAgICAgIEZ1bmN0aW9uIHRvIHVzZSB0byBjb21wYXJlIHR3byBpdGVtcy5cbiAqL1xuZXhwb3J0cy5xdWlja1NvcnQgPSBmdW5jdGlvbiAoYXJ5LCBjb21wYXJhdG9yKSB7XG4gIGRvUXVpY2tTb3J0KGFyeSwgY29tcGFyYXRvciwgMCwgYXJ5Lmxlbmd0aCAtIDEpO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC9saWIvcXVpY2stc29ydC5qcyIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcbnZhciBiaW5hcnlTZWFyY2ggPSByZXF1aXJlKCcuL2JpbmFyeS1zZWFyY2gnKTtcbnZhciBBcnJheVNldCA9IHJlcXVpcmUoJy4vYXJyYXktc2V0JykuQXJyYXlTZXQ7XG52YXIgYmFzZTY0VkxRID0gcmVxdWlyZSgnLi9iYXNlNjQtdmxxJyk7XG52YXIgcXVpY2tTb3J0ID0gcmVxdWlyZSgnLi9xdWljay1zb3J0JykucXVpY2tTb3J0O1xuXG5mdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcihhU291cmNlTWFwKSB7XG4gIHZhciBzb3VyY2VNYXAgPSBhU291cmNlTWFwO1xuICBpZiAodHlwZW9mIGFTb3VyY2VNYXAgPT09ICdzdHJpbmcnKSB7XG4gICAgc291cmNlTWFwID0gSlNPTi5wYXJzZShhU291cmNlTWFwLnJlcGxhY2UoL15cXClcXF1cXH0nLywgJycpKTtcbiAgfVxuXG4gIHJldHVybiBzb3VyY2VNYXAuc2VjdGlvbnMgIT0gbnVsbFxuICAgID8gbmV3IEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcihzb3VyY2VNYXApXG4gICAgOiBuZXcgQmFzaWNTb3VyY2VNYXBDb25zdW1lcihzb3VyY2VNYXApO1xufVxuXG5Tb3VyY2VNYXBDb25zdW1lci5mcm9tU291cmNlTWFwID0gZnVuY3Rpb24oYVNvdXJjZU1hcCkge1xuICByZXR1cm4gQmFzaWNTb3VyY2VNYXBDb25zdW1lci5mcm9tU291cmNlTWFwKGFTb3VyY2VNYXApO1xufVxuXG4vKipcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBzb3VyY2UgbWFwcGluZyBzcGVjIHRoYXQgd2UgYXJlIGNvbnN1bWluZy5cbiAqL1xuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl92ZXJzaW9uID0gMztcblxuLy8gYF9fZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZCBgX19vcmlnaW5hbE1hcHBpbmdzYCBhcmUgYXJyYXlzIHRoYXQgaG9sZCB0aGVcbi8vIHBhcnNlZCBtYXBwaW5nIGNvb3JkaW5hdGVzIGZyb20gdGhlIHNvdXJjZSBtYXAncyBcIm1hcHBpbmdzXCIgYXR0cmlidXRlLiBUaGV5XG4vLyBhcmUgbGF6aWx5IGluc3RhbnRpYXRlZCwgYWNjZXNzZWQgdmlhIHRoZSBgX2dlbmVyYXRlZE1hcHBpbmdzYCBhbmRcbi8vIGBfb3JpZ2luYWxNYXBwaW5nc2AgZ2V0dGVycyByZXNwZWN0aXZlbHksIGFuZCB3ZSBvbmx5IHBhcnNlIHRoZSBtYXBwaW5nc1xuLy8gYW5kIGNyZWF0ZSB0aGVzZSBhcnJheXMgb25jZSBxdWVyaWVkIGZvciBhIHNvdXJjZSBsb2NhdGlvbi4gV2UganVtcCB0aHJvdWdoXG4vLyB0aGVzZSBob29wcyBiZWNhdXNlIHRoZXJlIGNhbiBiZSBtYW55IHRob3VzYW5kcyBvZiBtYXBwaW5ncywgYW5kIHBhcnNpbmdcbi8vIHRoZW0gaXMgZXhwZW5zaXZlLCBzbyB3ZSBvbmx5IHdhbnQgdG8gZG8gaXQgaWYgd2UgbXVzdC5cbi8vXG4vLyBFYWNoIG9iamVjdCBpbiB0aGUgYXJyYXlzIGlzIG9mIHRoZSBmb3JtOlxuLy9cbi8vICAgICB7XG4vLyAgICAgICBnZW5lcmF0ZWRMaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBjb2RlLFxuLy8gICAgICAgZ2VuZXJhdGVkQ29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIGNvZGUsXG4vLyAgICAgICBzb3VyY2U6IFRoZSBwYXRoIHRvIHRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZSB0aGF0IGdlbmVyYXRlZCB0aGlzXG4vLyAgICAgICAgICAgICAgIGNodW5rIG9mIGNvZGUsXG4vLyAgICAgICBvcmlnaW5hbExpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlIHRoYXRcbi8vICAgICAgICAgICAgICAgICAgICAgY29ycmVzcG9uZHMgdG8gdGhpcyBjaHVuayBvZiBnZW5lcmF0ZWQgY29kZSxcbi8vICAgICAgIG9yaWdpbmFsQ29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlIHRoYXRcbi8vICAgICAgICAgICAgICAgICAgICAgICBjb3JyZXNwb25kcyB0byB0aGlzIGNodW5rIG9mIGdlbmVyYXRlZCBjb2RlLFxuLy8gICAgICAgbmFtZTogVGhlIG5hbWUgb2YgdGhlIG9yaWdpbmFsIHN5bWJvbCB3aGljaCBnZW5lcmF0ZWQgdGhpcyBjaHVuayBvZlxuLy8gICAgICAgICAgICAgY29kZS5cbi8vICAgICB9XG4vL1xuLy8gQWxsIHByb3BlcnRpZXMgZXhjZXB0IGZvciBgZ2VuZXJhdGVkTGluZWAgYW5kIGBnZW5lcmF0ZWRDb2x1bW5gIGNhbiBiZVxuLy8gYG51bGxgLlxuLy9cbi8vIGBfZ2VuZXJhdGVkTWFwcGluZ3NgIGlzIG9yZGVyZWQgYnkgdGhlIGdlbmVyYXRlZCBwb3NpdGlvbnMuXG4vL1xuLy8gYF9vcmlnaW5hbE1hcHBpbmdzYCBpcyBvcmRlcmVkIGJ5IHRoZSBvcmlnaW5hbCBwb3NpdGlvbnMuXG5cblNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fX2dlbmVyYXRlZE1hcHBpbmdzID0gbnVsbDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUsICdfZ2VuZXJhdGVkTWFwcGluZ3MnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzKSB7XG4gICAgICB0aGlzLl9wYXJzZU1hcHBpbmdzKHRoaXMuX21hcHBpbmdzLCB0aGlzLnNvdXJjZVJvb3QpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3M7XG4gIH1cbn0pO1xuXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX19vcmlnaW5hbE1hcHBpbmdzID0gbnVsbDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUsICdfb3JpZ2luYWxNYXBwaW5ncycsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncykge1xuICAgICAgdGhpcy5fcGFyc2VNYXBwaW5ncyh0aGlzLl9tYXBwaW5ncywgdGhpcy5zb3VyY2VSb290KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fX29yaWdpbmFsTWFwcGluZ3M7XG4gIH1cbn0pO1xuXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX2NoYXJJc01hcHBpbmdTZXBhcmF0b3IgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9jaGFySXNNYXBwaW5nU2VwYXJhdG9yKGFTdHIsIGluZGV4KSB7XG4gICAgdmFyIGMgPSBhU3RyLmNoYXJBdChpbmRleCk7XG4gICAgcmV0dXJuIGMgPT09IFwiO1wiIHx8IGMgPT09IFwiLFwiO1xuICB9O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBtYXBwaW5ncyBpbiBhIHN0cmluZyBpbiB0byBhIGRhdGEgc3RydWN0dXJlIHdoaWNoIHdlIGNhbiBlYXNpbHlcbiAqIHF1ZXJ5ICh0aGUgb3JkZXJlZCBhcnJheXMgaW4gdGhlIGB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuICogYHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzYCBwcm9wZXJ0aWVzKS5cbiAqL1xuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9wYXJzZU1hcHBpbmdzID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfcGFyc2VNYXBwaW5ncyhhU3RyLCBhU291cmNlUm9vdCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlN1YmNsYXNzZXMgbXVzdCBpbXBsZW1lbnQgX3BhcnNlTWFwcGluZ3NcIik7XG4gIH07XG5cblNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUiA9IDE7XG5Tb3VyY2VNYXBDb25zdW1lci5PUklHSU5BTF9PUkRFUiA9IDI7XG5cblNvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EID0gMTtcblNvdXJjZU1hcENvbnN1bWVyLkxFQVNUX1VQUEVSX0JPVU5EID0gMjtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgZWFjaCBtYXBwaW5nIGJldHdlZW4gYW4gb3JpZ2luYWwgc291cmNlL2xpbmUvY29sdW1uIGFuZCBhXG4gKiBnZW5lcmF0ZWQgbGluZS9jb2x1bW4gaW4gdGhpcyBzb3VyY2UgbWFwLlxuICpcbiAqIEBwYXJhbSBGdW5jdGlvbiBhQ2FsbGJhY2tcbiAqICAgICAgICBUaGUgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2l0aCBlYWNoIG1hcHBpbmcuXG4gKiBAcGFyYW0gT2JqZWN0IGFDb250ZXh0XG4gKiAgICAgICAgT3B0aW9uYWwuIElmIHNwZWNpZmllZCwgdGhpcyBvYmplY3Qgd2lsbCBiZSB0aGUgdmFsdWUgb2YgYHRoaXNgIGV2ZXJ5XG4gKiAgICAgICAgdGltZSB0aGF0IGBhQ2FsbGJhY2tgIGlzIGNhbGxlZC5cbiAqIEBwYXJhbSBhT3JkZXJcbiAqICAgICAgICBFaXRoZXIgYFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUmAgb3JcbiAqICAgICAgICBgU291cmNlTWFwQ29uc3VtZXIuT1JJR0lOQUxfT1JERVJgLiBTcGVjaWZpZXMgd2hldGhlciB5b3Ugd2FudCB0b1xuICogICAgICAgIGl0ZXJhdGUgb3ZlciB0aGUgbWFwcGluZ3Mgc29ydGVkIGJ5IHRoZSBnZW5lcmF0ZWQgZmlsZSdzIGxpbmUvY29sdW1uXG4gKiAgICAgICAgb3JkZXIgb3IgdGhlIG9yaWdpbmFsJ3Mgc291cmNlL2xpbmUvY29sdW1uIG9yZGVyLCByZXNwZWN0aXZlbHkuIERlZmF1bHRzIHRvXG4gKiAgICAgICAgYFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUmAuXG4gKi9cblNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5lYWNoTWFwcGluZyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2VhY2hNYXBwaW5nKGFDYWxsYmFjaywgYUNvbnRleHQsIGFPcmRlcikge1xuICAgIHZhciBjb250ZXh0ID0gYUNvbnRleHQgfHwgbnVsbDtcbiAgICB2YXIgb3JkZXIgPSBhT3JkZXIgfHwgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSO1xuXG4gICAgdmFyIG1hcHBpbmdzO1xuICAgIHN3aXRjaCAob3JkZXIpIHtcbiAgICBjYXNlIFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUjpcbiAgICAgIG1hcHBpbmdzID0gdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3M7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFNvdXJjZU1hcENvbnN1bWVyLk9SSUdJTkFMX09SREVSOlxuICAgICAgbWFwcGluZ3MgPSB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gb3JkZXIgb2YgaXRlcmF0aW9uLlwiKTtcbiAgICB9XG5cbiAgICB2YXIgc291cmNlUm9vdCA9IHRoaXMuc291cmNlUm9vdDtcbiAgICBtYXBwaW5ncy5tYXAoZnVuY3Rpb24gKG1hcHBpbmcpIHtcbiAgICAgIHZhciBzb3VyY2UgPSBtYXBwaW5nLnNvdXJjZSA9PT0gbnVsbCA/IG51bGwgOiB0aGlzLl9zb3VyY2VzLmF0KG1hcHBpbmcuc291cmNlKTtcbiAgICAgIGlmIChzb3VyY2UgIT0gbnVsbCAmJiBzb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgc291cmNlID0gdXRpbC5qb2luKHNvdXJjZVJvb3QsIHNvdXJjZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgZ2VuZXJhdGVkTGluZTogbWFwcGluZy5nZW5lcmF0ZWRMaW5lLFxuICAgICAgICBnZW5lcmF0ZWRDb2x1bW46IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uLFxuICAgICAgICBvcmlnaW5hbExpbmU6IG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICBvcmlnaW5hbENvbHVtbjogbWFwcGluZy5vcmlnaW5hbENvbHVtbixcbiAgICAgICAgbmFtZTogbWFwcGluZy5uYW1lID09PSBudWxsID8gbnVsbCA6IHRoaXMuX25hbWVzLmF0KG1hcHBpbmcubmFtZSlcbiAgICAgIH07XG4gICAgfSwgdGhpcykuZm9yRWFjaChhQ2FsbGJhY2ssIGNvbnRleHQpO1xuICB9O1xuXG4vKipcbiAqIFJldHVybnMgYWxsIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBvcmlnaW5hbCBzb3VyY2UsXG4gKiBsaW5lLCBhbmQgY29sdW1uIHByb3ZpZGVkLiBJZiBubyBjb2x1bW4gaXMgcHJvdmlkZWQsIHJldHVybnMgYWxsIG1hcHBpbmdzXG4gKiBjb3JyZXNwb25kaW5nIHRvIGEgZWl0aGVyIHRoZSBsaW5lIHdlIGFyZSBzZWFyY2hpbmcgZm9yIG9yIHRoZSBuZXh0XG4gKiBjbG9zZXN0IGxpbmUgdGhhdCBoYXMgYW55IG1hcHBpbmdzLiBPdGhlcndpc2UsIHJldHVybnMgYWxsIG1hcHBpbmdzXG4gKiBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBsaW5lIGFuZCBlaXRoZXIgdGhlIGNvbHVtbiB3ZSBhcmUgc2VhcmNoaW5nIGZvclxuICogb3IgdGhlIG5leHQgY2xvc2VzdCBjb2x1bW4gdGhhdCBoYXMgYW55IG9mZnNldHMuXG4gKlxuICogVGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBzb3VyY2U6IFRoZSBmaWxlbmFtZSBvZiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICogICAtIGNvbHVtbjogT3B0aW9uYWwuIHRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gKlxuICogYW5kIGFuIGFycmF5IG9mIG9iamVjdHMgaXMgcmV0dXJuZWQsIGVhY2ggd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLlxuICovXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuYWxsR2VuZXJhdGVkUG9zaXRpb25zRm9yID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfYWxsR2VuZXJhdGVkUG9zaXRpb25zRm9yKGFBcmdzKSB7XG4gICAgdmFyIGxpbmUgPSB1dGlsLmdldEFyZyhhQXJncywgJ2xpbmUnKTtcblxuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gZXhhY3QgbWF0Y2gsIEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9maW5kTWFwcGluZ1xuICAgIC8vIHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBjbG9zZXN0IG1hcHBpbmcgbGVzcyB0aGFuIHRoZSBuZWVkbGUuIEJ5XG4gICAgLy8gc2V0dGluZyBuZWVkbGUub3JpZ2luYWxDb2x1bW4gdG8gMCwgd2UgdGh1cyBmaW5kIHRoZSBsYXN0IG1hcHBpbmcgZm9yXG4gICAgLy8gdGhlIGdpdmVuIGxpbmUsIHByb3ZpZGVkIHN1Y2ggYSBtYXBwaW5nIGV4aXN0cy5cbiAgICB2YXIgbmVlZGxlID0ge1xuICAgICAgc291cmNlOiB1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZScpLFxuICAgICAgb3JpZ2luYWxMaW5lOiBsaW5lLFxuICAgICAgb3JpZ2luYWxDb2x1bW46IHV0aWwuZ2V0QXJnKGFBcmdzLCAnY29sdW1uJywgMClcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICBuZWVkbGUuc291cmNlID0gdXRpbC5yZWxhdGl2ZSh0aGlzLnNvdXJjZVJvb3QsIG5lZWRsZS5zb3VyY2UpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuX3NvdXJjZXMuaGFzKG5lZWRsZS5zb3VyY2UpKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIG5lZWRsZS5zb3VyY2UgPSB0aGlzLl9zb3VyY2VzLmluZGV4T2YobmVlZGxlLnNvdXJjZSk7XG5cbiAgICB2YXIgbWFwcGluZ3MgPSBbXTtcblxuICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmRNYXBwaW5nKG5lZWRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib3JpZ2luYWxMaW5lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvcmlnaW5hbENvbHVtblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmluYXJ5U2VhcmNoLkxFQVNUX1VQUEVSX0JPVU5EKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgdmFyIG1hcHBpbmcgPSB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzW2luZGV4XTtcblxuICAgICAgaWYgKGFBcmdzLmNvbHVtbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBvcmlnaW5hbExpbmUgPSBtYXBwaW5nLm9yaWdpbmFsTGluZTtcblxuICAgICAgICAvLyBJdGVyYXRlIHVudGlsIGVpdGhlciB3ZSBydW4gb3V0IG9mIG1hcHBpbmdzLCBvciB3ZSBydW4gaW50b1xuICAgICAgICAvLyBhIG1hcHBpbmcgZm9yIGEgZGlmZmVyZW50IGxpbmUgdGhhbiB0aGUgb25lIHdlIGZvdW5kLiBTaW5jZVxuICAgICAgICAvLyBtYXBwaW5ncyBhcmUgc29ydGVkLCB0aGlzIGlzIGd1YXJhbnRlZWQgdG8gZmluZCBhbGwgbWFwcGluZ3MgZm9yXG4gICAgICAgIC8vIHRoZSBsaW5lIHdlIGZvdW5kLlxuICAgICAgICB3aGlsZSAobWFwcGluZyAmJiBtYXBwaW5nLm9yaWdpbmFsTGluZSA9PT0gb3JpZ2luYWxMaW5lKSB7XG4gICAgICAgICAgbWFwcGluZ3MucHVzaCh7XG4gICAgICAgICAgICBsaW5lOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkTGluZScsIG51bGwpLFxuICAgICAgICAgICAgY29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkQ29sdW1uJywgbnVsbCksXG4gICAgICAgICAgICBsYXN0Q29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnbGFzdEdlbmVyYXRlZENvbHVtbicsIG51bGwpXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBtYXBwaW5nID0gdGhpcy5fb3JpZ2luYWxNYXBwaW5nc1srK2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG9yaWdpbmFsQ29sdW1uID0gbWFwcGluZy5vcmlnaW5hbENvbHVtbjtcblxuICAgICAgICAvLyBJdGVyYXRlIHVudGlsIGVpdGhlciB3ZSBydW4gb3V0IG9mIG1hcHBpbmdzLCBvciB3ZSBydW4gaW50b1xuICAgICAgICAvLyBhIG1hcHBpbmcgZm9yIGEgZGlmZmVyZW50IGxpbmUgdGhhbiB0aGUgb25lIHdlIHdlcmUgc2VhcmNoaW5nIGZvci5cbiAgICAgICAgLy8gU2luY2UgbWFwcGluZ3MgYXJlIHNvcnRlZCwgdGhpcyBpcyBndWFyYW50ZWVkIHRvIGZpbmQgYWxsIG1hcHBpbmdzIGZvclxuICAgICAgICAvLyB0aGUgbGluZSB3ZSBhcmUgc2VhcmNoaW5nIGZvci5cbiAgICAgICAgd2hpbGUgKG1hcHBpbmcgJiZcbiAgICAgICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxMaW5lID09PSBsaW5lICYmXG4gICAgICAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uID09IG9yaWdpbmFsQ29sdW1uKSB7XG4gICAgICAgICAgbWFwcGluZ3MucHVzaCh7XG4gICAgICAgICAgICBsaW5lOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkTGluZScsIG51bGwpLFxuICAgICAgICAgICAgY29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkQ29sdW1uJywgbnVsbCksXG4gICAgICAgICAgICBsYXN0Q29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnbGFzdEdlbmVyYXRlZENvbHVtbicsIG51bGwpXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBtYXBwaW5nID0gdGhpcy5fb3JpZ2luYWxNYXBwaW5nc1srK2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYXBwaW5ncztcbiAgfTtcblxuZXhwb3J0cy5Tb3VyY2VNYXBDb25zdW1lciA9IFNvdXJjZU1hcENvbnN1bWVyO1xuXG4vKipcbiAqIEEgQmFzaWNTb3VyY2VNYXBDb25zdW1lciBpbnN0YW5jZSByZXByZXNlbnRzIGEgcGFyc2VkIHNvdXJjZSBtYXAgd2hpY2ggd2UgY2FuXG4gKiBxdWVyeSBmb3IgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9yaWdpbmFsIGZpbGUgcG9zaXRpb25zIGJ5IGdpdmluZyBpdCBhIGZpbGVcbiAqIHBvc2l0aW9uIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLlxuICpcbiAqIFRoZSBvbmx5IHBhcmFtZXRlciBpcyB0aGUgcmF3IHNvdXJjZSBtYXAgKGVpdGhlciBhcyBhIEpTT04gc3RyaW5nLCBvclxuICogYWxyZWFkeSBwYXJzZWQgdG8gYW4gb2JqZWN0KS4gQWNjb3JkaW5nIHRvIHRoZSBzcGVjLCBzb3VyY2UgbWFwcyBoYXZlIHRoZVxuICogZm9sbG93aW5nIGF0dHJpYnV0ZXM6XG4gKlxuICogICAtIHZlcnNpb246IFdoaWNoIHZlcnNpb24gb2YgdGhlIHNvdXJjZSBtYXAgc3BlYyB0aGlzIG1hcCBpcyBmb2xsb3dpbmcuXG4gKiAgIC0gc291cmNlczogQW4gYXJyYXkgb2YgVVJMcyB0byB0aGUgb3JpZ2luYWwgc291cmNlIGZpbGVzLlxuICogICAtIG5hbWVzOiBBbiBhcnJheSBvZiBpZGVudGlmaWVycyB3aGljaCBjYW4gYmUgcmVmZXJyZW5jZWQgYnkgaW5kaXZpZHVhbCBtYXBwaW5ncy5cbiAqICAgLSBzb3VyY2VSb290OiBPcHRpb25hbC4gVGhlIFVSTCByb290IGZyb20gd2hpY2ggYWxsIHNvdXJjZXMgYXJlIHJlbGF0aXZlLlxuICogICAtIHNvdXJjZXNDb250ZW50OiBPcHRpb25hbC4gQW4gYXJyYXkgb2YgY29udGVudHMgb2YgdGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlcy5cbiAqICAgLSBtYXBwaW5nczogQSBzdHJpbmcgb2YgYmFzZTY0IFZMUXMgd2hpY2ggY29udGFpbiB0aGUgYWN0dWFsIG1hcHBpbmdzLlxuICogICAtIGZpbGU6IE9wdGlvbmFsLiBUaGUgZ2VuZXJhdGVkIGZpbGUgdGhpcyBzb3VyY2UgbWFwIGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAqXG4gKiBIZXJlIGlzIGFuIGV4YW1wbGUgc291cmNlIG1hcCwgdGFrZW4gZnJvbSB0aGUgc291cmNlIG1hcCBzcGVjWzBdOlxuICpcbiAqICAgICB7XG4gKiAgICAgICB2ZXJzaW9uIDogMyxcbiAqICAgICAgIGZpbGU6IFwib3V0LmpzXCIsXG4gKiAgICAgICBzb3VyY2VSb290IDogXCJcIixcbiAqICAgICAgIHNvdXJjZXM6IFtcImZvby5qc1wiLCBcImJhci5qc1wiXSxcbiAqICAgICAgIG5hbWVzOiBbXCJzcmNcIiwgXCJtYXBzXCIsIFwiYXJlXCIsIFwiZnVuXCJdLFxuICogICAgICAgbWFwcGluZ3M6IFwiQUEsQUI7O0FCQ0RFO1wiXG4gKiAgICAgfVxuICpcbiAqIFswXTogaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xVTFSR0FlaFF3UnlwVVRvdkYxS1JscGlPRnplMGItXzJnYzZmQUgwS1kway9lZGl0P3BsaT0xI1xuICovXG5mdW5jdGlvbiBCYXNpY1NvdXJjZU1hcENvbnN1bWVyKGFTb3VyY2VNYXApIHtcbiAgdmFyIHNvdXJjZU1hcCA9IGFTb3VyY2VNYXA7XG4gIGlmICh0eXBlb2YgYVNvdXJjZU1hcCA9PT0gJ3N0cmluZycpIHtcbiAgICBzb3VyY2VNYXAgPSBKU09OLnBhcnNlKGFTb3VyY2VNYXAucmVwbGFjZSgvXlxcKVxcXVxcfScvLCAnJykpO1xuICB9XG5cbiAgdmFyIHZlcnNpb24gPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICd2ZXJzaW9uJyk7XG4gIHZhciBzb3VyY2VzID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnc291cmNlcycpO1xuICAvLyBTYXNzIDMuMyBsZWF2ZXMgb3V0IHRoZSAnbmFtZXMnIGFycmF5LCBzbyB3ZSBkZXZpYXRlIGZyb20gdGhlIHNwZWMgKHdoaWNoXG4gIC8vIHJlcXVpcmVzIHRoZSBhcnJheSkgdG8gcGxheSBuaWNlIGhlcmUuXG4gIHZhciBuYW1lcyA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ25hbWVzJywgW10pO1xuICB2YXIgc291cmNlUm9vdCA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3NvdXJjZVJvb3QnLCBudWxsKTtcbiAgdmFyIHNvdXJjZXNDb250ZW50ID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnc291cmNlc0NvbnRlbnQnLCBudWxsKTtcbiAgdmFyIG1hcHBpbmdzID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnbWFwcGluZ3MnKTtcbiAgdmFyIGZpbGUgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdmaWxlJywgbnVsbCk7XG5cbiAgLy8gT25jZSBhZ2FpbiwgU2FzcyBkZXZpYXRlcyBmcm9tIHRoZSBzcGVjIGFuZCBzdXBwbGllcyB0aGUgdmVyc2lvbiBhcyBhXG4gIC8vIHN0cmluZyByYXRoZXIgdGhhbiBhIG51bWJlciwgc28gd2UgdXNlIGxvb3NlIGVxdWFsaXR5IGNoZWNraW5nIGhlcmUuXG4gIGlmICh2ZXJzaW9uICE9IHRoaXMuX3ZlcnNpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHZlcnNpb246ICcgKyB2ZXJzaW9uKTtcbiAgfVxuXG4gIHNvdXJjZXMgPSBzb3VyY2VzXG4gICAgLm1hcChTdHJpbmcpXG4gICAgLy8gU29tZSBzb3VyY2UgbWFwcyBwcm9kdWNlIHJlbGF0aXZlIHNvdXJjZSBwYXRocyBsaWtlIFwiLi9mb28uanNcIiBpbnN0ZWFkIG9mXG4gICAgLy8gXCJmb28uanNcIi4gIE5vcm1hbGl6ZSB0aGVzZSBmaXJzdCBzbyB0aGF0IGZ1dHVyZSBjb21wYXJpc29ucyB3aWxsIHN1Y2NlZWQuXG4gICAgLy8gU2VlIGJ1Z3ppbC5sYS8xMDkwNzY4LlxuICAgIC5tYXAodXRpbC5ub3JtYWxpemUpXG4gICAgLy8gQWx3YXlzIGVuc3VyZSB0aGF0IGFic29sdXRlIHNvdXJjZXMgYXJlIGludGVybmFsbHkgc3RvcmVkIHJlbGF0aXZlIHRvXG4gICAgLy8gdGhlIHNvdXJjZSByb290LCBpZiB0aGUgc291cmNlIHJvb3QgaXMgYWJzb2x1dGUuIE5vdCBkb2luZyB0aGlzIHdvdWxkXG4gICAgLy8gYmUgcGFydGljdWxhcmx5IHByb2JsZW1hdGljIHdoZW4gdGhlIHNvdXJjZSByb290IGlzIGEgcHJlZml4IG9mIHRoZVxuICAgIC8vIHNvdXJjZSAodmFsaWQsIGJ1dCB3aHk/PykuIFNlZSBnaXRodWIgaXNzdWUgIzE5OSBhbmQgYnVnemlsLmxhLzExODg5ODIuXG4gICAgLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gc291cmNlUm9vdCAmJiB1dGlsLmlzQWJzb2x1dGUoc291cmNlUm9vdCkgJiYgdXRpbC5pc0Fic29sdXRlKHNvdXJjZSlcbiAgICAgICAgPyB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIHNvdXJjZSlcbiAgICAgICAgOiBzb3VyY2U7XG4gICAgfSk7XG5cbiAgLy8gUGFzcyBgdHJ1ZWAgYmVsb3cgdG8gYWxsb3cgZHVwbGljYXRlIG5hbWVzIGFuZCBzb3VyY2VzLiBXaGlsZSBzb3VyY2UgbWFwc1xuICAvLyBhcmUgaW50ZW5kZWQgdG8gYmUgY29tcHJlc3NlZCBhbmQgZGVkdXBsaWNhdGVkLCB0aGUgVHlwZVNjcmlwdCBjb21waWxlclxuICAvLyBzb21ldGltZXMgZ2VuZXJhdGVzIHNvdXJjZSBtYXBzIHdpdGggZHVwbGljYXRlcyBpbiB0aGVtLiBTZWUgR2l0aHViIGlzc3VlXG4gIC8vICM3MiBhbmQgYnVnemlsLmxhLzg4OTQ5Mi5cbiAgdGhpcy5fbmFtZXMgPSBBcnJheVNldC5mcm9tQXJyYXkobmFtZXMubWFwKFN0cmluZyksIHRydWUpO1xuICB0aGlzLl9zb3VyY2VzID0gQXJyYXlTZXQuZnJvbUFycmF5KHNvdXJjZXMsIHRydWUpO1xuXG4gIHRoaXMuc291cmNlUm9vdCA9IHNvdXJjZVJvb3Q7XG4gIHRoaXMuc291cmNlc0NvbnRlbnQgPSBzb3VyY2VzQ29udGVudDtcbiAgdGhpcy5fbWFwcGluZ3MgPSBtYXBwaW5ncztcbiAgdGhpcy5maWxlID0gZmlsZTtcbn1cblxuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSk7XG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5jb25zdW1lciA9IFNvdXJjZU1hcENvbnN1bWVyO1xuXG4vKipcbiAqIENyZWF0ZSBhIEJhc2ljU291cmNlTWFwQ29uc3VtZXIgZnJvbSBhIFNvdXJjZU1hcEdlbmVyYXRvci5cbiAqXG4gKiBAcGFyYW0gU291cmNlTWFwR2VuZXJhdG9yIGFTb3VyY2VNYXBcbiAqICAgICAgICBUaGUgc291cmNlIG1hcCB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG4gKiBAcmV0dXJucyBCYXNpY1NvdXJjZU1hcENvbnN1bWVyXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIuZnJvbVNvdXJjZU1hcCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2Zyb21Tb3VyY2VNYXAoYVNvdXJjZU1hcCkge1xuICAgIHZhciBzbWMgPSBPYmplY3QuY3JlYXRlKEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlKTtcblxuICAgIHZhciBuYW1lcyA9IHNtYy5fbmFtZXMgPSBBcnJheVNldC5mcm9tQXJyYXkoYVNvdXJjZU1hcC5fbmFtZXMudG9BcnJheSgpLCB0cnVlKTtcbiAgICB2YXIgc291cmNlcyA9IHNtYy5fc291cmNlcyA9IEFycmF5U2V0LmZyb21BcnJheShhU291cmNlTWFwLl9zb3VyY2VzLnRvQXJyYXkoKSwgdHJ1ZSk7XG4gICAgc21jLnNvdXJjZVJvb3QgPSBhU291cmNlTWFwLl9zb3VyY2VSb290O1xuICAgIHNtYy5zb3VyY2VzQ29udGVudCA9IGFTb3VyY2VNYXAuX2dlbmVyYXRlU291cmNlc0NvbnRlbnQoc21jLl9zb3VyY2VzLnRvQXJyYXkoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNtYy5zb3VyY2VSb290KTtcbiAgICBzbWMuZmlsZSA9IGFTb3VyY2VNYXAuX2ZpbGU7XG5cbiAgICAvLyBCZWNhdXNlIHdlIGFyZSBtb2RpZnlpbmcgdGhlIGVudHJpZXMgKGJ5IGNvbnZlcnRpbmcgc3RyaW5nIHNvdXJjZXMgYW5kXG4gICAgLy8gbmFtZXMgdG8gaW5kaWNlcyBpbnRvIHRoZSBzb3VyY2VzIGFuZCBuYW1lcyBBcnJheVNldHMpLCB3ZSBoYXZlIHRvIG1ha2VcbiAgICAvLyBhIGNvcHkgb2YgdGhlIGVudHJ5IG9yIGVsc2UgYmFkIHRoaW5ncyBoYXBwZW4uIFNoYXJlZCBtdXRhYmxlIHN0YXRlXG4gICAgLy8gc3RyaWtlcyBhZ2FpbiEgU2VlIGdpdGh1YiBpc3N1ZSAjMTkxLlxuXG4gICAgdmFyIGdlbmVyYXRlZE1hcHBpbmdzID0gYVNvdXJjZU1hcC5fbWFwcGluZ3MudG9BcnJheSgpLnNsaWNlKCk7XG4gICAgdmFyIGRlc3RHZW5lcmF0ZWRNYXBwaW5ncyA9IHNtYy5fX2dlbmVyYXRlZE1hcHBpbmdzID0gW107XG4gICAgdmFyIGRlc3RPcmlnaW5hbE1hcHBpbmdzID0gc21jLl9fb3JpZ2luYWxNYXBwaW5ncyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGdlbmVyYXRlZE1hcHBpbmdzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc3JjTWFwcGluZyA9IGdlbmVyYXRlZE1hcHBpbmdzW2ldO1xuICAgICAgdmFyIGRlc3RNYXBwaW5nID0gbmV3IE1hcHBpbmc7XG4gICAgICBkZXN0TWFwcGluZy5nZW5lcmF0ZWRMaW5lID0gc3JjTWFwcGluZy5nZW5lcmF0ZWRMaW5lO1xuICAgICAgZGVzdE1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uID0gc3JjTWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG5cbiAgICAgIGlmIChzcmNNYXBwaW5nLnNvdXJjZSkge1xuICAgICAgICBkZXN0TWFwcGluZy5zb3VyY2UgPSBzb3VyY2VzLmluZGV4T2Yoc3JjTWFwcGluZy5zb3VyY2UpO1xuICAgICAgICBkZXN0TWFwcGluZy5vcmlnaW5hbExpbmUgPSBzcmNNYXBwaW5nLm9yaWdpbmFsTGluZTtcbiAgICAgICAgZGVzdE1hcHBpbmcub3JpZ2luYWxDb2x1bW4gPSBzcmNNYXBwaW5nLm9yaWdpbmFsQ29sdW1uO1xuXG4gICAgICAgIGlmIChzcmNNYXBwaW5nLm5hbWUpIHtcbiAgICAgICAgICBkZXN0TWFwcGluZy5uYW1lID0gbmFtZXMuaW5kZXhPZihzcmNNYXBwaW5nLm5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVzdE9yaWdpbmFsTWFwcGluZ3MucHVzaChkZXN0TWFwcGluZyk7XG4gICAgICB9XG5cbiAgICAgIGRlc3RHZW5lcmF0ZWRNYXBwaW5ncy5wdXNoKGRlc3RNYXBwaW5nKTtcbiAgICB9XG5cbiAgICBxdWlja1NvcnQoc21jLl9fb3JpZ2luYWxNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyk7XG5cbiAgICByZXR1cm4gc21jO1xuICB9O1xuXG4vKipcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBzb3VyY2UgbWFwcGluZyBzcGVjIHRoYXQgd2UgYXJlIGNvbnN1bWluZy5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3ZlcnNpb24gPSAzO1xuXG4vKipcbiAqIFRoZSBsaXN0IG9mIG9yaWdpbmFsIHNvdXJjZXMuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSwgJ3NvdXJjZXMnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9zb3VyY2VzLnRvQXJyYXkoKS5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICAgIHJldHVybiB0aGlzLnNvdXJjZVJvb3QgIT0gbnVsbCA/IHV0aWwuam9pbih0aGlzLnNvdXJjZVJvb3QsIHMpIDogcztcbiAgICB9LCB0aGlzKTtcbiAgfVxufSk7XG5cbi8qKlxuICogUHJvdmlkZSB0aGUgSklUIHdpdGggYSBuaWNlIHNoYXBlIC8gaGlkZGVuIGNsYXNzLlxuICovXG5mdW5jdGlvbiBNYXBwaW5nKCkge1xuICB0aGlzLmdlbmVyYXRlZExpbmUgPSAwO1xuICB0aGlzLmdlbmVyYXRlZENvbHVtbiA9IDA7XG4gIHRoaXMuc291cmNlID0gbnVsbDtcbiAgdGhpcy5vcmlnaW5hbExpbmUgPSBudWxsO1xuICB0aGlzLm9yaWdpbmFsQ29sdW1uID0gbnVsbDtcbiAgdGhpcy5uYW1lID0gbnVsbDtcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgbWFwcGluZ3MgaW4gYSBzdHJpbmcgaW4gdG8gYSBkYXRhIHN0cnVjdHVyZSB3aGljaCB3ZSBjYW4gZWFzaWx5XG4gKiBxdWVyeSAodGhlIG9yZGVyZWQgYXJyYXlzIGluIHRoZSBgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzYCBhbmRcbiAqIGB0aGlzLl9fb3JpZ2luYWxNYXBwaW5nc2AgcHJvcGVydGllcykuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9wYXJzZU1hcHBpbmdzID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfcGFyc2VNYXBwaW5ncyhhU3RyLCBhU291cmNlUm9vdCkge1xuICAgIHZhciBnZW5lcmF0ZWRMaW5lID0gMTtcbiAgICB2YXIgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgIHZhciBwcmV2aW91c09yaWdpbmFsTGluZSA9IDA7XG4gICAgdmFyIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gPSAwO1xuICAgIHZhciBwcmV2aW91c1NvdXJjZSA9IDA7XG4gICAgdmFyIHByZXZpb3VzTmFtZSA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGFTdHIubGVuZ3RoO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNhY2hlZFNlZ21lbnRzID0ge307XG4gICAgdmFyIHRlbXAgPSB7fTtcbiAgICB2YXIgb3JpZ2luYWxNYXBwaW5ncyA9IFtdO1xuICAgIHZhciBnZW5lcmF0ZWRNYXBwaW5ncyA9IFtdO1xuICAgIHZhciBtYXBwaW5nLCBzdHIsIHNlZ21lbnQsIGVuZCwgdmFsdWU7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChhU3RyLmNoYXJBdChpbmRleCkgPT09ICc7Jykge1xuICAgICAgICBnZW5lcmF0ZWRMaW5lKys7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICAgIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGFTdHIuY2hhckF0KGluZGV4KSA9PT0gJywnKSB7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbWFwcGluZyA9IG5ldyBNYXBwaW5nKCk7XG4gICAgICAgIG1hcHBpbmcuZ2VuZXJhdGVkTGluZSA9IGdlbmVyYXRlZExpbmU7XG5cbiAgICAgICAgLy8gQmVjYXVzZSBlYWNoIG9mZnNldCBpcyBlbmNvZGVkIHJlbGF0aXZlIHRvIHRoZSBwcmV2aW91cyBvbmUsXG4gICAgICAgIC8vIG1hbnkgc2VnbWVudHMgb2Z0ZW4gaGF2ZSB0aGUgc2FtZSBlbmNvZGluZy4gV2UgY2FuIGV4cGxvaXQgdGhpc1xuICAgICAgICAvLyBmYWN0IGJ5IGNhY2hpbmcgdGhlIHBhcnNlZCB2YXJpYWJsZSBsZW5ndGggZmllbGRzIG9mIGVhY2ggc2VnbWVudCxcbiAgICAgICAgLy8gYWxsb3dpbmcgdXMgdG8gYXZvaWQgYSBzZWNvbmQgcGFyc2UgaWYgd2UgZW5jb3VudGVyIHRoZSBzYW1lXG4gICAgICAgIC8vIHNlZ21lbnQgYWdhaW4uXG4gICAgICAgIGZvciAoZW5kID0gaW5kZXg7IGVuZCA8IGxlbmd0aDsgZW5kKyspIHtcbiAgICAgICAgICBpZiAodGhpcy5fY2hhcklzTWFwcGluZ1NlcGFyYXRvcihhU3RyLCBlbmQpKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RyID0gYVN0ci5zbGljZShpbmRleCwgZW5kKTtcblxuICAgICAgICBzZWdtZW50ID0gY2FjaGVkU2VnbWVudHNbc3RyXTtcbiAgICAgICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAgICBpbmRleCArPSBzdHIubGVuZ3RoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlZ21lbnQgPSBbXTtcbiAgICAgICAgICB3aGlsZSAoaW5kZXggPCBlbmQpIHtcbiAgICAgICAgICAgIGJhc2U2NFZMUS5kZWNvZGUoYVN0ciwgaW5kZXgsIHRlbXApO1xuICAgICAgICAgICAgdmFsdWUgPSB0ZW1wLnZhbHVlO1xuICAgICAgICAgICAgaW5kZXggPSB0ZW1wLnJlc3Q7XG4gICAgICAgICAgICBzZWdtZW50LnB1c2godmFsdWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWdtZW50Lmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3VuZCBhIHNvdXJjZSwgYnV0IG5vIGxpbmUgYW5kIGNvbHVtbicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWdtZW50Lmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3VuZCBhIHNvdXJjZSBhbmQgbGluZSwgYnV0IG5vIGNvbHVtbicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNhY2hlZFNlZ21lbnRzW3N0cl0gPSBzZWdtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2VuZXJhdGVkIGNvbHVtbi5cbiAgICAgICAgbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gPSBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiArIHNlZ21lbnRbMF07XG4gICAgICAgIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG5cbiAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID4gMSkge1xuICAgICAgICAgIC8vIE9yaWdpbmFsIHNvdXJjZS5cbiAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IHByZXZpb3VzU291cmNlICsgc2VnbWVudFsxXTtcbiAgICAgICAgICBwcmV2aW91c1NvdXJjZSArPSBzZWdtZW50WzFdO1xuXG4gICAgICAgICAgLy8gT3JpZ2luYWwgbGluZS5cbiAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsTGluZSA9IHByZXZpb3VzT3JpZ2luYWxMaW5lICsgc2VnbWVudFsyXTtcbiAgICAgICAgICBwcmV2aW91c09yaWdpbmFsTGluZSA9IG1hcHBpbmcub3JpZ2luYWxMaW5lO1xuICAgICAgICAgIC8vIExpbmVzIGFyZSBzdG9yZWQgMC1iYXNlZFxuICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxMaW5lICs9IDE7XG5cbiAgICAgICAgICAvLyBPcmlnaW5hbCBjb2x1bW4uXG4gICAgICAgICAgbWFwcGluZy5vcmlnaW5hbENvbHVtbiA9IHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gKyBzZWdtZW50WzNdO1xuICAgICAgICAgIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gPSBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uO1xuXG4gICAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgLy8gT3JpZ2luYWwgbmFtZS5cbiAgICAgICAgICAgIG1hcHBpbmcubmFtZSA9IHByZXZpb3VzTmFtZSArIHNlZ21lbnRbNF07XG4gICAgICAgICAgICBwcmV2aW91c05hbWUgKz0gc2VnbWVudFs0XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBnZW5lcmF0ZWRNYXBwaW5ncy5wdXNoKG1hcHBpbmcpO1xuICAgICAgICBpZiAodHlwZW9mIG1hcHBpbmcub3JpZ2luYWxMaW5lID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIG9yaWdpbmFsTWFwcGluZ3MucHVzaChtYXBwaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHF1aWNrU29ydChnZW5lcmF0ZWRNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZCk7XG4gICAgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzID0gZ2VuZXJhdGVkTWFwcGluZ3M7XG5cbiAgICBxdWlja1NvcnQob3JpZ2luYWxNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyk7XG4gICAgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3MgPSBvcmlnaW5hbE1hcHBpbmdzO1xuICB9O1xuXG4vKipcbiAqIEZpbmQgdGhlIG1hcHBpbmcgdGhhdCBiZXN0IG1hdGNoZXMgdGhlIGh5cG90aGV0aWNhbCBcIm5lZWRsZVwiIG1hcHBpbmcgdGhhdFxuICogd2UgYXJlIHNlYXJjaGluZyBmb3IgaW4gdGhlIGdpdmVuIFwiaGF5c3RhY2tcIiBvZiBtYXBwaW5ncy5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX2ZpbmRNYXBwaW5nID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfZmluZE1hcHBpbmcoYU5lZWRsZSwgYU1hcHBpbmdzLCBhTGluZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFDb2x1bW5OYW1lLCBhQ29tcGFyYXRvciwgYUJpYXMpIHtcbiAgICAvLyBUbyByZXR1cm4gdGhlIHBvc2l0aW9uIHdlIGFyZSBzZWFyY2hpbmcgZm9yLCB3ZSBtdXN0IGZpcnN0IGZpbmQgdGhlXG4gICAgLy8gbWFwcGluZyBmb3IgdGhlIGdpdmVuIHBvc2l0aW9uIGFuZCB0aGVuIHJldHVybiB0aGUgb3Bwb3NpdGUgcG9zaXRpb24gaXRcbiAgICAvLyBwb2ludHMgdG8uIEJlY2F1c2UgdGhlIG1hcHBpbmdzIGFyZSBzb3J0ZWQsIHdlIGNhbiB1c2UgYmluYXJ5IHNlYXJjaCB0b1xuICAgIC8vIGZpbmQgdGhlIGJlc3QgbWFwcGluZy5cblxuICAgIGlmIChhTmVlZGxlW2FMaW5lTmFtZV0gPD0gMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTGluZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAxLCBnb3QgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICArIGFOZWVkbGVbYUxpbmVOYW1lXSk7XG4gICAgfVxuICAgIGlmIChhTmVlZGxlW2FDb2x1bW5OYW1lXSA8IDApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvbHVtbiBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAwLCBnb3QgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICArIGFOZWVkbGVbYUNvbHVtbk5hbWVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmluYXJ5U2VhcmNoLnNlYXJjaChhTmVlZGxlLCBhTWFwcGluZ3MsIGFDb21wYXJhdG9yLCBhQmlhcyk7XG4gIH07XG5cbi8qKlxuICogQ29tcHV0ZSB0aGUgbGFzdCBjb2x1bW4gZm9yIGVhY2ggZ2VuZXJhdGVkIG1hcHBpbmcuIFRoZSBsYXN0IGNvbHVtbiBpc1xuICogaW5jbHVzaXZlLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5jb21wdXRlQ29sdW1uU3BhbnMgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9jb21wdXRlQ29sdW1uU3BhbnMoKSB7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzLmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgdmFyIG1hcHBpbmcgPSB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5nc1tpbmRleF07XG5cbiAgICAgIC8vIE1hcHBpbmdzIGRvIG5vdCBjb250YWluIGEgZmllbGQgZm9yIHRoZSBsYXN0IGdlbmVyYXRlZCBjb2x1bW50LiBXZVxuICAgICAgLy8gY2FuIGNvbWUgdXAgd2l0aCBhbiBvcHRpbWlzdGljIGVzdGltYXRlLCBob3dldmVyLCBieSBhc3N1bWluZyB0aGF0XG4gICAgICAvLyBtYXBwaW5ncyBhcmUgY29udGlndW91cyAoaS5lLiBnaXZlbiB0d28gY29uc2VjdXRpdmUgbWFwcGluZ3MsIHRoZVxuICAgICAgLy8gZmlyc3QgbWFwcGluZyBlbmRzIHdoZXJlIHRoZSBzZWNvbmQgb25lIHN0YXJ0cykuXG4gICAgICBpZiAoaW5kZXggKyAxIDwgdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3MubGVuZ3RoKSB7XG4gICAgICAgIHZhciBuZXh0TWFwcGluZyA9IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzW2luZGV4ICsgMV07XG5cbiAgICAgICAgaWYgKG1hcHBpbmcuZ2VuZXJhdGVkTGluZSA9PT0gbmV4dE1hcHBpbmcuZ2VuZXJhdGVkTGluZSkge1xuICAgICAgICAgIG1hcHBpbmcubGFzdEdlbmVyYXRlZENvbHVtbiA9IG5leHRNYXBwaW5nLmdlbmVyYXRlZENvbHVtbiAtIDE7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGxhc3QgbWFwcGluZyBmb3IgZWFjaCBsaW5lIHNwYW5zIHRoZSBlbnRpcmUgbGluZS5cbiAgICAgIG1hcHBpbmcubGFzdEdlbmVyYXRlZENvbHVtbiA9IEluZmluaXR5O1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBzb3VyY2UsIGxpbmUsIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBnZW5lcmF0ZWRcbiAqIHNvdXJjZSdzIGxpbmUgYW5kIGNvbHVtbiBwb3NpdGlvbnMgcHJvdmlkZWQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIG9iamVjdFxuICogd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLlxuICogICAtIGJpYXM6IEVpdGhlciAnU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQnIG9yXG4gKiAgICAgJ1NvdXJjZU1hcENvbnN1bWVyLkxFQVNUX1VQUEVSX0JPVU5EJy4gU3BlY2lmaWVzIHdoZXRoZXIgdG8gcmV0dXJuIHRoZVxuICogICAgIGNsb3Nlc3QgZWxlbWVudCB0aGF0IGlzIHNtYWxsZXIgdGhhbiBvciBncmVhdGVyIHRoYW4gdGhlIG9uZSB3ZSBhcmVcbiAqICAgICBzZWFyY2hpbmcgZm9yLCByZXNwZWN0aXZlbHksIGlmIHRoZSBleGFjdCBlbGVtZW50IGNhbm5vdCBiZSBmb3VuZC5cbiAqICAgICBEZWZhdWx0cyB0byAnU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQnLlxuICpcbiAqIGFuZCBhbiBvYmplY3QgaXMgcmV0dXJuZWQgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIHNvdXJjZTogVGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlLCBvciBudWxsLlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLCBvciBudWxsLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSwgb3IgbnVsbC5cbiAqICAgLSBuYW1lOiBUaGUgb3JpZ2luYWwgaWRlbnRpZmllciwgb3IgbnVsbC5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUub3JpZ2luYWxQb3NpdGlvbkZvciA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX29yaWdpbmFsUG9zaXRpb25Gb3IoYUFyZ3MpIHtcbiAgICB2YXIgbmVlZGxlID0ge1xuICAgICAgZ2VuZXJhdGVkTGluZTogdXRpbC5nZXRBcmcoYUFyZ3MsICdsaW5lJyksXG4gICAgICBnZW5lcmF0ZWRDb2x1bW46IHV0aWwuZ2V0QXJnKGFBcmdzLCAnY29sdW1uJylcbiAgICB9O1xuXG4gICAgdmFyIGluZGV4ID0gdGhpcy5fZmluZE1hcHBpbmcoXG4gICAgICBuZWVkbGUsXG4gICAgICB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5ncyxcbiAgICAgIFwiZ2VuZXJhdGVkTGluZVwiLFxuICAgICAgXCJnZW5lcmF0ZWRDb2x1bW5cIixcbiAgICAgIHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQsXG4gICAgICB1dGlsLmdldEFyZyhhQXJncywgJ2JpYXMnLCBTb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORClcbiAgICApO1xuXG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHZhciBtYXBwaW5nID0gdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3NbaW5kZXhdO1xuXG4gICAgICBpZiAobWFwcGluZy5nZW5lcmF0ZWRMaW5lID09PSBuZWVkbGUuZ2VuZXJhdGVkTGluZSkge1xuICAgICAgICB2YXIgc291cmNlID0gdXRpbC5nZXRBcmcobWFwcGluZywgJ3NvdXJjZScsIG51bGwpO1xuICAgICAgICBpZiAoc291cmNlICE9PSBudWxsKSB7XG4gICAgICAgICAgc291cmNlID0gdGhpcy5fc291cmNlcy5hdChzb3VyY2UpO1xuICAgICAgICAgIGlmICh0aGlzLnNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgc291cmNlID0gdXRpbC5qb2luKHRoaXMuc291cmNlUm9vdCwgc291cmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5hbWUgPSB1dGlsLmdldEFyZyhtYXBwaW5nLCAnbmFtZScsIG51bGwpO1xuICAgICAgICBpZiAobmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgIG5hbWUgPSB0aGlzLl9uYW1lcy5hdChuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgIGxpbmU6IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdvcmlnaW5hbExpbmUnLCBudWxsKSxcbiAgICAgICAgICBjb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdvcmlnaW5hbENvbHVtbicsIG51bGwpLFxuICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc291cmNlOiBudWxsLFxuICAgICAgbGluZTogbnVsbCxcbiAgICAgIGNvbHVtbjogbnVsbCxcbiAgICAgIG5hbWU6IG51bGxcbiAgICB9O1xuICB9O1xuXG4vKipcbiAqIFJldHVybiB0cnVlIGlmIHdlIGhhdmUgdGhlIHNvdXJjZSBjb250ZW50IGZvciBldmVyeSBzb3VyY2UgaW4gdGhlIHNvdXJjZVxuICogbWFwLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmhhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzID1cbiAgZnVuY3Rpb24gQmFzaWNTb3VyY2VNYXBDb25zdW1lcl9oYXNDb250ZW50c09mQWxsU291cmNlcygpIHtcbiAgICBpZiAoIXRoaXMuc291cmNlc0NvbnRlbnQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc291cmNlc0NvbnRlbnQubGVuZ3RoID49IHRoaXMuX3NvdXJjZXMuc2l6ZSgpICYmXG4gICAgICAhdGhpcy5zb3VyY2VzQ29udGVudC5zb21lKGZ1bmN0aW9uIChzYykgeyByZXR1cm4gc2MgPT0gbnVsbDsgfSk7XG4gIH07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb3JpZ2luYWwgc291cmNlIGNvbnRlbnQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIHRoZSB1cmwgb2YgdGhlXG4gKiBvcmlnaW5hbCBzb3VyY2UgZmlsZS4gUmV0dXJucyBudWxsIGlmIG5vIG9yaWdpbmFsIHNvdXJjZSBjb250ZW50IGlzXG4gKiBhdmFpbGFibGUuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLnNvdXJjZUNvbnRlbnRGb3IgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9zb3VyY2VDb250ZW50Rm9yKGFTb3VyY2UsIG51bGxPbk1pc3NpbmcpIHtcbiAgICBpZiAoIXRoaXMuc291cmNlc0NvbnRlbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgYVNvdXJjZSA9IHV0aWwucmVsYXRpdmUodGhpcy5zb3VyY2VSb290LCBhU291cmNlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fc291cmNlcy5oYXMoYVNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNvdXJjZXNDb250ZW50W3RoaXMuX3NvdXJjZXMuaW5kZXhPZihhU291cmNlKV07XG4gICAgfVxuXG4gICAgdmFyIHVybDtcbiAgICBpZiAodGhpcy5zb3VyY2VSb290ICE9IG51bGxcbiAgICAgICAgJiYgKHVybCA9IHV0aWwudXJsUGFyc2UodGhpcy5zb3VyY2VSb290KSkpIHtcbiAgICAgIC8vIFhYWDogZmlsZTovLyBVUklzIGFuZCBhYnNvbHV0ZSBwYXRocyBsZWFkIHRvIHVuZXhwZWN0ZWQgYmVoYXZpb3IgZm9yXG4gICAgICAvLyBtYW55IHVzZXJzLiBXZSBjYW4gaGVscCB0aGVtIG91dCB3aGVuIHRoZXkgZXhwZWN0IGZpbGU6Ly8gVVJJcyB0b1xuICAgICAgLy8gYmVoYXZlIGxpa2UgaXQgd291bGQgaWYgdGhleSB3ZXJlIHJ1bm5pbmcgYSBsb2NhbCBIVFRQIHNlcnZlci4gU2VlXG4gICAgICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD04ODU1OTcuXG4gICAgICB2YXIgZmlsZVVyaUFic1BhdGggPSBhU291cmNlLnJlcGxhY2UoL15maWxlOlxcL1xcLy8sIFwiXCIpO1xuICAgICAgaWYgKHVybC5zY2hlbWUgPT0gXCJmaWxlXCJcbiAgICAgICAgICAmJiB0aGlzLl9zb3VyY2VzLmhhcyhmaWxlVXJpQWJzUGF0aCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlc0NvbnRlbnRbdGhpcy5fc291cmNlcy5pbmRleE9mKGZpbGVVcmlBYnNQYXRoKV1cbiAgICAgIH1cblxuICAgICAgaWYgKCghdXJsLnBhdGggfHwgdXJsLnBhdGggPT0gXCIvXCIpXG4gICAgICAgICAgJiYgdGhpcy5fc291cmNlcy5oYXMoXCIvXCIgKyBhU291cmNlKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VzQ29udGVudFt0aGlzLl9zb3VyY2VzLmluZGV4T2YoXCIvXCIgKyBhU291cmNlKV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHJlY3Vyc2l2ZWx5IGZyb21cbiAgICAvLyBJbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLnNvdXJjZUNvbnRlbnRGb3IuIEluIHRoYXQgY2FzZSwgd2VcbiAgICAvLyBkb24ndCB3YW50IHRvIHRocm93IGlmIHdlIGNhbid0IGZpbmQgdGhlIHNvdXJjZSAtIHdlIGp1c3Qgd2FudCB0b1xuICAgIC8vIHJldHVybiBudWxsLCBzbyB3ZSBwcm92aWRlIGEgZmxhZyB0byBleGl0IGdyYWNlZnVsbHkuXG4gICAgaWYgKG51bGxPbk1pc3NpbmcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignXCInICsgYVNvdXJjZSArICdcIiBpcyBub3QgaW4gdGhlIFNvdXJjZU1hcC4nKTtcbiAgICB9XG4gIH07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZ2VuZXJhdGVkIGxpbmUgYW5kIGNvbHVtbiBpbmZvcm1hdGlvbiBmb3IgdGhlIG9yaWdpbmFsIHNvdXJjZSxcbiAqIGxpbmUsIGFuZCBjb2x1bW4gcG9zaXRpb25zIHByb3ZpZGVkLiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3Qgd2l0aFxuICogdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBzb3VyY2U6IFRoZSBmaWxlbmFtZSBvZiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAqICAgLSBiaWFzOiBFaXRoZXIgJ1NvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EJyBvclxuICogICAgICdTb3VyY2VNYXBDb25zdW1lci5MRUFTVF9VUFBFUl9CT1VORCcuIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiB0aGVcbiAqICAgICBjbG9zZXN0IGVsZW1lbnQgdGhhdCBpcyBzbWFsbGVyIHRoYW4gb3IgZ3JlYXRlciB0aGFuIHRoZSBvbmUgd2UgYXJlXG4gKiAgICAgc2VhcmNoaW5nIGZvciwgcmVzcGVjdGl2ZWx5LCBpZiB0aGUgZXhhY3QgZWxlbWVudCBjYW5ub3QgYmUgZm91bmQuXG4gKiAgICAgRGVmYXVsdHMgdG8gJ1NvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EJy5cbiAqXG4gKiBhbmQgYW4gb2JqZWN0IGlzIHJldHVybmVkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuZ2VuZXJhdGVkUG9zaXRpb25Gb3IgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9nZW5lcmF0ZWRQb3NpdGlvbkZvcihhQXJncykge1xuICAgIHZhciBzb3VyY2UgPSB1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZScpO1xuICAgIGlmICh0aGlzLnNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgc291cmNlID0gdXRpbC5yZWxhdGl2ZSh0aGlzLnNvdXJjZVJvb3QsIHNvdXJjZSk7XG4gICAgfVxuICAgIGlmICghdGhpcy5fc291cmNlcy5oYXMoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGluZTogbnVsbCxcbiAgICAgICAgY29sdW1uOiBudWxsLFxuICAgICAgICBsYXN0Q29sdW1uOiBudWxsXG4gICAgICB9O1xuICAgIH1cbiAgICBzb3VyY2UgPSB0aGlzLl9zb3VyY2VzLmluZGV4T2Yoc291cmNlKTtcblxuICAgIHZhciBuZWVkbGUgPSB7XG4gICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgIG9yaWdpbmFsTGluZTogdXRpbC5nZXRBcmcoYUFyZ3MsICdsaW5lJyksXG4gICAgICBvcmlnaW5hbENvbHVtbjogdXRpbC5nZXRBcmcoYUFyZ3MsICdjb2x1bW4nKVxuICAgIH07XG5cbiAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kTWFwcGluZyhcbiAgICAgIG5lZWRsZSxcbiAgICAgIHRoaXMuX29yaWdpbmFsTWFwcGluZ3MsXG4gICAgICBcIm9yaWdpbmFsTGluZVwiLFxuICAgICAgXCJvcmlnaW5hbENvbHVtblwiLFxuICAgICAgdXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyxcbiAgICAgIHV0aWwuZ2V0QXJnKGFBcmdzLCAnYmlhcycsIFNvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EKVxuICAgICk7XG5cbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgdmFyIG1hcHBpbmcgPSB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzW2luZGV4XTtcblxuICAgICAgaWYgKG1hcHBpbmcuc291cmNlID09PSBuZWVkbGUuc291cmNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbGluZTogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZExpbmUnLCBudWxsKSxcbiAgICAgICAgICBjb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdnZW5lcmF0ZWRDb2x1bW4nLCBudWxsKSxcbiAgICAgICAgICBsYXN0Q29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnbGFzdEdlbmVyYXRlZENvbHVtbicsIG51bGwpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxpbmU6IG51bGwsXG4gICAgICBjb2x1bW46IG51bGwsXG4gICAgICBsYXN0Q29sdW1uOiBudWxsXG4gICAgfTtcbiAgfTtcblxuZXhwb3J0cy5CYXNpY1NvdXJjZU1hcENvbnN1bWVyID0gQmFzaWNTb3VyY2VNYXBDb25zdW1lcjtcblxuLyoqXG4gKiBBbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXIgaW5zdGFuY2UgcmVwcmVzZW50cyBhIHBhcnNlZCBzb3VyY2UgbWFwIHdoaWNoXG4gKiB3ZSBjYW4gcXVlcnkgZm9yIGluZm9ybWF0aW9uLiBJdCBkaWZmZXJzIGZyb20gQmFzaWNTb3VyY2VNYXBDb25zdW1lciBpblxuICogdGhhdCBpdCB0YWtlcyBcImluZGV4ZWRcIiBzb3VyY2UgbWFwcyAoaS5lLiBvbmVzIHdpdGggYSBcInNlY3Rpb25zXCIgZmllbGQpIGFzXG4gKiBpbnB1dC5cbiAqXG4gKiBUaGUgb25seSBwYXJhbWV0ZXIgaXMgYSByYXcgc291cmNlIG1hcCAoZWl0aGVyIGFzIGEgSlNPTiBzdHJpbmcsIG9yIGFscmVhZHlcbiAqIHBhcnNlZCB0byBhbiBvYmplY3QpLiBBY2NvcmRpbmcgdG8gdGhlIHNwZWMgZm9yIGluZGV4ZWQgc291cmNlIG1hcHMsIHRoZXlcbiAqIGhhdmUgdGhlIGZvbGxvd2luZyBhdHRyaWJ1dGVzOlxuICpcbiAqICAgLSB2ZXJzaW9uOiBXaGljaCB2ZXJzaW9uIG9mIHRoZSBzb3VyY2UgbWFwIHNwZWMgdGhpcyBtYXAgaXMgZm9sbG93aW5nLlxuICogICAtIGZpbGU6IE9wdGlvbmFsLiBUaGUgZ2VuZXJhdGVkIGZpbGUgdGhpcyBzb3VyY2UgbWFwIGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAqICAgLSBzZWN0aW9uczogQSBsaXN0IG9mIHNlY3Rpb24gZGVmaW5pdGlvbnMuXG4gKlxuICogRWFjaCB2YWx1ZSB1bmRlciB0aGUgXCJzZWN0aW9uc1wiIGZpZWxkIGhhcyB0d28gZmllbGRzOlxuICogICAtIG9mZnNldDogVGhlIG9mZnNldCBpbnRvIHRoZSBvcmlnaW5hbCBzcGVjaWZpZWQgYXQgd2hpY2ggdGhpcyBzZWN0aW9uXG4gKiAgICAgICBiZWdpbnMgdG8gYXBwbHksIGRlZmluZWQgYXMgYW4gb2JqZWN0IHdpdGggYSBcImxpbmVcIiBhbmQgXCJjb2x1bW5cIlxuICogICAgICAgZmllbGQuXG4gKiAgIC0gbWFwOiBBIHNvdXJjZSBtYXAgZGVmaW5pdGlvbi4gVGhpcyBzb3VyY2UgbWFwIGNvdWxkIGFsc28gYmUgaW5kZXhlZCxcbiAqICAgICAgIGJ1dCBkb2Vzbid0IGhhdmUgdG8gYmUuXG4gKlxuICogSW5zdGVhZCBvZiB0aGUgXCJtYXBcIiBmaWVsZCwgaXQncyBhbHNvIHBvc3NpYmxlIHRvIGhhdmUgYSBcInVybFwiIGZpZWxkXG4gKiBzcGVjaWZ5aW5nIGEgVVJMIHRvIHJldHJpZXZlIGEgc291cmNlIG1hcCBmcm9tLCBidXQgdGhhdCdzIGN1cnJlbnRseVxuICogdW5zdXBwb3J0ZWQuXG4gKlxuICogSGVyZSdzIGFuIGV4YW1wbGUgc291cmNlIG1hcCwgdGFrZW4gZnJvbSB0aGUgc291cmNlIG1hcCBzcGVjWzBdLCBidXRcbiAqIG1vZGlmaWVkIHRvIG9taXQgYSBzZWN0aW9uIHdoaWNoIHVzZXMgdGhlIFwidXJsXCIgZmllbGQuXG4gKlxuICogIHtcbiAqICAgIHZlcnNpb24gOiAzLFxuICogICAgZmlsZTogXCJhcHAuanNcIixcbiAqICAgIHNlY3Rpb25zOiBbe1xuICogICAgICBvZmZzZXQ6IHtsaW5lOjEwMCwgY29sdW1uOjEwfSxcbiAqICAgICAgbWFwOiB7XG4gKiAgICAgICAgdmVyc2lvbiA6IDMsXG4gKiAgICAgICAgZmlsZTogXCJzZWN0aW9uLmpzXCIsXG4gKiAgICAgICAgc291cmNlczogW1wiZm9vLmpzXCIsIFwiYmFyLmpzXCJdLFxuICogICAgICAgIG5hbWVzOiBbXCJzcmNcIiwgXCJtYXBzXCIsIFwiYXJlXCIsIFwiZnVuXCJdLFxuICogICAgICAgIG1hcHBpbmdzOiBcIkFBQUEsRTs7QUJDREU7XCJcbiAqICAgICAgfVxuICogICAgfV0sXG4gKiAgfVxuICpcbiAqIFswXTogaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xVTFSR0FlaFF3UnlwVVRvdkYxS1JscGlPRnplMGItXzJnYzZmQUgwS1kway9lZGl0I2hlYWRpbmc9aC41MzVlczN4ZXByZ3RcbiAqL1xuZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyKGFTb3VyY2VNYXApIHtcbiAgdmFyIHNvdXJjZU1hcCA9IGFTb3VyY2VNYXA7XG4gIGlmICh0eXBlb2YgYVNvdXJjZU1hcCA9PT0gJ3N0cmluZycpIHtcbiAgICBzb3VyY2VNYXAgPSBKU09OLnBhcnNlKGFTb3VyY2VNYXAucmVwbGFjZSgvXlxcKVxcXVxcfScvLCAnJykpO1xuICB9XG5cbiAgdmFyIHZlcnNpb24gPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICd2ZXJzaW9uJyk7XG4gIHZhciBzZWN0aW9ucyA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3NlY3Rpb25zJyk7XG5cbiAgaWYgKHZlcnNpb24gIT0gdGhpcy5fdmVyc2lvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgdmVyc2lvbjogJyArIHZlcnNpb24pO1xuICB9XG5cbiAgdGhpcy5fc291cmNlcyA9IG5ldyBBcnJheVNldCgpO1xuICB0aGlzLl9uYW1lcyA9IG5ldyBBcnJheVNldCgpO1xuXG4gIHZhciBsYXN0T2Zmc2V0ID0ge1xuICAgIGxpbmU6IC0xLFxuICAgIGNvbHVtbjogMFxuICB9O1xuICB0aGlzLl9zZWN0aW9ucyA9IHNlY3Rpb25zLm1hcChmdW5jdGlvbiAocykge1xuICAgIGlmIChzLnVybCkge1xuICAgICAgLy8gVGhlIHVybCBmaWVsZCB3aWxsIHJlcXVpcmUgc3VwcG9ydCBmb3IgYXN5bmNocm9uaWNpdHkuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvc291cmNlLW1hcC9pc3N1ZXMvMTZcbiAgICAgIHRocm93IG5ldyBFcnJvcignU3VwcG9ydCBmb3IgdXJsIGZpZWxkIGluIHNlY3Rpb25zIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgICB9XG4gICAgdmFyIG9mZnNldCA9IHV0aWwuZ2V0QXJnKHMsICdvZmZzZXQnKTtcbiAgICB2YXIgb2Zmc2V0TGluZSA9IHV0aWwuZ2V0QXJnKG9mZnNldCwgJ2xpbmUnKTtcbiAgICB2YXIgb2Zmc2V0Q29sdW1uID0gdXRpbC5nZXRBcmcob2Zmc2V0LCAnY29sdW1uJyk7XG5cbiAgICBpZiAob2Zmc2V0TGluZSA8IGxhc3RPZmZzZXQubGluZSB8fFxuICAgICAgICAob2Zmc2V0TGluZSA9PT0gbGFzdE9mZnNldC5saW5lICYmIG9mZnNldENvbHVtbiA8IGxhc3RPZmZzZXQuY29sdW1uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZWN0aW9uIG9mZnNldHMgbXVzdCBiZSBvcmRlcmVkIGFuZCBub24tb3ZlcmxhcHBpbmcuJyk7XG4gICAgfVxuICAgIGxhc3RPZmZzZXQgPSBvZmZzZXQ7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZ2VuZXJhdGVkT2Zmc2V0OiB7XG4gICAgICAgIC8vIFRoZSBvZmZzZXQgZmllbGRzIGFyZSAwLWJhc2VkLCBidXQgd2UgdXNlIDEtYmFzZWQgaW5kaWNlcyB3aGVuXG4gICAgICAgIC8vIGVuY29kaW5nL2RlY29kaW5nIGZyb20gVkxRLlxuICAgICAgICBnZW5lcmF0ZWRMaW5lOiBvZmZzZXRMaW5lICsgMSxcbiAgICAgICAgZ2VuZXJhdGVkQ29sdW1uOiBvZmZzZXRDb2x1bW4gKyAxXG4gICAgICB9LFxuICAgICAgY29uc3VtZXI6IG5ldyBTb3VyY2VNYXBDb25zdW1lcih1dGlsLmdldEFyZyhzLCAnbWFwJykpXG4gICAgfVxuICB9KTtcbn1cblxuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlKTtcbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTb3VyY2VNYXBDb25zdW1lcjtcblxuLyoqXG4gKiBUaGUgdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcHBpbmcgc3BlYyB0aGF0IHdlIGFyZSBjb25zdW1pbmcuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3ZlcnNpb24gPSAzO1xuXG4vKipcbiAqIFRoZSBsaXN0IG9mIG9yaWdpbmFsIHNvdXJjZXMuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLCAnc291cmNlcycsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNvdXJjZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3NlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMuX3NlY3Rpb25zW2ldLmNvbnN1bWVyLnNvdXJjZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgc291cmNlcy5wdXNoKHRoaXMuX3NlY3Rpb25zW2ldLmNvbnN1bWVyLnNvdXJjZXNbal0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc291cmNlcztcbiAgfVxufSk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb3JpZ2luYWwgc291cmNlLCBsaW5lLCBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgZ2VuZXJhdGVkXG4gKiBzb3VyY2UncyBsaW5lIGFuZCBjb2x1bW4gcG9zaXRpb25zIHByb3ZpZGVkLiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3RcbiAqIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS5cbiAqXG4gKiBhbmQgYW4gb2JqZWN0IGlzIHJldHVybmVkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBzb3VyY2U6IFRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZSwgb3IgbnVsbC5cbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSwgb3IgbnVsbC5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UsIG9yIG51bGwuXG4gKiAgIC0gbmFtZTogVGhlIG9yaWdpbmFsIGlkZW50aWZpZXIsIG9yIG51bGwuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUub3JpZ2luYWxQb3NpdGlvbkZvciA9XG4gIGZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcl9vcmlnaW5hbFBvc2l0aW9uRm9yKGFBcmdzKSB7XG4gICAgdmFyIG5lZWRsZSA9IHtcbiAgICAgIGdlbmVyYXRlZExpbmU6IHV0aWwuZ2V0QXJnKGFBcmdzLCAnbGluZScpLFxuICAgICAgZ2VuZXJhdGVkQ29sdW1uOiB1dGlsLmdldEFyZyhhQXJncywgJ2NvbHVtbicpXG4gICAgfTtcblxuICAgIC8vIEZpbmQgdGhlIHNlY3Rpb24gY29udGFpbmluZyB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9uIHdlJ3JlIHRyeWluZyB0byBtYXBcbiAgICAvLyB0byBhbiBvcmlnaW5hbCBwb3NpdGlvbi5cbiAgICB2YXIgc2VjdGlvbkluZGV4ID0gYmluYXJ5U2VhcmNoLnNlYXJjaChuZWVkbGUsIHRoaXMuX3NlY3Rpb25zLFxuICAgICAgZnVuY3Rpb24obmVlZGxlLCBzZWN0aW9uKSB7XG4gICAgICAgIHZhciBjbXAgPSBuZWVkbGUuZ2VuZXJhdGVkTGluZSAtIHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmU7XG4gICAgICAgIGlmIChjbXApIHtcbiAgICAgICAgICByZXR1cm4gY21wO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChuZWVkbGUuZ2VuZXJhdGVkQ29sdW1uIC1cbiAgICAgICAgICAgICAgICBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgfSk7XG4gICAgdmFyIHNlY3Rpb24gPSB0aGlzLl9zZWN0aW9uc1tzZWN0aW9uSW5kZXhdO1xuXG4gICAgaWYgKCFzZWN0aW9uKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzb3VyY2U6IG51bGwsXG4gICAgICAgIGxpbmU6IG51bGwsXG4gICAgICAgIGNvbHVtbjogbnVsbCxcbiAgICAgICAgbmFtZTogbnVsbFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VjdGlvbi5jb25zdW1lci5vcmlnaW5hbFBvc2l0aW9uRm9yKHtcbiAgICAgIGxpbmU6IG5lZWRsZS5nZW5lcmF0ZWRMaW5lIC1cbiAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgLSAxKSxcbiAgICAgIGNvbHVtbjogbmVlZGxlLmdlbmVyYXRlZENvbHVtbiAtXG4gICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lID09PSBuZWVkbGUuZ2VuZXJhdGVkTGluZVxuICAgICAgICAgPyBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRDb2x1bW4gLSAxXG4gICAgICAgICA6IDApLFxuICAgICAgYmlhczogYUFyZ3MuYmlhc1xuICAgIH0pO1xuICB9O1xuXG4vKipcbiAqIFJldHVybiB0cnVlIGlmIHdlIGhhdmUgdGhlIHNvdXJjZSBjb250ZW50IGZvciBldmVyeSBzb3VyY2UgaW4gdGhlIHNvdXJjZVxuICogbWFwLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuaGFzQ29udGVudHNPZkFsbFNvdXJjZXMgPVxuICBmdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXJfaGFzQ29udGVudHNPZkFsbFNvdXJjZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlY3Rpb25zLmV2ZXJ5KGZ1bmN0aW9uIChzKSB7XG4gICAgICByZXR1cm4gcy5jb25zdW1lci5oYXNDb250ZW50c09mQWxsU291cmNlcygpO1xuICAgIH0pO1xuICB9O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG9yaWdpbmFsIHNvdXJjZSBjb250ZW50LiBUaGUgb25seSBhcmd1bWVudCBpcyB0aGUgdXJsIG9mIHRoZVxuICogb3JpZ2luYWwgc291cmNlIGZpbGUuIFJldHVybnMgbnVsbCBpZiBubyBvcmlnaW5hbCBzb3VyY2UgY29udGVudCBpc1xuICogYXZhaWxhYmxlLlxuICovXG5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLnNvdXJjZUNvbnRlbnRGb3IgPVxuICBmdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXJfc291cmNlQ29udGVudEZvcihhU291cmNlLCBudWxsT25NaXNzaW5nKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9zZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNlY3Rpb24gPSB0aGlzLl9zZWN0aW9uc1tpXTtcblxuICAgICAgdmFyIGNvbnRlbnQgPSBzZWN0aW9uLmNvbnN1bWVyLnNvdXJjZUNvbnRlbnRGb3IoYVNvdXJjZSwgdHJ1ZSk7XG4gICAgICBpZiAoY29udGVudCkge1xuICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG51bGxPbk1pc3NpbmcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignXCInICsgYVNvdXJjZSArICdcIiBpcyBub3QgaW4gdGhlIFNvdXJjZU1hcC4nKTtcbiAgICB9XG4gIH07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZ2VuZXJhdGVkIGxpbmUgYW5kIGNvbHVtbiBpbmZvcm1hdGlvbiBmb3IgdGhlIG9yaWdpbmFsIHNvdXJjZSxcbiAqIGxpbmUsIGFuZCBjb2x1bW4gcG9zaXRpb25zIHByb3ZpZGVkLiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3Qgd2l0aFxuICogdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBzb3VyY2U6IFRoZSBmaWxlbmFtZSBvZiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAqXG4gKiBhbmQgYW4gb2JqZWN0IGlzIHJldHVybmVkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC5cbiAqL1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5nZW5lcmF0ZWRQb3NpdGlvbkZvciA9XG4gIGZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcl9nZW5lcmF0ZWRQb3NpdGlvbkZvcihhQXJncykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzZWN0aW9uID0gdGhpcy5fc2VjdGlvbnNbaV07XG5cbiAgICAgIC8vIE9ubHkgY29uc2lkZXIgdGhpcyBzZWN0aW9uIGlmIHRoZSByZXF1ZXN0ZWQgc291cmNlIGlzIGluIHRoZSBsaXN0IG9mXG4gICAgICAvLyBzb3VyY2VzIG9mIHRoZSBjb25zdW1lci5cbiAgICAgIGlmIChzZWN0aW9uLmNvbnN1bWVyLnNvdXJjZXMuaW5kZXhPZih1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZScpKSA9PT0gLTEpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgZ2VuZXJhdGVkUG9zaXRpb24gPSBzZWN0aW9uLmNvbnN1bWVyLmdlbmVyYXRlZFBvc2l0aW9uRm9yKGFBcmdzKTtcbiAgICAgIGlmIChnZW5lcmF0ZWRQb3NpdGlvbikge1xuICAgICAgICB2YXIgcmV0ID0ge1xuICAgICAgICAgIGxpbmU6IGdlbmVyYXRlZFBvc2l0aW9uLmxpbmUgK1xuICAgICAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgLSAxKSxcbiAgICAgICAgICBjb2x1bW46IGdlbmVyYXRlZFBvc2l0aW9uLmNvbHVtbiArXG4gICAgICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSA9PT0gZ2VuZXJhdGVkUG9zaXRpb24ubGluZVxuICAgICAgICAgICAgID8gc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkQ29sdW1uIC0gMVxuICAgICAgICAgICAgIDogMClcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbGluZTogbnVsbCxcbiAgICAgIGNvbHVtbjogbnVsbFxuICAgIH07XG4gIH07XG5cbi8qKlxuICogUGFyc2UgdGhlIG1hcHBpbmdzIGluIGEgc3RyaW5nIGluIHRvIGEgZGF0YSBzdHJ1Y3R1cmUgd2hpY2ggd2UgY2FuIGVhc2lseVxuICogcXVlcnkgKHRoZSBvcmRlcmVkIGFycmF5cyBpbiB0aGUgYHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5nc2AgYW5kXG4gKiBgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3NgIHByb3BlcnRpZXMpLlxuICovXG5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9wYXJzZU1hcHBpbmdzID1cbiAgZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyX3BhcnNlTWFwcGluZ3MoYVN0ciwgYVNvdXJjZVJvb3QpIHtcbiAgICB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3MgPSBbXTtcbiAgICB0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzZWN0aW9uID0gdGhpcy5fc2VjdGlvbnNbaV07XG4gICAgICB2YXIgc2VjdGlvbk1hcHBpbmdzID0gc2VjdGlvbi5jb25zdW1lci5fZ2VuZXJhdGVkTWFwcGluZ3M7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlY3Rpb25NYXBwaW5ncy5sZW5ndGg7IGorKykge1xuICAgICAgICB2YXIgbWFwcGluZyA9IHNlY3Rpb25NYXBwaW5nc1tqXTtcblxuICAgICAgICB2YXIgc291cmNlID0gc2VjdGlvbi5jb25zdW1lci5fc291cmNlcy5hdChtYXBwaW5nLnNvdXJjZSk7XG4gICAgICAgIGlmIChzZWN0aW9uLmNvbnN1bWVyLnNvdXJjZVJvb3QgIT09IG51bGwpIHtcbiAgICAgICAgICBzb3VyY2UgPSB1dGlsLmpvaW4oc2VjdGlvbi5jb25zdW1lci5zb3VyY2VSb290LCBzb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NvdXJjZXMuYWRkKHNvdXJjZSk7XG4gICAgICAgIHNvdXJjZSA9IHRoaXMuX3NvdXJjZXMuaW5kZXhPZihzb3VyY2UpO1xuXG4gICAgICAgIHZhciBuYW1lID0gc2VjdGlvbi5jb25zdW1lci5fbmFtZXMuYXQobWFwcGluZy5uYW1lKTtcbiAgICAgICAgdGhpcy5fbmFtZXMuYWRkKG5hbWUpO1xuICAgICAgICBuYW1lID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcblxuICAgICAgICAvLyBUaGUgbWFwcGluZ3MgY29taW5nIGZyb20gdGhlIGNvbnN1bWVyIGZvciB0aGUgc2VjdGlvbiBoYXZlXG4gICAgICAgIC8vIGdlbmVyYXRlZCBwb3NpdGlvbnMgcmVsYXRpdmUgdG8gdGhlIHN0YXJ0IG9mIHRoZSBzZWN0aW9uLCBzbyB3ZVxuICAgICAgICAvLyBuZWVkIHRvIG9mZnNldCB0aGVtIHRvIGJlIHJlbGF0aXZlIHRvIHRoZSBzdGFydCBvZiB0aGUgY29uY2F0ZW5hdGVkXG4gICAgICAgIC8vIGdlbmVyYXRlZCBmaWxlLlxuICAgICAgICB2YXIgYWRqdXN0ZWRNYXBwaW5nID0ge1xuICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgIGdlbmVyYXRlZExpbmU6IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSArXG4gICAgICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSAtIDEpLFxuICAgICAgICAgIGdlbmVyYXRlZENvbHVtbjogbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gK1xuICAgICAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgPT09IG1hcHBpbmcuZ2VuZXJhdGVkTGluZVxuICAgICAgICAgICAgPyBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRDb2x1bW4gLSAxXG4gICAgICAgICAgICA6IDApLFxuICAgICAgICAgIG9yaWdpbmFsTGluZTogbWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgICAgb3JpZ2luYWxDb2x1bW46IG1hcHBpbmcub3JpZ2luYWxDb2x1bW4sXG4gICAgICAgICAgbmFtZTogbmFtZVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncy5wdXNoKGFkanVzdGVkTWFwcGluZyk7XG4gICAgICAgIGlmICh0eXBlb2YgYWRqdXN0ZWRNYXBwaW5nLm9yaWdpbmFsTGluZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICB0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncy5wdXNoKGFkanVzdGVkTWFwcGluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBxdWlja1NvcnQodGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzLCB1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkKTtcbiAgICBxdWlja1NvcnQodGhpcy5fX29yaWdpbmFsTWFwcGluZ3MsIHV0aWwuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMpO1xuICB9O1xuXG5leHBvcnRzLkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lciA9IEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC9saWIvc291cmNlLW1hcC1jb25zdW1lci5qcyIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIFNvdXJjZU1hcEdlbmVyYXRvciA9IHJlcXVpcmUoJy4vc291cmNlLW1hcC1nZW5lcmF0b3InKS5Tb3VyY2VNYXBHZW5lcmF0b3I7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG4vLyBNYXRjaGVzIGEgV2luZG93cy1zdHlsZSBgXFxyXFxuYCBuZXdsaW5lIG9yIGEgYFxcbmAgbmV3bGluZSB1c2VkIGJ5IGFsbCBvdGhlclxuLy8gb3BlcmF0aW5nIHN5c3RlbXMgdGhlc2UgZGF5cyAoY2FwdHVyaW5nIHRoZSByZXN1bHQpLlxudmFyIFJFR0VYX05FV0xJTkUgPSAvKFxccj9cXG4pLztcblxuLy8gTmV3bGluZSBjaGFyYWN0ZXIgY29kZSBmb3IgY2hhckNvZGVBdCgpIGNvbXBhcmlzb25zXG52YXIgTkVXTElORV9DT0RFID0gMTA7XG5cbi8vIFByaXZhdGUgc3ltYm9sIGZvciBpZGVudGlmeWluZyBgU291cmNlTm9kZWBzIHdoZW4gbXVsdGlwbGUgdmVyc2lvbnMgb2Zcbi8vIHRoZSBzb3VyY2UtbWFwIGxpYnJhcnkgYXJlIGxvYWRlZC4gVGhpcyBNVVNUIE5PVCBDSEFOR0UgYWNyb3NzXG4vLyB2ZXJzaW9ucyFcbnZhciBpc1NvdXJjZU5vZGUgPSBcIiQkJGlzU291cmNlTm9kZSQkJFwiO1xuXG4vKipcbiAqIFNvdXJjZU5vZGVzIHByb3ZpZGUgYSB3YXkgdG8gYWJzdHJhY3Qgb3ZlciBpbnRlcnBvbGF0aW5nL2NvbmNhdGVuYXRpbmdcbiAqIHNuaXBwZXRzIG9mIGdlbmVyYXRlZCBKYXZhU2NyaXB0IHNvdXJjZSBjb2RlIHdoaWxlIG1haW50YWluaW5nIHRoZSBsaW5lIGFuZFxuICogY29sdW1uIGluZm9ybWF0aW9uIGFzc29jaWF0ZWQgd2l0aCB0aGUgb3JpZ2luYWwgc291cmNlIGNvZGUuXG4gKlxuICogQHBhcmFtIGFMaW5lIFRoZSBvcmlnaW5hbCBsaW5lIG51bWJlci5cbiAqIEBwYXJhbSBhQ29sdW1uIFRoZSBvcmlnaW5hbCBjb2x1bW4gbnVtYmVyLlxuICogQHBhcmFtIGFTb3VyY2UgVGhlIG9yaWdpbmFsIHNvdXJjZSdzIGZpbGVuYW1lLlxuICogQHBhcmFtIGFDaHVua3MgT3B0aW9uYWwuIEFuIGFycmF5IG9mIHN0cmluZ3Mgd2hpY2ggYXJlIHNuaXBwZXRzIG9mXG4gKiAgICAgICAgZ2VuZXJhdGVkIEpTLCBvciBvdGhlciBTb3VyY2VOb2Rlcy5cbiAqIEBwYXJhbSBhTmFtZSBUaGUgb3JpZ2luYWwgaWRlbnRpZmllci5cbiAqL1xuZnVuY3Rpb24gU291cmNlTm9kZShhTGluZSwgYUNvbHVtbiwgYVNvdXJjZSwgYUNodW5rcywgYU5hbWUpIHtcbiAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICB0aGlzLnNvdXJjZUNvbnRlbnRzID0ge307XG4gIHRoaXMubGluZSA9IGFMaW5lID09IG51bGwgPyBudWxsIDogYUxpbmU7XG4gIHRoaXMuY29sdW1uID0gYUNvbHVtbiA9PSBudWxsID8gbnVsbCA6IGFDb2x1bW47XG4gIHRoaXMuc291cmNlID0gYVNvdXJjZSA9PSBudWxsID8gbnVsbCA6IGFTb3VyY2U7XG4gIHRoaXMubmFtZSA9IGFOYW1lID09IG51bGwgPyBudWxsIDogYU5hbWU7XG4gIHRoaXNbaXNTb3VyY2VOb2RlXSA9IHRydWU7XG4gIGlmIChhQ2h1bmtzICE9IG51bGwpIHRoaXMuYWRkKGFDaHVua3MpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBTb3VyY2VOb2RlIGZyb20gZ2VuZXJhdGVkIGNvZGUgYW5kIGEgU291cmNlTWFwQ29uc3VtZXIuXG4gKlxuICogQHBhcmFtIGFHZW5lcmF0ZWRDb2RlIFRoZSBnZW5lcmF0ZWQgY29kZVxuICogQHBhcmFtIGFTb3VyY2VNYXBDb25zdW1lciBUaGUgU291cmNlTWFwIGZvciB0aGUgZ2VuZXJhdGVkIGNvZGVcbiAqIEBwYXJhbSBhUmVsYXRpdmVQYXRoIE9wdGlvbmFsLiBUaGUgcGF0aCB0aGF0IHJlbGF0aXZlIHNvdXJjZXMgaW4gdGhlXG4gKiAgICAgICAgU291cmNlTWFwQ29uc3VtZXIgc2hvdWxkIGJlIHJlbGF0aXZlIHRvLlxuICovXG5Tb3VyY2VOb2RlLmZyb21TdHJpbmdXaXRoU291cmNlTWFwID1cbiAgZnVuY3Rpb24gU291cmNlTm9kZV9mcm9tU3RyaW5nV2l0aFNvdXJjZU1hcChhR2VuZXJhdGVkQ29kZSwgYVNvdXJjZU1hcENvbnN1bWVyLCBhUmVsYXRpdmVQYXRoKSB7XG4gICAgLy8gVGhlIFNvdXJjZU5vZGUgd2Ugd2FudCB0byBmaWxsIHdpdGggdGhlIGdlbmVyYXRlZCBjb2RlXG4gICAgLy8gYW5kIHRoZSBTb3VyY2VNYXBcbiAgICB2YXIgbm9kZSA9IG5ldyBTb3VyY2VOb2RlKCk7XG5cbiAgICAvLyBBbGwgZXZlbiBpbmRpY2VzIG9mIHRoaXMgYXJyYXkgYXJlIG9uZSBsaW5lIG9mIHRoZSBnZW5lcmF0ZWQgY29kZSxcbiAgICAvLyB3aGlsZSBhbGwgb2RkIGluZGljZXMgYXJlIHRoZSBuZXdsaW5lcyBiZXR3ZWVuIHR3byBhZGphY2VudCBsaW5lc1xuICAgIC8vIChzaW5jZSBgUkVHRVhfTkVXTElORWAgY2FwdHVyZXMgaXRzIG1hdGNoKS5cbiAgICAvLyBQcm9jZXNzZWQgZnJhZ21lbnRzIGFyZSByZW1vdmVkIGZyb20gdGhpcyBhcnJheSwgYnkgY2FsbGluZyBgc2hpZnROZXh0TGluZWAuXG4gICAgdmFyIHJlbWFpbmluZ0xpbmVzID0gYUdlbmVyYXRlZENvZGUuc3BsaXQoUkVHRVhfTkVXTElORSk7XG4gICAgdmFyIHNoaWZ0TmV4dExpbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsaW5lQ29udGVudHMgPSByZW1haW5pbmdMaW5lcy5zaGlmdCgpO1xuICAgICAgLy8gVGhlIGxhc3QgbGluZSBvZiBhIGZpbGUgbWlnaHQgbm90IGhhdmUgYSBuZXdsaW5lLlxuICAgICAgdmFyIG5ld0xpbmUgPSByZW1haW5pbmdMaW5lcy5zaGlmdCgpIHx8IFwiXCI7XG4gICAgICByZXR1cm4gbGluZUNvbnRlbnRzICsgbmV3TGluZTtcbiAgICB9O1xuXG4gICAgLy8gV2UgbmVlZCB0byByZW1lbWJlciB0aGUgcG9zaXRpb24gb2YgXCJyZW1haW5pbmdMaW5lc1wiXG4gICAgdmFyIGxhc3RHZW5lcmF0ZWRMaW5lID0gMSwgbGFzdEdlbmVyYXRlZENvbHVtbiA9IDA7XG5cbiAgICAvLyBUaGUgZ2VuZXJhdGUgU291cmNlTm9kZXMgd2UgbmVlZCBhIGNvZGUgcmFuZ2UuXG4gICAgLy8gVG8gZXh0cmFjdCBpdCBjdXJyZW50IGFuZCBsYXN0IG1hcHBpbmcgaXMgdXNlZC5cbiAgICAvLyBIZXJlIHdlIHN0b3JlIHRoZSBsYXN0IG1hcHBpbmcuXG4gICAgdmFyIGxhc3RNYXBwaW5nID0gbnVsbDtcblxuICAgIGFTb3VyY2VNYXBDb25zdW1lci5lYWNoTWFwcGluZyhmdW5jdGlvbiAobWFwcGluZykge1xuICAgICAgaWYgKGxhc3RNYXBwaW5nICE9PSBudWxsKSB7XG4gICAgICAgIC8vIFdlIGFkZCB0aGUgY29kZSBmcm9tIFwibGFzdE1hcHBpbmdcIiB0byBcIm1hcHBpbmdcIjpcbiAgICAgICAgLy8gRmlyc3QgY2hlY2sgaWYgdGhlcmUgaXMgYSBuZXcgbGluZSBpbiBiZXR3ZWVuLlxuICAgICAgICBpZiAobGFzdEdlbmVyYXRlZExpbmUgPCBtYXBwaW5nLmdlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgICAvLyBBc3NvY2lhdGUgZmlyc3QgbGluZSB3aXRoIFwibGFzdE1hcHBpbmdcIlxuICAgICAgICAgIGFkZE1hcHBpbmdXaXRoQ29kZShsYXN0TWFwcGluZywgc2hpZnROZXh0TGluZSgpKTtcbiAgICAgICAgICBsYXN0R2VuZXJhdGVkTGluZSsrO1xuICAgICAgICAgIGxhc3RHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgICAgICAgIC8vIFRoZSByZW1haW5pbmcgY29kZSBpcyBhZGRlZCB3aXRob3V0IG1hcHBpbmdcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBUaGVyZSBpcyBubyBuZXcgbGluZSBpbiBiZXR3ZWVuLlxuICAgICAgICAgIC8vIEFzc29jaWF0ZSB0aGUgY29kZSBiZXR3ZWVuIFwibGFzdEdlbmVyYXRlZENvbHVtblwiIGFuZFxuICAgICAgICAgIC8vIFwibWFwcGluZy5nZW5lcmF0ZWRDb2x1bW5cIiB3aXRoIFwibGFzdE1hcHBpbmdcIlxuICAgICAgICAgIHZhciBuZXh0TGluZSA9IHJlbWFpbmluZ0xpbmVzWzBdO1xuICAgICAgICAgIHZhciBjb2RlID0gbmV4dExpbmUuc3Vic3RyKDAsIG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uKTtcbiAgICAgICAgICByZW1haW5pbmdMaW5lc1swXSA9IG5leHRMaW5lLnN1YnN0cihtYXBwaW5nLmdlbmVyYXRlZENvbHVtbiAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbik7XG4gICAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbiA9IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uO1xuICAgICAgICAgIGFkZE1hcHBpbmdXaXRoQ29kZShsYXN0TWFwcGluZywgY29kZSk7XG4gICAgICAgICAgLy8gTm8gbW9yZSByZW1haW5pbmcgY29kZSwgY29udGludWVcbiAgICAgICAgICBsYXN0TWFwcGluZyA9IG1hcHBpbmc7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBXZSBhZGQgdGhlIGdlbmVyYXRlZCBjb2RlIHVudGlsIHRoZSBmaXJzdCBtYXBwaW5nXG4gICAgICAvLyB0byB0aGUgU291cmNlTm9kZSB3aXRob3V0IGFueSBtYXBwaW5nLlxuICAgICAgLy8gRWFjaCBsaW5lIGlzIGFkZGVkIGFzIHNlcGFyYXRlIHN0cmluZy5cbiAgICAgIHdoaWxlIChsYXN0R2VuZXJhdGVkTGluZSA8IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSkge1xuICAgICAgICBub2RlLmFkZChzaGlmdE5leHRMaW5lKCkpO1xuICAgICAgICBsYXN0R2VuZXJhdGVkTGluZSsrO1xuICAgICAgfVxuICAgICAgaWYgKGxhc3RHZW5lcmF0ZWRDb2x1bW4gPCBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbikge1xuICAgICAgICB2YXIgbmV4dExpbmUgPSByZW1haW5pbmdMaW5lc1swXTtcbiAgICAgICAgbm9kZS5hZGQobmV4dExpbmUuc3Vic3RyKDAsIG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uKSk7XG4gICAgICAgIHJlbWFpbmluZ0xpbmVzWzBdID0gbmV4dExpbmUuc3Vic3RyKG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uKTtcbiAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbiA9IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uO1xuICAgICAgfVxuICAgICAgbGFzdE1hcHBpbmcgPSBtYXBwaW5nO1xuICAgIH0sIHRoaXMpO1xuICAgIC8vIFdlIGhhdmUgcHJvY2Vzc2VkIGFsbCBtYXBwaW5ncy5cbiAgICBpZiAocmVtYWluaW5nTGluZXMubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKGxhc3RNYXBwaW5nKSB7XG4gICAgICAgIC8vIEFzc29jaWF0ZSB0aGUgcmVtYWluaW5nIGNvZGUgaW4gdGhlIGN1cnJlbnQgbGluZSB3aXRoIFwibGFzdE1hcHBpbmdcIlxuICAgICAgICBhZGRNYXBwaW5nV2l0aENvZGUobGFzdE1hcHBpbmcsIHNoaWZ0TmV4dExpbmUoKSk7XG4gICAgICB9XG4gICAgICAvLyBhbmQgYWRkIHRoZSByZW1haW5pbmcgbGluZXMgd2l0aG91dCBhbnkgbWFwcGluZ1xuICAgICAgbm9kZS5hZGQocmVtYWluaW5nTGluZXMuam9pbihcIlwiKSk7XG4gICAgfVxuXG4gICAgLy8gQ29weSBzb3VyY2VzQ29udGVudCBpbnRvIFNvdXJjZU5vZGVcbiAgICBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2VGaWxlKSB7XG4gICAgICB2YXIgY29udGVudCA9IGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VDb250ZW50Rm9yKHNvdXJjZUZpbGUpO1xuICAgICAgaWYgKGNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoYVJlbGF0aXZlUGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgc291cmNlRmlsZSA9IHV0aWwuam9pbihhUmVsYXRpdmVQYXRoLCBzb3VyY2VGaWxlKTtcbiAgICAgICAgfVxuICAgICAgICBub2RlLnNldFNvdXJjZUNvbnRlbnQoc291cmNlRmlsZSwgY29udGVudCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbm9kZTtcblxuICAgIGZ1bmN0aW9uIGFkZE1hcHBpbmdXaXRoQ29kZShtYXBwaW5nLCBjb2RlKSB7XG4gICAgICBpZiAobWFwcGluZyA9PT0gbnVsbCB8fCBtYXBwaW5nLnNvdXJjZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5vZGUuYWRkKGNvZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFSZWxhdGl2ZVBhdGhcbiAgICAgICAgICA/IHV0aWwuam9pbihhUmVsYXRpdmVQYXRoLCBtYXBwaW5nLnNvdXJjZSlcbiAgICAgICAgICA6IG1hcHBpbmcuc291cmNlO1xuICAgICAgICBub2RlLmFkZChuZXcgU291cmNlTm9kZShtYXBwaW5nLm9yaWdpbmFsTGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGluZy5vcmlnaW5hbENvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBwaW5nLm5hbWUpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbi8qKlxuICogQWRkIGEgY2h1bmsgb2YgZ2VuZXJhdGVkIEpTIHRvIHRoaXMgc291cmNlIG5vZGUuXG4gKlxuICogQHBhcmFtIGFDaHVuayBBIHN0cmluZyBzbmlwcGV0IG9mIGdlbmVyYXRlZCBKUyBjb2RlLCBhbm90aGVyIGluc3RhbmNlIG9mXG4gKiAgICAgICAgU291cmNlTm9kZSwgb3IgYW4gYXJyYXkgd2hlcmUgZWFjaCBtZW1iZXIgaXMgb25lIG9mIHRob3NlIHRoaW5ncy5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gU291cmNlTm9kZV9hZGQoYUNodW5rKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFDaHVuaykpIHtcbiAgICBhQ2h1bmsuZm9yRWFjaChmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgIHRoaXMuYWRkKGNodW5rKTtcbiAgICB9LCB0aGlzKTtcbiAgfVxuICBlbHNlIGlmIChhQ2h1bmtbaXNTb3VyY2VOb2RlXSB8fCB0eXBlb2YgYUNodW5rID09PSBcInN0cmluZ1wiKSB7XG4gICAgaWYgKGFDaHVuaykge1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGFDaHVuayk7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICBcIkV4cGVjdGVkIGEgU291cmNlTm9kZSwgc3RyaW5nLCBvciBhbiBhcnJheSBvZiBTb3VyY2VOb2RlcyBhbmQgc3RyaW5ncy4gR290IFwiICsgYUNodW5rXG4gICAgKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQWRkIGEgY2h1bmsgb2YgZ2VuZXJhdGVkIEpTIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhpcyBzb3VyY2Ugbm9kZS5cbiAqXG4gKiBAcGFyYW0gYUNodW5rIEEgc3RyaW5nIHNuaXBwZXQgb2YgZ2VuZXJhdGVkIEpTIGNvZGUsIGFub3RoZXIgaW5zdGFuY2Ugb2ZcbiAqICAgICAgICBTb3VyY2VOb2RlLCBvciBhbiBhcnJheSB3aGVyZSBlYWNoIG1lbWJlciBpcyBvbmUgb2YgdGhvc2UgdGhpbmdzLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS5wcmVwZW5kID0gZnVuY3Rpb24gU291cmNlTm9kZV9wcmVwZW5kKGFDaHVuaykge1xuICBpZiAoQXJyYXkuaXNBcnJheShhQ2h1bmspKSB7XG4gICAgZm9yICh2YXIgaSA9IGFDaHVuay5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHRoaXMucHJlcGVuZChhQ2h1bmtbaV0pO1xuICAgIH1cbiAgfVxuICBlbHNlIGlmIChhQ2h1bmtbaXNTb3VyY2VOb2RlXSB8fCB0eXBlb2YgYUNodW5rID09PSBcInN0cmluZ1wiKSB7XG4gICAgdGhpcy5jaGlsZHJlbi51bnNoaWZ0KGFDaHVuayk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIFwiRXhwZWN0ZWQgYSBTb3VyY2VOb2RlLCBzdHJpbmcsIG9yIGFuIGFycmF5IG9mIFNvdXJjZU5vZGVzIGFuZCBzdHJpbmdzLiBHb3QgXCIgKyBhQ2h1bmtcbiAgICApO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBXYWxrIG92ZXIgdGhlIHRyZWUgb2YgSlMgc25pcHBldHMgaW4gdGhpcyBub2RlIGFuZCBpdHMgY2hpbGRyZW4uIFRoZVxuICogd2Fsa2luZyBmdW5jdGlvbiBpcyBjYWxsZWQgb25jZSBmb3IgZWFjaCBzbmlwcGV0IG9mIEpTIGFuZCBpcyBwYXNzZWQgdGhhdFxuICogc25pcHBldCBhbmQgdGhlIGl0cyBvcmlnaW5hbCBhc3NvY2lhdGVkIHNvdXJjZSdzIGxpbmUvY29sdW1uIGxvY2F0aW9uLlxuICpcbiAqIEBwYXJhbSBhRm4gVGhlIHRyYXZlcnNhbCBmdW5jdGlvbi5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfd2FsayhhRm4pIHtcbiAgdmFyIGNodW5rO1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGNodW5rID0gdGhpcy5jaGlsZHJlbltpXTtcbiAgICBpZiAoY2h1bmtbaXNTb3VyY2VOb2RlXSkge1xuICAgICAgY2h1bmsud2FsayhhRm4pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlmIChjaHVuayAhPT0gJycpIHtcbiAgICAgICAgYUZuKGNodW5rLCB7IHNvdXJjZTogdGhpcy5zb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICBsaW5lOiB0aGlzLmxpbmUsXG4gICAgICAgICAgICAgICAgICAgICBjb2x1bW46IHRoaXMuY29sdW1uLFxuICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBMaWtlIGBTdHJpbmcucHJvdG90eXBlLmpvaW5gIGV4Y2VwdCBmb3IgU291cmNlTm9kZXMuIEluc2VydHMgYGFTdHJgIGJldHdlZW5cbiAqIGVhY2ggb2YgYHRoaXMuY2hpbGRyZW5gLlxuICpcbiAqIEBwYXJhbSBhU2VwIFRoZSBzZXBhcmF0b3IuXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBTb3VyY2VOb2RlX2pvaW4oYVNlcCkge1xuICB2YXIgbmV3Q2hpbGRyZW47XG4gIHZhciBpO1xuICB2YXIgbGVuID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7XG4gIGlmIChsZW4gPiAwKSB7XG4gICAgbmV3Q2hpbGRyZW4gPSBbXTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuLTE7IGkrKykge1xuICAgICAgbmV3Q2hpbGRyZW4ucHVzaCh0aGlzLmNoaWxkcmVuW2ldKTtcbiAgICAgIG5ld0NoaWxkcmVuLnB1c2goYVNlcCk7XG4gICAgfVxuICAgIG5ld0NoaWxkcmVuLnB1c2godGhpcy5jaGlsZHJlbltpXSk7XG4gICAgdGhpcy5jaGlsZHJlbiA9IG5ld0NoaWxkcmVuO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDYWxsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSBvbiB0aGUgdmVyeSByaWdodC1tb3N0IHNvdXJjZSBzbmlwcGV0LiBVc2VmdWxcbiAqIGZvciB0cmltbWluZyB3aGl0ZXNwYWNlIGZyb20gdGhlIGVuZCBvZiBhIHNvdXJjZSBub2RlLCBldGMuXG4gKlxuICogQHBhcmFtIGFQYXR0ZXJuIFRoZSBwYXR0ZXJuIHRvIHJlcGxhY2UuXG4gKiBAcGFyYW0gYVJlcGxhY2VtZW50IFRoZSB0aGluZyB0byByZXBsYWNlIHRoZSBwYXR0ZXJuIHdpdGguXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLnJlcGxhY2VSaWdodCA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfcmVwbGFjZVJpZ2h0KGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpIHtcbiAgdmFyIGxhc3RDaGlsZCA9IHRoaXMuY2hpbGRyZW5bdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxXTtcbiAgaWYgKGxhc3RDaGlsZFtpc1NvdXJjZU5vZGVdKSB7XG4gICAgbGFzdENoaWxkLnJlcGxhY2VSaWdodChhUGF0dGVybiwgYVJlcGxhY2VtZW50KTtcbiAgfVxuICBlbHNlIGlmICh0eXBlb2YgbGFzdENoaWxkID09PSAnc3RyaW5nJykge1xuICAgIHRoaXMuY2hpbGRyZW5bdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxXSA9IGxhc3RDaGlsZC5yZXBsYWNlKGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpO1xuICB9XG4gIGVsc2Uge1xuICAgIHRoaXMuY2hpbGRyZW4ucHVzaCgnJy5yZXBsYWNlKGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IHRoZSBzb3VyY2UgY29udGVudCBmb3IgYSBzb3VyY2UgZmlsZS4gVGhpcyB3aWxsIGJlIGFkZGVkIHRvIHRoZSBTb3VyY2VNYXBHZW5lcmF0b3JcbiAqIGluIHRoZSBzb3VyY2VzQ29udGVudCBmaWVsZC5cbiAqXG4gKiBAcGFyYW0gYVNvdXJjZUZpbGUgVGhlIGZpbGVuYW1lIG9mIHRoZSBzb3VyY2UgZmlsZVxuICogQHBhcmFtIGFTb3VyY2VDb250ZW50IFRoZSBjb250ZW50IG9mIHRoZSBzb3VyY2UgZmlsZVxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS5zZXRTb3VyY2VDb250ZW50ID1cbiAgZnVuY3Rpb24gU291cmNlTm9kZV9zZXRTb3VyY2VDb250ZW50KGFTb3VyY2VGaWxlLCBhU291cmNlQ29udGVudCkge1xuICAgIHRoaXMuc291cmNlQ29udGVudHNbdXRpbC50b1NldFN0cmluZyhhU291cmNlRmlsZSldID0gYVNvdXJjZUNvbnRlbnQ7XG4gIH07XG5cbi8qKlxuICogV2FsayBvdmVyIHRoZSB0cmVlIG9mIFNvdXJjZU5vZGVzLiBUaGUgd2Fsa2luZyBmdW5jdGlvbiBpcyBjYWxsZWQgZm9yIGVhY2hcbiAqIHNvdXJjZSBmaWxlIGNvbnRlbnQgYW5kIGlzIHBhc3NlZCB0aGUgZmlsZW5hbWUgYW5kIHNvdXJjZSBjb250ZW50LlxuICpcbiAqIEBwYXJhbSBhRm4gVGhlIHRyYXZlcnNhbCBmdW5jdGlvbi5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUud2Fsa1NvdXJjZUNvbnRlbnRzID1cbiAgZnVuY3Rpb24gU291cmNlTm9kZV93YWxrU291cmNlQ29udGVudHMoYUZuKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLmNoaWxkcmVuW2ldW2lzU291cmNlTm9kZV0pIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbltpXS53YWxrU291cmNlQ29udGVudHMoYUZuKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc291cmNlcyA9IE9iamVjdC5rZXlzKHRoaXMuc291cmNlQ29udGVudHMpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzb3VyY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBhRm4odXRpbC5mcm9tU2V0U3RyaW5nKHNvdXJjZXNbaV0pLCB0aGlzLnNvdXJjZUNvbnRlbnRzW3NvdXJjZXNbaV1dKTtcbiAgICB9XG4gIH07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBzb3VyY2Ugbm9kZS4gV2Fsa3Mgb3ZlciB0aGUgdHJlZVxuICogYW5kIGNvbmNhdGVuYXRlcyBhbGwgdGhlIHZhcmlvdXMgc25pcHBldHMgdG9nZXRoZXIgdG8gb25lIHN0cmluZy5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX3RvU3RyaW5nKCkge1xuICB2YXIgc3RyID0gXCJcIjtcbiAgdGhpcy53YWxrKGZ1bmN0aW9uIChjaHVuaykge1xuICAgIHN0ciArPSBjaHVuaztcbiAgfSk7XG4gIHJldHVybiBzdHI7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHNvdXJjZSBub2RlIGFsb25nIHdpdGggYSBzb3VyY2VcbiAqIG1hcC5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUudG9TdHJpbmdXaXRoU291cmNlTWFwID0gZnVuY3Rpb24gU291cmNlTm9kZV90b1N0cmluZ1dpdGhTb3VyY2VNYXAoYUFyZ3MpIHtcbiAgdmFyIGdlbmVyYXRlZCA9IHtcbiAgICBjb2RlOiBcIlwiLFxuICAgIGxpbmU6IDEsXG4gICAgY29sdW1uOiAwXG4gIH07XG4gIHZhciBtYXAgPSBuZXcgU291cmNlTWFwR2VuZXJhdG9yKGFBcmdzKTtcbiAgdmFyIHNvdXJjZU1hcHBpbmdBY3RpdmUgPSBmYWxzZTtcbiAgdmFyIGxhc3RPcmlnaW5hbFNvdXJjZSA9IG51bGw7XG4gIHZhciBsYXN0T3JpZ2luYWxMaW5lID0gbnVsbDtcbiAgdmFyIGxhc3RPcmlnaW5hbENvbHVtbiA9IG51bGw7XG4gIHZhciBsYXN0T3JpZ2luYWxOYW1lID0gbnVsbDtcbiAgdGhpcy53YWxrKGZ1bmN0aW9uIChjaHVuaywgb3JpZ2luYWwpIHtcbiAgICBnZW5lcmF0ZWQuY29kZSArPSBjaHVuaztcbiAgICBpZiAob3JpZ2luYWwuc291cmNlICE9PSBudWxsXG4gICAgICAgICYmIG9yaWdpbmFsLmxpbmUgIT09IG51bGxcbiAgICAgICAgJiYgb3JpZ2luYWwuY29sdW1uICE9PSBudWxsKSB7XG4gICAgICBpZihsYXN0T3JpZ2luYWxTb3VyY2UgIT09IG9yaWdpbmFsLnNvdXJjZVxuICAgICAgICAgfHwgbGFzdE9yaWdpbmFsTGluZSAhPT0gb3JpZ2luYWwubGluZVxuICAgICAgICAgfHwgbGFzdE9yaWdpbmFsQ29sdW1uICE9PSBvcmlnaW5hbC5jb2x1bW5cbiAgICAgICAgIHx8IGxhc3RPcmlnaW5hbE5hbWUgIT09IG9yaWdpbmFsLm5hbWUpIHtcbiAgICAgICAgbWFwLmFkZE1hcHBpbmcoe1xuICAgICAgICAgIHNvdXJjZTogb3JpZ2luYWwuc291cmNlLFxuICAgICAgICAgIG9yaWdpbmFsOiB7XG4gICAgICAgICAgICBsaW5lOiBvcmlnaW5hbC5saW5lLFxuICAgICAgICAgICAgY29sdW1uOiBvcmlnaW5hbC5jb2x1bW5cbiAgICAgICAgICB9LFxuICAgICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgICAgbGluZTogZ2VuZXJhdGVkLmxpbmUsXG4gICAgICAgICAgICBjb2x1bW46IGdlbmVyYXRlZC5jb2x1bW5cbiAgICAgICAgICB9LFxuICAgICAgICAgIG5hbWU6IG9yaWdpbmFsLm5hbWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBsYXN0T3JpZ2luYWxTb3VyY2UgPSBvcmlnaW5hbC5zb3VyY2U7XG4gICAgICBsYXN0T3JpZ2luYWxMaW5lID0gb3JpZ2luYWwubGluZTtcbiAgICAgIGxhc3RPcmlnaW5hbENvbHVtbiA9IG9yaWdpbmFsLmNvbHVtbjtcbiAgICAgIGxhc3RPcmlnaW5hbE5hbWUgPSBvcmlnaW5hbC5uYW1lO1xuICAgICAgc291cmNlTWFwcGluZ0FjdGl2ZSA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChzb3VyY2VNYXBwaW5nQWN0aXZlKSB7XG4gICAgICBtYXAuYWRkTWFwcGluZyh7XG4gICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgIGxpbmU6IGdlbmVyYXRlZC5saW5lLFxuICAgICAgICAgIGNvbHVtbjogZ2VuZXJhdGVkLmNvbHVtblxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGxhc3RPcmlnaW5hbFNvdXJjZSA9IG51bGw7XG4gICAgICBzb3VyY2VNYXBwaW5nQWN0aXZlID0gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbmd0aCA9IGNodW5rLmxlbmd0aDsgaWR4IDwgbGVuZ3RoOyBpZHgrKykge1xuICAgICAgaWYgKGNodW5rLmNoYXJDb2RlQXQoaWR4KSA9PT0gTkVXTElORV9DT0RFKSB7XG4gICAgICAgIGdlbmVyYXRlZC5saW5lKys7XG4gICAgICAgIGdlbmVyYXRlZC5jb2x1bW4gPSAwO1xuICAgICAgICAvLyBNYXBwaW5ncyBlbmQgYXQgZW9sXG4gICAgICAgIGlmIChpZHggKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICBsYXN0T3JpZ2luYWxTb3VyY2UgPSBudWxsO1xuICAgICAgICAgIHNvdXJjZU1hcHBpbmdBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChzb3VyY2VNYXBwaW5nQWN0aXZlKSB7XG4gICAgICAgICAgbWFwLmFkZE1hcHBpbmcoe1xuICAgICAgICAgICAgc291cmNlOiBvcmlnaW5hbC5zb3VyY2UsXG4gICAgICAgICAgICBvcmlnaW5hbDoge1xuICAgICAgICAgICAgICBsaW5lOiBvcmlnaW5hbC5saW5lLFxuICAgICAgICAgICAgICBjb2x1bW46IG9yaWdpbmFsLmNvbHVtblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgICAgICBsaW5lOiBnZW5lcmF0ZWQubGluZSxcbiAgICAgICAgICAgICAgY29sdW1uOiBnZW5lcmF0ZWQuY29sdW1uXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmFtZTogb3JpZ2luYWwubmFtZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnZW5lcmF0ZWQuY29sdW1uKys7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgdGhpcy53YWxrU291cmNlQ29udGVudHMoZnVuY3Rpb24gKHNvdXJjZUZpbGUsIHNvdXJjZUNvbnRlbnQpIHtcbiAgICBtYXAuc2V0U291cmNlQ29udGVudChzb3VyY2VGaWxlLCBzb3VyY2VDb250ZW50KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHsgY29kZTogZ2VuZXJhdGVkLmNvZGUsIG1hcDogbWFwIH07XG59O1xuXG5leHBvcnRzLlNvdXJjZU5vZGUgPSBTb3VyY2VOb2RlO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwL2xpYi9zb3VyY2Utbm9kZS5qcyIsIi8qXG4gKiBDb3B5cmlnaHQgMjAwOS0yMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRS50eHQgb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cbmV4cG9ydHMuU291cmNlTWFwR2VuZXJhdG9yID0gcmVxdWlyZSgnLi9saWIvc291cmNlLW1hcC1nZW5lcmF0b3InKS5Tb3VyY2VNYXBHZW5lcmF0b3I7XG5leHBvcnRzLlNvdXJjZU1hcENvbnN1bWVyID0gcmVxdWlyZSgnLi9saWIvc291cmNlLW1hcC1jb25zdW1lcicpLlNvdXJjZU1hcENvbnN1bWVyO1xuZXhwb3J0cy5Tb3VyY2VOb2RlID0gcmVxdWlyZSgnLi9saWIvc291cmNlLW5vZGUnKS5Tb3VyY2VOb2RlO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwL3NvdXJjZS1tYXAuanMiLCIoZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICAvLyBVbml2ZXJzYWwgTW9kdWxlIERlZmluaXRpb24gKFVNRCkgdG8gc3VwcG9ydCBBTUQsIENvbW1vbkpTL05vZGUuanMsIFJoaW5vLCBhbmQgYnJvd3NlcnMuXG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKCdzdGFjay1nZW5lcmF0b3InLCBbJ3N0YWNrZnJhbWUnXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ3N0YWNrZnJhbWUnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdC5TdGFja0dlbmVyYXRvciA9IGZhY3Rvcnkocm9vdC5TdGFja0ZyYW1lKTtcbiAgICB9XG59KHRoaXMsIGZ1bmN0aW9uKFN0YWNrRnJhbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBiYWNrdHJhY2U6IGZ1bmN0aW9uIFN0YWNrR2VuZXJhdG9yJCRiYWNrdHJhY2Uob3B0cykge1xuICAgICAgICAgICAgdmFyIHN0YWNrID0gW107XG4gICAgICAgICAgICB2YXIgbWF4U3RhY2tTaXplID0gMTA7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9wdHMubWF4U3RhY2tTaXplID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIG1heFN0YWNrU2l6ZSA9IG9wdHMubWF4U3RhY2tTaXplO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgY3VyciA9IGFyZ3VtZW50cy5jYWxsZWU7XG4gICAgICAgICAgICB3aGlsZSAoY3VyciAmJiBzdGFjay5sZW5ndGggPCBtYXhTdGFja1NpemUpIHtcbiAgICAgICAgICAgICAgICAvLyBBbGxvdyBWOCBvcHRpbWl6YXRpb25zXG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoY3VyclsnYXJndW1lbnRzJ10ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnc1tpXSA9IGN1cnJbJ2FyZ3VtZW50cyddW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoL2Z1bmN0aW9uKD86XFxzKyhbXFx3JF0rKSkrXFxzKlxcKC8udGVzdChjdXJyLnRvU3RyaW5nKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gobmV3IFN0YWNrRnJhbWUoe2Z1bmN0aW9uTmFtZTogUmVnRXhwLiQxIHx8IHVuZGVmaW5lZCwgYXJnczogYXJnc30pKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKG5ldyBTdGFja0ZyYW1lKHthcmdzOiBhcmdzfSkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnIgPSBjdXJyLmNhbGxlcjtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdGFjaztcbiAgICAgICAgfVxuICAgIH07XG59KSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3N0YWNrLWdlbmVyYXRvci9zdGFjay1nZW5lcmF0b3IuanMiLCIoZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICAvLyBVbml2ZXJzYWwgTW9kdWxlIERlZmluaXRpb24gKFVNRCkgdG8gc3VwcG9ydCBBTUQsIENvbW1vbkpTL05vZGUuanMsIFJoaW5vLCBhbmQgYnJvd3NlcnMuXG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKCdzdGFja3RyYWNlLWdwcycsIFsnc291cmNlLW1hcCcsICdzdGFja2ZyYW1lJ10sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdzb3VyY2UtbWFwL2xpYi9zb3VyY2UtbWFwLWNvbnN1bWVyJyksIHJlcXVpcmUoJ3N0YWNrZnJhbWUnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdC5TdGFja1RyYWNlR1BTID0gZmFjdG9yeShyb290LlNvdXJjZU1hcCB8fCByb290LnNvdXJjZU1hcCwgcm9vdC5TdGFja0ZyYW1lKTtcbiAgICB9XG59KHRoaXMsIGZ1bmN0aW9uKFNvdXJjZU1hcCwgU3RhY2tGcmFtZSkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8qKlxuICAgICAqIE1ha2UgYSBYLURvbWFpbiByZXF1ZXN0IHRvIHVybCBhbmQgY2FsbGJhY2suXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gICAgICogQHJldHVybnMge1Byb21pc2V9IHdpdGggcmVzcG9uc2UgdGV4dCBpZiBmdWxmaWxsZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBfeGRyKHVybCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgcmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICByZXEub3BlbignZ2V0JywgdXJsKTtcbiAgICAgICAgICAgIHJlcS5vbmVycm9yID0gcmVqZWN0O1xuICAgICAgICAgICAgcmVxLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIG9ucmVhZHlzdGF0ZWNoYW5nZSgpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVxLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChyZXEuc3RhdHVzID49IDIwMCAmJiByZXEuc3RhdHVzIDwgMzAwKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKHVybC5zdWJzdHIoMCwgNykgPT09ICdmaWxlOi8vJyAmJiByZXEucmVzcG9uc2VUZXh0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXEucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ0hUVFAgc3RhdHVzOiAnICsgcmVxLnN0YXR1cyArICcgcmV0cmlldmluZyAnICsgdXJsKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVxLnNlbmQoKTtcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGEgQmFzZTY0LWVuY29kZWQgc3RyaW5nIGludG8gaXRzIG9yaWdpbmFsIHJlcHJlc2VudGF0aW9uLlxuICAgICAqIFVzZWQgZm9yIGlubGluZSBzb3VyY2VtYXBzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGI2NHN0ciBCYXNlLTY0IGVuY29kZWQgc3RyaW5nXG4gICAgICogQHJldHVybnMge1N0cmluZ30gb3JpZ2luYWwgcmVwcmVzZW50YXRpb24gb2YgdGhlIGJhc2U2NC1lbmNvZGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBfYXRvYihiNjRzdHIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5hdG9iKSB7XG4gICAgICAgICAgICByZXR1cm4gd2luZG93LmF0b2IoYjY0c3RyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG11c3Qgc3VwcGx5IGEgcG9seWZpbGwgZm9yIHdpbmRvdy5hdG9iIGluIHRoaXMgZW52aXJvbm1lbnQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9wYXJzZUpzb24oc3RyaW5nKSB7XG4gICAgICAgIGlmICh0eXBlb2YgSlNPTiAhPT0gJ3VuZGVmaW5lZCcgJiYgSlNPTi5wYXJzZSkge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG11c3Qgc3VwcGx5IGEgcG9seWZpbGwgZm9yIEpTT04ucGFyc2UgaW4gdGhpcyBlbnZpcm9ubWVudCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX2ZpbmRGdW5jdGlvbk5hbWUoc291cmNlLCBsaW5lTnVtYmVyLyosIGNvbHVtbk51bWJlciovKSB7XG4gICAgICAgIHZhciBzeW50YXhlcyA9IFtcbiAgICAgICAgICAgIC8vIHtuYW1lfSA9IGZ1bmN0aW9uICh7YXJnc30pIFRPRE8gYXJncyBjYXB0dXJlXG4gICAgICAgICAgICAvWydcIl0/KFskX0EtWmEtel1bJF9BLVphLXowLTldKilbJ1wiXT9cXHMqWzo9XVxccypmdW5jdGlvblxcYi8sXG4gICAgICAgICAgICAvLyBmdW5jdGlvbiB7bmFtZX0oe2FyZ3N9KSBtWzFdPW5hbWUgbVsyXT1hcmdzXG4gICAgICAgICAgICAvZnVuY3Rpb25cXHMrKFteKCdcImBdKj8pXFxzKlxcKChbXildKilcXCkvLFxuICAgICAgICAgICAgLy8ge25hbWV9ID0gZXZhbCgpXG4gICAgICAgICAgICAvWydcIl0/KFskX0EtWmEtel1bJF9BLVphLXowLTldKilbJ1wiXT9cXHMqWzo9XVxccyooPzpldmFsfG5ldyBGdW5jdGlvbilcXGIvLFxuICAgICAgICAgICAgLy8gZm5fbmFtZSgpIHtcbiAgICAgICAgICAgIC9cXGIoPyEoPzppZnxmb3J8c3dpdGNofHdoaWxlfHdpdGh8Y2F0Y2gpXFxiKSg/Oig/OnN0YXRpYylcXHMrKT8oXFxTKylcXHMqXFwoLio/XFwpXFxzKlxcey8sXG4gICAgICAgICAgICAvLyB7bmFtZX0gPSAoKSA9PiB7XG4gICAgICAgICAgICAvWydcIl0/KFskX0EtWmEtel1bJF9BLVphLXowLTldKilbJ1wiXT9cXHMqWzo9XVxccypcXCguKj9cXClcXHMqPT4vXG4gICAgICAgIF07XG4gICAgICAgIHZhciBsaW5lcyA9IHNvdXJjZS5zcGxpdCgnXFxuJyk7XG5cbiAgICAgICAgLy8gV2FsayBiYWNrd2FyZHMgaW4gdGhlIHNvdXJjZSBsaW5lcyB1bnRpbCB3ZSBmaW5kIHRoZSBsaW5lIHdoaWNoIG1hdGNoZXMgb25lIG9mIHRoZSBwYXR0ZXJucyBhYm92ZVxuICAgICAgICB2YXIgY29kZSA9ICcnO1xuICAgICAgICB2YXIgbWF4TGluZXMgPSBNYXRoLm1pbihsaW5lTnVtYmVyLCAyMCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF4TGluZXM7ICsraSkge1xuICAgICAgICAgICAgLy8gbGluZU5vIGlzIDEtYmFzZWQsIHNvdXJjZVtdIGlzIDAtYmFzZWRcbiAgICAgICAgICAgIHZhciBsaW5lID0gbGluZXNbbGluZU51bWJlciAtIGkgLSAxXTtcbiAgICAgICAgICAgIHZhciBjb21tZW50UG9zID0gbGluZS5pbmRleE9mKCcvLycpO1xuICAgICAgICAgICAgaWYgKGNvbW1lbnRQb3MgPj0gMCkge1xuICAgICAgICAgICAgICAgIGxpbmUgPSBsaW5lLnN1YnN0cigwLCBjb21tZW50UG9zKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGxpbmUpIHtcbiAgICAgICAgICAgICAgICBjb2RlID0gbGluZSArIGNvZGU7XG4gICAgICAgICAgICAgICAgdmFyIGxlbiA9IHN5bnRheGVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtID0gc3ludGF4ZXNbaW5kZXhdLmV4ZWMoY29kZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtICYmIG1bMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtWzFdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX2Vuc3VyZVN1cHBvcnRlZEVudmlyb25tZW50KCkge1xuICAgICAgICBpZiAodHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgT2JqZWN0LmNyZWF0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gY29uc3VtZSBzb3VyY2UgbWFwcyBpbiBvbGRlciBicm93c2VycycpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX2Vuc3VyZVN0YWNrRnJhbWVJc0xlZ2l0KHN0YWNrZnJhbWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzdGFja2ZyYW1lICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignR2l2ZW4gU3RhY2tGcmFtZSBpcyBub3QgYW4gb2JqZWN0Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN0YWNrZnJhbWUuZmlsZU5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdHaXZlbiBmaWxlIG5hbWUgaXMgbm90IGEgU3RyaW5nJyk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN0YWNrZnJhbWUubGluZU51bWJlciAhPT0gJ251bWJlcicgfHxcbiAgICAgICAgICAgIHN0YWNrZnJhbWUubGluZU51bWJlciAlIDEgIT09IDAgfHxcbiAgICAgICAgICAgIHN0YWNrZnJhbWUubGluZU51bWJlciA8IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0dpdmVuIGxpbmUgbnVtYmVyIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyJyk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN0YWNrZnJhbWUuY29sdW1uTnVtYmVyICE9PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICAgc3RhY2tmcmFtZS5jb2x1bW5OdW1iZXIgJSAxICE9PSAwIHx8XG4gICAgICAgICAgICBzdGFja2ZyYW1lLmNvbHVtbk51bWJlciA8IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0dpdmVuIGNvbHVtbiBudW1iZXIgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX2ZpbmRTb3VyY2VNYXBwaW5nVVJMKHNvdXJjZSkge1xuICAgICAgICB2YXIgbSA9IC9cXC9cXC9bI0BdID9zb3VyY2VNYXBwaW5nVVJMPShbXlxccydcIl0rKVxccyokL20uZXhlYyhzb3VyY2UpO1xuICAgICAgICBpZiAobSAmJiBtWzFdKSB7XG4gICAgICAgICAgICByZXR1cm4gbVsxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc291cmNlTWFwcGluZ1VSTCBub3QgZm91bmQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9leHRyYWN0TG9jYXRpb25JbmZvRnJvbVNvdXJjZU1hcFNvdXJjZShzdGFja2ZyYW1lLCBzb3VyY2VNYXBDb25zdW1lciwgc291cmNlQ2FjaGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIGxvYyA9IHNvdXJjZU1hcENvbnN1bWVyLm9yaWdpbmFsUG9zaXRpb25Gb3Ioe1xuICAgICAgICAgICAgICAgIGxpbmU6IHN0YWNrZnJhbWUubGluZU51bWJlcixcbiAgICAgICAgICAgICAgICBjb2x1bW46IHN0YWNrZnJhbWUuY29sdW1uTnVtYmVyXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGxvYy5zb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAvLyBjYWNoZSBtYXBwZWQgc291cmNlc1xuICAgICAgICAgICAgICAgIHZhciBtYXBwZWRTb3VyY2UgPSBzb3VyY2VNYXBDb25zdW1lci5zb3VyY2VDb250ZW50Rm9yKGxvYy5zb3VyY2UpO1xuICAgICAgICAgICAgICAgIGlmIChtYXBwZWRTb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlQ2FjaGVbbG9jLnNvdXJjZV0gPSBtYXBwZWRTb3VyY2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShcbiAgICAgICAgICAgICAgICAgICAgLy8gZ2l2ZW4gc3RhY2tmcmFtZSBhbmQgc291cmNlIGxvY2F0aW9uLCB1cGRhdGUgc3RhY2tmcmFtZVxuICAgICAgICAgICAgICAgICAgICBuZXcgU3RhY2tGcmFtZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbk5hbWU6IGxvYy5uYW1lIHx8IHN0YWNrZnJhbWUuZnVuY3Rpb25OYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnczogc3RhY2tmcmFtZS5hcmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IGxvYy5zb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiBsb2MubGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbk51bWJlcjogbG9jLmNvbHVtblxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ0NvdWxkIG5vdCBnZXQgb3JpZ2luYWwgc291cmNlIGZvciBnaXZlbiBzdGFja2ZyYW1lIGFuZCBzb3VyY2UgbWFwJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICAgICAqICAgICAgb3B0cy5zb3VyY2VDYWNoZSA9IHt1cmw6IFwiU291cmNlIFN0cmluZ1wifSA9PiBwcmVsb2FkIHNvdXJjZSBjYWNoZVxuICAgICAqICAgICAgb3B0cy5zb3VyY2VNYXBDb25zdW1lckNhY2hlID0gey9wYXRoL2ZpbGUuanMubWFwOiBTb3VyY2VNYXBDb25zdW1lcn1cbiAgICAgKiAgICAgIG9wdHMub2ZmbGluZSA9IFRydWUgdG8gcHJldmVudCBuZXR3b3JrIHJlcXVlc3RzLlxuICAgICAqICAgICAgICAgICAgICBCZXN0IGVmZm9ydCB3aXRob3V0IHNvdXJjZXMgb3Igc291cmNlIG1hcHMuXG4gICAgICogICAgICBvcHRzLmFqYXggPSBQcm9taXNlIHJldHVybmluZyBmdW5jdGlvbiB0byBtYWtlIFgtRG9tYWluIHJlcXVlc3RzXG4gICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIFN0YWNrVHJhY2VHUFMob3B0cykge1xuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU3RhY2tUcmFjZUdQUykpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU3RhY2tUcmFjZUdQUyhvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICAgICAgICB0aGlzLnNvdXJjZUNhY2hlID0gb3B0cy5zb3VyY2VDYWNoZSB8fCB7fTtcbiAgICAgICAgdGhpcy5zb3VyY2VNYXBDb25zdW1lckNhY2hlID0gb3B0cy5zb3VyY2VNYXBDb25zdW1lckNhY2hlIHx8IHt9O1xuXG4gICAgICAgIHRoaXMuYWpheCA9IG9wdHMuYWpheCB8fCBfeGRyO1xuXG4gICAgICAgIHRoaXMuX2F0b2IgPSBvcHRzLmF0b2IgfHwgX2F0b2I7XG5cbiAgICAgICAgdGhpcy5fZ2V0ID0gZnVuY3Rpb24gX2dldChsb2NhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIHZhciBpc0RhdGFVcmwgPSBsb2NhdGlvbi5zdWJzdHIoMCwgNSkgPT09ICdkYXRhOic7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc291cmNlQ2FjaGVbbG9jYXRpb25dKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodGhpcy5zb3VyY2VDYWNoZVtsb2NhdGlvbl0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0cy5vZmZsaW5lICYmICFpc0RhdGFVcmwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignQ2Fubm90IG1ha2UgbmV0d29yayByZXF1ZXN0cyBpbiBvZmZsaW5lIG1vZGUnKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRGF0YVVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGF0YSBVUkxzIGNhbiBoYXZlIHBhcmFtZXRlcnMuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWUgaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMjM5N1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1cHBvcnRlZEVuY29kaW5nUmVnZXhwID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXmRhdGE6YXBwbGljYXRpb25cXC9qc29uOyhbXFx3PTpcIi1dKzspKmJhc2U2NCwvO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gbG9jYXRpb24ubWF0Y2goc3VwcG9ydGVkRW5jb2RpbmdSZWdleHApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZU1hcFN0YXJ0ID0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbmNvZGVkU291cmNlID0gbG9jYXRpb24uc3Vic3RyKHNvdXJjZU1hcFN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc291cmNlID0gdGhpcy5fYXRvYihlbmNvZGVkU291cmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZUNhY2hlW2xvY2F0aW9uXSA9IHNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHNvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ1RoZSBlbmNvZGluZyBvZiB0aGUgaW5saW5lIHNvdXJjZW1hcCBpcyBub3Qgc3VwcG9ydGVkJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHhoclByb21pc2UgPSB0aGlzLmFqYXgobG9jYXRpb24sIHttZXRob2Q6ICdnZXQnfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDYWNoZSB0aGUgUHJvbWlzZSB0byBwcmV2ZW50IGR1cGxpY2F0ZSBpbi1mbGlnaHQgcmVxdWVzdHNcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc291cmNlQ2FjaGVbbG9jYXRpb25dID0geGhyUHJvbWlzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHhoclByb21pc2UudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRpbmcgU291cmNlTWFwQ29uc3VtZXJzIGlzIGV4cGVuc2l2ZSwgc28gdGhpcyB3cmFwcyB0aGUgY3JlYXRpb24gb2YgYVxuICAgICAgICAgKiBTb3VyY2VNYXBDb25zdW1lciBpbiBhIHBlci1pbnN0YW5jZSBjYWNoZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHNvdXJjZU1hcHBpbmdVUkwgPSB7U3RyaW5nfSBVUkwgdG8gZmV0Y2ggc291cmNlIG1hcCBmcm9tXG4gICAgICAgICAqIEBwYXJhbSBkZWZhdWx0U291cmNlUm9vdCA9IERlZmF1bHQgc291cmNlIHJvb3QgZm9yIHNvdXJjZSBtYXAgaWYgdW5kZWZpbmVkXG4gICAgICAgICAqIEByZXR1cm5zIHtQcm9taXNlfSB0aGF0IHJlc29sdmVzIGEgU291cmNlTWFwQ29uc3VtZXJcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2dldFNvdXJjZU1hcENvbnN1bWVyID0gZnVuY3Rpb24gX2dldFNvdXJjZU1hcENvbnN1bWVyKHNvdXJjZU1hcHBpbmdVUkwsIGRlZmF1bHRTb3VyY2VSb290KSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc291cmNlTWFwQ29uc3VtZXJDYWNoZVtzb3VyY2VNYXBwaW5nVVJMXSkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMuc291cmNlTWFwQ29uc3VtZXJDYWNoZVtzb3VyY2VNYXBwaW5nVVJMXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZU1hcENvbnN1bWVyUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldChzb3VyY2VNYXBwaW5nVVJMKS50aGVuKGZ1bmN0aW9uKHNvdXJjZU1hcFNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc291cmNlTWFwU291cmNlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VNYXBTb3VyY2UgPSBfcGFyc2VKc29uKHNvdXJjZU1hcFNvdXJjZS5yZXBsYWNlKC9eXFwpXFxdXFx9Jy8sICcnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc291cmNlTWFwU291cmNlLnNvdXJjZVJvb3QgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZU1hcFNvdXJjZS5zb3VyY2VSb290ID0gZGVmYXVsdFNvdXJjZVJvb3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgU291cmNlTWFwLlNvdXJjZU1hcENvbnN1bWVyKHNvdXJjZU1hcFNvdXJjZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VNYXBDb25zdW1lckNhY2hlW3NvdXJjZU1hcHBpbmdVUkxdID0gc291cmNlTWFwQ29uc3VtZXJQcm9taXNlO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHNvdXJjZU1hcENvbnN1bWVyUHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2l2ZW4gYSBTdGFja0ZyYW1lLCBlbmhhbmNlIGZ1bmN0aW9uIG5hbWUgYW5kIHVzZSBzb3VyY2UgbWFwcyBmb3IgYVxuICAgICAgICAgKiBiZXR0ZXIgU3RhY2tGcmFtZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtTdGFja0ZyYW1lfSBzdGFja2ZyYW1lIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gdGhhdCByZXNvbHZlcyB3aXRoIHdpdGggc291cmNlLW1hcHBlZCBTdGFja0ZyYW1lXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnBpbnBvaW50ID0gZnVuY3Rpb24gU3RhY2tUcmFjZUdQUyQkcGlucG9pbnQoc3RhY2tmcmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0TWFwcGVkTG9jYXRpb24oc3RhY2tmcmFtZSkudGhlbihmdW5jdGlvbihtYXBwZWRTdGFja0ZyYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJlc29sdmVNYXBwZWRTdGFja0ZyYW1lKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShtYXBwZWRTdGFja0ZyYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmluZEZ1bmN0aW9uTmFtZShtYXBwZWRTdGFja0ZyYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzb2x2ZSwgcmVzb2x2ZU1hcHBlZFN0YWNrRnJhbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2NhdGNoJ10ocmVzb2x2ZU1hcHBlZFN0YWNrRnJhbWUpO1xuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSwgcmVqZWN0KTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdpdmVuIGEgU3RhY2tGcmFtZSwgZ3Vlc3MgZnVuY3Rpb24gbmFtZSBmcm9tIGxvY2F0aW9uIGluZm9ybWF0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge1N0YWNrRnJhbWV9IHN0YWNrZnJhbWVcbiAgICAgICAgICogQHJldHVybnMge1Byb21pc2V9IHRoYXQgcmVzb2x2ZXMgd2l0aCBlbmhhbmNlZCBTdGFja0ZyYW1lLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5maW5kRnVuY3Rpb25OYW1lID0gZnVuY3Rpb24gU3RhY2tUcmFjZUdQUyQkZmluZEZ1bmN0aW9uTmFtZShzdGFja2ZyYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgX2Vuc3VyZVN0YWNrRnJhbWVJc0xlZ2l0KHN0YWNrZnJhbWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2dldChzdGFja2ZyYW1lLmZpbGVOYW1lKS50aGVuKGZ1bmN0aW9uIGdldFNvdXJjZUNhbGxiYWNrKHNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGluZU51bWJlciA9IHN0YWNrZnJhbWUubGluZU51bWJlcjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbHVtbk51bWJlciA9IHN0YWNrZnJhbWUuY29sdW1uTnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ3Vlc3NlZEZ1bmN0aW9uTmFtZSA9IF9maW5kRnVuY3Rpb25OYW1lKHNvdXJjZSwgbGluZU51bWJlciwgY29sdW1uTnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gT25seSByZXBsYWNlIGZ1bmN0aW9uTmFtZSBpZiB3ZSBmb3VuZCBzb21ldGhpbmdcbiAgICAgICAgICAgICAgICAgICAgaWYgKGd1ZXNzZWRGdW5jdGlvbk5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUobmV3IFN0YWNrRnJhbWUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uTmFtZTogZ3Vlc3NlZEZ1bmN0aW9uTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzOiBzdGFja2ZyYW1lLmFyZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IHN0YWNrZnJhbWUuZmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogbGluZU51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5OdW1iZXI6IGNvbHVtbk51bWJlclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdGFja2ZyYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIHJlamVjdClbJ2NhdGNoJ10ocmVqZWN0KTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdpdmVuIGEgU3RhY2tGcmFtZSwgc2VlayBzb3VyY2UtbWFwcGVkIGxvY2F0aW9uIGFuZCByZXR1cm4gbmV3IGVuaGFuY2VkIFN0YWNrRnJhbWUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7U3RhY2tGcmFtZX0gc3RhY2tmcmFtZVxuICAgICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gdGhhdCByZXNvbHZlcyB3aXRoIGVuaGFuY2VkIFN0YWNrRnJhbWUuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdldE1hcHBlZExvY2F0aW9uID0gZnVuY3Rpb24gU3RhY2tUcmFjZUdQUyQkZ2V0TWFwcGVkTG9jYXRpb24oc3RhY2tmcmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIF9lbnN1cmVTdXBwb3J0ZWRFbnZpcm9ubWVudCgpO1xuICAgICAgICAgICAgICAgIF9lbnN1cmVTdGFja0ZyYW1lSXNMZWdpdChzdGFja2ZyYW1lKTtcblxuICAgICAgICAgICAgICAgIHZhciBzb3VyY2VDYWNoZSA9IHRoaXMuc291cmNlQ2FjaGU7XG4gICAgICAgICAgICAgICAgdmFyIGZpbGVOYW1lID0gc3RhY2tmcmFtZS5maWxlTmFtZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9nZXQoZmlsZU5hbWUpLnRoZW4oZnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzb3VyY2VNYXBwaW5nVVJMID0gX2ZpbmRTb3VyY2VNYXBwaW5nVVJMKHNvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpc0RhdGFVcmwgPSBzb3VyY2VNYXBwaW5nVVJMLnN1YnN0cigwLCA1KSA9PT0gJ2RhdGE6JztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRTb3VyY2VSb290ID0gZmlsZU5hbWUuc3Vic3RyaW5nKDAsIGZpbGVOYW1lLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlTWFwcGluZ1VSTFswXSAhPT0gJy8nICYmICFpc0RhdGFVcmwgJiYgISgvXmh0dHBzPzpcXC9cXC98XlxcL1xcLy9pKS50ZXN0KHNvdXJjZU1hcHBpbmdVUkwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VNYXBwaW5nVVJMID0gZGVmYXVsdFNvdXJjZVJvb3QgKyBzb3VyY2VNYXBwaW5nVVJMO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldFNvdXJjZU1hcENvbnN1bWVyKHNvdXJjZU1hcHBpbmdVUkwsIGRlZmF1bHRTb3VyY2VSb290KS50aGVuKGZ1bmN0aW9uKHNvdXJjZU1hcENvbnN1bWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2V4dHJhY3RMb2NhdGlvbkluZm9Gcm9tU291cmNlTWFwU291cmNlKHN0YWNrZnJhbWUsIHNvdXJjZU1hcENvbnN1bWVyLCBzb3VyY2VDYWNoZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNvbHZlKVsnY2F0Y2gnXShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN0YWNrZnJhbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSwgcmVqZWN0KVsnY2F0Y2gnXShyZWplY3QpO1xuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgfTtcbiAgICB9O1xufSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zdGFja3RyYWNlLWdwcy9zdGFja3RyYWNlLWdwcy5qcyIsIihmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIC8vIFVuaXZlcnNhbCBNb2R1bGUgRGVmaW5pdGlvbiAoVU1EKSB0byBzdXBwb3J0IEFNRCwgQ29tbW9uSlMvTm9kZS5qcywgUmhpbm8sIGFuZCBicm93c2Vycy5cblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoJ3N0YWNrdHJhY2UnLCBbJ2Vycm9yLXN0YWNrLXBhcnNlcicsICdzdGFjay1nZW5lcmF0b3InLCAnc3RhY2t0cmFjZS1ncHMnXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2Vycm9yLXN0YWNrLXBhcnNlcicpLCByZXF1aXJlKCdzdGFjay1nZW5lcmF0b3InKSwgcmVxdWlyZSgnc3RhY2t0cmFjZS1ncHMnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdC5TdGFja1RyYWNlID0gZmFjdG9yeShyb290LkVycm9yU3RhY2tQYXJzZXIsIHJvb3QuU3RhY2tHZW5lcmF0b3IsIHJvb3QuU3RhY2tUcmFjZUdQUyk7XG4gICAgfVxufSh0aGlzLCBmdW5jdGlvbiBTdGFja1RyYWNlKEVycm9yU3RhY2tQYXJzZXIsIFN0YWNrR2VuZXJhdG9yLCBTdGFja1RyYWNlR1BTKSB7XG4gICAgdmFyIF9vcHRpb25zID0ge1xuICAgICAgICBmaWx0ZXI6IGZ1bmN0aW9uKHN0YWNrZnJhbWUpIHtcbiAgICAgICAgICAgIC8vIEZpbHRlciBvdXQgc3RhY2tmcmFtZXMgZm9yIHRoaXMgbGlicmFyeSBieSBkZWZhdWx0XG4gICAgICAgICAgICByZXR1cm4gKHN0YWNrZnJhbWUuZnVuY3Rpb25OYW1lIHx8ICcnKS5pbmRleE9mKCdTdGFja1RyYWNlJCQnKSA9PT0gLTEgJiZcbiAgICAgICAgICAgICAgICAoc3RhY2tmcmFtZS5mdW5jdGlvbk5hbWUgfHwgJycpLmluZGV4T2YoJ0Vycm9yU3RhY2tQYXJzZXIkJCcpID09PSAtMSAmJlxuICAgICAgICAgICAgICAgIChzdGFja2ZyYW1lLmZ1bmN0aW9uTmFtZSB8fCAnJykuaW5kZXhPZignU3RhY2tUcmFjZUdQUyQkJykgPT09IC0xICYmXG4gICAgICAgICAgICAgICAgKHN0YWNrZnJhbWUuZnVuY3Rpb25OYW1lIHx8ICcnKS5pbmRleE9mKCdTdGFja0dlbmVyYXRvciQkJykgPT09IC0xO1xuICAgICAgICB9LFxuICAgICAgICBzb3VyY2VDYWNoZToge31cbiAgICB9O1xuXG4gICAgdmFyIF9nZW5lcmF0ZUVycm9yID0gZnVuY3Rpb24gU3RhY2tUcmFjZSQkR2VuZXJhdGVFcnJvcigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEVycm9yIG11c3QgYmUgdGhyb3duIHRvIGdldCBzdGFjayBpbiBJRVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIGVycjtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBNZXJnZSAyIGdpdmVuIE9iamVjdHMuIElmIGEgY29uZmxpY3Qgb2NjdXJzIHRoZSBzZWNvbmQgb2JqZWN0IHdpbnMuXG4gICAgICogRG9lcyBub3QgZG8gZGVlcCBtZXJnZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZmlyc3QgYmFzZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc2Vjb25kIG92ZXJyaWRlc1xuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IG1lcmdlZCBmaXJzdCBhbmQgc2Vjb25kXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBfbWVyZ2UoZmlyc3QsIHNlY29uZCkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0ge307XG5cbiAgICAgICAgW2ZpcnN0LCBzZWNvbmRdLmZvckVhY2goZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W3Byb3BdID0gb2JqW3Byb3BdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX2lzU2hhcGVkTGlrZVBhcnNhYmxlRXJyb3IoZXJyKSB7XG4gICAgICAgIHJldHVybiBlcnIuc3RhY2sgfHwgZXJyWydvcGVyYSNzb3VyY2Vsb2MnXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfZmlsdGVyZWQoc3RhY2tmcmFtZXMsIGZpbHRlcikge1xuICAgICAgICBpZiAodHlwZW9mIGZpbHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIHN0YWNrZnJhbWVzLmZpbHRlcihmaWx0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGFja2ZyYW1lcztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGEgYmFja3RyYWNlIGZyb20gaW52b2NhdGlvbiBwb2ludC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAgICAgICAgICogQHJldHVybnMge0FycmF5fSBvZiBTdGFja0ZyYW1lXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIFN0YWNrVHJhY2UkJGdldChvcHRzKSB7XG4gICAgICAgICAgICB2YXIgZXJyID0gX2dlbmVyYXRlRXJyb3IoKTtcbiAgICAgICAgICAgIHJldHVybiBfaXNTaGFwZWRMaWtlUGFyc2FibGVFcnJvcihlcnIpID8gdGhpcy5mcm9tRXJyb3IoZXJyLCBvcHRzKSA6IHRoaXMuZ2VuZXJhdGVBcnRpZmljaWFsbHkob3B0cyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBhIGJhY2t0cmFjZSBmcm9tIGludm9jYXRpb24gcG9pbnQuXG4gICAgICAgICAqIElNUE9SVEFOVDogRG9lcyBub3QgaGFuZGxlIHNvdXJjZSBtYXBzIG9yIGd1ZXNzIGZ1bmN0aW9uIG5hbWVzIVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICAgICAgICAgKiBAcmV0dXJucyB7QXJyYXl9IG9mIFN0YWNrRnJhbWVcbiAgICAgICAgICovXG4gICAgICAgIGdldFN5bmM6IGZ1bmN0aW9uIFN0YWNrVHJhY2UkJGdldFN5bmMob3B0cykge1xuICAgICAgICAgICAgb3B0cyA9IF9tZXJnZShfb3B0aW9ucywgb3B0cyk7XG4gICAgICAgICAgICB2YXIgZXJyID0gX2dlbmVyYXRlRXJyb3IoKTtcbiAgICAgICAgICAgIHZhciBzdGFjayA9IF9pc1NoYXBlZExpa2VQYXJzYWJsZUVycm9yKGVycikgPyBFcnJvclN0YWNrUGFyc2VyLnBhcnNlKGVycikgOiBTdGFja0dlbmVyYXRvci5iYWNrdHJhY2Uob3B0cyk7XG4gICAgICAgICAgICByZXR1cm4gX2ZpbHRlcmVkKHN0YWNrLCBvcHRzLmZpbHRlcik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdpdmVuIGFuIGVycm9yIG9iamVjdCwgcGFyc2UgaXQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIG9iamVjdFxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICAgICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gZm9yIEFycmF5W1N0YWNrRnJhbWV9XG4gICAgICAgICAqL1xuICAgICAgICBmcm9tRXJyb3I6IGZ1bmN0aW9uIFN0YWNrVHJhY2UkJGZyb21FcnJvcihlcnJvciwgb3B0cykge1xuICAgICAgICAgICAgb3B0cyA9IF9tZXJnZShfb3B0aW9ucywgb3B0cyk7XG4gICAgICAgICAgICB2YXIgZ3BzID0gbmV3IFN0YWNrVHJhY2VHUFMob3B0cyk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgIHZhciBzdGFja2ZyYW1lcyA9IF9maWx0ZXJlZChFcnJvclN0YWNrUGFyc2VyLnBhcnNlKGVycm9yKSwgb3B0cy5maWx0ZXIpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoUHJvbWlzZS5hbGwoc3RhY2tmcmFtZXMubWFwKGZ1bmN0aW9uKHNmKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiByZXNvbHZlT3JpZ2luYWwoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzZik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGdwcy5waW5wb2ludChzZikudGhlbihyZXNvbHZlLCByZXNvbHZlT3JpZ2luYWwpWydjYXRjaCddKHJlc29sdmVPcmlnaW5hbCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pKSk7XG4gICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVc2UgU3RhY2tHZW5lcmF0b3IgdG8gZ2VuZXJhdGUgYSBiYWNrdHJhY2UuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gICAgICAgICAqIEByZXR1cm5zIHtQcm9taXNlfSBvZiBBcnJheVtTdGFja0ZyYW1lXVxuICAgICAgICAgKi9cbiAgICAgICAgZ2VuZXJhdGVBcnRpZmljaWFsbHk6IGZ1bmN0aW9uIFN0YWNrVHJhY2UkJGdlbmVyYXRlQXJ0aWZpY2lhbGx5KG9wdHMpIHtcbiAgICAgICAgICAgIG9wdHMgPSBfbWVyZ2UoX29wdGlvbnMsIG9wdHMpO1xuICAgICAgICAgICAgdmFyIHN0YWNrRnJhbWVzID0gU3RhY2tHZW5lcmF0b3IuYmFja3RyYWNlKG9wdHMpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRzLmZpbHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHN0YWNrRnJhbWVzID0gc3RhY2tGcmFtZXMuZmlsdGVyKG9wdHMuZmlsdGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc3RhY2tGcmFtZXMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHaXZlbiBhIGZ1bmN0aW9uLCB3cmFwIGl0IHN1Y2ggdGhhdCBpbnZvY2F0aW9ucyB0cmlnZ2VyIGEgY2FsbGJhY2sgdGhhdFxuICAgICAgICAgKiBpcyBjYWxsZWQgd2l0aCBhIHN0YWNrIHRyYWNlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiB0byBiZSBpbnN0cnVtZW50ZWRcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24gdG8gY2FsbCB3aXRoIGEgc3RhY2sgdHJhY2Ugb24gaW52b2NhdGlvblxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcnJiYWNrIG9wdGlvbmFsIGZ1bmN0aW9uIHRvIGNhbGwgd2l0aCBlcnJvciBpZiB1bmFibGUgdG8gZ2V0IHN0YWNrIHRyYWNlLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBvcHRpb25hbCBjb250ZXh0IG9iamVjdCAoZS5nLiB3aW5kb3cpXG4gICAgICAgICAqL1xuICAgICAgICBpbnN0cnVtZW50OiBmdW5jdGlvbiBTdGFja1RyYWNlJCRpbnN0cnVtZW50KGZuLCBjYWxsYmFjaywgZXJyYmFjaywgdGhpc0FyZykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGluc3RydW1lbnQgbm9uLWZ1bmN0aW9uIG9iamVjdCcpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZm4uX19zdGFja3RyYWNlT3JpZ2luYWxGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIC8vIEFscmVhZHkgaW5zdHJ1bWVudGVkLCByZXR1cm4gZ2l2ZW4gRnVuY3Rpb25cbiAgICAgICAgICAgICAgICByZXR1cm4gZm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBpbnN0cnVtZW50ZWQgPSBmdW5jdGlvbiBTdGFja1RyYWNlJCRpbnN0cnVtZW50ZWQoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXQoKS50aGVuKGNhbGxiYWNrLCBlcnJiYWNrKVsnY2F0Y2gnXShlcnJiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcgfHwgdGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfaXNTaGFwZWRMaWtlUGFyc2FibGVFcnJvcihlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mcm9tRXJyb3IoZSkudGhlbihjYWxsYmFjaywgZXJyYmFjaylbJ2NhdGNoJ10oZXJyYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LmJpbmQodGhpcyk7XG4gICAgICAgICAgICBpbnN0cnVtZW50ZWQuX19zdGFja3RyYWNlT3JpZ2luYWxGbiA9IGZuO1xuXG4gICAgICAgICAgICByZXR1cm4gaW5zdHJ1bWVudGVkO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHaXZlbiBhIGZ1bmN0aW9uIHRoYXQgaGFzIGJlZW4gaW5zdHJ1bWVudGVkLFxuICAgICAgICAgKiByZXZlcnQgdGhlIGZ1bmN0aW9uIHRvIGl0J3Mgb3JpZ2luYWwgKG5vbi1pbnN0cnVtZW50ZWQpIHN0YXRlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiB0byBkZS1pbnN0cnVtZW50XG4gICAgICAgICAqL1xuICAgICAgICBkZWluc3RydW1lbnQ6IGZ1bmN0aW9uIFN0YWNrVHJhY2UkJGRlaW5zdHJ1bWVudChmbikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGRlLWluc3RydW1lbnQgbm9uLWZ1bmN0aW9uIG9iamVjdCcpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZm4uX19zdGFja3RyYWNlT3JpZ2luYWxGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmbi5fX3N0YWNrdHJhY2VPcmlnaW5hbEZuO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBGdW5jdGlvbiBub3QgaW5zdHJ1bWVudGVkLCByZXR1cm4gb3JpZ2luYWxcbiAgICAgICAgICAgICAgICByZXR1cm4gZm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdpdmVuIGFuIGVycm9yIG1lc3NhZ2UgYW5kIEFycmF5IG9mIFN0YWNrRnJhbWVzLCBzZXJpYWxpemUgYW5kIFBPU1QgdG8gZ2l2ZW4gVVJMLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBzdGFja2ZyYW1lc1xuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBlcnJvck1zZ1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVxdWVzdE9wdGlvbnNcbiAgICAgICAgICovXG4gICAgICAgIHJlcG9ydDogZnVuY3Rpb24gU3RhY2tUcmFjZSQkcmVwb3J0KHN0YWNrZnJhbWVzLCB1cmwsIGVycm9yTXNnLCByZXF1ZXN0T3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIHZhciByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgICAgICByZXEub25lcnJvciA9IHJlamVjdDtcbiAgICAgICAgICAgICAgICByZXEub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gb25yZWFkeXN0YXRlY2hhbmdlKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVxLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXEuc3RhdHVzID49IDIwMCAmJiByZXEuc3RhdHVzIDwgNDAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXEucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignUE9TVCB0byAnICsgdXJsICsgJyBmYWlsZWQgd2l0aCBzdGF0dXM6ICcgKyByZXEuc3RhdHVzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJlcS5vcGVuKCdwb3N0JywgdXJsKTtcblxuICAgICAgICAgICAgICAgIC8vIFNldCByZXF1ZXN0IGhlYWRlcnNcbiAgICAgICAgICAgICAgICByZXEuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgICAgICAgICAgICBpZiAocmVxdWVzdE9wdGlvbnMgJiYgdHlwZW9mIHJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWFkZXJzID0gcmVxdWVzdE9wdGlvbnMuaGVhZGVycztcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaGVhZGVyIGluIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoZWFkZXJzLmhhc093blByb3BlcnR5KGhlYWRlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXEuc2V0UmVxdWVzdEhlYWRlcihoZWFkZXIsIGhlYWRlcnNbaGVhZGVyXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcmVwb3J0UGF5bG9hZCA9IHtzdGFjazogc3RhY2tmcmFtZXN9O1xuICAgICAgICAgICAgICAgIGlmIChlcnJvck1zZyAhPT0gdW5kZWZpbmVkICYmIGVycm9yTXNnICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcG9ydFBheWxvYWQubWVzc2FnZSA9IGVycm9yTXNnO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJlcS5zZW5kKEpTT04uc3RyaW5naWZ5KHJlcG9ydFBheWxvYWQpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbn0pKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc3RhY2t0cmFjZS1qcy9zdGFja3RyYWNlLmpzIiwidmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpXHJcblx0XHRnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsImltcG9ydCB7c3RyZWFtLCBpZiQsIG1lcmdlJCwgZmxhdHRlbn0gZnJvbSAnLi8nO1xyXG5cclxuZnVuY3Rpb24gaW50ZXJjZXB0TGlua3Mocm91dGVyU3RhdGUkKSB7XHJcbiAgICAvLyBpbnRlcmNlcHRzIGNsaWNrcyBvbiBsaW5rc1xyXG4gICAgLy8gaWYgdGhlIGxpbmsgaXMgbG9jYWwgJy8uLi4nIHdlIGNoYW5nZSB0aGUgbG9jYXRpb24gaGFzaCBpbnN0ZWFkXHJcblx0ZnVuY3Rpb24gaW50ZXJjZXB0Q2xpY2tFdmVudChlKSB7XHJcbiAgICAgICAgbGV0IHRhcmdldCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDtcclxuICAgICAgICBpZiAodGFyZ2V0LnRhZ05hbWUgPT09ICdBJykge1xyXG4gICAgICAgICAgICBsZXQgaHJlZiA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcclxuICAgICAgICAgICAgbGV0IGlzTG9jYWwgPSBocmVmICE9IG51bGwgJiYgaHJlZi5zdGFydHNXaXRoKCcvJyk7XHJcbiAgICAgICAgICAgIGxldCBpc0FuY2hvciA9IGhyZWYgIT0gbnVsbCAmJiBocmVmLnN0YXJ0c1dpdGgoJyMnKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpc0xvY2FsIHx8IGlzQW5jaG9yKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQge2FuY2hvciwgcm91dGUsIHF1ZXJ5fSA9IHBhcnNlTGluayhocmVmKTtcclxuICAgICAgICAgICAgICAgIGlmIChyb3V0ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm91dGUgPSByb3V0ZXJTdGF0ZSQudmFsdWUucm91dGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBnb1RvKHJvdXRlclN0YXRlJCwgYW5jaG9yLCByb3V0ZSwgcXVlcnkpO1xyXG4gICAgICAgICAgICAgICAgLy90ZWxsIHRoZSBicm93c2VyIG5vdCB0byByZXNwb25kIHRvIHRoZSBsaW5rIGNsaWNrXHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmVhY3QgdG8gSFRNTDUgZ28gYmFjayBhbmQgZm9yd2FyZCBldmVudHNcclxuICAgIHdpbmRvdy5vbnBvcHN0YXRlID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICBpZiAoZXZlbnQuc3RhdGUpIHtcclxuICAgICAgICAgICAgbGV0IHtyb3V0ZSwgcXVlcnl9ID0gZXZlbnQuc3RhdGU7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoUm91dGVDaGFuZ2Uocm91dGVyU3RhdGUkLCByb3V0ZSwgcXVlcnkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gbGlzdGVuIGZvciBsaW5rIGNsaWNrIGV2ZW50cyBhdCB0aGUgZG9jdW1lbnQgbGV2ZWxcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaW50ZXJjZXB0Q2xpY2tFdmVudCk7XHJcblxyXG4gICAgLy8gcmVhY3QgdG8gaW5pdGlhbCByb3V0aW5nIGluZm9cclxuICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZSAhPT0gJy8nIHx8IGxvY2F0aW9uLnNlYXJjaCAhPT0gXCJcIikge1xyXG4gICAgICAgIC8vIGNvbnN0cnVjdCBpbml0aWFsIHJvdXRpbmcgbGlua1xyXG4gICAgICAgIGxldCBocmVmID0gbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5zZWFyY2ggKyBsb2NhdGlvbi5oYXNoO1xyXG4gICAgICAgIGxldCB7cm91dGUsIHF1ZXJ5fSA9IHBhcnNlTGluayhsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCArIGxvY2F0aW9uLmhhc2gpO1xyXG4gICAgICAgIGRpc3BhdGNoUm91dGVDaGFuZ2Uocm91dGVyU3RhdGUkLCByb3V0ZSwgcXVlcnkpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLy8gVE9ETyByZWZhY3RvclxyXG5mdW5jdGlvbiBnZXRVcmxQYXJhbXMoaGFzaCwgc2VhcmNoKSB7XHJcbiAgICAvLyBtYXRjaCBxdWVyeSBwYXJhbXMgaW4gdXJscyBsaWtlOlxyXG4gICAgLy8gaHR0cDovL2xvY2FsaG9zdDo4MDgwLz9jb2RlPWU0YTRmOTRmMDA4YTkyZjEyMjIxJmNvZGUyPWFiYyMvbG9jYXRpb24/Y29kZT1lNGE0Zjk0ZjAwOGE5MmYxMjIyMSZjb2RlMj1hYmNcclxuICAgIC8vIHRoZSBxdWVyeSBjb3VsZCBiZSBzZXQgaW50ZXJuYWx5OyB0aGVuIGl0IHdvdWxkIGJlIGJlaGluZCB0aGUgI1xyXG4gICAgLy8gdGhlIHF1ZXJ5IGNvdWxkIGJlIHNldCBhdCBzdGFydDsgdGhlbiBpdCB3b3VsZCBiZSBiZWZvcmUgdGhlICNcclxuICAgIGxldCB1cmxSZWdleCA9IC8oI1xcL1xcdyopPyhcXD8oXFx3Kz1cXHcqKSgmXFx3Kz1cXHcqKSopKygjXFx3Kyk/L2c7XHJcbiAgICBsZXQgcmVnRXhSZXN1bHRIYXNoID0gUmVnRXhwKHVybFJlZ2V4KS5leGVjKGhhc2gpO1xyXG4gICAgbGV0IHJlZ0V4UmVzdWx0U2VhcmNoID0gUmVnRXhwKHVybFJlZ2V4KS5leGVjKHNlYXJjaCk7XHJcblxyXG4gICAgLy8gbWVyZ2UgYWxsIHF1ZXJ5IHBhcmFtcyBiZWZvcmUgYW5kIGFmdGVyIHRoZSBoYXNoXHJcbiAgICBsZXQgdmFycyA9IHJlZ0V4UmVzdWx0SGFzaCAmJiByZWdFeFJlc3VsdEhhc2hbM10gIT0gbnVsbCA/IHJlZ0V4UmVzdWx0SGFzaFszXS5zcGxpdCgnJicpIDogW107XHJcbiAgICB2YXJzID0gcmVnRXhSZXN1bHRTZWFyY2ggJiYgcmVnRXhSZXN1bHRTZWFyY2hbM10gIT0gbnVsbCA/IHZhcnMuY29uY2F0KHJlZ0V4UmVzdWx0U2VhcmNoWzNdLnNwbGl0KCcmJykpIDogdmFycztcclxuXHJcbiAgICBsZXQgcGFyYW1zID0ge307XHJcbiAgICBmb3IgKHZhciBpPTA7aTx2YXJzLmxlbmd0aDtpKyspIHtcclxuICAgICAgICB2YXIgcGFpciA9IHZhcnNbaV0uc3BsaXQoXCI9XCIpO1xyXG4gICAgICAgICAgICAvLyBJZiBmaXJzdCBlbnRyeSB3aXRoIHRoaXMgbmFtZVxyXG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1zW3BhaXJbMF1dID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgIHBhcmFtc1twYWlyWzBdXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKTtcclxuICAgICAgICAgICAgLy8gSWYgc2Vjb25kIGVudHJ5IHdpdGggdGhpcyBuYW1lXHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcGFyYW1zW3BhaXJbMF1dID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHZhciBhcnIgPSBbIHBhcmFtc1twYWlyWzBdXSxkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSkgXTtcclxuICAgICAgICAgICAgcGFyYW1zW3BhaXJbMF1dID0gYXJyO1xyXG4gICAgICAgICAgICAvLyBJZiB0aGlyZCBvciBsYXRlciBlbnRyeSB3aXRoIHRoaXMgbmFtZVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBhcmFtc1twYWlyWzBdXS5wdXNoKGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhcmFtcztcclxufVxyXG5cclxuLy8gdGhpcyBpcyBhbiBlbGVtZW50IHRoYXQgc2hvd3MgaXQncyBjb250ZW50IG9ubHkgaWYgdGhlIGV4cGVjdGVkIHJvdXRlIGlzIG1ldFxyXG5leHBvcnQgZnVuY3Rpb24gUm91dGVyKHtyb3V0ZXIkLCByb3V0ZX0sIGNoaWxkcmVuJCkge1xyXG4gICAgaWYgKHJvdXRlciQgPT0gbnVsbCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdUaGUgUm91dGVyIGNvbXBvbmVudCBuZWVkcyB0aGUgcm91dGVyU3RhdGUkIGFzIGF0dHJpYnV0ZS4nKVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgaWYgKHJvdXRlID09IG51bGwpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnVGhlIFJvdXRlciBjb21wb25lbnQgbmVlZHMgdGhlIHJvdXRlIGFzIGF0dHJpYnV0ZS4nKVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgLy8gUmVnaXN0ZXIgdGhlIHJvdXRlXHJcbiAgICAvLyB0aGlzIGlzIG5lY2Vzc2FyeSB0byBkZWNpZGUgb24gYSBkZWZhdWx0IHJvdXRlXHJcbiAgICByb3V0ZXIkLiQoJ3JvdXRlcycpXHJcbiAgICAvLyByb3V0ZXMgY2FuIGJlIGF0dGFjaGVkIGFzeW5jIHNvIHdlIGNoZWNrIGlmIHRoZSByb3V0ZSBleGlzdHMgYW5kIGlmIG5vdCBhZGQgaXRcclxuICAgIC5tYXAoKHJvdXRlcykgPT4gcm91dGVzLmluZGV4T2Yocm91dGUpID09PSAtMSAmJiByb3V0ZXIkLnBhdGNoKHsgcm91dGVzOiByb3V0ZXMuY29uY2F0KHJvdXRlKSB9KSk7XHJcblxyXG4gICAgLy8gY2hlY2sgaWYgbm8gcmVnaXN0ZXJlZCByb3V0ZSB3YXMgaGl0IGFuZCBzZXQgZGVmYXVsdCBpZiBzb1xyXG4gICAgbGV0IHNhbml0aXplZFJvdXRlJCA9IHJvdXRlciRcclxuICAgICAgICAubWFwKCh7cm91dGUsIHJvdXRlc30pID0+IHtcclxuICAgICAgICAgICAgaWYgKHJvdXRlcy5pbmRleE9mKHJvdXRlKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnLyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJvdXRlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIGxldCByb3V0ZVdhc0hpdCQgPSBzYW5pdGl6ZWRSb3V0ZSQuaXMocm91dGUpLmRpc3RpbmN0KCk7XHJcbiAgICByZXR1cm4gbWVyZ2UkKFtyb3V0ZVdhc0hpdCQsIGNoaWxkcmVuJF0pLm1hcCgoW3dhc0hpdCwgY2hpbGRyZW5dKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHdhc0hpdCA/IGNoaWxkcmVuIDogW11cclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5pdFJvdXRlcigpIHtcclxuICAgIGxldCByb3V0ZXJTdGF0ZSQgPSBzdHJlYW0oe1xyXG4gICAgICAgIHJvdXRlOiAnJyxcclxuICAgICAgICBwYXJhbXM6IHt9LFxyXG4gICAgICAgIHJvdXRlczogWycvJ11cclxuICAgIH0pO1xyXG5cclxuICAgIGludGVyY2VwdExpbmtzKHJvdXRlclN0YXRlJCk7XHJcblxyXG4gICAgcmV0dXJuIHJvdXRlclN0YXRlJDtcclxufVxyXG5cclxuLy8gbWF0Y2hpbmcgbGlua3MgaW4gdGhlIGZvcm0gb2YgL3JvdXRlL3N1YnJvdXRlP3BhcmFtMT1hJnBhcmFtMj1iI2FuY2hvclxyXG5mdW5jdGlvbiBwYXJzZUxpbmsobGluaykge1xyXG4gICAgbGV0IHJlZ2V4cCA9IC8oKFxcL1xcdyopKik/KFxcPygoXFx3Kz1cXHcqKSgmKFxcdys9XFx3KikrKSopKT8oIyhcXHcrKSk/LztcclxuICAgIGxldCBtYXRjaEFyciA9IHJlZ2V4cC5leGVjKGxpbmspO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBhbmNob3I6IG1hdGNoQXJyWzldLFxyXG4gICAgICAgIHJvdXRlOiBtYXRjaEFyclsxXSxcclxuICAgICAgICBxdWVyeTogbWF0Y2hBcnJbNF1cclxuICAgIH1cclxufVxyXG5cclxuLy8gY2FsbGJhY2sgZm9yIEhUTUw1IG5hdmlnYXRpb24gZXZlbnRzXHJcbi8vIHNhdmUgdGhlIHJvdXRpbmcgaW5mbyBpbiB0aGUgcm91dGVyU3RhdGVcclxuZnVuY3Rpb24gZGlzcGF0Y2hSb3V0ZUNoYW5nZShyb3V0ZXJTdGF0ZSQsIHJvdXRlLCBxdWVyeSkge1xyXG4gICAgLy8gcmVtb3ZlIGhhc2hcclxuICAgIGxldCBocmVmID0gbG9jYXRpb24uaGFzaC5zdWJzdHIoMSk7XHJcbiAgICByb3V0ZXJTdGF0ZSQucGF0Y2goe1xyXG4gICAgICAgIHJvdXRlOiByb3V0ZSB8fCAnJyxcclxuICAgICAgICBwYXJhbXM6IGdldFVybFBhcmFtcyhocmVmLCBsb2NhdGlvbi5zZWFyY2gpXHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ29Ubyhyb3V0ZXJTdGF0ZSQsIGFuY2hvciwgcm91dGUsIHF1ZXJ5KSB7XHJcbiAgICBoaXN0b3J5LnB1c2hTdGF0ZSh7YW5jaG9yLCByb3V0ZSwgcXVlcnl9LCAnJywgYC8ke3JvdXRlID8gcm91dGUuc3Vic3RyKDEpIDogJyd9JHtxdWVyeSA/ICc/JyArIHF1ZXJ5IDogJyd9YCk7XHJcbiAgICBpZiAoYW5jaG9yKSB7XHJcbiAgICAgICBsb2NhdGlvbi5oYXNoID0gJyMnICsgYW5jaG9yO1xyXG4gICAgfVxyXG4gICAgZGlzcGF0Y2hSb3V0ZUNoYW5nZShyb3V0ZXJTdGF0ZSQsIHJvdXRlLCBxdWVyeSk7XHJcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdXRpbHMvcm91dGVyLmpzIiwiaW1wb3J0IFN0YWNrVHJhY2UgZnJvbSAnc3RhY2t0cmFjZS1qcyc7XG5cblxuLypcbiogQVRURU5USU9OOiBFbmFibGUgc291cmNlbWFwcyBpbiBDaHJvbWUhIVxuKiBBVFRFTlRJT046IFVzZSBcImRldnRvb2w6ICcjaW5saW5lLXNvdXJjZS1tYXAnXCIgZm9yIHdlYnBhY2sgLT4gb25seSBjb25maWcgdGhhdCB3b3JrZWRcbiovXG5leHBvcnQgZnVuY3Rpb24gc2hyaW5rX3N0YWNrdHJhY2UoKSB7XG4gICAgd2luZG93Lm9uZXJyb3IgPSBmdW5jdGlvbihtc2csIGZpbGUsIGxpbmUsIGNvbCwgZXJyb3IpIHtcbiAgICAgICAgU3RhY2tUcmFjZS5mcm9tRXJyb3IoZXJyb3IpXG4gICAgICAgIC50aGVuKGZyYW1lcyA9PiBjb25zb2xlLmVycm9yKGZvcm1hdEZyYW1lcyhmcmFtZXMsIG1zZykpKVxuICAgICAgICAuY2F0Y2goY29uc29sZS5lcnJvcik7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdEZyYW1lcyhzdGFja0ZyYW1lcywgZXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIGxldCBmb3JtYXRlZEZyYW1lcyA9IHN0YWNrRnJhbWVzXG4gICAgICAgIC5maWx0ZXIoKHtmaWxlTmFtZX0pID0+IGZpbGVOYW1lLnN0YXJ0c1dpdGgoYHdlYnBhY2s6Ly9gKSlcbiAgICAgICAgLm1hcCgoe2Z1bmN0aW9uTmFtZSwgY29sdW1uTnVtYmVyLCBmaWxlTmFtZSwgbGluZU51bWJlcn0pID0+IHtcbiAgICAgICAgICAgIC8vIGNocm9tZSBkb2VzIG5vdCByZWRpcmVjdCB0byB0aGUgc291cmNlcyB3aXRoIHRoZSBkZWZhdWx0IHdlYnBhY2sgc291cmNlbWFwIHVybCBpbiB0aGUgY29uc29sZVxuICAgICAgICAgICAgbGV0IGNocm9tZUZpbGVEaXJlY3Rpb24gPSBmaWxlTmFtZS5yZXBsYWNlKGB3ZWJwYWNrOi8vYCwgYHdlYnBhY2s6Ly8vLmApO1xuXG4gICAgICAgICAgICByZXR1cm4gYFxcdCR7KGZ1bmN0aW9uTmFtZSAhPT0gdW5kZWZpbmVkID8gZnVuY3Rpb25OYW1lICA6ICcoYW5vbnltb3VzKScpfSBcXHRcXHRhdCAke2Nocm9tZUZpbGVEaXJlY3Rpb259OiR7bGluZU51bWJlcn06JHtjb2x1bW5OdW1iZXJ9YDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIFsnKFpMSVEpICcgKyBlcnJvck1lc3NhZ2VdLmNvbmNhdChmb3JtYXRlZEZyYW1lcykuam9pbignXFxuJyk7XG4gICAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy91dGlscy9zdGFja3RyYWNlLmpzIiwiaW1wb3J0IHsgc3RyZWFtLCBtZXJnZSQgfSBmcm9tICcuLyc7XHJcblxyXG4vLyB3cmFwcGVyIGFyb3VuZCBwcm9taXNlcyB0byBwcm92aWRlIGFuIGluZGljYXRvciBpZiB0aGUgcHJvbWlzZSBpcyBydW5uaW5nXHJcbmV4cG9ydCBjb25zdCBwcm9taXNlJCA9IChwcm9taXNlKSA9PiB7XHJcblx0bGV0IG91dHB1dCQgPSBzdHJlYW0oe1xyXG5cdFx0bG9hZGluZzogdHJ1ZSxcclxuXHRcdGVycm9yOiBudWxsLFxyXG5cdFx0ZGF0YTogbnVsbFxyXG5cdH0pO1xyXG5cclxuXHRwcm9taXNlLnRoZW4ocmVzdWx0ID0+IHtcclxuXHRcdG91dHB1dCQucGF0Y2goe1xyXG5cdFx0XHRsb2FkaW5nOiBmYWxzZSxcclxuXHRcdFx0ZGF0YTogcmVzdWx0XHJcblx0XHR9KTtcclxuXHR9LCBlcnJvciA9PiB7XHJcblx0XHRvdXRwdXQkLnBhdGNoKHtcclxuXHRcdFx0bG9hZGluZzogZmFsc2UsXHJcblx0XHRcdGVycm9yXHJcblx0XHR9KTtcclxuXHR9KTtcclxuXHJcblx0cmV0dXJuIG91dHB1dCQ7XHJcbn1cclxuXHJcbi8vIHByb3ZpZGUgZWFzeSBzd2l0Y2hlZCBvbiBib29sZWFuIHN0cmVhbXNcclxuLy8gZXhhbXBsZSB1c2UgY2FzZTogPGJ1dHRvbiBvbmNsaWNrPXsoKT0+b3BlbiQoIW9wZW4kKCkpfT57aWYkKG9wZW4kLCAnQ2xvc2UnLCAnT3BlbicpfTwvYnV0dG9uPlxyXG5leHBvcnQgZnVuY3Rpb24gaWYkKHN0cmVhbSwgb25UcnVlLCBvbkZhbHNlKSB7XHJcbiAgICByZXR1cm4gc3RyZWFtLm1hcCh4PT54PyhvblRydWV8fG51bGwpOihvbkZhbHNlfHxudWxsKSk7XHJcbn1cclxuXHJcbi8vIGpvaW4gYSBtaXhlZCBhcnJheSBvZiBzdHJpbmdzIGFuZCBzdHJlYW1zIG9mIHN0cmluZ3NcclxuLy8gZXhhbXBsZSB1c2UgY2FzZTogPGRpdiBjbGFzcz17am9pbiQoJ2NvbnRhaW5lcicsIGlmJChvcGVuJCwgJ29wZW4nLCAnY2xvc2VkJykpfSAvPlxyXG5leHBvcnQgZnVuY3Rpb24gam9pbiQoLi4uYXJyKSB7XHJcbiAgICBsZXQgJGFyciA9IGFyci5tYXAoaXRlbSA9PiB7XHJcbiAgICAgICAgaWYgKGl0ZW0gPT09IG51bGwgfHwgaXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdHJlYW0oJycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXRlbS5JU19TVFJFQU0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdHJlYW0oaXRlbSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBtZXJnZSQoJGFycikubWFwKGFyciA9PiBhcnIuam9pbignICcpKTtcclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy91dGlscy9zdHJlYW15LWhlbHBlcnMuanMiLCJpbXBvcnQge3N0cmVhbSwgbWVyZ2UkLCBpc1N0cmVhbX0gZnJvbSAnLi9zdHJlYW15JztcclxuaW1wb3J0IHtjcmVhdGVFbGVtZW50LCBSRU1PVkVELCBBRERFRH0gZnJvbSAnLi9zdHJlYW15LWRvbSc7XHJcblxyXG4vKlxyXG4qIHdyYXAgaHlwZXJzY3JpcHQgZWxlbWVudHMgaW4gcmVhY3RpdmUgc3RyZWFtcyBkZXBlbmRlbnQgb24gdGhlaXIgY2hpbGRyZW4gc3RyZWFtc1xyXG4qL1xyXG5leHBvcnQgY29uc3QgaCA9ICh0YWcsIHByb3BzLCAuLi5jaGlsZHJlbikgPT4ge1xyXG5cdGxldCBkZWxldGVkJCA9IHN0cmVhbShmYWxzZSk7XHJcblx0bGV0IGNvbXBvbmVudDtcclxuXHRsZXQgdmVyc2lvbiA9IC0xO1xyXG5cclxuXHRsZXQgbWVyZ2VkQ2hpbGRyZW4kID0gbWVyZ2VDaGlsZHJlbiQoZmxhdHRlbihjaGlsZHJlbikpO1xyXG5cdC8vIGpzeCB1c3VhbGx5IHJlc29sdmVzIGtub3duIHRhZ3MgYXMgc3RyaW5ncyBhbmQgdW5rbm93biB0YWdzIGFzIGZ1bmN0aW9uc1xyXG5cdC8vIGlmIGl0IGlzIGEgc3ViIGNvbXBvbmVudCwgcmVzb2x2ZSB0aGF0IGNvbXBvbmVudFxyXG5cdGlmICh0eXBlb2YgdGFnID09PSAnZnVuY3Rpb24nKSB7XHJcblx0XHRyZXR1cm4gdGFnKFxyXG5cdFx0XHRwcm9wcyxcclxuXHRcdFx0bWVyZ2VkQ2hpbGRyZW4kLFxyXG5cdFx0XHRkZWxldGVkJFxyXG5cdFx0KTtcclxuXHR9XHJcblx0Ly8gYWRkIGRldGFjaGVycyB0byBwcm9wc1xyXG5cdGlmIChwcm9wcyAhPT0gbnVsbCkge1xyXG5cdFx0T2JqZWN0LmtleXMocHJvcHMpLm1hcCgocHJvcE5hbWUsIGluZGV4KSA9PiB7XHJcblx0XHRcdGlmIChpc1N0cmVhbShwcm9wc1twcm9wTmFtZV0pKSB7XHJcblx0XHRcdFx0cHJvcHNbcHJvcE5hbWVdID0gcHJvcHNbcHJvcE5hbWVdLnVudGlsKGRlbGV0ZWQkKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cdHJldHVybiB7XHJcblx0XHR2ZG9tJDogbWVyZ2UkKFtcclxuXHRcdFx0XHR3cmFwUHJvcHMkKHByb3BzLCBkZWxldGVkJCksXHJcblx0XHRcdFx0bWVyZ2VkQ2hpbGRyZW4kLm1hcChmbGF0dGVuKVxyXG5cdFx0XHRdKS5tYXAoKFtwcm9wcywgY2hpbGRyZW5dKSA9PiB7XHJcblx0XHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRcdHRhZyxcclxuXHRcdFx0XHRcdHByb3BzLFxyXG5cdFx0XHRcdFx0Y2hpbGRyZW4sXHJcblx0XHRcdFx0XHR2ZXJzaW9uOiArK3ZlcnNpb25cclxuXHRcdFx0fX0pXHJcblx0fTtcclxufTtcclxuXHJcbi8vIGlucHV0IGhhcyBmb3JtYXQgW3N0cmVhbSB8IHt2ZG9tJH1dXHJcbmZ1bmN0aW9uIG1lcmdlQ2hpbGRyZW4kKGNoaWxkcmVuKSB7XHJcblx0aWYgKCFBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xyXG5cdFx0Y2hpbGRyZW4gPSBbY2hpbGRyZW5dO1xyXG5cdH1cclxuXHRjaGlsZHJlbiA9IGZsYXR0ZW4oY2hpbGRyZW4pO1xyXG5cdGxldCBjaGlsZHJlblZkb20kYXJyID0gY2hpbGRyZW4ubWFwKGNoaWxkID0+IHtcclxuXHRcdGlmIChpc1N0cmVhbShjaGlsZCkpIHtcclxuXHRcdFx0cmV0dXJuIGNoaWxkXHJcblx0XHRcdC5mbGF0TWFwKG1lcmdlQ2hpbGRyZW4kKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBjaGlsZC52ZG9tJCB8fCBjaGlsZDtcclxuXHR9KVxyXG5cclxuXHRyZXR1cm4gbWVyZ2UkKGNoaWxkcmVuVmRvbSRhcnIpO1xyXG59XHJcblxyXG4vKlxyXG4qIHdyYXAgYWxsIGNoaWxkcmVuIGluIHN0cmVhbXMgYW5kIG1lcmdlIHRob3NlXHJcbiogd2UgbWFrZSBzdXJlIHRoYXQgYWxsIGNoaWxkcmVuIHN0cmVhbXMgYXJlIGZsYXQgYXJyYXlzIHRvIG1ha2UgcHJvY2Vzc2luZyB1bmlmb3JtXHJcbiogb3V0cHV0OiBzdHJlYW0oW3N0cmVhbShbXSldKVxyXG4qL1xyXG5mdW5jdGlvbiBnZXRDaGlsZHJlblZkb20kYXJyKGNoaWxkcmVuQXJyLCBkZWxldGVkJCkge1xyXG5cdC8vIGZsYXR0ZW4gY2hpbGRyZW4gYXJyXHJcblx0Ly8gbmVlZGVkIHRvIG1ha2UgcmVhY3Qgc3R5bGUgaHlwZXJzY3JpcHQgKGNoaWxkcmVuIGFzIGFyZ3VtZW50cykgd29ya2luZyBwYXJhbGxlbCB0byBwcmVhY3Qgc3R5bGUgaHlwZXJzY3JpcHQgKGNoaWxkcmVuIGFzIGFycmF5KVxyXG5cdGNoaWxkcmVuQXJyID0gW10uY29uY2F0KC4uLmNoaWxkcmVuQXJyKTtcclxuXHQvLyBvbmx5IGhhbmRsZSB2ZG9tIGZvciBub3dcclxuXHRsZXQgY2hpbGRyZW4kQXJyID0gY2hpbGRyZW5BcnIubWFwKGNvbXBvbmVudCA9PiB7XHJcblx0XHQvLyBpZiB0aGVyZSBpcyBubyB2ZG9tJCBpdCBpcyBhIHN0cmluZyBvciBudW1iZXJcclxuXHRcdGlmIChjb21wb25lbnQudmRvbSQgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRyZXR1cm4gc3RyZWFtKGNvbXBvbmVudCk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gY29tcG9uZW50LnZkb20kXHJcblx0fSk7XHJcblxyXG5cdHJldHVybiBjaGlsZHJlbiRBcnJcclxuXHRcdC8vIHVuc3Vic2NyaWJlIG9uIHRoZSBjaGlsZCB3aGVuIGRlbGV0ZWRcclxuXHRcdC5tYXAodmRvbSQgPT4gdmRvbSQudW50aWwoZGVsZXRlZCQpKVxyXG5cdFx0Ly8gbWFrZSBzdXJlIGNoaWxkcmVuIGFyZSBhcnJheXMgYW5kIG5vdCBuZXN0XHJcblx0XHQubWFwKF8gPT4gbWFrZUFycmF5KF8pXHJcblx0XHRcdC5tYXAoZmxhdHRlbikpXHJcblx0XHQvLyBzbyB3ZSBjYW4gZWFzaWx5IG1lcmdlIHRoZW1cclxuXHRcdC5tYXAodmRvbSQgPT4gdmRvbSQuZmxhdE1hcCh2ZG9tQXJyID0+XHJcblx0XHRcdFx0bWVyZ2UkKHZkb21BcnIpKSk7XHJcbn1cclxuXHJcbi8vIG1ha2Ugc3VyZSBhbGwgY2hpbGRyZW4gYXJlIGhhbmRsZWQgYXMgc3RyZWFtc1xyXG4vLyBzbyB3ZSBjYW4gbGF0ZXIgZWFzaWx5IG1lcmdlIHRoZW1cclxuZnVuY3Rpb24gbWFrZVN0cmVhbXMoY2hpbGRyZW5BcnIpIHtcclxuXHRyZXR1cm4gY2hpbGRyZW5BcnIubWFwKGNoaWxkID0+IHtcclxuXHRcdGlmIChjaGlsZCA9PT0gbnVsbCB8fCAhaXNTdHJlYW0oY2hpbGQpKSB7XHJcblx0XHRcdHJldHVybiBzdHJlYW0oY2hpbGQpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGNoaWxkO1xyXG5cdH0pO1xyXG59XHJcblxyXG4vLyBjb252ZXJ0cyBhbiBpbnB1dCBpbnRvIGFuIGFycmF5XHJcbmZ1bmN0aW9uIG1ha2VBcnJheShzdHJlYW0pIHtcclxuXHRyZXR1cm4gc3RyZWFtLm1hcCh2YWx1ZSA9PiB7XHJcblx0XHRpZiAodmFsdWUgPT0gbnVsbCkge1xyXG5cdFx0XHRyZXR1cm4gW107XHJcblx0XHR9XHJcblx0XHRpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcblx0XHRcdHJldHVybiBbdmFsdWVdO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHZhbHVlO1xyXG5cdH0pXHJcbn1cclxuXHJcbi8vIGZsYXR0ZW5zIGFuIGFycmF5XHJcbmV4cG9ydCBmdW5jdGlvbiBmbGF0dGVuKGFycmF5LCBtdXRhYmxlKSB7XHJcbiAgICB2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xyXG4gICAgdmFyIGFycmF5VHlwZVN0ciA9ICdbb2JqZWN0IEFycmF5XSc7XHJcbiAgICBcclxuICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgIHZhciBub2RlcyA9IChtdXRhYmxlICYmIGFycmF5KSB8fCBhcnJheS5zbGljZSgpO1xyXG4gICAgdmFyIG5vZGU7XHJcblxyXG4gICAgaWYgKCFhcnJheS5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIG5vZGUgPSBub2Rlcy5wb3AoKTtcclxuICAgIFxyXG4gICAgZG8ge1xyXG4gICAgICAgIGlmICh0b1N0cmluZy5jYWxsKG5vZGUpID09PSBhcnJheVR5cGVTdHIpIHtcclxuICAgICAgICAgICAgbm9kZXMucHVzaC5hcHBseShub2Rlcywgbm9kZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2gobm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSB3aGlsZSAobm9kZXMubGVuZ3RoICYmIChub2RlID0gbm9kZXMucG9wKCkpICE9PSB1bmRlZmluZWQpO1xyXG5cclxuICAgIHJlc3VsdC5yZXZlcnNlKCk7IC8vIHdlIHJldmVyc2UgcmVzdWx0IHRvIHJlc3RvcmUgdGhlIG9yaWdpbmFsIG9yZGVyXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG4vKlxyXG4qIFdyYXAgcHJvcHMgaW50byBvbmUgc3RyZWFtXHJcbiovXHJcbmZ1bmN0aW9uIHdyYXBQcm9wcyQocHJvcHMsIGRlbGV0ZWQkKSB7XHJcblx0aWYgKHByb3BzID09PSBudWxsKSByZXR1cm4gc3RyZWFtKHt9KTtcclxuXHRpZiAoaXNTdHJlYW0ocHJvcHMpKSB7XHJcblx0XHRyZXR1cm4gcHJvcHMudW50aWwoZGVsZXRlZCQpO1xyXG5cdH1cclxuXHJcblx0bGV0IG5lc3RlZFN0cmVhbXMgPSBleHRyYWN0TmVzdGVkU3RyZWFtcyhwcm9wcyk7XHJcblx0bGV0IHVwZGF0ZVN0cmVhbXMgPSBuZXN0ZWRTdHJlYW1zLm1hcChmdW5jdGlvbiBtYWtlTmVzdGVkU3RyZWFtVXBkYXRlUHJvcHMoe3BhcmVudCwga2V5LCBzdHJlYW19KSB7XHJcblx0XHRyZXR1cm4gc3RyZWFtXHJcblx0XHQudW50aWwoZGVsZXRlZCQpXHJcblx0XHQuZGlzdGluY3QoKVxyXG5cdFx0Ly8gaGVyZSB3ZSBwcm9kdWNlIGEgc2lkZWVmZmVjdCBvbiB0aGUgcHJvcHMgb2JqZWN0IC0+IGxvdyBHQ1xyXG5cdFx0Ly8gdG8gdHJpZ2dlciB0aGUgbWVyZ2Ugd2UgYWxzbyBuZWVkIHRvIHJldHVybiBzdGggKGFzIHVuZGVmaW5lZCBkb2VzIG5vdCB0cmlnZ2VyIGxpc3RlbmVycylcclxuXHRcdC5tYXAodmFsdWUgPT4ge1xyXG5cdFx0XHRwYXJlbnRba2V5XSA9IHZhbHVlO1xyXG5cdFx0XHRyZXR1cm4gdmFsdWU7IFxyXG5cdFx0fSlcclxuXHR9KTtcclxuXHRyZXR1cm4gbWVyZ2UkKHVwZGF0ZVN0cmVhbXMpLm1hcChfID0+IHByb3BzKTtcclxufVxyXG5cclxuLy8gdG8gcmVhY3QgdG8gbmVzdGVkIHN0cmVhbXMgaW4gYW4gb2JqZWN0LCB3ZSBleHRyYWN0IHRoZSBzdHJlYW1zIGFuZCBhIHJlZmVyZW5jZSB0byB0aGVpciBwb3NpdGlvblxyXG4vLyByZXR1cm5zIFt7cGFyZW50T2JqZWN0LCBwcm9wZXJ0eU5hbWUsIHN0cmVhbX1dXHJcbmZ1bmN0aW9uIGV4dHJhY3ROZXN0ZWRTdHJlYW1zKG9iaikge1xyXG5cdHJldHVybiBmbGF0dGVuKE9iamVjdC5rZXlzKG9iaikubWFwKGtleSA9PiB7XHJcblx0XHRpZiAodHlwZW9mIG9ialtrZXldID09PSAnb2JqZWN0Jykge1xyXG5cdFx0XHRyZXR1cm4gZXh0cmFjdE5lc3RlZFN0cmVhbXMob2JqW2tleV0pO1xyXG5cdFx0fVxyXG5cdFx0aWYgKGlzU3RyZWFtKG9ialtrZXldKSkge1xyXG5cdFx0XHRyZXR1cm4gW3tcclxuXHRcdFx0XHRwYXJlbnQ6IG9iaixcclxuXHRcdFx0XHRrZXksXHJcblx0XHRcdFx0c3RyZWFtOiBvYmpba2V5XVxyXG5cdFx0XHR9XTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBbXTtcclxuXHR9KSlcclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy91dGlscy9zdHJlYW15LWh5cGVyc2NyaXB0LmpzIiwiaW1wb3J0IHtkaWZmLCBjcmVhdGVOb2RlLCByZW5kZXJ9IGZyb20gJy4uLy4uL3NyYydcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0ZXN0KHt2ZG9tJH0sIHNjaGVkdWxlLCBkb25lKSB7XHJcbiAgICByZW5kZXIoe3Zkb20kfSkuJCgnZWxlbWVudCcpLnJlZHVjZSgoaXRlcmF0aW9uLCBuZXdFbGVtZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKHNjaGVkdWxlW2l0ZXJhdGlvbl0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgVXBkYXRlIScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzY2hlZHVsZVtpdGVyYXRpb25dKG5ld0VsZW1lbnQpO1xyXG4gICAgICAgIGlmIChzY2hlZHVsZS5sZW5ndGggPT09IGl0ZXJhdGlvbiArIDEgJiYgZG9uZSkge1xyXG4gICAgICAgICAgICBkb25lKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaXRlcmF0aW9uICsxO1xyXG4gICAgfSwgMCk7XHJcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi90ZXN0L2hlbHBlcnMvdGVzdC1jb21wb25lbnQuanMiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKCk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuYmlnLWhlYWRlciwgaW1nLCBoMyB7XFxuICB0cmFuc2l0aW9uOiBhbGwgMC41czsgfVxcblxcbi5iaWctaGVhZGVyIHtcXG4gIHBhZGRpbmctdG9wOiAycmVtO1xcbiAgY3Vyc29yOiBwb2ludGVyOyB9XFxuICAuYmlnLWhlYWRlciBoMSB7XFxuICAgIGZvbnQtZmFtaWx5OiAnUnViaWsgTW9ubyBPbmUnLCBzYW5zLXNlcmlmO1xcbiAgICBmb250LXNpemU6IDEwcmVtOyB9XFxuICAuYmlnLWhlYWRlciBpbWcge1xcbiAgICBoZWlnaHQ6IDE3cmVtOyB9XFxuICBAbWVkaWEgYWxsIGFuZCAobWF4LXdpZHRoOiA1NjlweCkge1xcbiAgICAuYmlnLWhlYWRlciBoMSB7XFxuICAgICAgZm9udC1zaXplOiA2cmVtOyB9XFxuICAgIC5iaWctaGVhZGVyIGltZyB7XFxuICAgICAgaGVpZ2h0OiAxMHJlbTsgfVxcbiAgICAuYmlnLWhlYWRlciBoMyB7XFxuICAgICAgZm9udC1zaXplOiAxLjhyZW07IH0gfVxcblxcbi5saW5rLWxpc3Qge1xcbiAgcGFkZGluZy10b3A6IDJyZW07XFxuICBwYWRkaW5nLWJvdHRvbTogMXJlbTsgfVxcbiAgLmxpbmstbGlzdCBhIHtcXG4gICAgY29sb3I6ICMxODhDNzE7XFxuICAgIHBhZGRpbmc6IDAgMXJlbTtcXG4gICAgbGluZS1oZWlnaHQ6IDJyZW07XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH1cXG4gIEBtZWRpYSBhbGwgYW5kIChtYXgtd2lkdGg6IDU2OXB4KSB7XFxuICAgIC5saW5rLWxpc3Qge1xcbiAgICAgIGRpc3BsYXk6IG5vbmU7IH0gfVxcblxcbi5oaWRkZW4ge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgei1pbmRleDogMTAwO1xcbiAgcGFkZGluZzogMDtcXG4gIHdpZHRoOiAxMDAlOyB9XFxuICAuaGlkZGVuICoge1xcbiAgICBtYXJnaW4tdG9wOiAwO1xcbiAgICBtYXJnaW4tYm90dG9tOiAwOyB9XFxuICAuaGlkZGVuIGgzLCAuaGlkZGVuIGltZyB7XFxuICAgIGhlaWdodDogMDtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjsgfVxcbiAgLmhpZGRlbiArIC5jb250YWluZXIge1xcbiAgICBwYWRkaW5nLXRvcDogMzdyZW07IH1cXG4gICAgQG1lZGlhIGFsbCBhbmQgKG1heC13aWR0aDogNTY5cHgpIHtcXG4gICAgICAuaGlkZGVuICsgLmNvbnRhaW5lciB7XFxuICAgICAgICBwYWRkaW5nLXRvcDogMzByZW07IH0gfVxcbiAgLmhpZGRlbi5iaWctaGVhZGVyIGgxIHtcXG4gICAgZm9udC1zaXplOiA0cmVtOyB9XFxuICAuaGlkZGVuIC5saW5rLWxpc3Qge1xcbiAgICBwYWRkaW5nLXRvcDogMC41cmVtO1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMC41cmVtOyB9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2Nzcy1sb2FkZXIhLi9+L3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9kZW1vL2hlYWRlci5zY3NzXG4vLyBtb2R1bGUgaWQgPSA0MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKCk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJpZnJhbWUge1xcbiAgaGVpZ2h0OiAyNzBweDsgfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jc3MtbG9hZGVyIS4vfi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vZGVtby9wbGF5Z3JvdW5kLnNjc3Ncbi8vIG1vZHVsZSBpZCA9IDQzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImJvZHkge1xcbiAgbWFyZ2luLWJvdHRvbTogNHJlbTsgfVxcblxcbi5hbmNob3Ige1xcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdG9wOiAtOHJlbTsgfVxcblxcbi5oaWdobGlnaHQge1xcbiAgY29sb3I6ICMwNzY4NEYgIWltcG9ydGFudDsgfVxcblxcbi5oaWdobGlnaHQtbGVzcyB7XFxuICBjb2xvcjogIzE4OEM3MSAhaW1wb3J0YW50OyB9XFxuXFxuLmhpZ2hsaWdodC1iYWNrZ3JvdW5kIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNGQkQ5QkMgIWltcG9ydGFudDsgfVxcblxcbi5jYXB0aW9uIHtcXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7IH1cXG5cXG5wcmUge1xcbiAgcGFkZGluZy10b3A6IDJyZW0gIWltcG9ydGFudDtcXG4gIGJhY2tncm91bmQtY29sb3I6IGluaXRpYWwgIWltcG9ydGFudDtcXG4gIGJvcmRlci1jb2xvcjogI0ZCRDlCQzsgfVxcbiAgcHJlOmJlZm9yZSB7XFxuICAgIGJhY2tncm91bmQ6ICNGQkQ5QkMgIWltcG9ydGFudDtcXG4gICAgY29sb3I6ICMwNzY4NEYgIWltcG9ydGFudDsgfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jc3MtbG9hZGVyIS4vfi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vZGVtby9zdHlsZXMuc2Nzc1xuLy8gbW9kdWxlIGlkID0gNDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSgpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnR1dG9yaWFsIGg2IHtcXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xcbiAgbWFyZ2luLXRvcDogM3JlbTsgfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jc3MtbG9hZGVyIS4vfi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vZGVtby90dXRvcmlhbC5zY3NzXG4vLyBtb2R1bGUgaWQgPSA0NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5tYXRlcmlhbGl6ZS1yZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U1MWMyMyAhaW1wb3J0YW50OyB9XFxuXFxuLm1hdGVyaWFsaXplLXJlZC10ZXh0IHtcXG4gIGNvbG9yOiAjZTUxYzIzICFpbXBvcnRhbnQ7IH1cXG5cXG4ubWF0ZXJpYWxpemUtcmVkLmxpZ2h0ZW4tNSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmRlYWViICFpbXBvcnRhbnQ7IH1cXG5cXG4ubWF0ZXJpYWxpemUtcmVkLXRleHQudGV4dC1saWdodGVuLTUge1xcbiAgY29sb3I6ICNmZGVhZWIgIWltcG9ydGFudDsgfVxcblxcbi5tYXRlcmlhbGl6ZS1yZWQubGlnaHRlbi00IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmOGMxYzMgIWltcG9ydGFudDsgfVxcblxcbi5tYXRlcmlhbGl6ZS1yZWQtdGV4dC50ZXh0LWxpZ2h0ZW4tNCB7XFxuICBjb2xvcjogI2Y4YzFjMyAhaW1wb3J0YW50OyB9XFxuXFxuLm1hdGVyaWFsaXplLXJlZC5saWdodGVuLTMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YzOTg5YiAhaW1wb3J0YW50OyB9XFxuXFxuLm1hdGVyaWFsaXplLXJlZC10ZXh0LnRleHQtbGlnaHRlbi0zIHtcXG4gIGNvbG9yOiAjZjM5ODliICFpbXBvcnRhbnQ7IH1cXG5cXG4ubWF0ZXJpYWxpemUtcmVkLmxpZ2h0ZW4tMiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWU2ZTczICFpbXBvcnRhbnQ7IH1cXG5cXG4ubWF0ZXJpYWxpemUtcmVkLXRleHQudGV4dC1saWdodGVuLTIge1xcbiAgY29sb3I6ICNlZTZlNzMgIWltcG9ydGFudDsgfVxcblxcbi5tYXRlcmlhbGl6ZS1yZWQubGlnaHRlbi0xIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlYTQ1NGIgIWltcG9ydGFudDsgfVxcblxcbi5tYXRlcmlhbGl6ZS1yZWQtdGV4dC50ZXh0LWxpZ2h0ZW4tMSB7XFxuICBjb2xvcjogI2VhNDU0YiAhaW1wb3J0YW50OyB9XFxuXFxuLm1hdGVyaWFsaXplLXJlZC5kYXJrZW4tMSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDAxODFlICFpbXBvcnRhbnQ7IH1cXG5cXG4ubWF0ZXJpYWxpemUtcmVkLXRleHQudGV4dC1kYXJrZW4tMSB7XFxuICBjb2xvcjogI2QwMTgxZSAhaW1wb3J0YW50OyB9XFxuXFxuLm1hdGVyaWFsaXplLXJlZC5kYXJrZW4tMiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjkxNTFiICFpbXBvcnRhbnQ7IH1cXG5cXG4ubWF0ZXJpYWxpemUtcmVkLXRleHQudGV4dC1kYXJrZW4tMiB7XFxuICBjb2xvcjogI2I5MTUxYiAhaW1wb3J0YW50OyB9XFxuXFxuLm1hdGVyaWFsaXplLXJlZC5kYXJrZW4tMyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYTIxMzE4ICFpbXBvcnRhbnQ7IH1cXG5cXG4ubWF0ZXJpYWxpemUtcmVkLXRleHQudGV4dC1kYXJrZW4tMyB7XFxuICBjb2xvcjogI2EyMTMxOCAhaW1wb3J0YW50OyB9XFxuXFxuLm1hdGVyaWFsaXplLXJlZC5kYXJrZW4tNCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjOGIxMDE0ICFpbXBvcnRhbnQ7IH1cXG5cXG4ubWF0ZXJpYWxpemUtcmVkLXRleHQudGV4dC1kYXJrZW4tNCB7XFxuICBjb2xvcjogIzhiMTAxNCAhaW1wb3J0YW50OyB9XFxuXFxuLnJlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjQ0MzM2ICFpbXBvcnRhbnQ7IH1cXG5cXG4ucmVkLXRleHQge1xcbiAgY29sb3I6ICNGNDQzMzYgIWltcG9ydGFudDsgfVxcblxcbi5yZWQubGlnaHRlbi01IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNGRkVCRUUgIWltcG9ydGFudDsgfVxcblxcbi5yZWQtdGV4dC50ZXh0LWxpZ2h0ZW4tNSB7XFxuICBjb2xvcjogI0ZGRUJFRSAhaW1wb3J0YW50OyB9XFxuXFxuLnJlZC5saWdodGVuLTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI0ZGQ0REMiAhaW1wb3J0YW50OyB9XFxuXFxuLnJlZC10ZXh0LnRleHQtbGlnaHRlbi00IHtcXG4gIGNvbG9yOiAjRkZDREQyICFpbXBvcnRhbnQ7IH1cXG5cXG4ucmVkLmxpZ2h0ZW4tMyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRUY5QTlBICFpbXBvcnRhbnQ7IH1cXG5cXG4ucmVkLXRleHQudGV4dC1saWdodGVuLTMge1xcbiAgY29sb3I6ICNFRjlBOUEgIWltcG9ydGFudDsgfVxcblxcbi5yZWQubGlnaHRlbi0yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNFNTczNzMgIWltcG9ydGFudDsgfVxcblxcbi5yZWQtdGV4dC50ZXh0LWxpZ2h0ZW4tMiB7XFxuICBjb2xvcjogI0U1NzM3MyAhaW1wb3J0YW50OyB9XFxuXFxuLnJlZC5saWdodGVuLTEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI0VGNTM1MCAhaW1wb3J0YW50OyB9XFxuXFxuLnJlZC10ZXh0LnRleHQtbGlnaHRlbi0xIHtcXG4gIGNvbG9yOiAjRUY1MzUwICFpbXBvcnRhbnQ7IH1cXG5cXG4ucmVkLmRhcmtlbi0xIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNFNTM5MzUgIWltcG9ydGFudDsgfVxcblxcbi5yZWQtdGV4dC50ZXh0LWRhcmtlbi0xIHtcXG4gIGNvbG9yOiAjRTUzOTM1ICFpbXBvcnRhbnQ7IH1cXG5cXG4ucmVkLmRhcmtlbi0yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNEMzJGMkYgIWltcG9ydGFudDsgfVxcblxcbi5yZWQtdGV4dC50ZXh0LWRhcmtlbi0yIHtcXG4gIGNvbG9yOiAjRDMyRjJGICFpbXBvcnRhbnQ7IH1cXG5cXG4ucmVkLmRhcmtlbi0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNDNjI4MjggIWltcG9ydGFudDsgfVxcblxcbi5yZWQtdGV4dC50ZXh0LWRhcmtlbi0zIHtcXG4gIGNvbG9yOiAjQzYyODI4ICFpbXBvcnRhbnQ7IH1cXG5cXG4ucmVkLmRhcmtlbi00IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNCNzFDMUMgIWltcG9ydGFudDsgfVxcblxcbi5yZWQtdGV4dC50ZXh0LWRhcmtlbi00IHtcXG4gIGNvbG9yOiAjQjcxQzFDICFpbXBvcnRhbnQ7IH1cXG5cXG4ucmVkLmFjY2VudC0xIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNGRjhBODAgIWltcG9ydGFudDsgfVxcblxcbi5yZWQtdGV4dC50ZXh0LWFjY2VudC0xIHtcXG4gIGNvbG9yOiAjRkY4QTgwICFpbXBvcnRhbnQ7IH1cXG5cXG4ucmVkLmFjY2VudC0yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNGRjUyNTIgIWltcG9ydGFudDsgfVxcblxcbi5yZWQtdGV4dC50ZXh0LWFjY2VudC0yIHtcXG4gIGNvbG9yOiAjRkY1MjUyICFpbXBvcnRhbnQ7IH1cXG5cXG4ucmVkLmFjY2VudC0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNGRjE3NDQgIWltcG9ydGFudDsgfVxcblxcbi5yZWQtdGV4dC50ZXh0LWFjY2VudC0zIHtcXG4gIGNvbG9yOiAjRkYxNzQ0ICFpbXBvcnRhbnQ7IH1cXG5cXG4ucmVkLmFjY2VudC00IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNENTAwMDAgIWltcG9ydGFudDsgfVxcblxcbi5yZWQtdGV4dC50ZXh0LWFjY2VudC00IHtcXG4gIGNvbG9yOiAjRDUwMDAwICFpbXBvcnRhbnQ7IH1cXG5cXG4ucGluayB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTkxZTYzICFpbXBvcnRhbnQ7IH1cXG5cXG4ucGluay10ZXh0IHtcXG4gIGNvbG9yOiAjZTkxZTYzICFpbXBvcnRhbnQ7IH1cXG5cXG4ucGluay5saWdodGVuLTUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZjZTRlYyAhaW1wb3J0YW50OyB9XFxuXFxuLnBpbmstdGV4dC50ZXh0LWxpZ2h0ZW4tNSB7XFxuICBjb2xvcjogI2ZjZTRlYyAhaW1wb3J0YW50OyB9XFxuXFxuLnBpbmsubGlnaHRlbi00IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmOGJiZDAgIWltcG9ydGFudDsgfVxcblxcbi5waW5rLXRleHQudGV4dC1saWdodGVuLTQge1xcbiAgY29sb3I6ICNmOGJiZDAgIWltcG9ydGFudDsgfVxcblxcbi5waW5rLmxpZ2h0ZW4tMyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjQ4ZmIxICFpbXBvcnRhbnQ7IH1cXG5cXG4ucGluay10ZXh0LnRleHQtbGlnaHRlbi0zIHtcXG4gIGNvbG9yOiAjZjQ4ZmIxICFpbXBvcnRhbnQ7IH1cXG5cXG4ucGluay5saWdodGVuLTIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YwNjI5MiAhaW1wb3J0YW50OyB9XFxuXFxuLnBpbmstdGV4dC50ZXh0LWxpZ2h0ZW4tMiB7XFxuICBjb2xvcjogI2YwNjI5MiAhaW1wb3J0YW50OyB9XFxuXFxuLnBpbmsubGlnaHRlbi0xIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlYzQwN2EgIWltcG9ydGFudDsgfVxcblxcbi5waW5rLXRleHQudGV4dC1saWdodGVuLTEge1xcbiAgY29sb3I6ICNlYzQwN2EgIWltcG9ydGFudDsgfVxcblxcbi5waW5rLmRhcmtlbi0xIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkODFiNjAgIWltcG9ydGFudDsgfVxcblxcbi5waW5rLXRleHQudGV4dC1kYXJrZW4tMSB7XFxuICBjb2xvcjogI2Q4MWI2MCAhaW1wb3J0YW50OyB9XFxuXFxuLnBpbmsuZGFya2VuLTIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2MyMTg1YiAhaW1wb3J0YW50OyB9XFxuXFxuLnBpbmstdGV4dC50ZXh0LWRhcmtlbi0yIHtcXG4gIGNvbG9yOiAjYzIxODViICFpbXBvcnRhbnQ7IH1cXG5cXG4ucGluay5kYXJrZW4tMyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYWQxNDU3ICFpbXBvcnRhbnQ7IH1cXG5cXG4ucGluay10ZXh0LnRleHQtZGFya2VuLTMge1xcbiAgY29sb3I6ICNhZDE0NTcgIWltcG9ydGFudDsgfVxcblxcbi5waW5rLmRhcmtlbi00IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM4ODBlNGYgIWltcG9ydGFudDsgfVxcblxcbi5waW5rLXRleHQudGV4dC1kYXJrZW4tNCB7XFxuICBjb2xvcjogIzg4MGU0ZiAhaW1wb3J0YW50OyB9XFxuXFxuLnBpbmsuYWNjZW50LTEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmODBhYiAhaW1wb3J0YW50OyB9XFxuXFxuLnBpbmstdGV4dC50ZXh0LWFjY2VudC0xIHtcXG4gIGNvbG9yOiAjZmY4MGFiICFpbXBvcnRhbnQ7IH1cXG5cXG4ucGluay5hY2NlbnQtMiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmY0MDgxICFpbXBvcnRhbnQ7IH1cXG5cXG4ucGluay10ZXh0LnRleHQtYWNjZW50LTIge1xcbiAgY29sb3I6ICNmZjQwODEgIWltcG9ydGFudDsgfVxcblxcbi5waW5rLmFjY2VudC0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmNTAwNTcgIWltcG9ydGFudDsgfVxcblxcbi5waW5rLXRleHQudGV4dC1hY2NlbnQtMyB7XFxuICBjb2xvcjogI2Y1MDA1NyAhaW1wb3J0YW50OyB9XFxuXFxuLnBpbmsuYWNjZW50LTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2M1MTE2MiAhaW1wb3J0YW50OyB9XFxuXFxuLnBpbmstdGV4dC50ZXh0LWFjY2VudC00IHtcXG4gIGNvbG9yOiAjYzUxMTYyICFpbXBvcnRhbnQ7IH1cXG5cXG4ucHVycGxlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM5YzI3YjAgIWltcG9ydGFudDsgfVxcblxcbi5wdXJwbGUtdGV4dCB7XFxuICBjb2xvcjogIzljMjdiMCAhaW1wb3J0YW50OyB9XFxuXFxuLnB1cnBsZS5saWdodGVuLTUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YzZTVmNSAhaW1wb3J0YW50OyB9XFxuXFxuLnB1cnBsZS10ZXh0LnRleHQtbGlnaHRlbi01IHtcXG4gIGNvbG9yOiAjZjNlNWY1ICFpbXBvcnRhbnQ7IH1cXG5cXG4ucHVycGxlLmxpZ2h0ZW4tNCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTFiZWU3ICFpbXBvcnRhbnQ7IH1cXG5cXG4ucHVycGxlLXRleHQudGV4dC1saWdodGVuLTQge1xcbiAgY29sb3I6ICNlMWJlZTcgIWltcG9ydGFudDsgfVxcblxcbi5wdXJwbGUubGlnaHRlbi0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNjZTkzZDggIWltcG9ydGFudDsgfVxcblxcbi5wdXJwbGUtdGV4dC50ZXh0LWxpZ2h0ZW4tMyB7XFxuICBjb2xvcjogI2NlOTNkOCAhaW1wb3J0YW50OyB9XFxuXFxuLnB1cnBsZS5saWdodGVuLTIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2JhNjhjOCAhaW1wb3J0YW50OyB9XFxuXFxuLnB1cnBsZS10ZXh0LnRleHQtbGlnaHRlbi0yIHtcXG4gIGNvbG9yOiAjYmE2OGM4ICFpbXBvcnRhbnQ7IH1cXG5cXG4ucHVycGxlLmxpZ2h0ZW4tMSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYWI0N2JjICFpbXBvcnRhbnQ7IH1cXG5cXG4ucHVycGxlLXRleHQudGV4dC1saWdodGVuLTEge1xcbiAgY29sb3I6ICNhYjQ3YmMgIWltcG9ydGFudDsgfVxcblxcbi5wdXJwbGUuZGFya2VuLTEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzhlMjRhYSAhaW1wb3J0YW50OyB9XFxuXFxuLnB1cnBsZS10ZXh0LnRleHQtZGFya2VuLTEge1xcbiAgY29sb3I6ICM4ZTI0YWEgIWltcG9ydGFudDsgfVxcblxcbi5wdXJwbGUuZGFya2VuLTIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzdiMWZhMiAhaW1wb3J0YW50OyB9XFxuXFxuLnB1cnBsZS10ZXh0LnRleHQtZGFya2VuLTIge1xcbiAgY29sb3I6ICM3YjFmYTIgIWltcG9ydGFudDsgfVxcblxcbi5wdXJwbGUuZGFya2VuLTMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzZhMWI5YSAhaW1wb3J0YW50OyB9XFxuXFxuLnB1cnBsZS10ZXh0LnRleHQtZGFya2VuLTMge1xcbiAgY29sb3I6ICM2YTFiOWEgIWltcG9ydGFudDsgfVxcblxcbi5wdXJwbGUuZGFya2VuLTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzRhMTQ4YyAhaW1wb3J0YW50OyB9XFxuXFxuLnB1cnBsZS10ZXh0LnRleHQtZGFya2VuLTQge1xcbiAgY29sb3I6ICM0YTE0OGMgIWltcG9ydGFudDsgfVxcblxcbi5wdXJwbGUuYWNjZW50LTEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VhODBmYyAhaW1wb3J0YW50OyB9XFxuXFxuLnB1cnBsZS10ZXh0LnRleHQtYWNjZW50LTEge1xcbiAgY29sb3I6ICNlYTgwZmMgIWltcG9ydGFudDsgfVxcblxcbi5wdXJwbGUuYWNjZW50LTIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2UwNDBmYiAhaW1wb3J0YW50OyB9XFxuXFxuLnB1cnBsZS10ZXh0LnRleHQtYWNjZW50LTIge1xcbiAgY29sb3I6ICNlMDQwZmIgIWltcG9ydGFudDsgfVxcblxcbi5wdXJwbGUuYWNjZW50LTMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Q1MDBmOSAhaW1wb3J0YW50OyB9XFxuXFxuLnB1cnBsZS10ZXh0LnRleHQtYWNjZW50LTMge1xcbiAgY29sb3I6ICNkNTAwZjkgIWltcG9ydGFudDsgfVxcblxcbi5wdXJwbGUuYWNjZW50LTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2EwZiAhaW1wb3J0YW50OyB9XFxuXFxuLnB1cnBsZS10ZXh0LnRleHQtYWNjZW50LTQge1xcbiAgY29sb3I6ICNhMGYgIWltcG9ydGFudDsgfVxcblxcbi5kZWVwLXB1cnBsZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjczYWI3ICFpbXBvcnRhbnQ7IH1cXG5cXG4uZGVlcC1wdXJwbGUtdGV4dCB7XFxuICBjb2xvcjogIzY3M2FiNyAhaW1wb3J0YW50OyB9XFxuXFxuLmRlZXAtcHVycGxlLmxpZ2h0ZW4tNSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWRlN2Y2ICFpbXBvcnRhbnQ7IH1cXG5cXG4uZGVlcC1wdXJwbGUtdGV4dC50ZXh0LWxpZ2h0ZW4tNSB7XFxuICBjb2xvcjogI2VkZTdmNiAhaW1wb3J0YW50OyB9XFxuXFxuLmRlZXAtcHVycGxlLmxpZ2h0ZW4tNCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDFjNGU5ICFpbXBvcnRhbnQ7IH1cXG5cXG4uZGVlcC1wdXJwbGUtdGV4dC50ZXh0LWxpZ2h0ZW4tNCB7XFxuICBjb2xvcjogI2QxYzRlOSAhaW1wb3J0YW50OyB9XFxuXFxuLmRlZXAtcHVycGxlLmxpZ2h0ZW4tMyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjM5ZGRiICFpbXBvcnRhbnQ7IH1cXG5cXG4uZGVlcC1wdXJwbGUtdGV4dC50ZXh0LWxpZ2h0ZW4tMyB7XFxuICBjb2xvcjogI2IzOWRkYiAhaW1wb3J0YW50OyB9XFxuXFxuLmRlZXAtcHVycGxlLmxpZ2h0ZW4tMiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTU3NWNkICFpbXBvcnRhbnQ7IH1cXG5cXG4uZGVlcC1wdXJwbGUtdGV4dC50ZXh0LWxpZ2h0ZW4tMiB7XFxuICBjb2xvcjogIzk1NzVjZCAhaW1wb3J0YW50OyB9XFxuXFxuLmRlZXAtcHVycGxlLmxpZ2h0ZW4tMSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjN2U1N2MyICFpbXBvcnRhbnQ7IH1cXG5cXG4uZGVlcC1wdXJwbGUtdGV4dC50ZXh0LWxpZ2h0ZW4tMSB7XFxuICBjb2xvcjogIzdlNTdjMiAhaW1wb3J0YW50OyB9XFxuXFxuLmRlZXAtcHVycGxlLmRhcmtlbi0xIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM1ZTM1YjEgIWltcG9ydGFudDsgfVxcblxcbi5kZWVwLXB1cnBsZS10ZXh0LnRleHQtZGFya2VuLTEge1xcbiAgY29sb3I6ICM1ZTM1YjEgIWltcG9ydGFudDsgfVxcblxcbi5kZWVwLXB1cnBsZS5kYXJrZW4tMiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTEyZGE4ICFpbXBvcnRhbnQ7IH1cXG5cXG4uZGVlcC1wdXJwbGUtdGV4dC50ZXh0LWRhcmtlbi0yIHtcXG4gIGNvbG9yOiAjNTEyZGE4ICFpbXBvcnRhbnQ7IH1cXG5cXG4uZGVlcC1wdXJwbGUuZGFya2VuLTMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzQ1MjdhMCAhaW1wb3J0YW50OyB9XFxuXFxuLmRlZXAtcHVycGxlLXRleHQudGV4dC1kYXJrZW4tMyB7XFxuICBjb2xvcjogIzQ1MjdhMCAhaW1wb3J0YW50OyB9XFxuXFxuLmRlZXAtcHVycGxlLmRhcmtlbi00IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzMTFiOTIgIWltcG9ydGFudDsgfVxcblxcbi5kZWVwLXB1cnBsZS10ZXh0LnRleHQtZGFya2VuLTQge1xcbiAgY29sb3I6ICMzMTFiOTIgIWltcG9ydGFudDsgfVxcblxcbi5kZWVwLXB1cnBsZS5hY2NlbnQtMSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjM4OGZmICFpbXBvcnRhbnQ7IH1cXG5cXG4uZGVlcC1wdXJwbGUtdGV4dC50ZXh0LWFjY2VudC0xIHtcXG4gIGNvbG9yOiAjYjM4OGZmICFpbXBvcnRhbnQ7IH1cXG5cXG4uZGVlcC1wdXJwbGUuYWNjZW50LTIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzdjNGRmZiAhaW1wb3J0YW50OyB9XFxuXFxuLmRlZXAtcHVycGxlLXRleHQudGV4dC1hY2NlbnQtMiB7XFxuICBjb2xvcjogIzdjNGRmZiAhaW1wb3J0YW50OyB9XFxuXFxuLmRlZXAtcHVycGxlLmFjY2VudC0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM2NTFmZmYgIWltcG9ydGFudDsgfVxcblxcbi5kZWVwLXB1cnBsZS10ZXh0LnRleHQtYWNjZW50LTMge1xcbiAgY29sb3I6ICM2NTFmZmYgIWltcG9ydGFudDsgfVxcblxcbi5kZWVwLXB1cnBsZS5hY2NlbnQtNCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjIwMGVhICFpbXBvcnRhbnQ7IH1cXG5cXG4uZGVlcC1wdXJwbGUtdGV4dC50ZXh0LWFjY2VudC00IHtcXG4gIGNvbG9yOiAjNjIwMGVhICFpbXBvcnRhbnQ7IH1cXG5cXG4uaW5kaWdvIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzZjUxYjUgIWltcG9ydGFudDsgfVxcblxcbi5pbmRpZ28tdGV4dCB7XFxuICBjb2xvcjogIzNmNTFiNSAhaW1wb3J0YW50OyB9XFxuXFxuLmluZGlnby5saWdodGVuLTUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U4ZWFmNiAhaW1wb3J0YW50OyB9XFxuXFxuLmluZGlnby10ZXh0LnRleHQtbGlnaHRlbi01IHtcXG4gIGNvbG9yOiAjZThlYWY2ICFpbXBvcnRhbnQ7IH1cXG5cXG4uaW5kaWdvLmxpZ2h0ZW4tNCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzVjYWU5ICFpbXBvcnRhbnQ7IH1cXG5cXG4uaW5kaWdvLXRleHQudGV4dC1saWdodGVuLTQge1xcbiAgY29sb3I6ICNjNWNhZTkgIWltcG9ydGFudDsgfVxcblxcbi5pbmRpZ28ubGlnaHRlbi0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM5ZmE4ZGEgIWltcG9ydGFudDsgfVxcblxcbi5pbmRpZ28tdGV4dC50ZXh0LWxpZ2h0ZW4tMyB7XFxuICBjb2xvcjogIzlmYThkYSAhaW1wb3J0YW50OyB9XFxuXFxuLmluZGlnby5saWdodGVuLTIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzc5ODZjYiAhaW1wb3J0YW50OyB9XFxuXFxuLmluZGlnby10ZXh0LnRleHQtbGlnaHRlbi0yIHtcXG4gIGNvbG9yOiAjNzk4NmNiICFpbXBvcnRhbnQ7IH1cXG5cXG4uaW5kaWdvLmxpZ2h0ZW4tMSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNWM2YmMwICFpbXBvcnRhbnQ7IH1cXG5cXG4uaW5kaWdvLXRleHQudGV4dC1saWdodGVuLTEge1xcbiAgY29sb3I6ICM1YzZiYzAgIWltcG9ydGFudDsgfVxcblxcbi5pbmRpZ28uZGFya2VuLTEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzM5NDlhYiAhaW1wb3J0YW50OyB9XFxuXFxuLmluZGlnby10ZXh0LnRleHQtZGFya2VuLTEge1xcbiAgY29sb3I6ICMzOTQ5YWIgIWltcG9ydGFudDsgfVxcblxcbi5pbmRpZ28uZGFya2VuLTIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzMwM2Y5ZiAhaW1wb3J0YW50OyB9XFxuXFxuLmluZGlnby10ZXh0LnRleHQtZGFya2VuLTIge1xcbiAgY29sb3I6ICMzMDNmOWYgIWltcG9ydGFudDsgfVxcblxcbi5pbmRpZ28uZGFya2VuLTMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI4MzU5MyAhaW1wb3J0YW50OyB9XFxuXFxuLmluZGlnby10ZXh0LnRleHQtZGFya2VuLTMge1xcbiAgY29sb3I6ICMyODM1OTMgIWltcG9ydGFudDsgfVxcblxcbi5pbmRpZ28uZGFya2VuLTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzFhMjM3ZSAhaW1wb3J0YW50OyB9XFxuXFxuLmluZGlnby10ZXh0LnRleHQtZGFya2VuLTQge1xcbiAgY29sb3I6ICMxYTIzN2UgIWltcG9ydGFudDsgfVxcblxcbi5pbmRpZ28uYWNjZW50LTEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzhjOWVmZiAhaW1wb3J0YW50OyB9XFxuXFxuLmluZGlnby10ZXh0LnRleHQtYWNjZW50LTEge1xcbiAgY29sb3I6ICM4YzllZmYgIWltcG9ydGFudDsgfVxcblxcbi5pbmRpZ28uYWNjZW50LTIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzUzNmRmZSAhaW1wb3J0YW50OyB9XFxuXFxuLmluZGlnby10ZXh0LnRleHQtYWNjZW50LTIge1xcbiAgY29sb3I6ICM1MzZkZmUgIWltcG9ydGFudDsgfVxcblxcbi5pbmRpZ28uYWNjZW50LTMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzNkNWFmZSAhaW1wb3J0YW50OyB9XFxuXFxuLmluZGlnby10ZXh0LnRleHQtYWNjZW50LTMge1xcbiAgY29sb3I6ICMzZDVhZmUgIWltcG9ydGFudDsgfVxcblxcbi5pbmRpZ28uYWNjZW50LTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzMwNGZmZSAhaW1wb3J0YW50OyB9XFxuXFxuLmluZGlnby10ZXh0LnRleHQtYWNjZW50LTQge1xcbiAgY29sb3I6ICMzMDRmZmUgIWltcG9ydGFudDsgfVxcblxcbi5ibHVlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyMTk2RjMgIWltcG9ydGFudDsgfVxcblxcbi5ibHVlLXRleHQge1xcbiAgY29sb3I6ICMyMTk2RjMgIWltcG9ydGFudDsgfVxcblxcbi5ibHVlLmxpZ2h0ZW4tNSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRTNGMkZEICFpbXBvcnRhbnQ7IH1cXG5cXG4uYmx1ZS10ZXh0LnRleHQtbGlnaHRlbi01IHtcXG4gIGNvbG9yOiAjRTNGMkZEICFpbXBvcnRhbnQ7IH1cXG5cXG4uYmx1ZS5saWdodGVuLTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI0JCREVGQiAhaW1wb3J0YW50OyB9XFxuXFxuLmJsdWUtdGV4dC50ZXh0LWxpZ2h0ZW4tNCB7XFxuICBjb2xvcjogI0JCREVGQiAhaW1wb3J0YW50OyB9XFxuXFxuLmJsdWUubGlnaHRlbi0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM5MENBRjkgIWltcG9ydGFudDsgfVxcblxcbi5ibHVlLXRleHQudGV4dC1saWdodGVuLTMge1xcbiAgY29sb3I6ICM5MENBRjkgIWltcG9ydGFudDsgfVxcblxcbi5ibHVlLmxpZ2h0ZW4tMiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjRCNUY2ICFpbXBvcnRhbnQ7IH1cXG5cXG4uYmx1ZS10ZXh0LnRleHQtbGlnaHRlbi0yIHtcXG4gIGNvbG9yOiAjNjRCNUY2ICFpbXBvcnRhbnQ7IH1cXG5cXG4uYmx1ZS5saWdodGVuLTEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzQyQTVGNSAhaW1wb3J0YW50OyB9XFxuXFxuLmJsdWUtdGV4dC50ZXh0LWxpZ2h0ZW4tMSB7XFxuICBjb2xvcjogIzQyQTVGNSAhaW1wb3J0YW50OyB9XFxuXFxuLmJsdWUuZGFya2VuLTEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzFFODhFNSAhaW1wb3J0YW50OyB9XFxuXFxuLmJsdWUtdGV4dC50ZXh0LWRhcmtlbi0xIHtcXG4gIGNvbG9yOiAjMUU4OEU1ICFpbXBvcnRhbnQ7IH1cXG5cXG4uYmx1ZS5kYXJrZW4tMiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTk3NkQyICFpbXBvcnRhbnQ7IH1cXG5cXG4uYmx1ZS10ZXh0LnRleHQtZGFya2VuLTIge1xcbiAgY29sb3I6ICMxOTc2RDIgIWltcG9ydGFudDsgfVxcblxcbi5ibHVlLmRhcmtlbi0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxNTY1QzAgIWltcG9ydGFudDsgfVxcblxcbi5ibHVlLXRleHQudGV4dC1kYXJrZW4tMyB7XFxuICBjb2xvcjogIzE1NjVDMCAhaW1wb3J0YW50OyB9XFxuXFxuLmJsdWUuZGFya2VuLTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzBENDdBMSAhaW1wb3J0YW50OyB9XFxuXFxuLmJsdWUtdGV4dC50ZXh0LWRhcmtlbi00IHtcXG4gIGNvbG9yOiAjMEQ0N0ExICFpbXBvcnRhbnQ7IH1cXG5cXG4uYmx1ZS5hY2NlbnQtMSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjODJCMUZGICFpbXBvcnRhbnQ7IH1cXG5cXG4uYmx1ZS10ZXh0LnRleHQtYWNjZW50LTEge1xcbiAgY29sb3I6ICM4MkIxRkYgIWltcG9ydGFudDsgfVxcblxcbi5ibHVlLmFjY2VudC0yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM0NDhBRkYgIWltcG9ydGFudDsgfVxcblxcbi5ibHVlLXRleHQudGV4dC1hY2NlbnQtMiB7XFxuICBjb2xvcjogIzQ0OEFGRiAhaW1wb3J0YW50OyB9XFxuXFxuLmJsdWUuYWNjZW50LTMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI5NzlGRiAhaW1wb3J0YW50OyB9XFxuXFxuLmJsdWUtdGV4dC50ZXh0LWFjY2VudC0zIHtcXG4gIGNvbG9yOiAjMjk3OUZGICFpbXBvcnRhbnQ7IH1cXG5cXG4uYmx1ZS5hY2NlbnQtNCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjk2MkZGICFpbXBvcnRhbnQ7IH1cXG5cXG4uYmx1ZS10ZXh0LnRleHQtYWNjZW50LTQge1xcbiAgY29sb3I6ICMyOTYyRkYgIWltcG9ydGFudDsgfVxcblxcbi5saWdodC1ibHVlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwM2E5ZjQgIWltcG9ydGFudDsgfVxcblxcbi5saWdodC1ibHVlLXRleHQge1xcbiAgY29sb3I6ICMwM2E5ZjQgIWltcG9ydGFudDsgfVxcblxcbi5saWdodC1ibHVlLmxpZ2h0ZW4tNSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTFmNWZlICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGlnaHQtYmx1ZS10ZXh0LnRleHQtbGlnaHRlbi01IHtcXG4gIGNvbG9yOiAjZTFmNWZlICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGlnaHQtYmx1ZS5saWdodGVuLTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2IzZTVmYyAhaW1wb3J0YW50OyB9XFxuXFxuLmxpZ2h0LWJsdWUtdGV4dC50ZXh0LWxpZ2h0ZW4tNCB7XFxuICBjb2xvcjogI2IzZTVmYyAhaW1wb3J0YW50OyB9XFxuXFxuLmxpZ2h0LWJsdWUubGlnaHRlbi0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM4MWQ0ZmEgIWltcG9ydGFudDsgfVxcblxcbi5saWdodC1ibHVlLXRleHQudGV4dC1saWdodGVuLTMge1xcbiAgY29sb3I6ICM4MWQ0ZmEgIWltcG9ydGFudDsgfVxcblxcbi5saWdodC1ibHVlLmxpZ2h0ZW4tMiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNGZjM2Y3ICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGlnaHQtYmx1ZS10ZXh0LnRleHQtbGlnaHRlbi0yIHtcXG4gIGNvbG9yOiAjNGZjM2Y3ICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGlnaHQtYmx1ZS5saWdodGVuLTEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI5YjZmNiAhaW1wb3J0YW50OyB9XFxuXFxuLmxpZ2h0LWJsdWUtdGV4dC50ZXh0LWxpZ2h0ZW4tMSB7XFxuICBjb2xvcjogIzI5YjZmNiAhaW1wb3J0YW50OyB9XFxuXFxuLmxpZ2h0LWJsdWUuZGFya2VuLTEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAzOWJlNSAhaW1wb3J0YW50OyB9XFxuXFxuLmxpZ2h0LWJsdWUtdGV4dC50ZXh0LWRhcmtlbi0xIHtcXG4gIGNvbG9yOiAjMDM5YmU1ICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGlnaHQtYmx1ZS5kYXJrZW4tMiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDI4OGQxICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGlnaHQtYmx1ZS10ZXh0LnRleHQtZGFya2VuLTIge1xcbiAgY29sb3I6ICMwMjg4ZDEgIWltcG9ydGFudDsgfVxcblxcbi5saWdodC1ibHVlLmRhcmtlbi0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMjc3YmQgIWltcG9ydGFudDsgfVxcblxcbi5saWdodC1ibHVlLXRleHQudGV4dC1kYXJrZW4tMyB7XFxuICBjb2xvcjogIzAyNzdiZCAhaW1wb3J0YW50OyB9XFxuXFxuLmxpZ2h0LWJsdWUuZGFya2VuLTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAxNTc5YiAhaW1wb3J0YW50OyB9XFxuXFxuLmxpZ2h0LWJsdWUtdGV4dC50ZXh0LWRhcmtlbi00IHtcXG4gIGNvbG9yOiAjMDE1NzliICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGlnaHQtYmx1ZS5hY2NlbnQtMSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjODBkOGZmICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGlnaHQtYmx1ZS10ZXh0LnRleHQtYWNjZW50LTEge1xcbiAgY29sb3I6ICM4MGQ4ZmYgIWltcG9ydGFudDsgfVxcblxcbi5saWdodC1ibHVlLmFjY2VudC0yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM0MGM0ZmYgIWltcG9ydGFudDsgfVxcblxcbi5saWdodC1ibHVlLXRleHQudGV4dC1hY2NlbnQtMiB7XFxuICBjb2xvcjogIzQwYzRmZiAhaW1wb3J0YW50OyB9XFxuXFxuLmxpZ2h0LWJsdWUuYWNjZW50LTMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwYjBmZiAhaW1wb3J0YW50OyB9XFxuXFxuLmxpZ2h0LWJsdWUtdGV4dC50ZXh0LWFjY2VudC0zIHtcXG4gIGNvbG9yOiAjMDBiMGZmICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGlnaHQtYmx1ZS5hY2NlbnQtNCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA5MWVhICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGlnaHQtYmx1ZS10ZXh0LnRleHQtYWNjZW50LTQge1xcbiAgY29sb3I6ICMwMDkxZWEgIWltcG9ydGFudDsgfVxcblxcbi5jeWFuIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMGJjZDQgIWltcG9ydGFudDsgfVxcblxcbi5jeWFuLXRleHQge1xcbiAgY29sb3I6ICMwMGJjZDQgIWltcG9ydGFudDsgfVxcblxcbi5jeWFuLmxpZ2h0ZW4tNSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTBmN2ZhICFpbXBvcnRhbnQ7IH1cXG5cXG4uY3lhbi10ZXh0LnRleHQtbGlnaHRlbi01IHtcXG4gIGNvbG9yOiAjZTBmN2ZhICFpbXBvcnRhbnQ7IH1cXG5cXG4uY3lhbi5saWdodGVuLTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2IyZWJmMiAhaW1wb3J0YW50OyB9XFxuXFxuLmN5YW4tdGV4dC50ZXh0LWxpZ2h0ZW4tNCB7XFxuICBjb2xvcjogI2IyZWJmMiAhaW1wb3J0YW50OyB9XFxuXFxuLmN5YW4ubGlnaHRlbi0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM4MGRlZWEgIWltcG9ydGFudDsgfVxcblxcbi5jeWFuLXRleHQudGV4dC1saWdodGVuLTMge1xcbiAgY29sb3I6ICM4MGRlZWEgIWltcG9ydGFudDsgfVxcblxcbi5jeWFuLmxpZ2h0ZW4tMiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNGRkMGUxICFpbXBvcnRhbnQ7IH1cXG5cXG4uY3lhbi10ZXh0LnRleHQtbGlnaHRlbi0yIHtcXG4gIGNvbG9yOiAjNGRkMGUxICFpbXBvcnRhbnQ7IH1cXG5cXG4uY3lhbi5saWdodGVuLTEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI2YzZkYSAhaW1wb3J0YW50OyB9XFxuXFxuLmN5YW4tdGV4dC50ZXh0LWxpZ2h0ZW4tMSB7XFxuICBjb2xvcjogIzI2YzZkYSAhaW1wb3J0YW50OyB9XFxuXFxuLmN5YW4uZGFya2VuLTEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwYWNjMSAhaW1wb3J0YW50OyB9XFxuXFxuLmN5YW4tdGV4dC50ZXh0LWRhcmtlbi0xIHtcXG4gIGNvbG9yOiAjMDBhY2MxICFpbXBvcnRhbnQ7IH1cXG5cXG4uY3lhbi5kYXJrZW4tMiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA5N2E3ICFpbXBvcnRhbnQ7IH1cXG5cXG4uY3lhbi10ZXh0LnRleHQtZGFya2VuLTIge1xcbiAgY29sb3I6ICMwMDk3YTcgIWltcG9ydGFudDsgfVxcblxcbi5jeWFuLmRhcmtlbi0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDgzOGYgIWltcG9ydGFudDsgfVxcblxcbi5jeWFuLXRleHQudGV4dC1kYXJrZW4tMyB7XFxuICBjb2xvcjogIzAwODM4ZiAhaW1wb3J0YW50OyB9XFxuXFxuLmN5YW4uZGFya2VuLTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwNjA2NCAhaW1wb3J0YW50OyB9XFxuXFxuLmN5YW4tdGV4dC50ZXh0LWRhcmtlbi00IHtcXG4gIGNvbG9yOiAjMDA2MDY0ICFpbXBvcnRhbnQ7IH1cXG5cXG4uY3lhbi5hY2NlbnQtMSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjODRmZmZmICFpbXBvcnRhbnQ7IH1cXG5cXG4uY3lhbi10ZXh0LnRleHQtYWNjZW50LTEge1xcbiAgY29sb3I6ICM4NGZmZmYgIWltcG9ydGFudDsgfVxcblxcbi5jeWFuLmFjY2VudC0yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxOGZmZmYgIWltcG9ydGFudDsgfVxcblxcbi5jeWFuLXRleHQudGV4dC1hY2NlbnQtMiB7XFxuICBjb2xvcjogIzE4ZmZmZiAhaW1wb3J0YW50OyB9XFxuXFxuLmN5YW4uYWNjZW50LTMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwZTVmZiAhaW1wb3J0YW50OyB9XFxuXFxuLmN5YW4tdGV4dC50ZXh0LWFjY2VudC0zIHtcXG4gIGNvbG9yOiAjMDBlNWZmICFpbXBvcnRhbnQ7IH1cXG5cXG4uY3lhbi5hY2NlbnQtNCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDBiOGQ0ICFpbXBvcnRhbnQ7IH1cXG5cXG4uY3lhbi10ZXh0LnRleHQtYWNjZW50LTQge1xcbiAgY29sb3I6ICMwMGI4ZDQgIWltcG9ydGFudDsgfVxcblxcbi50ZWFsIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDk2ODggIWltcG9ydGFudDsgfVxcblxcbi50ZWFsLXRleHQge1xcbiAgY29sb3I6ICMwMDk2ODggIWltcG9ydGFudDsgfVxcblxcbi50ZWFsLmxpZ2h0ZW4tNSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTBmMmYxICFpbXBvcnRhbnQ7IH1cXG5cXG4udGVhbC10ZXh0LnRleHQtbGlnaHRlbi01IHtcXG4gIGNvbG9yOiAjZTBmMmYxICFpbXBvcnRhbnQ7IH1cXG5cXG4udGVhbC5saWdodGVuLTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2IyZGZkYiAhaW1wb3J0YW50OyB9XFxuXFxuLnRlYWwtdGV4dC50ZXh0LWxpZ2h0ZW4tNCB7XFxuICBjb2xvcjogI2IyZGZkYiAhaW1wb3J0YW50OyB9XFxuXFxuLnRlYWwubGlnaHRlbi0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM4MGNiYzQgIWltcG9ydGFudDsgfVxcblxcbi50ZWFsLXRleHQudGV4dC1saWdodGVuLTMge1xcbiAgY29sb3I6ICM4MGNiYzQgIWltcG9ydGFudDsgfVxcblxcbi50ZWFsLmxpZ2h0ZW4tMiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNGRiNmFjICFpbXBvcnRhbnQ7IH1cXG5cXG4udGVhbC10ZXh0LnRleHQtbGlnaHRlbi0yIHtcXG4gIGNvbG9yOiAjNGRiNmFjICFpbXBvcnRhbnQ7IH1cXG5cXG4udGVhbC5saWdodGVuLTEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI2YTY5YSAhaW1wb3J0YW50OyB9XFxuXFxuLnRlYWwtdGV4dC50ZXh0LWxpZ2h0ZW4tMSB7XFxuICBjb2xvcjogIzI2YTY5YSAhaW1wb3J0YW50OyB9XFxuXFxuLnRlYWwuZGFya2VuLTEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwODk3YiAhaW1wb3J0YW50OyB9XFxuXFxuLnRlYWwtdGV4dC50ZXh0LWRhcmtlbi0xIHtcXG4gIGNvbG9yOiAjMDA4OTdiICFpbXBvcnRhbnQ7IH1cXG5cXG4udGVhbC5kYXJrZW4tMiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3OTZiICFpbXBvcnRhbnQ7IH1cXG5cXG4udGVhbC10ZXh0LnRleHQtZGFya2VuLTIge1xcbiAgY29sb3I6ICMwMDc5NmIgIWltcG9ydGFudDsgfVxcblxcbi50ZWFsLmRhcmtlbi0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDY5NWMgIWltcG9ydGFudDsgfVxcblxcbi50ZWFsLXRleHQudGV4dC1kYXJrZW4tMyB7XFxuICBjb2xvcjogIzAwNjk1YyAhaW1wb3J0YW50OyB9XFxuXFxuLnRlYWwuZGFya2VuLTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwNGQ0MCAhaW1wb3J0YW50OyB9XFxuXFxuLnRlYWwtdGV4dC50ZXh0LWRhcmtlbi00IHtcXG4gIGNvbG9yOiAjMDA0ZDQwICFpbXBvcnRhbnQ7IH1cXG5cXG4udGVhbC5hY2NlbnQtMSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYTdmZmViICFpbXBvcnRhbnQ7IH1cXG5cXG4udGVhbC10ZXh0LnRleHQtYWNjZW50LTEge1xcbiAgY29sb3I6ICNhN2ZmZWIgIWltcG9ydGFudDsgfVxcblxcbi50ZWFsLmFjY2VudC0yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM2NGZmZGEgIWltcG9ydGFudDsgfVxcblxcbi50ZWFsLXRleHQudGV4dC1hY2NlbnQtMiB7XFxuICBjb2xvcjogIzY0ZmZkYSAhaW1wb3J0YW50OyB9XFxuXFxuLnRlYWwuYWNjZW50LTMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzFkZTliNiAhaW1wb3J0YW50OyB9XFxuXFxuLnRlYWwtdGV4dC50ZXh0LWFjY2VudC0zIHtcXG4gIGNvbG9yOiAjMWRlOWI2ICFpbXBvcnRhbnQ7IH1cXG5cXG4udGVhbC5hY2NlbnQtNCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDBiZmE1ICFpbXBvcnRhbnQ7IH1cXG5cXG4udGVhbC10ZXh0LnRleHQtYWNjZW50LTQge1xcbiAgY29sb3I6ICMwMGJmYTUgIWltcG9ydGFudDsgfVxcblxcbi5ncmVlbiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNENBRjUwICFpbXBvcnRhbnQ7IH1cXG5cXG4uZ3JlZW4tdGV4dCB7XFxuICBjb2xvcjogIzRDQUY1MCAhaW1wb3J0YW50OyB9XFxuXFxuLmdyZWVuLmxpZ2h0ZW4tNSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRThGNUU5ICFpbXBvcnRhbnQ7IH1cXG5cXG4uZ3JlZW4tdGV4dC50ZXh0LWxpZ2h0ZW4tNSB7XFxuICBjb2xvcjogI0U4RjVFOSAhaW1wb3J0YW50OyB9XFxuXFxuLmdyZWVuLmxpZ2h0ZW4tNCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjQzhFNkM5ICFpbXBvcnRhbnQ7IH1cXG5cXG4uZ3JlZW4tdGV4dC50ZXh0LWxpZ2h0ZW4tNCB7XFxuICBjb2xvcjogI0M4RTZDOSAhaW1wb3J0YW50OyB9XFxuXFxuLmdyZWVuLmxpZ2h0ZW4tMyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjQTVENkE3ICFpbXBvcnRhbnQ7IH1cXG5cXG4uZ3JlZW4tdGV4dC50ZXh0LWxpZ2h0ZW4tMyB7XFxuICBjb2xvcjogI0E1RDZBNyAhaW1wb3J0YW50OyB9XFxuXFxuLmdyZWVuLmxpZ2h0ZW4tMiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjODFDNzg0ICFpbXBvcnRhbnQ7IH1cXG5cXG4uZ3JlZW4tdGV4dC50ZXh0LWxpZ2h0ZW4tMiB7XFxuICBjb2xvcjogIzgxQzc4NCAhaW1wb3J0YW50OyB9XFxuXFxuLmdyZWVuLmxpZ2h0ZW4tMSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjZCQjZBICFpbXBvcnRhbnQ7IH1cXG5cXG4uZ3JlZW4tdGV4dC50ZXh0LWxpZ2h0ZW4tMSB7XFxuICBjb2xvcjogIzY2QkI2QSAhaW1wb3J0YW50OyB9XFxuXFxuLmdyZWVuLmRhcmtlbi0xIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM0M0EwNDcgIWltcG9ydGFudDsgfVxcblxcbi5ncmVlbi10ZXh0LnRleHQtZGFya2VuLTEge1xcbiAgY29sb3I6ICM0M0EwNDcgIWltcG9ydGFudDsgfVxcblxcbi5ncmVlbi5kYXJrZW4tMiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzg4RTNDICFpbXBvcnRhbnQ7IH1cXG5cXG4uZ3JlZW4tdGV4dC50ZXh0LWRhcmtlbi0yIHtcXG4gIGNvbG9yOiAjMzg4RTNDICFpbXBvcnRhbnQ7IH1cXG5cXG4uZ3JlZW4uZGFya2VuLTMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzJFN0QzMiAhaW1wb3J0YW50OyB9XFxuXFxuLmdyZWVuLXRleHQudGV4dC1kYXJrZW4tMyB7XFxuICBjb2xvcjogIzJFN0QzMiAhaW1wb3J0YW50OyB9XFxuXFxuLmdyZWVuLmRhcmtlbi00IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxQjVFMjAgIWltcG9ydGFudDsgfVxcblxcbi5ncmVlbi10ZXh0LnRleHQtZGFya2VuLTQge1xcbiAgY29sb3I6ICMxQjVFMjAgIWltcG9ydGFudDsgfVxcblxcbi5ncmVlbi5hY2NlbnQtMSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjQjlGNkNBICFpbXBvcnRhbnQ7IH1cXG5cXG4uZ3JlZW4tdGV4dC50ZXh0LWFjY2VudC0xIHtcXG4gIGNvbG9yOiAjQjlGNkNBICFpbXBvcnRhbnQ7IH1cXG5cXG4uZ3JlZW4uYWNjZW50LTIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzY5RjBBRSAhaW1wb3J0YW50OyB9XFxuXFxuLmdyZWVuLXRleHQudGV4dC1hY2NlbnQtMiB7XFxuICBjb2xvcjogIzY5RjBBRSAhaW1wb3J0YW50OyB9XFxuXFxuLmdyZWVuLmFjY2VudC0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMEU2NzYgIWltcG9ydGFudDsgfVxcblxcbi5ncmVlbi10ZXh0LnRleHQtYWNjZW50LTMge1xcbiAgY29sb3I6ICMwMEU2NzYgIWltcG9ydGFudDsgfVxcblxcbi5ncmVlbi5hY2NlbnQtNCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDBDODUzICFpbXBvcnRhbnQ7IH1cXG5cXG4uZ3JlZW4tdGV4dC50ZXh0LWFjY2VudC00IHtcXG4gIGNvbG9yOiAjMDBDODUzICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGlnaHQtZ3JlZW4ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzhiYzM0YSAhaW1wb3J0YW50OyB9XFxuXFxuLmxpZ2h0LWdyZWVuLXRleHQge1xcbiAgY29sb3I6ICM4YmMzNGEgIWltcG9ydGFudDsgfVxcblxcbi5saWdodC1ncmVlbi5saWdodGVuLTUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YxZjhlOSAhaW1wb3J0YW50OyB9XFxuXFxuLmxpZ2h0LWdyZWVuLXRleHQudGV4dC1saWdodGVuLTUge1xcbiAgY29sb3I6ICNmMWY4ZTkgIWltcG9ydGFudDsgfVxcblxcbi5saWdodC1ncmVlbi5saWdodGVuLTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RjZWRjOCAhaW1wb3J0YW50OyB9XFxuXFxuLmxpZ2h0LWdyZWVuLXRleHQudGV4dC1saWdodGVuLTQge1xcbiAgY29sb3I6ICNkY2VkYzggIWltcG9ydGFudDsgfVxcblxcbi5saWdodC1ncmVlbi5saWdodGVuLTMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2M1ZTFhNSAhaW1wb3J0YW50OyB9XFxuXFxuLmxpZ2h0LWdyZWVuLXRleHQudGV4dC1saWdodGVuLTMge1xcbiAgY29sb3I6ICNjNWUxYTUgIWltcG9ydGFudDsgfVxcblxcbi5saWdodC1ncmVlbi5saWdodGVuLTIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2FlZDU4MSAhaW1wb3J0YW50OyB9XFxuXFxuLmxpZ2h0LWdyZWVuLXRleHQudGV4dC1saWdodGVuLTIge1xcbiAgY29sb3I6ICNhZWQ1ODEgIWltcG9ydGFudDsgfVxcblxcbi5saWdodC1ncmVlbi5saWdodGVuLTEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzljY2M2NSAhaW1wb3J0YW50OyB9XFxuXFxuLmxpZ2h0LWdyZWVuLXRleHQudGV4dC1saWdodGVuLTEge1xcbiAgY29sb3I6ICM5Y2NjNjUgIWltcG9ydGFudDsgfVxcblxcbi5saWdodC1ncmVlbi5kYXJrZW4tMSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjN2NiMzQyICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGlnaHQtZ3JlZW4tdGV4dC50ZXh0LWRhcmtlbi0xIHtcXG4gIGNvbG9yOiAjN2NiMzQyICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGlnaHQtZ3JlZW4uZGFya2VuLTIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzY4OWYzOCAhaW1wb3J0YW50OyB9XFxuXFxuLmxpZ2h0LWdyZWVuLXRleHQudGV4dC1kYXJrZW4tMiB7XFxuICBjb2xvcjogIzY4OWYzOCAhaW1wb3J0YW50OyB9XFxuXFxuLmxpZ2h0LWdyZWVuLmRhcmtlbi0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM1NThiMmYgIWltcG9ydGFudDsgfVxcblxcbi5saWdodC1ncmVlbi10ZXh0LnRleHQtZGFya2VuLTMge1xcbiAgY29sb3I6ICM1NThiMmYgIWltcG9ydGFudDsgfVxcblxcbi5saWdodC1ncmVlbi5kYXJrZW4tNCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzM2OTFlICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGlnaHQtZ3JlZW4tdGV4dC50ZXh0LWRhcmtlbi00IHtcXG4gIGNvbG9yOiAjMzM2OTFlICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGlnaHQtZ3JlZW4uYWNjZW50LTEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2NjZmY5MCAhaW1wb3J0YW50OyB9XFxuXFxuLmxpZ2h0LWdyZWVuLXRleHQudGV4dC1hY2NlbnQtMSB7XFxuICBjb2xvcjogI2NjZmY5MCAhaW1wb3J0YW50OyB9XFxuXFxuLmxpZ2h0LWdyZWVuLmFjY2VudC0yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNiMmZmNTkgIWltcG9ydGFudDsgfVxcblxcbi5saWdodC1ncmVlbi10ZXh0LnRleHQtYWNjZW50LTIge1xcbiAgY29sb3I6ICNiMmZmNTkgIWltcG9ydGFudDsgfVxcblxcbi5saWdodC1ncmVlbi5hY2NlbnQtMyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNzZmZjAzICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGlnaHQtZ3JlZW4tdGV4dC50ZXh0LWFjY2VudC0zIHtcXG4gIGNvbG9yOiAjNzZmZjAzICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGlnaHQtZ3JlZW4uYWNjZW50LTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzY0ZGQxNyAhaW1wb3J0YW50OyB9XFxuXFxuLmxpZ2h0LWdyZWVuLXRleHQudGV4dC1hY2NlbnQtNCB7XFxuICBjb2xvcjogIzY0ZGQxNyAhaW1wb3J0YW50OyB9XFxuXFxuLmxpbWUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2NkZGMzOSAhaW1wb3J0YW50OyB9XFxuXFxuLmxpbWUtdGV4dCB7XFxuICBjb2xvcjogI2NkZGMzOSAhaW1wb3J0YW50OyB9XFxuXFxuLmxpbWUubGlnaHRlbi01IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmOWZiZTcgIWltcG9ydGFudDsgfVxcblxcbi5saW1lLXRleHQudGV4dC1saWdodGVuLTUge1xcbiAgY29sb3I6ICNmOWZiZTcgIWltcG9ydGFudDsgfVxcblxcbi5saW1lLmxpZ2h0ZW4tNCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmNGMzICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGltZS10ZXh0LnRleHQtbGlnaHRlbi00IHtcXG4gIGNvbG9yOiAjZjBmNGMzICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGltZS5saWdodGVuLTMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U2ZWU5YyAhaW1wb3J0YW50OyB9XFxuXFxuLmxpbWUtdGV4dC50ZXh0LWxpZ2h0ZW4tMyB7XFxuICBjb2xvcjogI2U2ZWU5YyAhaW1wb3J0YW50OyB9XFxuXFxuLmxpbWUubGlnaHRlbi0yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkY2U3NzUgIWltcG9ydGFudDsgfVxcblxcbi5saW1lLXRleHQudGV4dC1saWdodGVuLTIge1xcbiAgY29sb3I6ICNkY2U3NzUgIWltcG9ydGFudDsgfVxcblxcbi5saW1lLmxpZ2h0ZW4tMSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDRlMTU3ICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGltZS10ZXh0LnRleHQtbGlnaHRlbi0xIHtcXG4gIGNvbG9yOiAjZDRlMTU3ICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGltZS5kYXJrZW4tMSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzBjYTMzICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGltZS10ZXh0LnRleHQtZGFya2VuLTEge1xcbiAgY29sb3I6ICNjMGNhMzMgIWltcG9ydGFudDsgfVxcblxcbi5saW1lLmRhcmtlbi0yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNhZmI0MmIgIWltcG9ydGFudDsgfVxcblxcbi5saW1lLXRleHQudGV4dC1kYXJrZW4tMiB7XFxuICBjb2xvcjogI2FmYjQyYiAhaW1wb3J0YW50OyB9XFxuXFxuLmxpbWUuZGFya2VuLTMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzllOWQyNCAhaW1wb3J0YW50OyB9XFxuXFxuLmxpbWUtdGV4dC50ZXh0LWRhcmtlbi0zIHtcXG4gIGNvbG9yOiAjOWU5ZDI0ICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGltZS5kYXJrZW4tNCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjODI3NzE3ICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGltZS10ZXh0LnRleHQtZGFya2VuLTQge1xcbiAgY29sb3I6ICM4Mjc3MTcgIWltcG9ydGFudDsgfVxcblxcbi5saW1lLmFjY2VudC0xIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmNGZmODEgIWltcG9ydGFudDsgfVxcblxcbi5saW1lLXRleHQudGV4dC1hY2NlbnQtMSB7XFxuICBjb2xvcjogI2Y0ZmY4MSAhaW1wb3J0YW50OyB9XFxuXFxuLmxpbWUuYWNjZW50LTIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VlZmY0MSAhaW1wb3J0YW50OyB9XFxuXFxuLmxpbWUtdGV4dC50ZXh0LWFjY2VudC0yIHtcXG4gIGNvbG9yOiAjZWVmZjQxICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGltZS5hY2NlbnQtMyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzZmZjAwICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGltZS10ZXh0LnRleHQtYWNjZW50LTMge1xcbiAgY29sb3I6ICNjNmZmMDAgIWltcG9ydGFudDsgfVxcblxcbi5saW1lLmFjY2VudC00IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNhZWVhMDAgIWltcG9ydGFudDsgfVxcblxcbi5saW1lLXRleHQudGV4dC1hY2NlbnQtNCB7XFxuICBjb2xvcjogI2FlZWEwMCAhaW1wb3J0YW50OyB9XFxuXFxuLnllbGxvdyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZlYjNiICFpbXBvcnRhbnQ7IH1cXG5cXG4ueWVsbG93LXRleHQge1xcbiAgY29sb3I6ICNmZmViM2IgIWltcG9ydGFudDsgfVxcblxcbi55ZWxsb3cubGlnaHRlbi01IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmZkZTcgIWltcG9ydGFudDsgfVxcblxcbi55ZWxsb3ctdGV4dC50ZXh0LWxpZ2h0ZW4tNSB7XFxuICBjb2xvcjogI2ZmZmRlNyAhaW1wb3J0YW50OyB9XFxuXFxuLnllbGxvdy5saWdodGVuLTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjljNCAhaW1wb3J0YW50OyB9XFxuXFxuLnllbGxvdy10ZXh0LnRleHQtbGlnaHRlbi00IHtcXG4gIGNvbG9yOiAjZmZmOWM0ICFpbXBvcnRhbnQ7IH1cXG5cXG4ueWVsbG93LmxpZ2h0ZW4tMyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmNTlkICFpbXBvcnRhbnQ7IH1cXG5cXG4ueWVsbG93LXRleHQudGV4dC1saWdodGVuLTMge1xcbiAgY29sb3I6ICNmZmY1OWQgIWltcG9ydGFudDsgfVxcblxcbi55ZWxsb3cubGlnaHRlbi0yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmYxNzYgIWltcG9ydGFudDsgfVxcblxcbi55ZWxsb3ctdGV4dC50ZXh0LWxpZ2h0ZW4tMiB7XFxuICBjb2xvcjogI2ZmZjE3NiAhaW1wb3J0YW50OyB9XFxuXFxuLnllbGxvdy5saWdodGVuLTEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZWU1OCAhaW1wb3J0YW50OyB9XFxuXFxuLnllbGxvdy10ZXh0LnRleHQtbGlnaHRlbi0xIHtcXG4gIGNvbG9yOiAjZmZlZTU4ICFpbXBvcnRhbnQ7IH1cXG5cXG4ueWVsbG93LmRhcmtlbi0xIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZGQ4MzUgIWltcG9ydGFudDsgfVxcblxcbi55ZWxsb3ctdGV4dC50ZXh0LWRhcmtlbi0xIHtcXG4gIGNvbG9yOiAjZmRkODM1ICFpbXBvcnRhbnQ7IH1cXG5cXG4ueWVsbG93LmRhcmtlbi0yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmYmMwMmQgIWltcG9ydGFudDsgfVxcblxcbi55ZWxsb3ctdGV4dC50ZXh0LWRhcmtlbi0yIHtcXG4gIGNvbG9yOiAjZmJjMDJkICFpbXBvcnRhbnQ7IH1cXG5cXG4ueWVsbG93LmRhcmtlbi0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmOWE4MjUgIWltcG9ydGFudDsgfVxcblxcbi55ZWxsb3ctdGV4dC50ZXh0LWRhcmtlbi0zIHtcXG4gIGNvbG9yOiAjZjlhODI1ICFpbXBvcnRhbnQ7IH1cXG5cXG4ueWVsbG93LmRhcmtlbi00IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmNTdmMTcgIWltcG9ydGFudDsgfVxcblxcbi55ZWxsb3ctdGV4dC50ZXh0LWRhcmtlbi00IHtcXG4gIGNvbG9yOiAjZjU3ZjE3ICFpbXBvcnRhbnQ7IH1cXG5cXG4ueWVsbG93LmFjY2VudC0xIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmZmOGQgIWltcG9ydGFudDsgfVxcblxcbi55ZWxsb3ctdGV4dC50ZXh0LWFjY2VudC0xIHtcXG4gIGNvbG9yOiAjZmZmZjhkICFpbXBvcnRhbnQ7IH1cXG5cXG4ueWVsbG93LmFjY2VudC0yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZjAgIWltcG9ydGFudDsgfVxcblxcbi55ZWxsb3ctdGV4dC50ZXh0LWFjY2VudC0yIHtcXG4gIGNvbG9yOiAjZmYwICFpbXBvcnRhbnQ7IH1cXG5cXG4ueWVsbG93LmFjY2VudC0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmVhMDAgIWltcG9ydGFudDsgfVxcblxcbi55ZWxsb3ctdGV4dC50ZXh0LWFjY2VudC0zIHtcXG4gIGNvbG9yOiAjZmZlYTAwICFpbXBvcnRhbnQ7IH1cXG5cXG4ueWVsbG93LmFjY2VudC00IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmQ2MDAgIWltcG9ydGFudDsgfVxcblxcbi55ZWxsb3ctdGV4dC50ZXh0LWFjY2VudC00IHtcXG4gIGNvbG9yOiAjZmZkNjAwICFpbXBvcnRhbnQ7IH1cXG5cXG4uYW1iZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmYzEwNyAhaW1wb3J0YW50OyB9XFxuXFxuLmFtYmVyLXRleHQge1xcbiAgY29sb3I6ICNmZmMxMDcgIWltcG9ydGFudDsgfVxcblxcbi5hbWJlci5saWdodGVuLTUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjhlMSAhaW1wb3J0YW50OyB9XFxuXFxuLmFtYmVyLXRleHQudGV4dC1saWdodGVuLTUge1xcbiAgY29sb3I6ICNmZmY4ZTEgIWltcG9ydGFudDsgfVxcblxcbi5hbWJlci5saWdodGVuLTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZWNiMyAhaW1wb3J0YW50OyB9XFxuXFxuLmFtYmVyLXRleHQudGV4dC1saWdodGVuLTQge1xcbiAgY29sb3I6ICNmZmVjYjMgIWltcG9ydGFudDsgfVxcblxcbi5hbWJlci5saWdodGVuLTMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZTA4MiAhaW1wb3J0YW50OyB9XFxuXFxuLmFtYmVyLXRleHQudGV4dC1saWdodGVuLTMge1xcbiAgY29sb3I6ICNmZmUwODIgIWltcG9ydGFudDsgfVxcblxcbi5hbWJlci5saWdodGVuLTIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZDU0ZiAhaW1wb3J0YW50OyB9XFxuXFxuLmFtYmVyLXRleHQudGV4dC1saWdodGVuLTIge1xcbiAgY29sb3I6ICNmZmQ1NGYgIWltcG9ydGFudDsgfVxcblxcbi5hbWJlci5saWdodGVuLTEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmY2EyOCAhaW1wb3J0YW50OyB9XFxuXFxuLmFtYmVyLXRleHQudGV4dC1saWdodGVuLTEge1xcbiAgY29sb3I6ICNmZmNhMjggIWltcG9ydGFudDsgfVxcblxcbi5hbWJlci5kYXJrZW4tMSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZiMzAwICFpbXBvcnRhbnQ7IH1cXG5cXG4uYW1iZXItdGV4dC50ZXh0LWRhcmtlbi0xIHtcXG4gIGNvbG9yOiAjZmZiMzAwICFpbXBvcnRhbnQ7IH1cXG5cXG4uYW1iZXIuZGFya2VuLTIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmYTAwMCAhaW1wb3J0YW50OyB9XFxuXFxuLmFtYmVyLXRleHQudGV4dC1kYXJrZW4tMiB7XFxuICBjb2xvcjogI2ZmYTAwMCAhaW1wb3J0YW50OyB9XFxuXFxuLmFtYmVyLmRhcmtlbi0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZjhmMDAgIWltcG9ydGFudDsgfVxcblxcbi5hbWJlci10ZXh0LnRleHQtZGFya2VuLTMge1xcbiAgY29sb3I6ICNmZjhmMDAgIWltcG9ydGFudDsgfVxcblxcbi5hbWJlci5kYXJrZW4tNCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmY2ZjAwICFpbXBvcnRhbnQ7IH1cXG5cXG4uYW1iZXItdGV4dC50ZXh0LWRhcmtlbi00IHtcXG4gIGNvbG9yOiAjZmY2ZjAwICFpbXBvcnRhbnQ7IH1cXG5cXG4uYW1iZXIuYWNjZW50LTEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZTU3ZiAhaW1wb3J0YW50OyB9XFxuXFxuLmFtYmVyLXRleHQudGV4dC1hY2NlbnQtMSB7XFxuICBjb2xvcjogI2ZmZTU3ZiAhaW1wb3J0YW50OyB9XFxuXFxuLmFtYmVyLmFjY2VudC0yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmQ3NDAgIWltcG9ydGFudDsgfVxcblxcbi5hbWJlci10ZXh0LnRleHQtYWNjZW50LTIge1xcbiAgY29sb3I6ICNmZmQ3NDAgIWltcG9ydGFudDsgfVxcblxcbi5hbWJlci5hY2NlbnQtMyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZjNDAwICFpbXBvcnRhbnQ7IH1cXG5cXG4uYW1iZXItdGV4dC50ZXh0LWFjY2VudC0zIHtcXG4gIGNvbG9yOiAjZmZjNDAwICFpbXBvcnRhbnQ7IH1cXG5cXG4uYW1iZXIuYWNjZW50LTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmYWIwMCAhaW1wb3J0YW50OyB9XFxuXFxuLmFtYmVyLXRleHQudGV4dC1hY2NlbnQtNCB7XFxuICBjb2xvcjogI2ZmYWIwMCAhaW1wb3J0YW50OyB9XFxuXFxuLm9yYW5nZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmY5ODAwICFpbXBvcnRhbnQ7IH1cXG5cXG4ub3JhbmdlLXRleHQge1xcbiAgY29sb3I6ICNmZjk4MDAgIWltcG9ydGFudDsgfVxcblxcbi5vcmFuZ2UubGlnaHRlbi01IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmYzZTAgIWltcG9ydGFudDsgfVxcblxcbi5vcmFuZ2UtdGV4dC50ZXh0LWxpZ2h0ZW4tNSB7XFxuICBjb2xvcjogI2ZmZjNlMCAhaW1wb3J0YW50OyB9XFxuXFxuLm9yYW5nZS5saWdodGVuLTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZTBiMiAhaW1wb3J0YW50OyB9XFxuXFxuLm9yYW5nZS10ZXh0LnRleHQtbGlnaHRlbi00IHtcXG4gIGNvbG9yOiAjZmZlMGIyICFpbXBvcnRhbnQ7IH1cXG5cXG4ub3JhbmdlLmxpZ2h0ZW4tMyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZjYzgwICFpbXBvcnRhbnQ7IH1cXG5cXG4ub3JhbmdlLXRleHQudGV4dC1saWdodGVuLTMge1xcbiAgY29sb3I6ICNmZmNjODAgIWltcG9ydGFudDsgfVxcblxcbi5vcmFuZ2UubGlnaHRlbi0yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmI3NGQgIWltcG9ydGFudDsgfVxcblxcbi5vcmFuZ2UtdGV4dC50ZXh0LWxpZ2h0ZW4tMiB7XFxuICBjb2xvcjogI2ZmYjc0ZCAhaW1wb3J0YW50OyB9XFxuXFxuLm9yYW5nZS5saWdodGVuLTEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmYTcyNiAhaW1wb3J0YW50OyB9XFxuXFxuLm9yYW5nZS10ZXh0LnRleHQtbGlnaHRlbi0xIHtcXG4gIGNvbG9yOiAjZmZhNzI2ICFpbXBvcnRhbnQ7IH1cXG5cXG4ub3JhbmdlLmRhcmtlbi0xIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmYjhjMDAgIWltcG9ydGFudDsgfVxcblxcbi5vcmFuZ2UtdGV4dC50ZXh0LWRhcmtlbi0xIHtcXG4gIGNvbG9yOiAjZmI4YzAwICFpbXBvcnRhbnQ7IH1cXG5cXG4ub3JhbmdlLmRhcmtlbi0yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmNTdjMDAgIWltcG9ydGFudDsgfVxcblxcbi5vcmFuZ2UtdGV4dC50ZXh0LWRhcmtlbi0yIHtcXG4gIGNvbG9yOiAjZjU3YzAwICFpbXBvcnRhbnQ7IH1cXG5cXG4ub3JhbmdlLmRhcmtlbi0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZjZjMDAgIWltcG9ydGFudDsgfVxcblxcbi5vcmFuZ2UtdGV4dC50ZXh0LWRhcmtlbi0zIHtcXG4gIGNvbG9yOiAjZWY2YzAwICFpbXBvcnRhbnQ7IH1cXG5cXG4ub3JhbmdlLmRhcmtlbi00IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlNjUxMDAgIWltcG9ydGFudDsgfVxcblxcbi5vcmFuZ2UtdGV4dC50ZXh0LWRhcmtlbi00IHtcXG4gIGNvbG9yOiAjZTY1MTAwICFpbXBvcnRhbnQ7IH1cXG5cXG4ub3JhbmdlLmFjY2VudC0xIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmQxODAgIWltcG9ydGFudDsgfVxcblxcbi5vcmFuZ2UtdGV4dC50ZXh0LWFjY2VudC0xIHtcXG4gIGNvbG9yOiAjZmZkMTgwICFpbXBvcnRhbnQ7IH1cXG5cXG4ub3JhbmdlLmFjY2VudC0yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmFiNDAgIWltcG9ydGFudDsgfVxcblxcbi5vcmFuZ2UtdGV4dC50ZXh0LWFjY2VudC0yIHtcXG4gIGNvbG9yOiAjZmZhYjQwICFpbXBvcnRhbnQ7IH1cXG5cXG4ub3JhbmdlLmFjY2VudC0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZjkxMDAgIWltcG9ydGFudDsgfVxcblxcbi5vcmFuZ2UtdGV4dC50ZXh0LWFjY2VudC0zIHtcXG4gIGNvbG9yOiAjZmY5MTAwICFpbXBvcnRhbnQ7IH1cXG5cXG4ub3JhbmdlLmFjY2VudC00IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZjZkMDAgIWltcG9ydGFudDsgfVxcblxcbi5vcmFuZ2UtdGV4dC50ZXh0LWFjY2VudC00IHtcXG4gIGNvbG9yOiAjZmY2ZDAwICFpbXBvcnRhbnQ7IH1cXG5cXG4uZGVlcC1vcmFuZ2Uge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmNTcyMiAhaW1wb3J0YW50OyB9XFxuXFxuLmRlZXAtb3JhbmdlLXRleHQge1xcbiAgY29sb3I6ICNmZjU3MjIgIWltcG9ydGFudDsgfVxcblxcbi5kZWVwLW9yYW5nZS5saWdodGVuLTUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZiZTllNyAhaW1wb3J0YW50OyB9XFxuXFxuLmRlZXAtb3JhbmdlLXRleHQudGV4dC1saWdodGVuLTUge1xcbiAgY29sb3I6ICNmYmU5ZTcgIWltcG9ydGFudDsgfVxcblxcbi5kZWVwLW9yYW5nZS5saWdodGVuLTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmY2NiYyAhaW1wb3J0YW50OyB9XFxuXFxuLmRlZXAtb3JhbmdlLXRleHQudGV4dC1saWdodGVuLTQge1xcbiAgY29sb3I6ICNmZmNjYmMgIWltcG9ydGFudDsgfVxcblxcbi5kZWVwLW9yYW5nZS5saWdodGVuLTMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmYWI5MSAhaW1wb3J0YW50OyB9XFxuXFxuLmRlZXAtb3JhbmdlLXRleHQudGV4dC1saWdodGVuLTMge1xcbiAgY29sb3I6ICNmZmFiOTEgIWltcG9ydGFudDsgfVxcblxcbi5kZWVwLW9yYW5nZS5saWdodGVuLTIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmOGE2NSAhaW1wb3J0YW50OyB9XFxuXFxuLmRlZXAtb3JhbmdlLXRleHQudGV4dC1saWdodGVuLTIge1xcbiAgY29sb3I6ICNmZjhhNjUgIWltcG9ydGFudDsgfVxcblxcbi5kZWVwLW9yYW5nZS5saWdodGVuLTEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmNzA0MyAhaW1wb3J0YW50OyB9XFxuXFxuLmRlZXAtb3JhbmdlLXRleHQudGV4dC1saWdodGVuLTEge1xcbiAgY29sb3I6ICNmZjcwNDMgIWltcG9ydGFudDsgfVxcblxcbi5kZWVwLW9yYW5nZS5kYXJrZW4tMSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjQ1MTFlICFpbXBvcnRhbnQ7IH1cXG5cXG4uZGVlcC1vcmFuZ2UtdGV4dC50ZXh0LWRhcmtlbi0xIHtcXG4gIGNvbG9yOiAjZjQ1MTFlICFpbXBvcnRhbnQ7IH1cXG5cXG4uZGVlcC1vcmFuZ2UuZGFya2VuLTIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U2NGExOSAhaW1wb3J0YW50OyB9XFxuXFxuLmRlZXAtb3JhbmdlLXRleHQudGV4dC1kYXJrZW4tMiB7XFxuICBjb2xvcjogI2U2NGExOSAhaW1wb3J0YW50OyB9XFxuXFxuLmRlZXAtb3JhbmdlLmRhcmtlbi0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkODQzMTUgIWltcG9ydGFudDsgfVxcblxcbi5kZWVwLW9yYW5nZS10ZXh0LnRleHQtZGFya2VuLTMge1xcbiAgY29sb3I6ICNkODQzMTUgIWltcG9ydGFudDsgfVxcblxcbi5kZWVwLW9yYW5nZS5kYXJrZW4tNCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYmYzNjBjICFpbXBvcnRhbnQ7IH1cXG5cXG4uZGVlcC1vcmFuZ2UtdGV4dC50ZXh0LWRhcmtlbi00IHtcXG4gIGNvbG9yOiAjYmYzNjBjICFpbXBvcnRhbnQ7IH1cXG5cXG4uZGVlcC1vcmFuZ2UuYWNjZW50LTEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmOWU4MCAhaW1wb3J0YW50OyB9XFxuXFxuLmRlZXAtb3JhbmdlLXRleHQudGV4dC1hY2NlbnQtMSB7XFxuICBjb2xvcjogI2ZmOWU4MCAhaW1wb3J0YW50OyB9XFxuXFxuLmRlZXAtb3JhbmdlLmFjY2VudC0yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZjZlNDAgIWltcG9ydGFudDsgfVxcblxcbi5kZWVwLW9yYW5nZS10ZXh0LnRleHQtYWNjZW50LTIge1xcbiAgY29sb3I6ICNmZjZlNDAgIWltcG9ydGFudDsgfVxcblxcbi5kZWVwLW9yYW5nZS5hY2NlbnQtMyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmYzZDAwICFpbXBvcnRhbnQ7IH1cXG5cXG4uZGVlcC1vcmFuZ2UtdGV4dC50ZXh0LWFjY2VudC0zIHtcXG4gIGNvbG9yOiAjZmYzZDAwICFpbXBvcnRhbnQ7IH1cXG5cXG4uZGVlcC1vcmFuZ2UuYWNjZW50LTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RkMmMwMCAhaW1wb3J0YW50OyB9XFxuXFxuLmRlZXAtb3JhbmdlLXRleHQudGV4dC1hY2NlbnQtNCB7XFxuICBjb2xvcjogI2RkMmMwMCAhaW1wb3J0YW50OyB9XFxuXFxuLmJyb3duIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM3OTU1NDggIWltcG9ydGFudDsgfVxcblxcbi5icm93bi10ZXh0IHtcXG4gIGNvbG9yOiAjNzk1NTQ4ICFpbXBvcnRhbnQ7IH1cXG5cXG4uYnJvd24ubGlnaHRlbi01IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZmViZTkgIWltcG9ydGFudDsgfVxcblxcbi5icm93bi10ZXh0LnRleHQtbGlnaHRlbi01IHtcXG4gIGNvbG9yOiAjZWZlYmU5ICFpbXBvcnRhbnQ7IH1cXG5cXG4uYnJvd24ubGlnaHRlbi00IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkN2NjYzggIWltcG9ydGFudDsgfVxcblxcbi5icm93bi10ZXh0LnRleHQtbGlnaHRlbi00IHtcXG4gIGNvbG9yOiAjZDdjY2M4ICFpbXBvcnRhbnQ7IH1cXG5cXG4uYnJvd24ubGlnaHRlbi0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNiY2FhYTQgIWltcG9ydGFudDsgfVxcblxcbi5icm93bi10ZXh0LnRleHQtbGlnaHRlbi0zIHtcXG4gIGNvbG9yOiAjYmNhYWE0ICFpbXBvcnRhbnQ7IH1cXG5cXG4uYnJvd24ubGlnaHRlbi0yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNhMTg4N2YgIWltcG9ydGFudDsgfVxcblxcbi5icm93bi10ZXh0LnRleHQtbGlnaHRlbi0yIHtcXG4gIGNvbG9yOiAjYTE4ODdmICFpbXBvcnRhbnQ7IH1cXG5cXG4uYnJvd24ubGlnaHRlbi0xIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM4ZDZlNjMgIWltcG9ydGFudDsgfVxcblxcbi5icm93bi10ZXh0LnRleHQtbGlnaHRlbi0xIHtcXG4gIGNvbG9yOiAjOGQ2ZTYzICFpbXBvcnRhbnQ7IH1cXG5cXG4uYnJvd24uZGFya2VuLTEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzZkNGM0MSAhaW1wb3J0YW50OyB9XFxuXFxuLmJyb3duLXRleHQudGV4dC1kYXJrZW4tMSB7XFxuICBjb2xvcjogIzZkNGM0MSAhaW1wb3J0YW50OyB9XFxuXFxuLmJyb3duLmRhcmtlbi0yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM1ZDQwMzcgIWltcG9ydGFudDsgfVxcblxcbi5icm93bi10ZXh0LnRleHQtZGFya2VuLTIge1xcbiAgY29sb3I6ICM1ZDQwMzcgIWltcG9ydGFudDsgfVxcblxcbi5icm93bi5kYXJrZW4tMyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNGUzNDJlICFpbXBvcnRhbnQ7IH1cXG5cXG4uYnJvd24tdGV4dC50ZXh0LWRhcmtlbi0zIHtcXG4gIGNvbG9yOiAjNGUzNDJlICFpbXBvcnRhbnQ7IH1cXG5cXG4uYnJvd24uZGFya2VuLTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzNlMjcyMyAhaW1wb3J0YW50OyB9XFxuXFxuLmJyb3duLXRleHQudGV4dC1kYXJrZW4tNCB7XFxuICBjb2xvcjogIzNlMjcyMyAhaW1wb3J0YW50OyB9XFxuXFxuLmJsdWUtZ3JleSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjA3ZDhiICFpbXBvcnRhbnQ7IH1cXG5cXG4uYmx1ZS1ncmV5LXRleHQge1xcbiAgY29sb3I6ICM2MDdkOGIgIWltcG9ydGFudDsgfVxcblxcbi5ibHVlLWdyZXkubGlnaHRlbi01IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlY2VmZjEgIWltcG9ydGFudDsgfVxcblxcbi5ibHVlLWdyZXktdGV4dC50ZXh0LWxpZ2h0ZW4tNSB7XFxuICBjb2xvcjogI2VjZWZmMSAhaW1wb3J0YW50OyB9XFxuXFxuLmJsdWUtZ3JleS5saWdodGVuLTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2NmZDhkYyAhaW1wb3J0YW50OyB9XFxuXFxuLmJsdWUtZ3JleS10ZXh0LnRleHQtbGlnaHRlbi00IHtcXG4gIGNvbG9yOiAjY2ZkOGRjICFpbXBvcnRhbnQ7IH1cXG5cXG4uYmx1ZS1ncmV5LmxpZ2h0ZW4tMyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjBiZWM1ICFpbXBvcnRhbnQ7IH1cXG5cXG4uYmx1ZS1ncmV5LXRleHQudGV4dC1saWdodGVuLTMge1xcbiAgY29sb3I6ICNiMGJlYzUgIWltcG9ydGFudDsgfVxcblxcbi5ibHVlLWdyZXkubGlnaHRlbi0yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM5MGE0YWUgIWltcG9ydGFudDsgfVxcblxcbi5ibHVlLWdyZXktdGV4dC50ZXh0LWxpZ2h0ZW4tMiB7XFxuICBjb2xvcjogIzkwYTRhZSAhaW1wb3J0YW50OyB9XFxuXFxuLmJsdWUtZ3JleS5saWdodGVuLTEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzc4OTA5YyAhaW1wb3J0YW50OyB9XFxuXFxuLmJsdWUtZ3JleS10ZXh0LnRleHQtbGlnaHRlbi0xIHtcXG4gIGNvbG9yOiAjNzg5MDljICFpbXBvcnRhbnQ7IH1cXG5cXG4uYmx1ZS1ncmV5LmRhcmtlbi0xIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM1NDZlN2EgIWltcG9ydGFudDsgfVxcblxcbi5ibHVlLWdyZXktdGV4dC50ZXh0LWRhcmtlbi0xIHtcXG4gIGNvbG9yOiAjNTQ2ZTdhICFpbXBvcnRhbnQ7IH1cXG5cXG4uYmx1ZS1ncmV5LmRhcmtlbi0yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM0NTVhNjQgIWltcG9ydGFudDsgfVxcblxcbi5ibHVlLWdyZXktdGV4dC50ZXh0LWRhcmtlbi0yIHtcXG4gIGNvbG9yOiAjNDU1YTY0ICFpbXBvcnRhbnQ7IH1cXG5cXG4uYmx1ZS1ncmV5LmRhcmtlbi0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzNzQ3NGYgIWltcG9ydGFudDsgfVxcblxcbi5ibHVlLWdyZXktdGV4dC50ZXh0LWRhcmtlbi0zIHtcXG4gIGNvbG9yOiAjMzc0NzRmICFpbXBvcnRhbnQ7IH1cXG5cXG4uYmx1ZS1ncmV5LmRhcmtlbi00IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyNjMyMzggIWltcG9ydGFudDsgfVxcblxcbi5ibHVlLWdyZXktdGV4dC50ZXh0LWRhcmtlbi00IHtcXG4gIGNvbG9yOiAjMjYzMjM4ICFpbXBvcnRhbnQ7IH1cXG5cXG4uZ3JleSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjOWU5ZTllICFpbXBvcnRhbnQ7IH1cXG5cXG4uZ3JleS10ZXh0IHtcXG4gIGNvbG9yOiAjOWU5ZTllICFpbXBvcnRhbnQ7IH1cXG5cXG4uZ3JleS5saWdodGVuLTUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZhZmFmYSAhaW1wb3J0YW50OyB9XFxuXFxuLmdyZXktdGV4dC50ZXh0LWxpZ2h0ZW4tNSB7XFxuICBjb2xvcjogI2ZhZmFmYSAhaW1wb3J0YW50OyB9XFxuXFxuLmdyZXkubGlnaHRlbi00IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjUgIWltcG9ydGFudDsgfVxcblxcbi5ncmV5LXRleHQudGV4dC1saWdodGVuLTQge1xcbiAgY29sb3I6ICNmNWY1ZjUgIWltcG9ydGFudDsgfVxcblxcbi5ncmV5LmxpZ2h0ZW4tMyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlICFpbXBvcnRhbnQ7IH1cXG5cXG4uZ3JleS10ZXh0LnRleHQtbGlnaHRlbi0zIHtcXG4gIGNvbG9yOiAjZWVlICFpbXBvcnRhbnQ7IH1cXG5cXG4uZ3JleS5saWdodGVuLTIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2UwZTBlMCAhaW1wb3J0YW50OyB9XFxuXFxuLmdyZXktdGV4dC50ZXh0LWxpZ2h0ZW4tMiB7XFxuICBjb2xvcjogI2UwZTBlMCAhaW1wb3J0YW50OyB9XFxuXFxuLmdyZXkubGlnaHRlbi0xIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNiZGJkYmQgIWltcG9ydGFudDsgfVxcblxcbi5ncmV5LXRleHQudGV4dC1saWdodGVuLTEge1xcbiAgY29sb3I6ICNiZGJkYmQgIWltcG9ydGFudDsgfVxcblxcbi5ncmV5LmRhcmtlbi0xIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM3NTc1NzUgIWltcG9ydGFudDsgfVxcblxcbi5ncmV5LXRleHQudGV4dC1kYXJrZW4tMSB7XFxuICBjb2xvcjogIzc1NzU3NSAhaW1wb3J0YW50OyB9XFxuXFxuLmdyZXkuZGFya2VuLTIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzYxNjE2MSAhaW1wb3J0YW50OyB9XFxuXFxuLmdyZXktdGV4dC50ZXh0LWRhcmtlbi0yIHtcXG4gIGNvbG9yOiAjNjE2MTYxICFpbXBvcnRhbnQ7IH1cXG5cXG4uZ3JleS5kYXJrZW4tMyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDI0MjQyICFpbXBvcnRhbnQ7IH1cXG5cXG4uZ3JleS10ZXh0LnRleHQtZGFya2VuLTMge1xcbiAgY29sb3I6ICM0MjQyNDIgIWltcG9ydGFudDsgfVxcblxcbi5ncmV5LmRhcmtlbi00IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyMTIxMjEgIWltcG9ydGFudDsgfVxcblxcbi5ncmV5LXRleHQudGV4dC1kYXJrZW4tNCB7XFxuICBjb2xvcjogIzIxMjEyMSAhaW1wb3J0YW50OyB9XFxuXFxuLmJsYWNrIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDAgIWltcG9ydGFudDsgfVxcblxcbi5ibGFjay10ZXh0IHtcXG4gIGNvbG9yOiAjMDAwICFpbXBvcnRhbnQ7IH1cXG5cXG4ud2hpdGUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZiAhaW1wb3J0YW50OyB9XFxuXFxuLndoaXRlLXRleHQge1xcbiAgY29sb3I6ICNmZmYgIWltcG9ydGFudDsgfVxcblxcbi50cmFuc3BhcmVudCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50OyB9XFxuXFxuLnRyYW5zcGFyZW50LXRleHQge1xcbiAgY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7IH1cXG5cXG4vKiEgbm9ybWFsaXplLmNzcyB2My4wLjMgfCBNSVQgTGljZW5zZSB8IGdpdGh1Yi5jb20vbmVjb2xhcy9ub3JtYWxpemUuY3NzICovXFxuaHRtbCB7XFxuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcXG4gIC1tcy10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xcbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOyB9XFxuXFxuYm9keSB7XFxuICBtYXJnaW46IDA7IH1cXG5cXG5hcnRpY2xlLCBhc2lkZSwgZGV0YWlscywgZmlnY2FwdGlvbiwgZmlndXJlLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLCBtYWluLCBtZW51LCBuYXYsIHNlY3Rpb24sIHN1bW1hcnkge1xcbiAgZGlzcGxheTogYmxvY2s7IH1cXG5cXG5hdWRpbywgY2FudmFzLCBwcm9ncmVzcywgdmlkZW8ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyB9XFxuXFxuYXVkaW86bm90KFtjb250cm9sc10pIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBoZWlnaHQ6IDA7IH1cXG5cXG5baGlkZGVuXSwgdGVtcGxhdGUge1xcbiAgZGlzcGxheTogbm9uZTsgfVxcblxcbmEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cXG5cXG5hOmFjdGl2ZSwgYTpob3ZlciB7XFxuICBvdXRsaW5lOiAwOyB9XFxuXFxuYWJiclt0aXRsZV0ge1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IGRvdHRlZDsgfVxcblxcbmIsIHN0cm9uZyB7XFxuICBmb250LXdlaWdodDogYm9sZDsgfVxcblxcbmRmbiB7XFxuICBmb250LXN0eWxlOiBpdGFsaWM7IH1cXG5cXG5oMSB7XFxuICBmb250LXNpemU6IDJlbTtcXG4gIG1hcmdpbjogMC42N2VtIDA7IH1cXG5cXG5tYXJrIHtcXG4gIGJhY2tncm91bmQ6ICNmZjA7XFxuICBjb2xvcjogIzAwMDsgfVxcblxcbnNtYWxsIHtcXG4gIGZvbnQtc2l6ZTogODAlOyB9XFxuXFxuc3ViLCBzdXAge1xcbiAgZm9udC1zaXplOiA3NSU7XFxuICBsaW5lLWhlaWdodDogMDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTsgfVxcblxcbnN1cCB7XFxuICB0b3A6IC0wLjVlbTsgfVxcblxcbnN1YiB7XFxuICBib3R0b206IC0wLjI1ZW07IH1cXG5cXG5pbWcge1xcbiAgYm9yZGVyOiAwOyB9XFxuXFxuc3ZnOm5vdCg6cm9vdCkge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjsgfVxcblxcbmZpZ3VyZSB7XFxuICBtYXJnaW46IDFlbSA0MHB4OyB9XFxuXFxuaHIge1xcbiAgYm94LXNpemluZzogY29udGVudC1ib3g7XFxuICBoZWlnaHQ6IDA7IH1cXG5cXG5wcmUge1xcbiAgb3ZlcmZsb3c6IGF1dG87IH1cXG5cXG5jb2RlLCBrYmQsIHByZSwgc2FtcCB7XFxuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7XFxuICBmb250LXNpemU6IDFlbTsgfVxcblxcbmJ1dHRvbiwgaW5wdXQsIG9wdGdyb3VwLCBzZWxlY3QsIHRleHRhcmVhIHtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbiAgZm9udDogaW5oZXJpdDtcXG4gIG1hcmdpbjogMDsgfVxcblxcbmJ1dHRvbiB7XFxuICBvdmVyZmxvdzogdmlzaWJsZTsgfVxcblxcbmJ1dHRvbiwgc2VsZWN0IHtcXG4gIHRleHQtdHJhbnNmb3JtOiBub25lOyB9XFxuXFxuYnV0dG9uLCBodG1sIGlucHV0W3R5cGU9XFxcImJ1dHRvblxcXCJdLCBpbnB1dFt0eXBlPVxcXCJyZXNldFxcXCJdLCBpbnB1dFt0eXBlPVxcXCJzdWJtaXRcXFwiXSB7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcXG4gIGN1cnNvcjogcG9pbnRlcjsgfVxcblxcbmJ1dHRvbltkaXNhYmxlZF0sIGh0bWwgaW5wdXRbZGlzYWJsZWRdIHtcXG4gIGN1cnNvcjogZGVmYXVsdDsgfVxcblxcbmJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lciwgaW5wdXQ6Oi1tb3otZm9jdXMtaW5uZXIge1xcbiAgYm9yZGVyOiAwO1xcbiAgcGFkZGluZzogMDsgfVxcblxcbmlucHV0IHtcXG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7IH1cXG5cXG5pbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJdLCBpbnB1dFt0eXBlPVxcXCJyYWRpb1xcXCJdIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBwYWRkaW5nOiAwOyB9XFxuXFxuaW5wdXRbdHlwZT1cXFwibnVtYmVyXFxcIl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sIGlucHV0W3R5cGU9XFxcIm51bWJlclxcXCJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uIHtcXG4gIGhlaWdodDogYXV0bzsgfVxcblxcbmlucHV0W3R5cGU9XFxcInNlYXJjaFxcXCJdIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xcbiAgYm94LXNpemluZzogY29udGVudC1ib3g7IH1cXG5cXG5pbnB1dFt0eXBlPVxcXCJzZWFyY2hcXFwiXTo6LXdlYmtpdC1zZWFyY2gtY2FuY2VsLWJ1dHRvbiwgaW5wdXRbdHlwZT1cXFwic2VhcmNoXFxcIl06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24ge1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOyB9XFxuXFxuZmllbGRzZXQge1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2MwYzBjMDtcXG4gIG1hcmdpbjogMCAycHg7XFxuICBwYWRkaW5nOiAwLjM1ZW0gMC42MjVlbSAwLjc1ZW07IH1cXG5cXG5sZWdlbmQge1xcbiAgYm9yZGVyOiAwO1xcbiAgcGFkZGluZzogMDsgfVxcblxcbnRleHRhcmVhIHtcXG4gIG92ZXJmbG93OiBhdXRvOyB9XFxuXFxub3B0Z3JvdXAge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7IH1cXG5cXG50YWJsZSB7XFxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcbiAgYm9yZGVyLXNwYWNpbmc6IDA7IH1cXG5cXG50ZCwgdGgge1xcbiAgcGFkZGluZzogMDsgfVxcblxcbmh0bWwge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgfVxcblxcbiosICo6YmVmb3JlLCAqOmFmdGVyIHtcXG4gIGJveC1zaXppbmc6IGluaGVyaXQ7IH1cXG5cXG51bDpub3QoLmJyb3dzZXItZGVmYXVsdCkge1xcbiAgcGFkZGluZy1sZWZ0OiAwO1xcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lOyB9XFxuXFxudWw6bm90KC5icm93c2VyLWRlZmF1bHQpIGxpIHtcXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTsgfVxcblxcbmEge1xcbiAgY29sb3I6ICMwMzliZTU7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHRyYW5zcGFyZW50OyB9XFxuXFxuLnZhbGlnbi13cmFwcGVyLCBib2R5LnRoZW1lcyAudGhlbWVzLXNlY3Rpb24ge1xcbiAgZGlzcGxheTogLXdlYmtpdC1mbGV4O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLXdlYmtpdC1hbGlnbi1pdGVtczogY2VudGVyO1xcbiAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IH1cXG5cXG4uY2xlYXJmaXgge1xcbiAgY2xlYXI6IGJvdGg7IH1cXG5cXG4uei1kZXB0aC0wIHtcXG4gIGJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDsgfVxcblxcbi56LWRlcHRoLTEsIG5hdiwgLmNhcmQtcGFuZWwsIC5jYXJkLCAudG9hc3QsIC5idG4sIC5idG4tbGFyZ2UsIC5idG4tZmxvYXRpbmcsIC5kcm9wZG93bi1jb250ZW50LCAuY29sbGFwc2libGUsIC5zaWRlLW5hdiB7XFxuICBib3gtc2hhZG93OiAwIDJweCAycHggMCByZ2JhKDAsIDAsIDAsIDAuMTQpLCAwIDFweCA1cHggMCByZ2JhKDAsIDAsIDAsIDAuMTIpLCAwIDNweCAxcHggLTJweCByZ2JhKDAsIDAsIDAsIDAuMik7IH1cXG5cXG4uei1kZXB0aC0xLWhhbGYsIC5idG46aG92ZXIsIC5idG4tbGFyZ2U6aG92ZXIsIC5idG4tZmxvYXRpbmc6aG92ZXIge1xcbiAgYm94LXNoYWRvdzogMCAzcHggM3B4IDAgcmdiYSgwLCAwLCAwLCAwLjE0KSwgMCAxcHggN3B4IDAgcmdiYSgwLCAwLCAwLCAwLjEyKSwgMCAzcHggMXB4IC0xcHggcmdiYSgwLCAwLCAwLCAwLjIpOyB9XFxuXFxuLnotZGVwdGgtMiB7XFxuICBib3gtc2hhZG93OiAwIDRweCA1cHggMCByZ2JhKDAsIDAsIDAsIDAuMTQpLCAwIDFweCAxMHB4IDAgcmdiYSgwLCAwLCAwLCAwLjEyKSwgMCAycHggNHB4IC0xcHggcmdiYSgwLCAwLCAwLCAwLjMpOyB9XFxuXFxuLnotZGVwdGgtMyB7XFxuICBib3gtc2hhZG93OiAwIDZweCAxMHB4IDAgcmdiYSgwLCAwLCAwLCAwLjE0KSwgMCAxcHggMThweCAwIHJnYmEoMCwgMCwgMCwgMC4xMiksIDAgM3B4IDVweCAtMXB4IHJnYmEoMCwgMCwgMCwgMC4zKTsgfVxcblxcbi56LWRlcHRoLTQsIC5tb2RhbCB7XFxuICBib3gtc2hhZG93OiAwIDhweCAxMHB4IDFweCByZ2JhKDAsIDAsIDAsIDAuMTQpLCAwIDNweCAxNHB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMTIpLCAwIDVweCA1cHggLTNweCByZ2JhKDAsIDAsIDAsIDAuMyk7IH1cXG5cXG4uei1kZXB0aC01IHtcXG4gIGJveC1zaGFkb3c6IDAgMTZweCAyNHB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMTQpLCAwIDZweCAzMHB4IDVweCByZ2JhKDAsIDAsIDAsIDAuMTIpLCAwIDhweCAxMHB4IC01cHggcmdiYSgwLCAwLCAwLCAwLjMpOyB9XFxuXFxuLmhvdmVyYWJsZSB7XFxuICB0cmFuc2l0aW9uOiBib3gtc2hhZG93IC4yNXM7XFxuICBib3gtc2hhZG93OiAwOyB9XFxuXFxuLmhvdmVyYWJsZTpob3ZlciB7XFxuICB0cmFuc2l0aW9uOiBib3gtc2hhZG93IC4yNXM7XFxuICBib3gtc2hhZG93OiAwIDhweCAxN3B4IDAgcmdiYSgwLCAwLCAwLCAwLjIpLCAwIDZweCAyMHB4IDAgcmdiYSgwLCAwLCAwLCAwLjE5KTsgfVxcblxcbi5kaXZpZGVyIHtcXG4gIGhlaWdodDogMXB4O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlMGUwZTA7IH1cXG5cXG5ibG9ja3F1b3RlIHtcXG4gIG1hcmdpbjogMjBweCAwO1xcbiAgcGFkZGluZy1sZWZ0OiAxLjVyZW07XFxuICBib3JkZXItbGVmdDogNXB4IHNvbGlkICNlZTZlNzM7IH1cXG5cXG5pIHtcXG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0OyB9XFxuXFxuaS5sZWZ0IHtcXG4gIGZsb2F0OiBsZWZ0O1xcbiAgbWFyZ2luLXJpZ2h0OiAxNXB4OyB9XFxuXFxuaS5yaWdodCB7XFxuICBmbG9hdDogcmlnaHQ7XFxuICBtYXJnaW4tbGVmdDogMTVweDsgfVxcblxcbmkudGlueSB7XFxuICBmb250LXNpemU6IDFyZW07IH1cXG5cXG5pLnNtYWxsIHtcXG4gIGZvbnQtc2l6ZTogMnJlbTsgfVxcblxcbmkubWVkaXVtIHtcXG4gIGZvbnQtc2l6ZTogNHJlbTsgfVxcblxcbmkubGFyZ2Uge1xcbiAgZm9udC1zaXplOiA2cmVtOyB9XFxuXFxuaW1nLnJlc3BvbnNpdmUtaW1nLCB2aWRlby5yZXNwb25zaXZlLXZpZGVvIHtcXG4gIG1heC13aWR0aDogMTAwJTtcXG4gIGhlaWdodDogYXV0bzsgfVxcblxcbi5wYWdpbmF0aW9uIGxpIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxuICBoZWlnaHQ6IDMwcHg7IH1cXG5cXG4ucGFnaW5hdGlvbiBsaSBhIHtcXG4gIGNvbG9yOiAjNDQ0O1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgZm9udC1zaXplOiAxLjJyZW07XFxuICBwYWRkaW5nOiAwIDEwcHg7XFxuICBsaW5lLWhlaWdodDogMzBweDsgfVxcblxcbi5wYWdpbmF0aW9uIGxpLmFjdGl2ZSBhIHtcXG4gIGNvbG9yOiAjZmZmOyB9XFxuXFxuLnBhZ2luYXRpb24gbGkuYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZTZlNzM7IH1cXG5cXG4ucGFnaW5hdGlvbiBsaS5kaXNhYmxlZCBhIHtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG4gIGNvbG9yOiAjOTk5OyB9XFxuXFxuLnBhZ2luYXRpb24gbGkgaSB7XFxuICBmb250LXNpemU6IDJyZW07IH1cXG5cXG4ucGFnaW5hdGlvbiBsaS5wYWdlcyB1bCBsaSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBmbG9hdDogbm9uZTsgfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogOTkycHgpIHtcXG4gIC5wYWdpbmF0aW9uIHtcXG4gICAgd2lkdGg6IDEwMCU7IH1cXG4gIC5wYWdpbmF0aW9uIGxpLnByZXYsIC5wYWdpbmF0aW9uIGxpLm5leHQge1xcbiAgICB3aWR0aDogMTAlOyB9XFxuICAucGFnaW5hdGlvbiBsaS5wYWdlcyB7XFxuICAgIHdpZHRoOiA4MCU7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7IH0gfVxcblxcbi5icmVhZGNydW1iIHtcXG4gIGZvbnQtc2l6ZTogMThweDtcXG4gIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyk7IH1cXG5cXG4uYnJlYWRjcnVtYiBpLCAuYnJlYWRjcnVtYiBbY2xhc3NePVxcXCJtZGktXFxcIl0sIC5icmVhZGNydW1iIFtjbGFzcyo9XFxcIm1kaS1cXFwiXSwgLmJyZWFkY3J1bWIgaS5tYXRlcmlhbC1pY29ucyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBmbG9hdDogbGVmdDtcXG4gIGZvbnQtc2l6ZTogMjRweDsgfVxcblxcbi5icmVhZGNydW1iOmJlZm9yZSB7XFxuICBjb250ZW50OiAnXFxcXEU1Q0MnO1xcbiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KTtcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBmb250LWZhbWlseTogJ01hdGVyaWFsIEljb25zJztcXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXNpemU6IDI1cHg7XFxuICBtYXJnaW46IDAgMTBweCAwIDhweDtcXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkOyB9XFxuXFxuLmJyZWFkY3J1bWI6Zmlyc3QtY2hpbGQ6YmVmb3JlIHtcXG4gIGRpc3BsYXk6IG5vbmU7IH1cXG5cXG4uYnJlYWRjcnVtYjpsYXN0LWNoaWxkIHtcXG4gIGNvbG9yOiAjZmZmOyB9XFxuXFxuLnBhcmFsbGF4LWNvbnRhaW5lciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgaGVpZ2h0OiA1MDBweDsgfVxcblxcbi5wYXJhbGxheCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBib3R0b206IDA7XFxuICB6LWluZGV4OiAtMTsgfVxcblxcbi5wYXJhbGxheCBpbWcge1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGxlZnQ6IDUwJTtcXG4gIGJvdHRvbTogMDtcXG4gIG1pbi13aWR0aDogMTAwJTtcXG4gIG1pbi1oZWlnaHQ6IDEwMCU7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7IH1cXG5cXG4ucGluLXRvcCwgLnBpbi1ib3R0b20ge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlOyB9XFxuXFxuLnBpbm5lZCB7XFxuICBwb3NpdGlvbjogZml4ZWQgIWltcG9ydGFudDsgfVxcblxcbnVsLnN0YWdnZXJlZC1saXN0IGxpIHtcXG4gIG9wYWNpdHk6IDA7IH1cXG5cXG4uZmFkZS1pbiB7XFxuICBvcGFjaXR5OiAwO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiAwIDUwJTtcXG4gIHRyYW5zZm9ybS1vcmlnaW46IDAgNTAlOyB9XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2MDBweCkge1xcbiAgLmhpZGUtb24tc21hbGwtb25seSwgLnRhYnMtd3JhcHBlciwgLmhpZGUtb24tc21hbGwtYW5kLWRvd24ge1xcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IH0gfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogOTkycHgpIHtcXG4gIC5oaWRlLW9uLW1lZC1hbmQtZG93biB7XFxuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsgfSB9XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MDFweCkge1xcbiAgLmhpZGUtb24tbWVkLWFuZC11cCB7XFxuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsgfSB9XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MDBweCkgYW5kIChtYXgtd2lkdGg6IDk5MnB4KSB7XFxuICAuaGlkZS1vbi1tZWQtb25seSB7XFxuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsgfSB9XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA5OTNweCkge1xcbiAgLmhpZGUtb24tbGFyZ2Utb25seSB7XFxuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsgfSB9XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA5OTNweCkge1xcbiAgLnNob3ctb24tbGFyZ2Uge1xcbiAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50OyB9IH1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwMHB4KSBhbmQgKG1heC13aWR0aDogOTkycHgpIHtcXG4gIC5zaG93LW9uLW1lZGl1bSB7XFxuICAgIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7IH0gfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjAwcHgpIHtcXG4gIC5zaG93LW9uLXNtYWxsIHtcXG4gICAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDsgfSB9XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MDFweCkge1xcbiAgLnNob3ctb24tbWVkaXVtLWFuZC11cCB7XFxuICAgIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7IH0gfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogOTkycHgpIHtcXG4gIC5zaG93LW9uLW1lZGl1bS1hbmQtZG93biB7XFxuICAgIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7IH0gfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjAwcHgpIHtcXG4gIC5jZW50ZXItb24tc21hbGwtb25seSB7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjsgfSB9XFxuXFxuLnBhZ2UtZm9vdGVyIHtcXG4gIHBhZGRpbmctdG9wOiAyMHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VlNmU3MzsgfVxcblxcbi5wYWdlLWZvb3RlciAuZm9vdGVyLWNvcHlyaWdodCB7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgbWluLWhlaWdodDogNTBweDtcXG4gIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgcGFkZGluZzogMTBweCAwcHg7XFxuICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg1MSwgNTEsIDUxLCAwLjA4KTsgfVxcblxcbnRhYmxlLCB0aCwgdGQge1xcbiAgYm9yZGVyOiBub25lOyB9XFxuXFxudGFibGUge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBkaXNwbGF5OiB0YWJsZTsgfVxcblxcbnRhYmxlLmJvcmRlcmVkID4gdGhlYWQgPiB0ciwgdGFibGUuYm9yZGVyZWQgPiB0Ym9keSA+IHRyIHtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZDBkMGQwOyB9XFxuXFxudGFibGUuc3RyaXBlZCA+IHRib2R5ID4gdHI6bnRoLWNoaWxkKG9kZCkge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YyZjJmMjsgfVxcblxcbnRhYmxlLnN0cmlwZWQgPiB0Ym9keSA+IHRyID4gdGQge1xcbiAgYm9yZGVyLXJhZGl1czogMDsgfVxcblxcbnRhYmxlLmhpZ2hsaWdodCA+IHRib2R5ID4gdHIge1xcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAuMjVzIGVhc2U7IH1cXG5cXG50YWJsZS5oaWdobGlnaHQgPiB0Ym9keSA+IHRyOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7IH1cXG5cXG50YWJsZS5jZW50ZXJlZCB0aGVhZCB0ciB0aCwgdGFibGUuY2VudGVyZWQgdGJvZHkgdHIgdGQge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyOyB9XFxuXFxudGhlYWQge1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkMGQwZDA7IH1cXG5cXG50ZCwgdGgge1xcbiAgcGFkZGluZzogMTVweCA1cHg7XFxuICBkaXNwbGF5OiB0YWJsZS1jZWxsO1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICBib3JkZXItcmFkaXVzOiAycHg7IH1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDk5MnB4KSB7XFxuICB0YWJsZS5yZXNwb25zaXZlLXRhYmxlIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxuICAgIGJvcmRlci1zcGFjaW5nOiAwO1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlOyB9XFxuICB0YWJsZS5yZXNwb25zaXZlLXRhYmxlIHRkOmVtcHR5OmJlZm9yZSB7XFxuICAgIGNvbnRlbnQ6ICdcXFxcQTAnOyB9XFxuICB0YWJsZS5yZXNwb25zaXZlLXRhYmxlIHRoLCB0YWJsZS5yZXNwb25zaXZlLXRhYmxlIHRkIHtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wOyB9XFxuICB0YWJsZS5yZXNwb25zaXZlLXRhYmxlIHRoIHtcXG4gICAgdGV4dC1hbGlnbjogbGVmdDsgfVxcbiAgdGFibGUucmVzcG9uc2l2ZS10YWJsZSB0aGVhZCB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICBmbG9hdDogbGVmdDsgfVxcbiAgdGFibGUucmVzcG9uc2l2ZS10YWJsZSB0aGVhZCB0ciB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICBwYWRkaW5nOiAwIDEwcHggMCAwOyB9XFxuICB0YWJsZS5yZXNwb25zaXZlLXRhYmxlIHRoZWFkIHRyIHRoOjpiZWZvcmUge1xcbiAgICBjb250ZW50OiBcXFwiXFxcXEEwXFxcIjsgfVxcbiAgdGFibGUucmVzcG9uc2l2ZS10YWJsZSB0Ym9keSB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICB3aWR0aDogYXV0bztcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBvdmVyZmxvdy14OiBhdXRvO1xcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwOyB9XFxuICB0YWJsZS5yZXNwb25zaXZlLXRhYmxlIHRib2R5IHRyIHtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wOyB9XFxuICB0YWJsZS5yZXNwb25zaXZlLXRhYmxlIHRoIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIHRleHQtYWxpZ246IHJpZ2h0OyB9XFxuICB0YWJsZS5yZXNwb25zaXZlLXRhYmxlIHRkIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIG1pbi1oZWlnaHQ6IDEuMjVlbTtcXG4gICAgdGV4dC1hbGlnbjogbGVmdDsgfVxcbiAgdGFibGUucmVzcG9uc2l2ZS10YWJsZSB0ciB7XFxuICAgIHBhZGRpbmc6IDAgMTBweDsgfVxcbiAgdGFibGUucmVzcG9uc2l2ZS10YWJsZSB0aGVhZCB7XFxuICAgIGJvcmRlcjogMDtcXG4gICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2QwZDBkMDsgfVxcbiAgdGFibGUucmVzcG9uc2l2ZS10YWJsZS5ib3JkZXJlZCB0aCB7XFxuICAgIGJvcmRlci1ib3R0b206IDA7XFxuICAgIGJvcmRlci1sZWZ0OiAwOyB9XFxuICB0YWJsZS5yZXNwb25zaXZlLXRhYmxlLmJvcmRlcmVkIHRkIHtcXG4gICAgYm9yZGVyLWxlZnQ6IDA7XFxuICAgIGJvcmRlci1yaWdodDogMDtcXG4gICAgYm9yZGVyLWJvdHRvbTogMDsgfVxcbiAgdGFibGUucmVzcG9uc2l2ZS10YWJsZS5ib3JkZXJlZCB0ciB7XFxuICAgIGJvcmRlcjogMDsgfVxcbiAgdGFibGUucmVzcG9uc2l2ZS10YWJsZS5ib3JkZXJlZCB0Ym9keSB0ciB7XFxuICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNkMGQwZDA7IH0gfVxcblxcbi5jb2xsZWN0aW9uIHtcXG4gIG1hcmdpbjogLjVyZW0gMCAxcmVtIDA7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjZTBlMGUwO1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTsgfVxcblxcbi5jb2xsZWN0aW9uIC5jb2xsZWN0aW9uLWl0ZW0ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGxpbmUtaGVpZ2h0OiAxLjVyZW07XFxuICBwYWRkaW5nOiAxMHB4IDIwcHg7XFxuICBtYXJnaW46IDA7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2UwZTBlMDsgfVxcblxcbi5jb2xsZWN0aW9uIC5jb2xsZWN0aW9uLWl0ZW0uYXZhdGFyIHtcXG4gIG1pbi1oZWlnaHQ6IDg0cHg7XFxuICBwYWRkaW5nLWxlZnQ6IDcycHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7IH1cXG5cXG4uY29sbGVjdGlvbiAuY29sbGVjdGlvbi1pdGVtLmF2YXRhciAuY2lyY2xlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiA0MnB4O1xcbiAgaGVpZ2h0OiA0MnB4O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIGxlZnQ6IDE1cHg7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyB9XFxuXFxuLmNvbGxlY3Rpb24gLmNvbGxlY3Rpb24taXRlbS5hdmF0YXIgaS5jaXJjbGUge1xcbiAgZm9udC1zaXplOiAxOHB4O1xcbiAgbGluZS1oZWlnaHQ6IDQycHg7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM5OTk7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cXG5cXG4uY29sbGVjdGlvbiAuY29sbGVjdGlvbi1pdGVtLmF2YXRhciAudGl0bGUge1xcbiAgZm9udC1zaXplOiAxNnB4OyB9XFxuXFxuLmNvbGxlY3Rpb24gLmNvbGxlY3Rpb24taXRlbS5hdmF0YXIgcCB7XFxuICBtYXJnaW46IDA7IH1cXG5cXG4uY29sbGVjdGlvbiAuY29sbGVjdGlvbi1pdGVtLmF2YXRhciAuc2Vjb25kYXJ5LWNvbnRlbnQge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAxNnB4O1xcbiAgcmlnaHQ6IDE2cHg7IH1cXG5cXG4uY29sbGVjdGlvbiAuY29sbGVjdGlvbi1pdGVtOmxhc3QtY2hpbGQge1xcbiAgYm9yZGVyLWJvdHRvbTogbm9uZTsgfVxcblxcbi5jb2xsZWN0aW9uIC5jb2xsZWN0aW9uLWl0ZW0uYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyNmE2OWE7XFxuICBjb2xvcjogI2VhZmFmOTsgfVxcblxcbi5jb2xsZWN0aW9uIC5jb2xsZWN0aW9uLWl0ZW0uYWN0aXZlIC5zZWNvbmRhcnktY29udGVudCB7XFxuICBjb2xvcjogI2ZmZjsgfVxcblxcbi5jb2xsZWN0aW9uIGEuY29sbGVjdGlvbi1pdGVtIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgdHJhbnNpdGlvbjogLjI1cztcXG4gIGNvbG9yOiAjMjZhNjlhOyB9XFxuXFxuLmNvbGxlY3Rpb24gYS5jb2xsZWN0aW9uLWl0ZW06bm90KC5hY3RpdmUpOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkZGQ7IH1cXG5cXG4uY29sbGVjdGlvbi53aXRoLWhlYWRlciAuY29sbGVjdGlvbi1oZWFkZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZTBlMGUwO1xcbiAgcGFkZGluZzogMTBweCAyMHB4OyB9XFxuXFxuLmNvbGxlY3Rpb24ud2l0aC1oZWFkZXIgLmNvbGxlY3Rpb24taXRlbSB7XFxuICBwYWRkaW5nLWxlZnQ6IDMwcHg7IH1cXG5cXG4uY29sbGVjdGlvbi53aXRoLWhlYWRlciAuY29sbGVjdGlvbi1pdGVtLmF2YXRhciB7XFxuICBwYWRkaW5nLWxlZnQ6IDcycHg7IH1cXG5cXG4uc2Vjb25kYXJ5LWNvbnRlbnQge1xcbiAgZmxvYXQ6IHJpZ2h0O1xcbiAgY29sb3I6ICMyNmE2OWE7IH1cXG5cXG4uY29sbGFwc2libGUgLmNvbGxlY3Rpb24ge1xcbiAgbWFyZ2luOiAwO1xcbiAgYm9yZGVyOiBub25lOyB9XFxuXFxuLnZpZGVvLWNvbnRhaW5lciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBwYWRkaW5nLWJvdHRvbTogNTYuMjUlO1xcbiAgaGVpZ2h0OiAwO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjsgfVxcblxcbi52aWRlby1jb250YWluZXIgaWZyYW1lLCAudmlkZW8tY29udGFpbmVyIG9iamVjdCwgLnZpZGVvLWNvbnRhaW5lciBlbWJlZCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7IH1cXG5cXG4ucHJvZ3Jlc3Mge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgaGVpZ2h0OiA0cHg7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2FjZWNlNjtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIG1hcmdpbjogLjVyZW0gMCAxcmVtIDA7XFxuICBvdmVyZmxvdzogaGlkZGVuOyB9XFxuXFxuLnByb2dyZXNzIC5kZXRlcm1pbmF0ZSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI2YTY5YTtcXG4gIHRyYW5zaXRpb246IHdpZHRoIC4zcyBsaW5lYXI7IH1cXG5cXG4ucHJvZ3Jlc3MgLmluZGV0ZXJtaW5hdGUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI2YTY5YTsgfVxcblxcbi5wcm9ncmVzcyAuaW5kZXRlcm1pbmF0ZTpiZWZvcmUge1xcbiAgY29udGVudDogJyc7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBpbmhlcml0O1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIHdpbGwtY2hhbmdlOiBsZWZ0LCByaWdodDtcXG4gIC13ZWJraXQtYW5pbWF0aW9uOiBpbmRldGVybWluYXRlIDIuMXMgY3ViaWMtYmV6aWVyKDAuNjUsIDAuODE1LCAwLjczNSwgMC4zOTUpIGluZmluaXRlO1xcbiAgYW5pbWF0aW9uOiBpbmRldGVybWluYXRlIDIuMXMgY3ViaWMtYmV6aWVyKDAuNjUsIDAuODE1LCAwLjczNSwgMC4zOTUpIGluZmluaXRlOyB9XFxuXFxuLnByb2dyZXNzIC5pbmRldGVybWluYXRlOmFmdGVyIHtcXG4gIGNvbnRlbnQ6ICcnO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdDtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICBib3R0b206IDA7XFxuICB3aWxsLWNoYW5nZTogbGVmdCwgcmlnaHQ7XFxuICAtd2Via2l0LWFuaW1hdGlvbjogaW5kZXRlcm1pbmF0ZS1zaG9ydCAyLjFzIGN1YmljLWJlemllcigwLjE2NSwgMC44NCwgMC40NCwgMSkgaW5maW5pdGU7XFxuICBhbmltYXRpb246IGluZGV0ZXJtaW5hdGUtc2hvcnQgMi4xcyBjdWJpYy1iZXppZXIoMC4xNjUsIDAuODQsIDAuNDQsIDEpIGluZmluaXRlO1xcbiAgLXdlYmtpdC1hbmltYXRpb24tZGVsYXk6IDEuMTVzO1xcbiAgYW5pbWF0aW9uLWRlbGF5OiAxLjE1czsgfVxcblxcbkAtd2Via2l0LWtleWZyYW1lcyBpbmRldGVybWluYXRlIHtcXG4gIDAlIHtcXG4gICAgbGVmdDogLTM1JTtcXG4gICAgcmlnaHQ6IDEwMCU7IH1cXG4gIDYwJSB7XFxuICAgIGxlZnQ6IDEwMCU7XFxuICAgIHJpZ2h0OiAtOTAlOyB9XFxuICAxMDAlIHtcXG4gICAgbGVmdDogMTAwJTtcXG4gICAgcmlnaHQ6IC05MCU7IH0gfVxcblxcbkBrZXlmcmFtZXMgaW5kZXRlcm1pbmF0ZSB7XFxuICAwJSB7XFxuICAgIGxlZnQ6IC0zNSU7XFxuICAgIHJpZ2h0OiAxMDAlOyB9XFxuICA2MCUge1xcbiAgICBsZWZ0OiAxMDAlO1xcbiAgICByaWdodDogLTkwJTsgfVxcbiAgMTAwJSB7XFxuICAgIGxlZnQ6IDEwMCU7XFxuICAgIHJpZ2h0OiAtOTAlOyB9IH1cXG5cXG5ALXdlYmtpdC1rZXlmcmFtZXMgaW5kZXRlcm1pbmF0ZS1zaG9ydCB7XFxuICAwJSB7XFxuICAgIGxlZnQ6IC0yMDAlO1xcbiAgICByaWdodDogMTAwJTsgfVxcbiAgNjAlIHtcXG4gICAgbGVmdDogMTA3JTtcXG4gICAgcmlnaHQ6IC04JTsgfVxcbiAgMTAwJSB7XFxuICAgIGxlZnQ6IDEwNyU7XFxuICAgIHJpZ2h0OiAtOCU7IH0gfVxcblxcbkBrZXlmcmFtZXMgaW5kZXRlcm1pbmF0ZS1zaG9ydCB7XFxuICAwJSB7XFxuICAgIGxlZnQ6IC0yMDAlO1xcbiAgICByaWdodDogMTAwJTsgfVxcbiAgNjAlIHtcXG4gICAgbGVmdDogMTA3JTtcXG4gICAgcmlnaHQ6IC04JTsgfVxcbiAgMTAwJSB7XFxuICAgIGxlZnQ6IDEwNyU7XFxuICAgIHJpZ2h0OiAtOCU7IH0gfVxcblxcbi5oaWRlIHtcXG4gIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsgfVxcblxcbi5sZWZ0LWFsaWduIHtcXG4gIHRleHQtYWxpZ246IGxlZnQ7IH1cXG5cXG4ucmlnaHQtYWxpZ24ge1xcbiAgdGV4dC1hbGlnbjogcmlnaHQ7IH1cXG5cXG4uY2VudGVyLCAuY2VudGVyLWFsaWduIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjsgfVxcblxcbi5sZWZ0IHtcXG4gIGZsb2F0OiBsZWZ0ICFpbXBvcnRhbnQ7IH1cXG5cXG4ucmlnaHQge1xcbiAgZmxvYXQ6IHJpZ2h0ICFpbXBvcnRhbnQ7IH1cXG5cXG4ubm8tc2VsZWN0LCBpbnB1dFt0eXBlPXJhbmdlXSwgaW5wdXRbdHlwZT1yYW5nZV0gKyAudGh1bWIge1xcbiAgLXdlYmtpdC10b3VjaC1jYWxsb3V0OiBub25lO1xcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICB1c2VyLXNlbGVjdDogbm9uZTsgfVxcblxcbi5jaXJjbGUge1xcbiAgYm9yZGVyLXJhZGl1czogNTAlOyB9XFxuXFxuLmNlbnRlci1ibG9jayB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvOyB9XFxuXFxuLnRydW5jYXRlIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsgfVxcblxcbi5uby1wYWRkaW5nIHtcXG4gIHBhZGRpbmc6IDAgIWltcG9ydGFudDsgfVxcblxcbnNwYW4uYmFkZ2Uge1xcbiAgbWluLXdpZHRoOiAzcmVtO1xcbiAgcGFkZGluZzogMCA2cHg7XFxuICBtYXJnaW4tbGVmdDogMTRweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG4gIGxpbmUtaGVpZ2h0OiAyMnB4O1xcbiAgaGVpZ2h0OiAyMnB4O1xcbiAgY29sb3I6ICM3NTc1NzU7XFxuICBmbG9hdDogcmlnaHQ7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9XFxuXFxuc3Bhbi5iYWRnZS5uZXcge1xcbiAgZm9udC13ZWlnaHQ6IDMwMDtcXG4gIGZvbnQtc2l6ZTogMC44cmVtO1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjZhNjlhO1xcbiAgYm9yZGVyLXJhZGl1czogMnB4OyB9XFxuXFxuc3Bhbi5iYWRnZS5uZXc6YWZ0ZXIge1xcbiAgY29udGVudDogXFxcIiBuZXdcXFwiOyB9XFxuXFxuc3Bhbi5iYWRnZVtkYXRhLWJhZGdlLWNhcHRpb25dOjphZnRlciB7XFxuICBjb250ZW50OiBcXFwiIFxcXCIgYXR0cihkYXRhLWJhZGdlLWNhcHRpb24pOyB9XFxuXFxubmF2IHVsIGEgc3Bhbi5iYWRnZSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBmbG9hdDogbm9uZTtcXG4gIG1hcmdpbi1sZWZ0OiA0cHg7XFxuICBsaW5lLWhlaWdodDogMjJweDtcXG4gIGhlaWdodDogMjJweDsgfVxcblxcbi5jb2xsZWN0aW9uLWl0ZW0gc3Bhbi5iYWRnZSB7XFxuICBtYXJnaW4tdG9wOiBjYWxjKC43NXJlbSAtIDExcHgpOyB9XFxuXFxuLmNvbGxhcHNpYmxlIHNwYW4uYmFkZ2Uge1xcbiAgbWFyZ2luLXRvcDogY2FsYygxLjVyZW0gLSAxMXB4KTsgfVxcblxcbi5zaWRlLW5hdiBzcGFuLmJhZGdlIHtcXG4gIG1hcmdpbi10b3A6IGNhbGMoMjRweCAtIDExcHgpOyB9XFxuXFxuLm1hdGVyaWFsLWljb25zIHtcXG4gIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XFxuICAtd2Via2l0LWZvbnQtZmVhdHVyZS1zZXR0aW5nczogJ2xpZ2EnO1xcbiAgLW1vei1mb250LWZlYXR1cmUtc2V0dGluZ3M6ICdsaWdhJztcXG4gIGZvbnQtZmVhdHVyZS1zZXR0aW5nczogJ2xpZ2EnOyB9XFxuXFxuLmNvbnRhaW5lciB7XFxuICBtYXJnaW46IDAgYXV0bztcXG4gIG1heC13aWR0aDogMTI4MHB4O1xcbiAgd2lkdGg6IDkwJTsgfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjAxcHgpIHtcXG4gIC5jb250YWluZXIge1xcbiAgICB3aWR0aDogODUlOyB9IH1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDk5M3B4KSB7XFxuICAuY29udGFpbmVyIHtcXG4gICAgd2lkdGg6IDcwJTsgfSB9XFxuXFxuLmNvbnRhaW5lciAucm93IHtcXG4gIG1hcmdpbi1sZWZ0OiAtLjc1cmVtO1xcbiAgbWFyZ2luLXJpZ2h0OiAtLjc1cmVtOyB9XFxuXFxuLnNlY3Rpb24ge1xcbiAgcGFkZGluZy10b3A6IDFyZW07XFxuICBwYWRkaW5nLWJvdHRvbTogMXJlbTsgfVxcblxcbi5zZWN0aW9uLm5vLXBhZCB7XFxuICBwYWRkaW5nOiAwOyB9XFxuXFxuLnNlY3Rpb24ubm8tcGFkLWJvdCB7XFxuICBwYWRkaW5nLWJvdHRvbTogMDsgfVxcblxcbi5zZWN0aW9uLm5vLXBhZC10b3Age1xcbiAgcGFkZGluZy10b3A6IDA7IH1cXG5cXG4ucm93IHtcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcbiAgbWFyZ2luLWJvdHRvbTogMjBweDsgfVxcblxcbi5yb3c6YWZ0ZXIge1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBkaXNwbGF5OiB0YWJsZTtcXG4gIGNsZWFyOiBib3RoOyB9XFxuXFxuLnJvdyAuY29sIHtcXG4gIGZsb2F0OiBsZWZ0O1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIHBhZGRpbmc6IDAgLjc1cmVtO1xcbiAgbWluLWhlaWdodDogMXB4OyB9XFxuXFxuLnJvdyAuY29sW2NsYXNzKj1cXFwicHVzaC1cXFwiXSwgLnJvdyAuY29sW2NsYXNzKj1cXFwicHVsbC1cXFwiXSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7IH1cXG5cXG4ucm93IC5jb2wuczEge1xcbiAgd2lkdGg6IDguMzMzMzMzMzMzMyU7XFxuICBtYXJnaW4tbGVmdDogYXV0bztcXG4gIGxlZnQ6IGF1dG87XFxuICByaWdodDogYXV0bzsgfVxcblxcbi5yb3cgLmNvbC5zMiB7XFxuICB3aWR0aDogMTYuNjY2NjY2NjY2NyU7XFxuICBtYXJnaW4tbGVmdDogYXV0bztcXG4gIGxlZnQ6IGF1dG87XFxuICByaWdodDogYXV0bzsgfVxcblxcbi5yb3cgLmNvbC5zMyB7XFxuICB3aWR0aDogMjUlO1xcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICBsZWZ0OiBhdXRvO1xcbiAgcmlnaHQ6IGF1dG87IH1cXG5cXG4ucm93IC5jb2wuczQge1xcbiAgd2lkdGg6IDMzLjMzMzMzMzMzMzMlO1xcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICBsZWZ0OiBhdXRvO1xcbiAgcmlnaHQ6IGF1dG87IH1cXG5cXG4ucm93IC5jb2wuczUge1xcbiAgd2lkdGg6IDQxLjY2NjY2NjY2NjclO1xcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICBsZWZ0OiBhdXRvO1xcbiAgcmlnaHQ6IGF1dG87IH1cXG5cXG4ucm93IC5jb2wuczYge1xcbiAgd2lkdGg6IDUwJTtcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgbGVmdDogYXV0bztcXG4gIHJpZ2h0OiBhdXRvOyB9XFxuXFxuLnJvdyAuY29sLnM3IHtcXG4gIHdpZHRoOiA1OC4zMzMzMzMzMzMzJTtcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgbGVmdDogYXV0bztcXG4gIHJpZ2h0OiBhdXRvOyB9XFxuXFxuLnJvdyAuY29sLnM4IHtcXG4gIHdpZHRoOiA2Ni42NjY2NjY2NjY3JTtcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgbGVmdDogYXV0bztcXG4gIHJpZ2h0OiBhdXRvOyB9XFxuXFxuLnJvdyAuY29sLnM5IHtcXG4gIHdpZHRoOiA3NSU7XFxuICBtYXJnaW4tbGVmdDogYXV0bztcXG4gIGxlZnQ6IGF1dG87XFxuICByaWdodDogYXV0bzsgfVxcblxcbi5yb3cgLmNvbC5zMTAge1xcbiAgd2lkdGg6IDgzLjMzMzMzMzMzMzMlO1xcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICBsZWZ0OiBhdXRvO1xcbiAgcmlnaHQ6IGF1dG87IH1cXG5cXG4ucm93IC5jb2wuczExIHtcXG4gIHdpZHRoOiA5MS42NjY2NjY2NjY3JTtcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgbGVmdDogYXV0bztcXG4gIHJpZ2h0OiBhdXRvOyB9XFxuXFxuLnJvdyAuY29sLnMxMiB7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgbGVmdDogYXV0bztcXG4gIHJpZ2h0OiBhdXRvOyB9XFxuXFxuLnJvdyAuY29sLm9mZnNldC1zMSB7XFxuICBtYXJnaW4tbGVmdDogOC4zMzMzMzMzMzMzJTsgfVxcblxcbi5yb3cgLmNvbC5wdWxsLXMxIHtcXG4gIHJpZ2h0OiA4LjMzMzMzMzMzMzMlOyB9XFxuXFxuLnJvdyAuY29sLnB1c2gtczEge1xcbiAgbGVmdDogOC4zMzMzMzMzMzMzJTsgfVxcblxcbi5yb3cgLmNvbC5vZmZzZXQtczIge1xcbiAgbWFyZ2luLWxlZnQ6IDE2LjY2NjY2NjY2NjclOyB9XFxuXFxuLnJvdyAuY29sLnB1bGwtczIge1xcbiAgcmlnaHQ6IDE2LjY2NjY2NjY2NjclOyB9XFxuXFxuLnJvdyAuY29sLnB1c2gtczIge1xcbiAgbGVmdDogMTYuNjY2NjY2NjY2NyU7IH1cXG5cXG4ucm93IC5jb2wub2Zmc2V0LXMzIHtcXG4gIG1hcmdpbi1sZWZ0OiAyNSU7IH1cXG5cXG4ucm93IC5jb2wucHVsbC1zMyB7XFxuICByaWdodDogMjUlOyB9XFxuXFxuLnJvdyAuY29sLnB1c2gtczMge1xcbiAgbGVmdDogMjUlOyB9XFxuXFxuLnJvdyAuY29sLm9mZnNldC1zNCB7XFxuICBtYXJnaW4tbGVmdDogMzMuMzMzMzMzMzMzMyU7IH1cXG5cXG4ucm93IC5jb2wucHVsbC1zNCB7XFxuICByaWdodDogMzMuMzMzMzMzMzMzMyU7IH1cXG5cXG4ucm93IC5jb2wucHVzaC1zNCB7XFxuICBsZWZ0OiAzMy4zMzMzMzMzMzMzJTsgfVxcblxcbi5yb3cgLmNvbC5vZmZzZXQtczUge1xcbiAgbWFyZ2luLWxlZnQ6IDQxLjY2NjY2NjY2NjclOyB9XFxuXFxuLnJvdyAuY29sLnB1bGwtczUge1xcbiAgcmlnaHQ6IDQxLjY2NjY2NjY2NjclOyB9XFxuXFxuLnJvdyAuY29sLnB1c2gtczUge1xcbiAgbGVmdDogNDEuNjY2NjY2NjY2NyU7IH1cXG5cXG4ucm93IC5jb2wub2Zmc2V0LXM2IHtcXG4gIG1hcmdpbi1sZWZ0OiA1MCU7IH1cXG5cXG4ucm93IC5jb2wucHVsbC1zNiB7XFxuICByaWdodDogNTAlOyB9XFxuXFxuLnJvdyAuY29sLnB1c2gtczYge1xcbiAgbGVmdDogNTAlOyB9XFxuXFxuLnJvdyAuY29sLm9mZnNldC1zNyB7XFxuICBtYXJnaW4tbGVmdDogNTguMzMzMzMzMzMzMyU7IH1cXG5cXG4ucm93IC5jb2wucHVsbC1zNyB7XFxuICByaWdodDogNTguMzMzMzMzMzMzMyU7IH1cXG5cXG4ucm93IC5jb2wucHVzaC1zNyB7XFxuICBsZWZ0OiA1OC4zMzMzMzMzMzMzJTsgfVxcblxcbi5yb3cgLmNvbC5vZmZzZXQtczgge1xcbiAgbWFyZ2luLWxlZnQ6IDY2LjY2NjY2NjY2NjclOyB9XFxuXFxuLnJvdyAuY29sLnB1bGwtczgge1xcbiAgcmlnaHQ6IDY2LjY2NjY2NjY2NjclOyB9XFxuXFxuLnJvdyAuY29sLnB1c2gtczgge1xcbiAgbGVmdDogNjYuNjY2NjY2NjY2NyU7IH1cXG5cXG4ucm93IC5jb2wub2Zmc2V0LXM5IHtcXG4gIG1hcmdpbi1sZWZ0OiA3NSU7IH1cXG5cXG4ucm93IC5jb2wucHVsbC1zOSB7XFxuICByaWdodDogNzUlOyB9XFxuXFxuLnJvdyAuY29sLnB1c2gtczkge1xcbiAgbGVmdDogNzUlOyB9XFxuXFxuLnJvdyAuY29sLm9mZnNldC1zMTAge1xcbiAgbWFyZ2luLWxlZnQ6IDgzLjMzMzMzMzMzMzMlOyB9XFxuXFxuLnJvdyAuY29sLnB1bGwtczEwIHtcXG4gIHJpZ2h0OiA4My4zMzMzMzMzMzMzJTsgfVxcblxcbi5yb3cgLmNvbC5wdXNoLXMxMCB7XFxuICBsZWZ0OiA4My4zMzMzMzMzMzMzJTsgfVxcblxcbi5yb3cgLmNvbC5vZmZzZXQtczExIHtcXG4gIG1hcmdpbi1sZWZ0OiA5MS42NjY2NjY2NjY3JTsgfVxcblxcbi5yb3cgLmNvbC5wdWxsLXMxMSB7XFxuICByaWdodDogOTEuNjY2NjY2NjY2NyU7IH1cXG5cXG4ucm93IC5jb2wucHVzaC1zMTEge1xcbiAgbGVmdDogOTEuNjY2NjY2NjY2NyU7IH1cXG5cXG4ucm93IC5jb2wub2Zmc2V0LXMxMiB7XFxuICBtYXJnaW4tbGVmdDogMTAwJTsgfVxcblxcbi5yb3cgLmNvbC5wdWxsLXMxMiB7XFxuICByaWdodDogMTAwJTsgfVxcblxcbi5yb3cgLmNvbC5wdXNoLXMxMiB7XFxuICBsZWZ0OiAxMDAlOyB9XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MDFweCkge1xcbiAgLnJvdyAuY29sLm0xIHtcXG4gICAgd2lkdGg6IDguMzMzMzMzMzMzMyU7XFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgICBsZWZ0OiBhdXRvO1xcbiAgICByaWdodDogYXV0bzsgfVxcbiAgLnJvdyAuY29sLm0yIHtcXG4gICAgd2lkdGg6IDE2LjY2NjY2NjY2NjclO1xcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcXG4gICAgbGVmdDogYXV0bztcXG4gICAgcmlnaHQ6IGF1dG87IH1cXG4gIC5yb3cgLmNvbC5tMyB7XFxuICAgIHdpZHRoOiAyNSU7XFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgICBsZWZ0OiBhdXRvO1xcbiAgICByaWdodDogYXV0bzsgfVxcbiAgLnJvdyAuY29sLm00IHtcXG4gICAgd2lkdGg6IDMzLjMzMzMzMzMzMzMlO1xcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcXG4gICAgbGVmdDogYXV0bztcXG4gICAgcmlnaHQ6IGF1dG87IH1cXG4gIC5yb3cgLmNvbC5tNSB7XFxuICAgIHdpZHRoOiA0MS42NjY2NjY2NjY3JTtcXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICAgIGxlZnQ6IGF1dG87XFxuICAgIHJpZ2h0OiBhdXRvOyB9XFxuICAucm93IC5jb2wubTYge1xcbiAgICB3aWR0aDogNTAlO1xcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcXG4gICAgbGVmdDogYXV0bztcXG4gICAgcmlnaHQ6IGF1dG87IH1cXG4gIC5yb3cgLmNvbC5tNyB7XFxuICAgIHdpZHRoOiA1OC4zMzMzMzMzMzMzJTtcXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICAgIGxlZnQ6IGF1dG87XFxuICAgIHJpZ2h0OiBhdXRvOyB9XFxuICAucm93IC5jb2wubTgge1xcbiAgICB3aWR0aDogNjYuNjY2NjY2NjY2NyU7XFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgICBsZWZ0OiBhdXRvO1xcbiAgICByaWdodDogYXV0bzsgfVxcbiAgLnJvdyAuY29sLm05IHtcXG4gICAgd2lkdGg6IDc1JTtcXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICAgIGxlZnQ6IGF1dG87XFxuICAgIHJpZ2h0OiBhdXRvOyB9XFxuICAucm93IC5jb2wubTEwIHtcXG4gICAgd2lkdGg6IDgzLjMzMzMzMzMzMzMlO1xcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcXG4gICAgbGVmdDogYXV0bztcXG4gICAgcmlnaHQ6IGF1dG87IH1cXG4gIC5yb3cgLmNvbC5tMTEge1xcbiAgICB3aWR0aDogOTEuNjY2NjY2NjY2NyU7XFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgICBsZWZ0OiBhdXRvO1xcbiAgICByaWdodDogYXV0bzsgfVxcbiAgLnJvdyAuY29sLm0xMiB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcXG4gICAgbGVmdDogYXV0bztcXG4gICAgcmlnaHQ6IGF1dG87IH1cXG4gIC5yb3cgLmNvbC5vZmZzZXQtbTEge1xcbiAgICBtYXJnaW4tbGVmdDogOC4zMzMzMzMzMzMzJTsgfVxcbiAgLnJvdyAuY29sLnB1bGwtbTEge1xcbiAgICByaWdodDogOC4zMzMzMzMzMzMzJTsgfVxcbiAgLnJvdyAuY29sLnB1c2gtbTEge1xcbiAgICBsZWZ0OiA4LjMzMzMzMzMzMzMlOyB9XFxuICAucm93IC5jb2wub2Zmc2V0LW0yIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDE2LjY2NjY2NjY2NjclOyB9XFxuICAucm93IC5jb2wucHVsbC1tMiB7XFxuICAgIHJpZ2h0OiAxNi42NjY2NjY2NjY3JTsgfVxcbiAgLnJvdyAuY29sLnB1c2gtbTIge1xcbiAgICBsZWZ0OiAxNi42NjY2NjY2NjY3JTsgfVxcbiAgLnJvdyAuY29sLm9mZnNldC1tMyB7XFxuICAgIG1hcmdpbi1sZWZ0OiAyNSU7IH1cXG4gIC5yb3cgLmNvbC5wdWxsLW0zIHtcXG4gICAgcmlnaHQ6IDI1JTsgfVxcbiAgLnJvdyAuY29sLnB1c2gtbTMge1xcbiAgICBsZWZ0OiAyNSU7IH1cXG4gIC5yb3cgLmNvbC5vZmZzZXQtbTQge1xcbiAgICBtYXJnaW4tbGVmdDogMzMuMzMzMzMzMzMzMyU7IH1cXG4gIC5yb3cgLmNvbC5wdWxsLW00IHtcXG4gICAgcmlnaHQ6IDMzLjMzMzMzMzMzMzMlOyB9XFxuICAucm93IC5jb2wucHVzaC1tNCB7XFxuICAgIGxlZnQ6IDMzLjMzMzMzMzMzMzMlOyB9XFxuICAucm93IC5jb2wub2Zmc2V0LW01IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDQxLjY2NjY2NjY2NjclOyB9XFxuICAucm93IC5jb2wucHVsbC1tNSB7XFxuICAgIHJpZ2h0OiA0MS42NjY2NjY2NjY3JTsgfVxcbiAgLnJvdyAuY29sLnB1c2gtbTUge1xcbiAgICBsZWZ0OiA0MS42NjY2NjY2NjY3JTsgfVxcbiAgLnJvdyAuY29sLm9mZnNldC1tNiB7XFxuICAgIG1hcmdpbi1sZWZ0OiA1MCU7IH1cXG4gIC5yb3cgLmNvbC5wdWxsLW02IHtcXG4gICAgcmlnaHQ6IDUwJTsgfVxcbiAgLnJvdyAuY29sLnB1c2gtbTYge1xcbiAgICBsZWZ0OiA1MCU7IH1cXG4gIC5yb3cgLmNvbC5vZmZzZXQtbTcge1xcbiAgICBtYXJnaW4tbGVmdDogNTguMzMzMzMzMzMzMyU7IH1cXG4gIC5yb3cgLmNvbC5wdWxsLW03IHtcXG4gICAgcmlnaHQ6IDU4LjMzMzMzMzMzMzMlOyB9XFxuICAucm93IC5jb2wucHVzaC1tNyB7XFxuICAgIGxlZnQ6IDU4LjMzMzMzMzMzMzMlOyB9XFxuICAucm93IC5jb2wub2Zmc2V0LW04IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDY2LjY2NjY2NjY2NjclOyB9XFxuICAucm93IC5jb2wucHVsbC1tOCB7XFxuICAgIHJpZ2h0OiA2Ni42NjY2NjY2NjY3JTsgfVxcbiAgLnJvdyAuY29sLnB1c2gtbTgge1xcbiAgICBsZWZ0OiA2Ni42NjY2NjY2NjY3JTsgfVxcbiAgLnJvdyAuY29sLm9mZnNldC1tOSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA3NSU7IH1cXG4gIC5yb3cgLmNvbC5wdWxsLW05IHtcXG4gICAgcmlnaHQ6IDc1JTsgfVxcbiAgLnJvdyAuY29sLnB1c2gtbTkge1xcbiAgICBsZWZ0OiA3NSU7IH1cXG4gIC5yb3cgLmNvbC5vZmZzZXQtbTEwIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDgzLjMzMzMzMzMzMzMlOyB9XFxuICAucm93IC5jb2wucHVsbC1tMTAge1xcbiAgICByaWdodDogODMuMzMzMzMzMzMzMyU7IH1cXG4gIC5yb3cgLmNvbC5wdXNoLW0xMCB7XFxuICAgIGxlZnQ6IDgzLjMzMzMzMzMzMzMlOyB9XFxuICAucm93IC5jb2wub2Zmc2V0LW0xMSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA5MS42NjY2NjY2NjY3JTsgfVxcbiAgLnJvdyAuY29sLnB1bGwtbTExIHtcXG4gICAgcmlnaHQ6IDkxLjY2NjY2NjY2NjclOyB9XFxuICAucm93IC5jb2wucHVzaC1tMTEge1xcbiAgICBsZWZ0OiA5MS42NjY2NjY2NjY3JTsgfVxcbiAgLnJvdyAuY29sLm9mZnNldC1tMTIge1xcbiAgICBtYXJnaW4tbGVmdDogMTAwJTsgfVxcbiAgLnJvdyAuY29sLnB1bGwtbTEyIHtcXG4gICAgcmlnaHQ6IDEwMCU7IH1cXG4gIC5yb3cgLmNvbC5wdXNoLW0xMiB7XFxuICAgIGxlZnQ6IDEwMCU7IH0gfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogOTkzcHgpIHtcXG4gIC5yb3cgLmNvbC5sMSB7XFxuICAgIHdpZHRoOiA4LjMzMzMzMzMzMzMlO1xcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcXG4gICAgbGVmdDogYXV0bztcXG4gICAgcmlnaHQ6IGF1dG87IH1cXG4gIC5yb3cgLmNvbC5sMiB7XFxuICAgIHdpZHRoOiAxNi42NjY2NjY2NjY3JTtcXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICAgIGxlZnQ6IGF1dG87XFxuICAgIHJpZ2h0OiBhdXRvOyB9XFxuICAucm93IC5jb2wubDMge1xcbiAgICB3aWR0aDogMjUlO1xcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcXG4gICAgbGVmdDogYXV0bztcXG4gICAgcmlnaHQ6IGF1dG87IH1cXG4gIC5yb3cgLmNvbC5sNCB7XFxuICAgIHdpZHRoOiAzMy4zMzMzMzMzMzMzJTtcXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICAgIGxlZnQ6IGF1dG87XFxuICAgIHJpZ2h0OiBhdXRvOyB9XFxuICAucm93IC5jb2wubDUge1xcbiAgICB3aWR0aDogNDEuNjY2NjY2NjY2NyU7XFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgICBsZWZ0OiBhdXRvO1xcbiAgICByaWdodDogYXV0bzsgfVxcbiAgLnJvdyAuY29sLmw2IHtcXG4gICAgd2lkdGg6IDUwJTtcXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICAgIGxlZnQ6IGF1dG87XFxuICAgIHJpZ2h0OiBhdXRvOyB9XFxuICAucm93IC5jb2wubDcge1xcbiAgICB3aWR0aDogNTguMzMzMzMzMzMzMyU7XFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgICBsZWZ0OiBhdXRvO1xcbiAgICByaWdodDogYXV0bzsgfVxcbiAgLnJvdyAuY29sLmw4IHtcXG4gICAgd2lkdGg6IDY2LjY2NjY2NjY2NjclO1xcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcXG4gICAgbGVmdDogYXV0bztcXG4gICAgcmlnaHQ6IGF1dG87IH1cXG4gIC5yb3cgLmNvbC5sOSB7XFxuICAgIHdpZHRoOiA3NSU7XFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgICBsZWZ0OiBhdXRvO1xcbiAgICByaWdodDogYXV0bzsgfVxcbiAgLnJvdyAuY29sLmwxMCB7XFxuICAgIHdpZHRoOiA4My4zMzMzMzMzMzMzJTtcXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICAgIGxlZnQ6IGF1dG87XFxuICAgIHJpZ2h0OiBhdXRvOyB9XFxuICAucm93IC5jb2wubDExIHtcXG4gICAgd2lkdGg6IDkxLjY2NjY2NjY2NjclO1xcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcXG4gICAgbGVmdDogYXV0bztcXG4gICAgcmlnaHQ6IGF1dG87IH1cXG4gIC5yb3cgLmNvbC5sMTIge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICAgIGxlZnQ6IGF1dG87XFxuICAgIHJpZ2h0OiBhdXRvOyB9XFxuICAucm93IC5jb2wub2Zmc2V0LWwxIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDguMzMzMzMzMzMzMyU7IH1cXG4gIC5yb3cgLmNvbC5wdWxsLWwxIHtcXG4gICAgcmlnaHQ6IDguMzMzMzMzMzMzMyU7IH1cXG4gIC5yb3cgLmNvbC5wdXNoLWwxIHtcXG4gICAgbGVmdDogOC4zMzMzMzMzMzMzJTsgfVxcbiAgLnJvdyAuY29sLm9mZnNldC1sMiB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxNi42NjY2NjY2NjY3JTsgfVxcbiAgLnJvdyAuY29sLnB1bGwtbDIge1xcbiAgICByaWdodDogMTYuNjY2NjY2NjY2NyU7IH1cXG4gIC5yb3cgLmNvbC5wdXNoLWwyIHtcXG4gICAgbGVmdDogMTYuNjY2NjY2NjY2NyU7IH1cXG4gIC5yb3cgLmNvbC5vZmZzZXQtbDMge1xcbiAgICBtYXJnaW4tbGVmdDogMjUlOyB9XFxuICAucm93IC5jb2wucHVsbC1sMyB7XFxuICAgIHJpZ2h0OiAyNSU7IH1cXG4gIC5yb3cgLmNvbC5wdXNoLWwzIHtcXG4gICAgbGVmdDogMjUlOyB9XFxuICAucm93IC5jb2wub2Zmc2V0LWw0IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDMzLjMzMzMzMzMzMzMlOyB9XFxuICAucm93IC5jb2wucHVsbC1sNCB7XFxuICAgIHJpZ2h0OiAzMy4zMzMzMzMzMzMzJTsgfVxcbiAgLnJvdyAuY29sLnB1c2gtbDQge1xcbiAgICBsZWZ0OiAzMy4zMzMzMzMzMzMzJTsgfVxcbiAgLnJvdyAuY29sLm9mZnNldC1sNSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA0MS42NjY2NjY2NjY3JTsgfVxcbiAgLnJvdyAuY29sLnB1bGwtbDUge1xcbiAgICByaWdodDogNDEuNjY2NjY2NjY2NyU7IH1cXG4gIC5yb3cgLmNvbC5wdXNoLWw1IHtcXG4gICAgbGVmdDogNDEuNjY2NjY2NjY2NyU7IH1cXG4gIC5yb3cgLmNvbC5vZmZzZXQtbDYge1xcbiAgICBtYXJnaW4tbGVmdDogNTAlOyB9XFxuICAucm93IC5jb2wucHVsbC1sNiB7XFxuICAgIHJpZ2h0OiA1MCU7IH1cXG4gIC5yb3cgLmNvbC5wdXNoLWw2IHtcXG4gICAgbGVmdDogNTAlOyB9XFxuICAucm93IC5jb2wub2Zmc2V0LWw3IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDU4LjMzMzMzMzMzMzMlOyB9XFxuICAucm93IC5jb2wucHVsbC1sNyB7XFxuICAgIHJpZ2h0OiA1OC4zMzMzMzMzMzMzJTsgfVxcbiAgLnJvdyAuY29sLnB1c2gtbDcge1xcbiAgICBsZWZ0OiA1OC4zMzMzMzMzMzMzJTsgfVxcbiAgLnJvdyAuY29sLm9mZnNldC1sOCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA2Ni42NjY2NjY2NjY3JTsgfVxcbiAgLnJvdyAuY29sLnB1bGwtbDgge1xcbiAgICByaWdodDogNjYuNjY2NjY2NjY2NyU7IH1cXG4gIC5yb3cgLmNvbC5wdXNoLWw4IHtcXG4gICAgbGVmdDogNjYuNjY2NjY2NjY2NyU7IH1cXG4gIC5yb3cgLmNvbC5vZmZzZXQtbDkge1xcbiAgICBtYXJnaW4tbGVmdDogNzUlOyB9XFxuICAucm93IC5jb2wucHVsbC1sOSB7XFxuICAgIHJpZ2h0OiA3NSU7IH1cXG4gIC5yb3cgLmNvbC5wdXNoLWw5IHtcXG4gICAgbGVmdDogNzUlOyB9XFxuICAucm93IC5jb2wub2Zmc2V0LWwxMCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA4My4zMzMzMzMzMzMzJTsgfVxcbiAgLnJvdyAuY29sLnB1bGwtbDEwIHtcXG4gICAgcmlnaHQ6IDgzLjMzMzMzMzMzMzMlOyB9XFxuICAucm93IC5jb2wucHVzaC1sMTAge1xcbiAgICBsZWZ0OiA4My4zMzMzMzMzMzMzJTsgfVxcbiAgLnJvdyAuY29sLm9mZnNldC1sMTEge1xcbiAgICBtYXJnaW4tbGVmdDogOTEuNjY2NjY2NjY2NyU7IH1cXG4gIC5yb3cgLmNvbC5wdWxsLWwxMSB7XFxuICAgIHJpZ2h0OiA5MS42NjY2NjY2NjY3JTsgfVxcbiAgLnJvdyAuY29sLnB1c2gtbDExIHtcXG4gICAgbGVmdDogOTEuNjY2NjY2NjY2NyU7IH1cXG4gIC5yb3cgLmNvbC5vZmZzZXQtbDEyIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDEwMCU7IH1cXG4gIC5yb3cgLmNvbC5wdWxsLWwxMiB7XFxuICAgIHJpZ2h0OiAxMDAlOyB9XFxuICAucm93IC5jb2wucHVzaC1sMTIge1xcbiAgICBsZWZ0OiAxMDAlOyB9IH1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEyMDFweCkge1xcbiAgLnJvdyAuY29sLnhsMSB7XFxuICAgIHdpZHRoOiA4LjMzMzMzMzMzMzMlO1xcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcXG4gICAgbGVmdDogYXV0bztcXG4gICAgcmlnaHQ6IGF1dG87IH1cXG4gIC5yb3cgLmNvbC54bDIge1xcbiAgICB3aWR0aDogMTYuNjY2NjY2NjY2NyU7XFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgICBsZWZ0OiBhdXRvO1xcbiAgICByaWdodDogYXV0bzsgfVxcbiAgLnJvdyAuY29sLnhsMyB7XFxuICAgIHdpZHRoOiAyNSU7XFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgICBsZWZ0OiBhdXRvO1xcbiAgICByaWdodDogYXV0bzsgfVxcbiAgLnJvdyAuY29sLnhsNCB7XFxuICAgIHdpZHRoOiAzMy4zMzMzMzMzMzMzJTtcXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICAgIGxlZnQ6IGF1dG87XFxuICAgIHJpZ2h0OiBhdXRvOyB9XFxuICAucm93IC5jb2wueGw1IHtcXG4gICAgd2lkdGg6IDQxLjY2NjY2NjY2NjclO1xcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcXG4gICAgbGVmdDogYXV0bztcXG4gICAgcmlnaHQ6IGF1dG87IH1cXG4gIC5yb3cgLmNvbC54bDYge1xcbiAgICB3aWR0aDogNTAlO1xcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcXG4gICAgbGVmdDogYXV0bztcXG4gICAgcmlnaHQ6IGF1dG87IH1cXG4gIC5yb3cgLmNvbC54bDcge1xcbiAgICB3aWR0aDogNTguMzMzMzMzMzMzMyU7XFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgICBsZWZ0OiBhdXRvO1xcbiAgICByaWdodDogYXV0bzsgfVxcbiAgLnJvdyAuY29sLnhsOCB7XFxuICAgIHdpZHRoOiA2Ni42NjY2NjY2NjY3JTtcXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICAgIGxlZnQ6IGF1dG87XFxuICAgIHJpZ2h0OiBhdXRvOyB9XFxuICAucm93IC5jb2wueGw5IHtcXG4gICAgd2lkdGg6IDc1JTtcXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICAgIGxlZnQ6IGF1dG87XFxuICAgIHJpZ2h0OiBhdXRvOyB9XFxuICAucm93IC5jb2wueGwxMCB7XFxuICAgIHdpZHRoOiA4My4zMzMzMzMzMzMzJTtcXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICAgIGxlZnQ6IGF1dG87XFxuICAgIHJpZ2h0OiBhdXRvOyB9XFxuICAucm93IC5jb2wueGwxMSB7XFxuICAgIHdpZHRoOiA5MS42NjY2NjY2NjY3JTtcXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICAgIGxlZnQ6IGF1dG87XFxuICAgIHJpZ2h0OiBhdXRvOyB9XFxuICAucm93IC5jb2wueGwxMiB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcXG4gICAgbGVmdDogYXV0bztcXG4gICAgcmlnaHQ6IGF1dG87IH1cXG4gIC5yb3cgLmNvbC5vZmZzZXQteGwxIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDguMzMzMzMzMzMzMyU7IH1cXG4gIC5yb3cgLmNvbC5wdWxsLXhsMSB7XFxuICAgIHJpZ2h0OiA4LjMzMzMzMzMzMzMlOyB9XFxuICAucm93IC5jb2wucHVzaC14bDEge1xcbiAgICBsZWZ0OiA4LjMzMzMzMzMzMzMlOyB9XFxuICAucm93IC5jb2wub2Zmc2V0LXhsMiB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxNi42NjY2NjY2NjY3JTsgfVxcbiAgLnJvdyAuY29sLnB1bGwteGwyIHtcXG4gICAgcmlnaHQ6IDE2LjY2NjY2NjY2NjclOyB9XFxuICAucm93IC5jb2wucHVzaC14bDIge1xcbiAgICBsZWZ0OiAxNi42NjY2NjY2NjY3JTsgfVxcbiAgLnJvdyAuY29sLm9mZnNldC14bDMge1xcbiAgICBtYXJnaW4tbGVmdDogMjUlOyB9XFxuICAucm93IC5jb2wucHVsbC14bDMge1xcbiAgICByaWdodDogMjUlOyB9XFxuICAucm93IC5jb2wucHVzaC14bDMge1xcbiAgICBsZWZ0OiAyNSU7IH1cXG4gIC5yb3cgLmNvbC5vZmZzZXQteGw0IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDMzLjMzMzMzMzMzMzMlOyB9XFxuICAucm93IC5jb2wucHVsbC14bDQge1xcbiAgICByaWdodDogMzMuMzMzMzMzMzMzMyU7IH1cXG4gIC5yb3cgLmNvbC5wdXNoLXhsNCB7XFxuICAgIGxlZnQ6IDMzLjMzMzMzMzMzMzMlOyB9XFxuICAucm93IC5jb2wub2Zmc2V0LXhsNSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA0MS42NjY2NjY2NjY3JTsgfVxcbiAgLnJvdyAuY29sLnB1bGwteGw1IHtcXG4gICAgcmlnaHQ6IDQxLjY2NjY2NjY2NjclOyB9XFxuICAucm93IC5jb2wucHVzaC14bDUge1xcbiAgICBsZWZ0OiA0MS42NjY2NjY2NjY3JTsgfVxcbiAgLnJvdyAuY29sLm9mZnNldC14bDYge1xcbiAgICBtYXJnaW4tbGVmdDogNTAlOyB9XFxuICAucm93IC5jb2wucHVsbC14bDYge1xcbiAgICByaWdodDogNTAlOyB9XFxuICAucm93IC5jb2wucHVzaC14bDYge1xcbiAgICBsZWZ0OiA1MCU7IH1cXG4gIC5yb3cgLmNvbC5vZmZzZXQteGw3IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDU4LjMzMzMzMzMzMzMlOyB9XFxuICAucm93IC5jb2wucHVsbC14bDcge1xcbiAgICByaWdodDogNTguMzMzMzMzMzMzMyU7IH1cXG4gIC5yb3cgLmNvbC5wdXNoLXhsNyB7XFxuICAgIGxlZnQ6IDU4LjMzMzMzMzMzMzMlOyB9XFxuICAucm93IC5jb2wub2Zmc2V0LXhsOCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA2Ni42NjY2NjY2NjY3JTsgfVxcbiAgLnJvdyAuY29sLnB1bGwteGw4IHtcXG4gICAgcmlnaHQ6IDY2LjY2NjY2NjY2NjclOyB9XFxuICAucm93IC5jb2wucHVzaC14bDgge1xcbiAgICBsZWZ0OiA2Ni42NjY2NjY2NjY3JTsgfVxcbiAgLnJvdyAuY29sLm9mZnNldC14bDkge1xcbiAgICBtYXJnaW4tbGVmdDogNzUlOyB9XFxuICAucm93IC5jb2wucHVsbC14bDkge1xcbiAgICByaWdodDogNzUlOyB9XFxuICAucm93IC5jb2wucHVzaC14bDkge1xcbiAgICBsZWZ0OiA3NSU7IH1cXG4gIC5yb3cgLmNvbC5vZmZzZXQteGwxMCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA4My4zMzMzMzMzMzMzJTsgfVxcbiAgLnJvdyAuY29sLnB1bGwteGwxMCB7XFxuICAgIHJpZ2h0OiA4My4zMzMzMzMzMzMzJTsgfVxcbiAgLnJvdyAuY29sLnB1c2gteGwxMCB7XFxuICAgIGxlZnQ6IDgzLjMzMzMzMzMzMzMlOyB9XFxuICAucm93IC5jb2wub2Zmc2V0LXhsMTEge1xcbiAgICBtYXJnaW4tbGVmdDogOTEuNjY2NjY2NjY2NyU7IH1cXG4gIC5yb3cgLmNvbC5wdWxsLXhsMTEge1xcbiAgICByaWdodDogOTEuNjY2NjY2NjY2NyU7IH1cXG4gIC5yb3cgLmNvbC5wdXNoLXhsMTEge1xcbiAgICBsZWZ0OiA5MS42NjY2NjY2NjY3JTsgfVxcbiAgLnJvdyAuY29sLm9mZnNldC14bDEyIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDEwMCU7IH1cXG4gIC5yb3cgLmNvbC5wdWxsLXhsMTIge1xcbiAgICByaWdodDogMTAwJTsgfVxcbiAgLnJvdyAuY29sLnB1c2gteGwxMiB7XFxuICAgIGxlZnQ6IDEwMCU7IH0gfVxcblxcbm5hdiB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZTZlNzM7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogNTZweDtcXG4gIGxpbmUtaGVpZ2h0OiA1NnB4OyB9XFxuXFxubmF2Lm5hdi1leHRlbmRlZCB7XFxuICBoZWlnaHQ6IGF1dG87IH1cXG5cXG5uYXYubmF2LWV4dGVuZGVkIC5uYXYtd3JhcHBlciB7XFxuICBtaW4taGVpZ2h0OiA1NnB4O1xcbiAgaGVpZ2h0OiBhdXRvOyB9XFxuXFxubmF2Lm5hdi1leHRlbmRlZCAubmF2LWNvbnRlbnQge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgbGluZS1oZWlnaHQ6IG5vcm1hbDsgfVxcblxcbm5hdiBhIHtcXG4gIGNvbG9yOiAjZmZmOyB9XFxuXFxubmF2IGksIG5hdiBbY2xhc3NePVxcXCJtZGktXFxcIl0sIG5hdiBbY2xhc3MqPVxcXCJtZGktXFxcIl0sIG5hdiBpLm1hdGVyaWFsLWljb25zIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgZm9udC1zaXplOiAyNHB4O1xcbiAgaGVpZ2h0OiA1NnB4O1xcbiAgbGluZS1oZWlnaHQ6IDU2cHg7IH1cXG5cXG5uYXYgLm5hdi13cmFwcGVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGhlaWdodDogMTAwJTsgfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogOTkzcHgpIHtcXG4gIG5hdiBhLmJ1dHRvbi1jb2xsYXBzZSB7XFxuICAgIGRpc3BsYXk6IG5vbmU7IH0gfVxcblxcbm5hdiAuYnV0dG9uLWNvbGxhcHNlIHtcXG4gIGZsb2F0OiBsZWZ0O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgei1pbmRleDogMTtcXG4gIGhlaWdodDogNTZweDtcXG4gIG1hcmdpbjogMCAxOHB4OyB9XFxuXFxubmF2IC5idXR0b24tY29sbGFwc2UgaSB7XFxuICBoZWlnaHQ6IDU2cHg7XFxuICBsaW5lLWhlaWdodDogNTZweDsgfVxcblxcbm5hdiAuYnJhbmQtbG9nbyB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGZvbnQtc2l6ZTogMi4xcmVtO1xcbiAgcGFkZGluZzogMDtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7IH1cXG5cXG5uYXYgLmJyYW5kLWxvZ28uY2VudGVyIHtcXG4gIGxlZnQ6IDUwJTtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpOyB9XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA5OTJweCkge1xcbiAgbmF2IC5icmFuZC1sb2dvIHtcXG4gICAgbGVmdDogNTAlO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpOyB9XFxuICBuYXYgLmJyYW5kLWxvZ28ubGVmdCwgbmF2IC5icmFuZC1sb2dvLnJpZ2h0IHtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IG5vbmU7XFxuICAgIHRyYW5zZm9ybTogbm9uZTsgfVxcbiAgbmF2IC5icmFuZC1sb2dvLmxlZnQge1xcbiAgICBsZWZ0OiAwLjVyZW07IH1cXG4gIG5hdiAuYnJhbmQtbG9nby5yaWdodCB7XFxuICAgIHJpZ2h0OiAwLjVyZW07XFxuICAgIGxlZnQ6IGF1dG87IH0gfVxcblxcbm5hdiAuYnJhbmQtbG9nby5yaWdodCB7XFxuICByaWdodDogMC41cmVtO1xcbiAgcGFkZGluZzogMDsgfVxcblxcbm5hdiAuYnJhbmQtbG9nbyBpLCBuYXYgLmJyYW5kLWxvZ28gW2NsYXNzXj1cXFwibWRpLVxcXCJdLCBuYXYgLmJyYW5kLWxvZ28gW2NsYXNzKj1cXFwibWRpLVxcXCJdLCBuYXYgLmJyYW5kLWxvZ28gaS5tYXRlcmlhbC1pY29ucyB7XFxuICBmbG9hdDogbGVmdDtcXG4gIG1hcmdpbi1yaWdodDogMTVweDsgfVxcblxcbm5hdiAubmF2LXRpdGxlIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGZvbnQtc2l6ZTogMzJweDtcXG4gIHBhZGRpbmc6IDI4cHggMDsgfVxcblxcbm5hdiB1bCB7XFxuICBtYXJnaW46IDA7IH1cXG5cXG5uYXYgdWwgbGkge1xcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAuM3M7XFxuICBmbG9hdDogbGVmdDtcXG4gIHBhZGRpbmc6IDA7IH1cXG5cXG5uYXYgdWwgbGkuYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4xKTsgfVxcblxcbm5hdiB1bCBhIHtcXG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgLjNzO1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbiAgY29sb3I6ICNmZmY7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHBhZGRpbmc6IDAgMTVweDtcXG4gIGN1cnNvcjogcG9pbnRlcjsgfVxcblxcbm5hdiB1bCBhLmJ0biwgbmF2IHVsIGEuYnRuLWxhcmdlLCBuYXYgdWwgYS5idG4tbGFyZ2UsIG5hdiB1bCBhLmJ0bi1mbGF0LCBuYXYgdWwgYS5idG4tZmxvYXRpbmcge1xcbiAgbWFyZ2luLXRvcDogLTJweDtcXG4gIG1hcmdpbi1sZWZ0OiAxNXB4O1xcbiAgbWFyZ2luLXJpZ2h0OiAxNXB4OyB9XFxuXFxubmF2IHVsIGEuYnRuID4gLm1hdGVyaWFsLWljb25zLCBuYXYgdWwgYS5idG4tbGFyZ2UgPiAubWF0ZXJpYWwtaWNvbnMsIG5hdiB1bCBhLmJ0bi1sYXJnZSA+IC5tYXRlcmlhbC1pY29ucywgbmF2IHVsIGEuYnRuLWZsYXQgPiAubWF0ZXJpYWwtaWNvbnMsIG5hdiB1bCBhLmJ0bi1mbG9hdGluZyA+IC5tYXRlcmlhbC1pY29ucyB7XFxuICBoZWlnaHQ6IGluaGVyaXQ7XFxuICBsaW5lLWhlaWdodDogaW5oZXJpdDsgfVxcblxcbm5hdiB1bCBhOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4xKTsgfVxcblxcbm5hdiB1bC5sZWZ0IHtcXG4gIGZsb2F0OiBsZWZ0OyB9XFxuXFxubmF2IGZvcm0ge1xcbiAgaGVpZ2h0OiAxMDAlOyB9XFxuXFxubmF2IC5pbnB1dC1maWVsZCB7XFxuICBtYXJnaW46IDA7XFxuICBoZWlnaHQ6IDEwMCU7IH1cXG5cXG5uYXYgLmlucHV0LWZpZWxkIGlucHV0IHtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGZvbnQtc2l6ZTogMS4ycmVtO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgcGFkZGluZy1sZWZ0OiAycmVtOyB9XFxuXFxubmF2IC5pbnB1dC1maWVsZCBpbnB1dDpmb2N1cywgbmF2IC5pbnB1dC1maWVsZCBpbnB1dFt0eXBlPXRleHRdOnZhbGlkLCBuYXYgLmlucHV0LWZpZWxkIGlucHV0W3R5cGU9cGFzc3dvcmRdOnZhbGlkLCBuYXYgLmlucHV0LWZpZWxkIGlucHV0W3R5cGU9ZW1haWxdOnZhbGlkLCBuYXYgLmlucHV0LWZpZWxkIGlucHV0W3R5cGU9dXJsXTp2YWxpZCwgbmF2IC5pbnB1dC1maWVsZCBpbnB1dFt0eXBlPWRhdGVdOnZhbGlkIHtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJveC1zaGFkb3c6IG5vbmU7IH1cXG5cXG5uYXYgLmlucHV0LWZpZWxkIGxhYmVsIHtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7IH1cXG5cXG5uYXYgLmlucHV0LWZpZWxkIGxhYmVsIGkge1xcbiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KTtcXG4gIHRyYW5zaXRpb246IGNvbG9yIC4zczsgfVxcblxcbm5hdiAuaW5wdXQtZmllbGQgbGFiZWwuYWN0aXZlIGkge1xcbiAgY29sb3I6ICNmZmY7IH1cXG5cXG4ubmF2YmFyLWZpeGVkIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGhlaWdodDogNTZweDtcXG4gIHotaW5kZXg6IDk5NzsgfVxcblxcbi5uYXZiYXItZml4ZWQgbmF2IHtcXG4gIHBvc2l0aW9uOiBmaXhlZDsgfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjAxcHgpIHtcXG4gIG5hdi5uYXYtZXh0ZW5kZWQgLm5hdi13cmFwcGVyIHtcXG4gICAgbWluLWhlaWdodDogNjRweDsgfVxcbiAgbmF2LCBuYXYgLm5hdi13cmFwcGVyIGksIG5hdiBhLmJ1dHRvbi1jb2xsYXBzZSwgbmF2IGEuYnV0dG9uLWNvbGxhcHNlIGkge1xcbiAgICBoZWlnaHQ6IDY0cHg7XFxuICAgIGxpbmUtaGVpZ2h0OiA2NHB4OyB9XFxuICAubmF2YmFyLWZpeGVkIHtcXG4gICAgaGVpZ2h0OiA2NHB4OyB9IH1cXG5cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiUm9ib3RvXFxcIjtcXG4gIHNyYzogbG9jYWwoUm9ib3RvIFRoaW4pLCB1cmwoXCIgKyByZXF1aXJlKFwiLi4vZm9udHMvcm9ib3RvL1JvYm90by1UaGluLndvZmYyXCIpICsgXCIpIGZvcm1hdChcXFwid29mZjJcXFwiKSwgdXJsKFwiICsgcmVxdWlyZShcIi4uL2ZvbnRzL3JvYm90by9Sb2JvdG8tVGhpbi53b2ZmXCIpICsgXCIpIGZvcm1hdChcXFwid29mZlxcXCIpO1xcbiAgZm9udC13ZWlnaHQ6IDEwMDsgfVxcblxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJSb2JvdG9cXFwiO1xcbiAgc3JjOiBsb2NhbChSb2JvdG8gTGlnaHQpLCB1cmwoXCIgKyByZXF1aXJlKFwiLi4vZm9udHMvcm9ib3RvL1JvYm90by1MaWdodC53b2ZmMlwiKSArIFwiKSBmb3JtYXQoXFxcIndvZmYyXFxcIiksIHVybChcIiArIHJlcXVpcmUoXCIuLi9mb250cy9yb2JvdG8vUm9ib3RvLUxpZ2h0LndvZmZcIikgKyBcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIik7XFxuICBmb250LXdlaWdodDogMzAwOyB9XFxuXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogXFxcIlJvYm90b1xcXCI7XFxuICBzcmM6IGxvY2FsKFJvYm90byBSZWd1bGFyKSwgdXJsKFwiICsgcmVxdWlyZShcIi4uL2ZvbnRzL3JvYm90by9Sb2JvdG8tUmVndWxhci53b2ZmMlwiKSArIFwiKSBmb3JtYXQoXFxcIndvZmYyXFxcIiksIHVybChcIiArIHJlcXVpcmUoXCIuLi9mb250cy9yb2JvdG8vUm9ib3RvLVJlZ3VsYXIud29mZlwiKSArIFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKTtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7IH1cXG5cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiUm9ib3RvXFxcIjtcXG4gIHNyYzogbG9jYWwoUm9ib3RvIE1lZGl1bSksIHVybChcIiArIHJlcXVpcmUoXCIuLi9mb250cy9yb2JvdG8vUm9ib3RvLU1lZGl1bS53b2ZmMlwiKSArIFwiKSBmb3JtYXQoXFxcIndvZmYyXFxcIiksIHVybChcIiArIHJlcXVpcmUoXCIuLi9mb250cy9yb2JvdG8vUm9ib3RvLU1lZGl1bS53b2ZmXCIpICsgXCIpIGZvcm1hdChcXFwid29mZlxcXCIpO1xcbiAgZm9udC13ZWlnaHQ6IDUwMDsgfVxcblxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJSb2JvdG9cXFwiO1xcbiAgc3JjOiBsb2NhbChSb2JvdG8gQm9sZCksIHVybChcIiArIHJlcXVpcmUoXCIuLi9mb250cy9yb2JvdG8vUm9ib3RvLUJvbGQud29mZjJcIikgKyBcIikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpLCB1cmwoXCIgKyByZXF1aXJlKFwiLi4vZm9udHMvcm9ib3RvL1JvYm90by1Cb2xkLndvZmZcIikgKyBcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIik7XFxuICBmb250LXdlaWdodDogNzAwOyB9XFxuXFxuYSB7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cXG5cXG5odG1sIHtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICBmb250LWZhbWlseTogXFxcIlJvYm90b1xcXCIsIHNhbnMtc2VyaWY7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44Nyk7IH1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDApIHtcXG4gIGh0bWwge1xcbiAgICBmb250LXNpemU6IDE0cHg7IH0gfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogOTkycHgpIHtcXG4gIGh0bWwge1xcbiAgICBmb250LXNpemU6IDE0LjVweDsgfSB9XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMjAwcHgpIHtcXG4gIGh0bWwge1xcbiAgICBmb250LXNpemU6IDE1cHg7IH0gfVxcblxcbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYge1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjE7IH1cXG5cXG5oMSBhLCBoMiBhLCBoMyBhLCBoNCBhLCBoNSBhLCBoNiBhIHtcXG4gIGZvbnQtd2VpZ2h0OiBpbmhlcml0OyB9XFxuXFxuaDEge1xcbiAgZm9udC1zaXplOiA0LjJyZW07XFxuICBsaW5lLWhlaWdodDogMTEwJTtcXG4gIG1hcmdpbjogMi4xcmVtIDAgMS42OHJlbSAwOyB9XFxuXFxuaDIge1xcbiAgZm9udC1zaXplOiAzLjU2cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDExMCU7XFxuICBtYXJnaW46IDEuNzhyZW0gMCAxLjQyNHJlbSAwOyB9XFxuXFxuaDMge1xcbiAgZm9udC1zaXplOiAyLjkycmVtO1xcbiAgbGluZS1oZWlnaHQ6IDExMCU7XFxuICBtYXJnaW46IDEuNDZyZW0gMCAxLjE2OHJlbSAwOyB9XFxuXFxuaDQge1xcbiAgZm9udC1zaXplOiAyLjI4cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDExMCU7XFxuICBtYXJnaW46IDEuMTRyZW0gMCAuOTEycmVtIDA7IH1cXG5cXG5oNSB7XFxuICBmb250LXNpemU6IDEuNjRyZW07XFxuICBsaW5lLWhlaWdodDogMTEwJTtcXG4gIG1hcmdpbjogLjgycmVtIDAgLjY1NnJlbSAwOyB9XFxuXFxuaDYge1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbiAgbGluZS1oZWlnaHQ6IDExMCU7XFxuICBtYXJnaW46IC41cmVtIDAgLjRyZW0gMDsgfVxcblxcbmVtIHtcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYzsgfVxcblxcbnN0cm9uZyB7XFxuICBmb250LXdlaWdodDogNTAwOyB9XFxuXFxuc21hbGwge1xcbiAgZm9udC1zaXplOiA3NSU7IH1cXG5cXG4ubGlnaHQsIC5wYWdlLWZvb3RlciAuZm9vdGVyLWNvcHlyaWdodCB7XFxuICBmb250LXdlaWdodDogMzAwOyB9XFxuXFxuLnRoaW4ge1xcbiAgZm9udC13ZWlnaHQ6IDIwMDsgfVxcblxcbi5mbG93LXRleHQge1xcbiAgZm9udC13ZWlnaHQ6IDMwMDsgfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzYwcHgpIHtcXG4gIC5mbG93LXRleHQge1xcbiAgICBmb250LXNpemU6IDEuMnJlbTsgfSB9XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzOTBweCkge1xcbiAgLmZsb3ctdGV4dCB7XFxuICAgIGZvbnQtc2l6ZTogMS4yMjRyZW07IH0gfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNDIwcHgpIHtcXG4gIC5mbG93LXRleHQge1xcbiAgICBmb250LXNpemU6IDEuMjQ4cmVtOyB9IH1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDQ1MHB4KSB7XFxuICAuZmxvdy10ZXh0IHtcXG4gICAgZm9udC1zaXplOiAxLjI3MnJlbTsgfSB9XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA0ODBweCkge1xcbiAgLmZsb3ctdGV4dCB7XFxuICAgIGZvbnQtc2l6ZTogMS4yOTZyZW07IH0gfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNTEwcHgpIHtcXG4gIC5mbG93LXRleHQge1xcbiAgICBmb250LXNpemU6IDEuMzJyZW07IH0gfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNTQwcHgpIHtcXG4gIC5mbG93LXRleHQge1xcbiAgICBmb250LXNpemU6IDEuMzQ0cmVtOyB9IH1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDU3MHB4KSB7XFxuICAuZmxvdy10ZXh0IHtcXG4gICAgZm9udC1zaXplOiAxLjM2OHJlbTsgfSB9XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MDBweCkge1xcbiAgLmZsb3ctdGV4dCB7XFxuICAgIGZvbnQtc2l6ZTogMS4zOTJyZW07IH0gfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjMwcHgpIHtcXG4gIC5mbG93LXRleHQge1xcbiAgICBmb250LXNpemU6IDEuNDE2cmVtOyB9IH1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDY2MHB4KSB7XFxuICAuZmxvdy10ZXh0IHtcXG4gICAgZm9udC1zaXplOiAxLjQ0cmVtOyB9IH1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDY5MHB4KSB7XFxuICAuZmxvdy10ZXh0IHtcXG4gICAgZm9udC1zaXplOiAxLjQ2NHJlbTsgfSB9XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3MjBweCkge1xcbiAgLmZsb3ctdGV4dCB7XFxuICAgIGZvbnQtc2l6ZTogMS40ODhyZW07IH0gfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzUwcHgpIHtcXG4gIC5mbG93LXRleHQge1xcbiAgICBmb250LXNpemU6IDEuNTEycmVtOyB9IH1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc4MHB4KSB7XFxuICAuZmxvdy10ZXh0IHtcXG4gICAgZm9udC1zaXplOiAxLjUzNnJlbTsgfSB9XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA4MTBweCkge1xcbiAgLmZsb3ctdGV4dCB7XFxuICAgIGZvbnQtc2l6ZTogMS41NnJlbTsgfSB9XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA4NDBweCkge1xcbiAgLmZsb3ctdGV4dCB7XFxuICAgIGZvbnQtc2l6ZTogMS41ODRyZW07IH0gfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogODcwcHgpIHtcXG4gIC5mbG93LXRleHQge1xcbiAgICBmb250LXNpemU6IDEuNjA4cmVtOyB9IH1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDkwMHB4KSB7XFxuICAuZmxvdy10ZXh0IHtcXG4gICAgZm9udC1zaXplOiAxLjYzMnJlbTsgfSB9XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA5MzBweCkge1xcbiAgLmZsb3ctdGV4dCB7XFxuICAgIGZvbnQtc2l6ZTogMS42NTZyZW07IH0gfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogOTYwcHgpIHtcXG4gIC5mbG93LXRleHQge1xcbiAgICBmb250LXNpemU6IDEuNjhyZW07IH0gfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMzYwcHgpIHtcXG4gIC5mbG93LXRleHQge1xcbiAgICBmb250LXNpemU6IDEuMnJlbTsgfSB9XFxuXFxuLnNjYWxlLXRyYW5zaXRpb24ge1xcbiAgdHJhbnNpdGlvbjogLXdlYmtpdC10cmFuc2Zvcm0gMC4zcyBjdWJpYy1iZXppZXIoMC41MywgMC4wMSwgMC4zNiwgMS42MykgIWltcG9ydGFudDtcXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzIGN1YmljLWJlemllcigwLjUzLCAwLjAxLCAwLjM2LCAxLjYzKSAhaW1wb3J0YW50O1xcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuM3MgY3ViaWMtYmV6aWVyKDAuNTMsIDAuMDEsIDAuMzYsIDEuNjMpLCAtd2Via2l0LXRyYW5zZm9ybSAwLjNzIGN1YmljLWJlemllcigwLjUzLCAwLjAxLCAwLjM2LCAxLjYzKSAhaW1wb3J0YW50OyB9XFxuXFxuLnNjYWxlLXRyYW5zaXRpb24uc2NhbGUtb3V0IHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwKTtcXG4gIHRyYW5zZm9ybTogc2NhbGUoMCk7XFxuICB0cmFuc2l0aW9uOiAtd2Via2l0LXRyYW5zZm9ybSAuMnMgIWltcG9ydGFudDtcXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAuMnMgIWltcG9ydGFudDtcXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAuMnMsIC13ZWJraXQtdHJhbnNmb3JtIC4ycyAhaW1wb3J0YW50OyB9XFxuXFxuLnNjYWxlLXRyYW5zaXRpb24uc2NhbGUtaW4ge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEpO1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgxKTsgfVxcblxcbi5jYXJkLXBhbmVsIHtcXG4gIHRyYW5zaXRpb246IGJveC1zaGFkb3cgLjI1cztcXG4gIHBhZGRpbmc6IDI0cHg7XFxuICBtYXJnaW46IC41cmVtIDAgMXJlbSAwO1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsgfVxcblxcbi5jYXJkIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIG1hcmdpbjogLjVyZW0gMCAxcmVtIDA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgdHJhbnNpdGlvbjogYm94LXNoYWRvdyAuMjVzO1xcbiAgYm9yZGVyLXJhZGl1czogMnB4OyB9XFxuXFxuLmNhcmQgLmNhcmQtdGl0bGUge1xcbiAgZm9udC1zaXplOiAyNHB4O1xcbiAgZm9udC13ZWlnaHQ6IDMwMDsgfVxcblxcbi5jYXJkIC5jYXJkLXRpdGxlLmFjdGl2YXRvciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7IH1cXG5cXG4uY2FyZC5zbWFsbCwgLmNhcmQubWVkaXVtLCAuY2FyZC5sYXJnZSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7IH1cXG5cXG4uY2FyZC5zbWFsbCAuY2FyZC1pbWFnZSwgLmNhcmQubWVkaXVtIC5jYXJkLWltYWdlLCAuY2FyZC5sYXJnZSAuY2FyZC1pbWFnZSB7XFxuICBtYXgtaGVpZ2h0OiA2MCU7XFxuICBvdmVyZmxvdzogaGlkZGVuOyB9XFxuXFxuLmNhcmQuc21hbGwgLmNhcmQtaW1hZ2UgKyAuY2FyZC1jb250ZW50LCAuY2FyZC5tZWRpdW0gLmNhcmQtaW1hZ2UgKyAuY2FyZC1jb250ZW50LCAuY2FyZC5sYXJnZSAuY2FyZC1pbWFnZSArIC5jYXJkLWNvbnRlbnQge1xcbiAgbWF4LWhlaWdodDogNDAlOyB9XFxuXFxuLmNhcmQuc21hbGwgLmNhcmQtY29udGVudCwgLmNhcmQubWVkaXVtIC5jYXJkLWNvbnRlbnQsIC5jYXJkLmxhcmdlIC5jYXJkLWNvbnRlbnQge1xcbiAgbWF4LWhlaWdodDogMTAwJTtcXG4gIG92ZXJmbG93OiBoaWRkZW47IH1cXG5cXG4uY2FyZC5zbWFsbCAuY2FyZC1hY3Rpb24sIC5jYXJkLm1lZGl1bSAuY2FyZC1hY3Rpb24sIC5jYXJkLmxhcmdlIC5jYXJkLWFjdGlvbiB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IDA7IH1cXG5cXG4uY2FyZC5zbWFsbCB7XFxuICBoZWlnaHQ6IDMwMHB4OyB9XFxuXFxuLmNhcmQubWVkaXVtIHtcXG4gIGhlaWdodDogNDAwcHg7IH1cXG5cXG4uY2FyZC5sYXJnZSB7XFxuICBoZWlnaHQ6IDUwMHB4OyB9XFxuXFxuLmNhcmQuaG9yaXpvbnRhbCB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7IH1cXG5cXG4uY2FyZC5ob3Jpem9udGFsLnNtYWxsIC5jYXJkLWltYWdlLCAuY2FyZC5ob3Jpem9udGFsLm1lZGl1bSAuY2FyZC1pbWFnZSwgLmNhcmQuaG9yaXpvbnRhbC5sYXJnZSAuY2FyZC1pbWFnZSB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBtYXgtaGVpZ2h0OiBub25lO1xcbiAgb3ZlcmZsb3c6IHZpc2libGU7IH1cXG5cXG4uY2FyZC5ob3Jpem9udGFsLnNtYWxsIC5jYXJkLWltYWdlIGltZywgLmNhcmQuaG9yaXpvbnRhbC5tZWRpdW0gLmNhcmQtaW1hZ2UgaW1nLCAuY2FyZC5ob3Jpem9udGFsLmxhcmdlIC5jYXJkLWltYWdlIGltZyB7XFxuICBoZWlnaHQ6IDEwMCU7IH1cXG5cXG4uY2FyZC5ob3Jpem9udGFsIC5jYXJkLWltYWdlIHtcXG4gIG1heC13aWR0aDogNTAlOyB9XFxuXFxuLmNhcmQuaG9yaXpvbnRhbCAuY2FyZC1pbWFnZSBpbWcge1xcbiAgYm9yZGVyLXJhZGl1czogMnB4IDAgMCAycHg7XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxuICB3aWR0aDogYXV0bzsgfVxcblxcbi5jYXJkLmhvcml6b250YWwgLmNhcmQtc3RhY2tlZCB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICAtd2Via2l0LWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAtbXMtZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAtd2Via2l0LWZsZXg6IDE7XFxuICAtbXMtZmxleDogMTtcXG4gIGZsZXg6IDE7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7IH1cXG5cXG4uY2FyZC5ob3Jpem9udGFsIC5jYXJkLXN0YWNrZWQgLmNhcmQtY29udGVudCB7XFxuICAtd2Via2l0LWZsZXgtZ3JvdzogMTtcXG4gIC1tcy1mbGV4LXBvc2l0aXZlOiAxO1xcbiAgZmxleC1ncm93OiAxOyB9XFxuXFxuLmNhcmQuc3RpY2t5LWFjdGlvbiAuY2FyZC1hY3Rpb24ge1xcbiAgei1pbmRleDogMjsgfVxcblxcbi5jYXJkLnN0aWNreS1hY3Rpb24gLmNhcmQtcmV2ZWFsIHtcXG4gIHotaW5kZXg6IDE7XFxuICBwYWRkaW5nLWJvdHRvbTogNjRweDsgfVxcblxcbi5jYXJkIC5jYXJkLWltYWdlIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTsgfVxcblxcbi5jYXJkIC5jYXJkLWltYWdlIGltZyB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGJvcmRlci1yYWRpdXM6IDJweCAycHggMCAwO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgbGVmdDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgdG9wOiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgd2lkdGg6IDEwMCU7IH1cXG5cXG4uY2FyZCAuY2FyZC1pbWFnZSAuY2FyZC10aXRsZSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDA7XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nOiAyNHB4OyB9XFxuXFxuLmNhcmQgLmNhcmQtY29udGVudCB7XFxuICBwYWRkaW5nOiAyNHB4O1xcbiAgYm9yZGVyLXJhZGl1czogMCAwIDJweCAycHg7IH1cXG5cXG4uY2FyZCAuY2FyZC1jb250ZW50IHAge1xcbiAgbWFyZ2luOiAwO1xcbiAgY29sb3I6IGluaGVyaXQ7IH1cXG5cXG4uY2FyZCAuY2FyZC1jb250ZW50IC5jYXJkLXRpdGxlIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbGluZS1oZWlnaHQ6IDMycHg7XFxuICBtYXJnaW4tYm90dG9tOiA4cHg7IH1cXG5cXG4uY2FyZCAuY2FyZC1jb250ZW50IC5jYXJkLXRpdGxlIGkge1xcbiAgbGluZS1oZWlnaHQ6IDMycHg7IH1cXG5cXG4uY2FyZCAuY2FyZC1hY3Rpb24ge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdDtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCByZ2JhKDE2MCwgMTYwLCAxNjAsIDAuMik7XFxuICBwYWRkaW5nOiAxNnB4IDI0cHg7IH1cXG5cXG4uY2FyZCAuY2FyZC1hY3Rpb246bGFzdC1jaGlsZCB7XFxuICBib3JkZXItcmFkaXVzOiAwIDAgMnB4IDJweDsgfVxcblxcbi5jYXJkIC5jYXJkLWFjdGlvbiBhOm5vdCguYnRuKTpub3QoLmJ0bi1sYXJnZSk6bm90KC5idG4tbGFyZ2UpOm5vdCguYnRuLWZsb2F0aW5nKSB7XFxuICBjb2xvcjogI2ZmYWI0MDtcXG4gIG1hcmdpbi1yaWdodDogMjRweDtcXG4gIHRyYW5zaXRpb246IGNvbG9yIC4zcyBlYXNlO1xcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTsgfVxcblxcbi5jYXJkIC5jYXJkLWFjdGlvbiBhOm5vdCguYnRuKTpub3QoLmJ0bi1sYXJnZSk6bm90KC5idG4tbGFyZ2UpOm5vdCguYnRuLWZsb2F0aW5nKTpob3ZlciB7XFxuICBjb2xvcjogI2ZmZDhhNjsgfVxcblxcbi5jYXJkIC5jYXJkLXJldmVhbCB7XFxuICBwYWRkaW5nOiAyNHB4O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgb3ZlcmZsb3cteTogYXV0bztcXG4gIGxlZnQ6IDA7XFxuICB0b3A6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB6LWluZGV4OiAzO1xcbiAgZGlzcGxheTogbm9uZTsgfVxcblxcbi5jYXJkIC5jYXJkLXJldmVhbCAuY2FyZC10aXRsZSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBkaXNwbGF5OiBibG9jazsgfVxcblxcbiN0b2FzdC1jb250YWluZXIge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB6LWluZGV4OiAxMDAwMDsgfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjAwcHgpIHtcXG4gICN0b2FzdC1jb250YWluZXIge1xcbiAgICBtaW4td2lkdGg6IDEwMCU7XFxuICAgIGJvdHRvbTogMCU7IH0gfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjAxcHgpIGFuZCAobWF4LXdpZHRoOiA5OTJweCkge1xcbiAgI3RvYXN0LWNvbnRhaW5lciB7XFxuICAgIGxlZnQ6IDUlO1xcbiAgICBib3R0b206IDclO1xcbiAgICBtYXgtd2lkdGg6IDkwJTsgfSB9XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA5OTNweCkge1xcbiAgI3RvYXN0LWNvbnRhaW5lciB7XFxuICAgIHRvcDogMTAlO1xcbiAgICByaWdodDogNyU7XFxuICAgIG1heC13aWR0aDogODYlOyB9IH1cXG5cXG4udG9hc3Qge1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgdG9wOiAzNXB4O1xcbiAgd2lkdGg6IGF1dG87XFxuICBjbGVhcjogYm90aDtcXG4gIG1hcmdpbi10b3A6IDEwcHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IGF1dG87XFxuICBtaW4taGVpZ2h0OiA0OHB4O1xcbiAgbGluZS1oZWlnaHQ6IDEuNWVtO1xcbiAgd29yZC1icmVhazogYnJlYWstYWxsO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzMyMzIzMjtcXG4gIHBhZGRpbmc6IDEwcHggMjVweDtcXG4gIGZvbnQtc2l6ZTogMS4xcmVtO1xcbiAgZm9udC13ZWlnaHQ6IDMwMDtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgZGlzcGxheTogLXdlYmtpdC1mbGV4O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLXdlYmtpdC1hbGlnbi1pdGVtczogY2VudGVyO1xcbiAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAtd2Via2l0LWp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIC1tcy1mbGV4LXBhY2s6IGp1c3RpZnk7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47IH1cXG5cXG4udG9hc3QgLmJ0biwgLnRvYXN0IC5idG4tbGFyZ2UsIC50b2FzdCAuYnRuLWZsYXQge1xcbiAgbWFyZ2luOiAwO1xcbiAgbWFyZ2luLWxlZnQ6IDNyZW07IH1cXG5cXG4udG9hc3Qucm91bmRlZCB7XFxuICBib3JkZXItcmFkaXVzOiAyNHB4OyB9XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2MDBweCkge1xcbiAgLnRvYXN0IHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDA7IH0gfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjAxcHgpIGFuZCAobWF4LXdpZHRoOiA5OTJweCkge1xcbiAgLnRvYXN0IHtcXG4gICAgZmxvYXQ6IGxlZnQ7IH0gfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogOTkzcHgpIHtcXG4gIC50b2FzdCB7XFxuICAgIGZsb2F0OiByaWdodDsgfSB9XFxuXFxuLnRhYnMge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgb3ZlcmZsb3cteDogYXV0bztcXG4gIG92ZXJmbG93LXk6IGhpZGRlbjtcXG4gIGhlaWdodDogNDhweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDsgfVxcblxcbi50YWJzLnRhYnMtdHJhbnNwYXJlbnQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cXG5cXG4udGFicy50YWJzLXRyYW5zcGFyZW50IC50YWIgYSwgLnRhYnMudGFicy10cmFuc3BhcmVudCAudGFiLmRpc2FibGVkIGEsIC50YWJzLnRhYnMtdHJhbnNwYXJlbnQgLnRhYi5kaXNhYmxlZCBhOmhvdmVyIHtcXG4gIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyk7IH1cXG5cXG4udGFicy50YWJzLXRyYW5zcGFyZW50IC50YWIgYTpob3ZlciwgLnRhYnMudGFicy10cmFuc3BhcmVudCAudGFiIGEuYWN0aXZlIHtcXG4gIGNvbG9yOiAjZmZmOyB9XFxuXFxuLnRhYnMudGFicy10cmFuc3BhcmVudCAuaW5kaWNhdG9yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7IH1cXG5cXG4udGFicy50YWJzLWZpeGVkLXdpZHRoIHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDsgfVxcblxcbi50YWJzLnRhYnMtZml4ZWQtd2lkdGggLnRhYiB7XFxuICAtd2Via2l0LWZsZXgtZ3JvdzogMTtcXG4gIC1tcy1mbGV4LXBvc2l0aXZlOiAxO1xcbiAgZmxleC1ncm93OiAxOyB9XFxuXFxuLnRhYnMgLnRhYiB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBsaW5lLWhlaWdodDogNDhweDtcXG4gIGhlaWdodDogNDhweDtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlOyB9XFxuXFxuLnRhYnMgLnRhYiBhIHtcXG4gIGNvbG9yOiByZ2JhKDIzOCwgMTEwLCAxMTUsIDAuNyk7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgcGFkZGluZzogMCAyNHB4O1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgdHJhbnNpdGlvbjogY29sb3IgLjI4cyBlYXNlOyB9XFxuXFxuLnRhYnMgLnRhYiBhOmhvdmVyLCAudGFicyAudGFiIGEuYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6ICNlZTZlNzM7IH1cXG5cXG4udGFicyAudGFiLmRpc2FibGVkIGEsIC50YWJzIC50YWIuZGlzYWJsZWQgYTpob3ZlciB7XFxuICBjb2xvcjogcmdiYSgyMzgsIDExMCwgMTE1LCAwLjcpO1xcbiAgY3Vyc29yOiBkZWZhdWx0OyB9XFxuXFxuLnRhYnMgLmluZGljYXRvciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBib3R0b206IDA7XFxuICBoZWlnaHQ6IDJweDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmNmIyYjU7XFxuICB3aWxsLWNoYW5nZTogbGVmdCwgcmlnaHQ7IH1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDk5MnB4KSB7XFxuICAudGFicyB7XFxuICAgIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcXG4gICAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICAgIGRpc3BsYXk6IGZsZXg7IH1cXG4gIC50YWJzIC50YWIge1xcbiAgICAtd2Via2l0LWZsZXgtZ3JvdzogMTtcXG4gICAgLW1zLWZsZXgtcG9zaXRpdmU6IDE7XFxuICAgIGZsZXgtZ3JvdzogMTsgfVxcbiAgLnRhYnMgLnRhYiBhIHtcXG4gICAgcGFkZGluZzogMCAxMnB4OyB9IH1cXG5cXG4ubWF0ZXJpYWwtdG9vbHRpcCB7XFxuICBwYWRkaW5nOiAxMHB4IDhweDtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG4gIHotaW5kZXg6IDIwMDA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgbWluLWhlaWdodDogMzZweDtcXG4gIGxpbmUtaGVpZ2h0OiAxMjAlO1xcbiAgb3BhY2l0eTogMDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIG1heC13aWR0aDogY2FsYygxMDAlIC0gNHB4KTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBsZWZ0OiAwO1xcbiAgdG9wOiAwO1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICB2aXNpYmlsaXR5OiBoaWRkZW47IH1cXG5cXG4uYmFja2Ryb3Age1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgb3BhY2l0eTogMDtcXG4gIGhlaWdodDogN3B4O1xcbiAgd2lkdGg6IDE0cHg7XFxuICBib3JkZXItcmFkaXVzOiAwIDAgNTAlIDUwJTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzMjMyMzI7XFxuICB6LWluZGV4OiAtMTtcXG4gIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogNTAlIDAlO1xcbiAgdHJhbnNmb3JtLW9yaWdpbjogNTAlIDAlO1xcbiAgdmlzaWJpbGl0eTogaGlkZGVuOyB9XFxuXFxuLmJ0biwgLmJ0bi1sYXJnZSwgLmJ0bi1mbGF0IHtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGhlaWdodDogMzZweDtcXG4gIGxpbmUtaGVpZ2h0OiAzNnB4O1xcbiAgcGFkZGluZzogMCAycmVtO1xcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHRyYW5zcGFyZW50OyB9XFxuXFxuLmJ0bi5kaXNhYmxlZCwgLmRpc2FibGVkLmJ0bi1sYXJnZSwgLmJ0bi1mbG9hdGluZy5kaXNhYmxlZCwgLmJ0bi1sYXJnZS5kaXNhYmxlZCwgLmJ0bi1mbGF0LmRpc2FibGVkLCAuYnRuOmRpc2FibGVkLCAuYnRuLWxhcmdlOmRpc2FibGVkLCAuYnRuLWZsb2F0aW5nOmRpc2FibGVkLCAuYnRuLWxhcmdlOmRpc2FibGVkLCAuYnRuLWZsYXQ6ZGlzYWJsZWQsIC5idG5bZGlzYWJsZWRdLCBbZGlzYWJsZWRdLmJ0bi1sYXJnZSwgLmJ0bi1mbG9hdGluZ1tkaXNhYmxlZF0sIC5idG4tbGFyZ2VbZGlzYWJsZWRdLCAuYnRuLWZsYXRbZGlzYWJsZWRdIHtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI0RGREZERiAhaW1wb3J0YW50O1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG4gIGNvbG9yOiAjOUY5RjlGICFpbXBvcnRhbnQ7XFxuICBjdXJzb3I6IGRlZmF1bHQ7IH1cXG5cXG4uYnRuLmRpc2FibGVkOmhvdmVyLCAuZGlzYWJsZWQuYnRuLWxhcmdlOmhvdmVyLCAuYnRuLWZsb2F0aW5nLmRpc2FibGVkOmhvdmVyLCAuYnRuLWxhcmdlLmRpc2FibGVkOmhvdmVyLCAuYnRuLWZsYXQuZGlzYWJsZWQ6aG92ZXIsIC5idG46ZGlzYWJsZWQ6aG92ZXIsIC5idG4tbGFyZ2U6ZGlzYWJsZWQ6aG92ZXIsIC5idG4tZmxvYXRpbmc6ZGlzYWJsZWQ6aG92ZXIsIC5idG4tbGFyZ2U6ZGlzYWJsZWQ6aG92ZXIsIC5idG4tZmxhdDpkaXNhYmxlZDpob3ZlciwgLmJ0bltkaXNhYmxlZF06aG92ZXIsIFtkaXNhYmxlZF0uYnRuLWxhcmdlOmhvdmVyLCAuYnRuLWZsb2F0aW5nW2Rpc2FibGVkXTpob3ZlciwgLmJ0bi1sYXJnZVtkaXNhYmxlZF06aG92ZXIsIC5idG4tZmxhdFtkaXNhYmxlZF06aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI0RGREZERiAhaW1wb3J0YW50O1xcbiAgY29sb3I6ICM5RjlGOUYgIWltcG9ydGFudDsgfVxcblxcbi5idG4sIC5idG4tbGFyZ2UsIC5idG4tZmxvYXRpbmcsIC5idG4tbGFyZ2UsIC5idG4tZmxhdCB7XFxuICBmb250LXNpemU6IDFyZW07XFxuICBvdXRsaW5lOiAwOyB9XFxuXFxuLmJ0biBpLCAuYnRuLWxhcmdlIGksIC5idG4tZmxvYXRpbmcgaSwgLmJ0bi1sYXJnZSBpLCAuYnRuLWZsYXQgaSB7XFxuICBmb250LXNpemU6IDEuM3JlbTtcXG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0OyB9XFxuXFxuLmJ0bjpmb2N1cywgLmJ0bi1sYXJnZTpmb2N1cywgLmJ0bi1mbG9hdGluZzpmb2N1cyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWQ3ZDc0OyB9XFxuXFxuLmJ0biwgLmJ0bi1sYXJnZSB7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyNmE2OWE7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBsZXR0ZXItc3BhY2luZzogLjVweDtcXG4gIHRyYW5zaXRpb246IC4ycyBlYXNlLW91dDtcXG4gIGN1cnNvcjogcG9pbnRlcjsgfVxcblxcbi5idG46aG92ZXIsIC5idG4tbGFyZ2U6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzJiYmJhZDsgfVxcblxcbi5idG4tZmxvYXRpbmcge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgY29sb3I6ICNmZmY7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgei1pbmRleDogMTtcXG4gIHdpZHRoOiA0MHB4O1xcbiAgaGVpZ2h0OiA0MHB4O1xcbiAgbGluZS1oZWlnaHQ6IDQwcHg7XFxuICBwYWRkaW5nOiAwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI2YTY5YTtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIHRyYW5zaXRpb246IC4zcztcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7IH1cXG5cXG4uYnRuLWZsb2F0aW5nOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyNmE2OWE7IH1cXG5cXG4uYnRuLWZsb2F0aW5nOmJlZm9yZSB7XFxuICBib3JkZXItcmFkaXVzOiAwOyB9XFxuXFxuLmJ0bi1mbG9hdGluZy5idG4tbGFyZ2Uge1xcbiAgd2lkdGg6IDU2cHg7XFxuICBoZWlnaHQ6IDU2cHg7IH1cXG5cXG4uYnRuLWZsb2F0aW5nLmJ0bi1sYXJnZS5oYWxmd2F5LWZhYiB7XFxuICBib3R0b206IC0yOHB4OyB9XFxuXFxuLmJ0bi1mbG9hdGluZy5idG4tbGFyZ2UgaSB7XFxuICBsaW5lLWhlaWdodDogNTZweDsgfVxcblxcbi5idG4tZmxvYXRpbmcuaGFsZndheS1mYWIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IDI0cHg7XFxuICBib3R0b206IC0yMHB4OyB9XFxuXFxuLmJ0bi1mbG9hdGluZy5oYWxmd2F5LWZhYi5sZWZ0IHtcXG4gIHJpZ2h0OiBhdXRvO1xcbiAgbGVmdDogMjRweDsgfVxcblxcbi5idG4tZmxvYXRpbmcgaSB7XFxuICB3aWR0aDogaW5oZXJpdDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgZm9udC1zaXplOiAxLjZyZW07XFxuICBsaW5lLWhlaWdodDogNDBweDsgfVxcblxcbmJ1dHRvbi5idG4tZmxvYXRpbmcge1xcbiAgYm9yZGVyOiBub25lOyB9XFxuXFxuLmZpeGVkLWFjdGlvbi1idG4ge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgcmlnaHQ6IDIzcHg7XFxuICBib3R0b206IDIzcHg7XFxuICBwYWRkaW5nLXRvcDogMTVweDtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxuICB6LWluZGV4OiA5OTg7IH1cXG5cXG4uZml4ZWQtYWN0aW9uLWJ0bi5hY3RpdmUgdWwge1xcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTsgfVxcblxcbi5maXhlZC1hY3Rpb24tYnRuLmhvcml6b250YWwge1xcbiAgcGFkZGluZzogMCAwIDAgMTVweDsgfVxcblxcbi5maXhlZC1hY3Rpb24tYnRuLmhvcml6b250YWwgdWwge1xcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XFxuICByaWdodDogNjRweDtcXG4gIHRvcDogNTAlO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBsZWZ0OiBhdXRvO1xcbiAgd2lkdGg6IDUwMHB4OyB9XFxuXFxuLmZpeGVkLWFjdGlvbi1idG4uaG9yaXpvbnRhbCB1bCBsaSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBtYXJnaW46IDE1cHggMTVweCAwIDA7IH1cXG5cXG4uZml4ZWQtYWN0aW9uLWJ0bi50b29sYmFyIHtcXG4gIHBhZGRpbmc6IDA7XFxuICBoZWlnaHQ6IDU2cHg7IH1cXG5cXG4uZml4ZWQtYWN0aW9uLWJ0bi50b29sYmFyLmFjdGl2ZSA+IGEgaSB7XFxuICBvcGFjaXR5OiAwOyB9XFxuXFxuLmZpeGVkLWFjdGlvbi1idG4udG9vbGJhciB1bCB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICB0b3A6IDA7XFxuICBib3R0b206IDA7IH1cXG5cXG4uZml4ZWQtYWN0aW9uLWJ0bi50b29sYmFyIHVsIGxpIHtcXG4gIC13ZWJraXQtZmxleDogMTtcXG4gIC1tcy1mbGV4OiAxO1xcbiAgZmxleDogMTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIG1hcmdpbjogMDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHRyYW5zaXRpb246IG5vbmU7IH1cXG5cXG4uZml4ZWQtYWN0aW9uLWJ0bi50b29sYmFyIHVsIGxpIGEge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGxpbmUtaGVpZ2h0OiA1NnB4O1xcbiAgei1pbmRleDogMTsgfVxcblxcbi5maXhlZC1hY3Rpb24tYnRuLnRvb2xiYXIgdWwgbGkgYSBpIHtcXG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0OyB9XFxuXFxuLmZpeGVkLWFjdGlvbi1idG4gdWwge1xcbiAgbGVmdDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm90dG9tOiA2NHB4O1xcbiAgbWFyZ2luOiAwO1xcbiAgdmlzaWJpbGl0eTogaGlkZGVuOyB9XFxuXFxuLmZpeGVkLWFjdGlvbi1idG4gdWwgbGkge1xcbiAgbWFyZ2luLWJvdHRvbTogMTVweDsgfVxcblxcbi5maXhlZC1hY3Rpb24tYnRuIHVsIGEuYnRuLWZsb2F0aW5nIHtcXG4gIG9wYWNpdHk6IDA7IH1cXG5cXG4uZml4ZWQtYWN0aW9uLWJ0biAuZmFiLWJhY2tkcm9wIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICB6LWluZGV4OiAtMTtcXG4gIHdpZHRoOiA0MHB4O1xcbiAgaGVpZ2h0OiA0MHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI2YTY5YTtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwKTtcXG4gIHRyYW5zZm9ybTogc2NhbGUoMCk7IH1cXG5cXG4uYnRuLWZsYXQge1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6ICMzNDM0MzQ7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIC4yczsgfVxcblxcbi5idG4tZmxhdDpmb2N1cywgLmJ0bi1mbGF0OmFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgfVxcblxcbi5idG4tZmxhdDpmb2N1cywgLmJ0bi1mbGF0OmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4xKTtcXG4gIGJveC1zaGFkb3c6IG5vbmU7IH1cXG5cXG4uYnRuLWZsYXQ6YWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4yKTsgfVxcblxcbi5idG4tZmxhdC5kaXNhYmxlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50O1xcbiAgY29sb3I6ICNiM2IzYjMgIWltcG9ydGFudDtcXG4gIGN1cnNvcjogZGVmYXVsdDsgfVxcblxcbi5idG4tbGFyZ2Uge1xcbiAgaGVpZ2h0OiA1NHB4O1xcbiAgbGluZS1oZWlnaHQ6IDU0cHg7IH1cXG5cXG4uYnRuLWxhcmdlIGkge1xcbiAgZm9udC1zaXplOiAxLjZyZW07IH1cXG5cXG4uYnRuLWJsb2NrIHtcXG4gIGRpc3BsYXk6IGJsb2NrOyB9XFxuXFxuLmRyb3Bkb3duLWNvbnRlbnQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIG1hcmdpbjogMDtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBtaW4td2lkdGg6IDEwMHB4O1xcbiAgbWF4LWhlaWdodDogNjUwcHg7XFxuICBvdmVyZmxvdy15OiBhdXRvO1xcbiAgb3BhY2l0eTogMDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHotaW5kZXg6IDk5OTtcXG4gIHdpbGwtY2hhbmdlOiB3aWR0aCwgaGVpZ2h0OyB9XFxuXFxuLmRyb3Bkb3duLWNvbnRlbnQgbGkge1xcbiAgY2xlYXI6IGJvdGg7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjg3KTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIG1pbi1oZWlnaHQ6IDUwcHg7XFxuICBsaW5lLWhlaWdodDogMS41cmVtO1xcbiAgd2lkdGg6IDEwMCU7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7IH1cXG5cXG4uZHJvcGRvd24tY29udGVudCBsaTpob3ZlciwgLmRyb3Bkb3duLWNvbnRlbnQgbGkuYWN0aXZlLCAuZHJvcGRvd24tY29udGVudCBsaS5zZWxlY3RlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlOyB9XFxuXFxuLmRyb3Bkb3duLWNvbnRlbnQgbGkuYWN0aXZlLnNlbGVjdGVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlMWUxZTE7IH1cXG5cXG4uZHJvcGRvd24tY29udGVudCBsaS5kaXZpZGVyIHtcXG4gIG1pbi1oZWlnaHQ6IDA7XFxuICBoZWlnaHQ6IDFweDsgfVxcblxcbi5kcm9wZG93bi1jb250ZW50IGxpID4gYSwgLmRyb3Bkb3duLWNvbnRlbnQgbGkgPiBzcGFuIHtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIGNvbG9yOiAjMjZhNjlhO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBsaW5lLWhlaWdodDogMjJweDtcXG4gIHBhZGRpbmc6IDE0cHggMTZweDsgfVxcblxcbi5kcm9wZG93bi1jb250ZW50IGxpID4gc3BhbiA+IGxhYmVsIHtcXG4gIHRvcDogMXB4O1xcbiAgbGVmdDogMDtcXG4gIGhlaWdodDogMThweDsgfVxcblxcbi5kcm9wZG93bi1jb250ZW50IGxpID4gYSA+IGkge1xcbiAgaGVpZ2h0OiBpbmhlcml0O1xcbiAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7XFxuICBmbG9hdDogbGVmdDtcXG4gIG1hcmdpbjogMCAyNHB4IDAgMDtcXG4gIHdpZHRoOiAyNHB4OyB9XFxuXFxuLmlucHV0LWZpZWxkLmNvbCAuZHJvcGRvd24tY29udGVudCBbdHlwZT1cXFwiY2hlY2tib3hcXFwiXSArIGxhYmVsIHtcXG4gIHRvcDogMXB4O1xcbiAgbGVmdDogMDtcXG4gIGhlaWdodDogMThweDsgfVxcblxcbi8qIVxcbiAqIFdhdmVzIHYwLjYuMFxcbiAqIGh0dHA6Ly9maWFuLm15LmlkL1dhdmVzXFxuICpcXG4gKiBDb3B5cmlnaHQgMjAxNCBBbGZpYW5hIEUuIFNpYnVlYSBhbmQgb3RoZXIgY29udHJpYnV0b3JzXFxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXFxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZpYW5zL1dhdmVzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcXG4gKi9cXG4ud2F2ZXMtZWZmZWN0IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcXG4gIHVzZXItc2VsZWN0OiBub25lO1xcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICB6LWluZGV4OiAxO1xcbiAgdHJhbnNpdGlvbjogLjNzIGVhc2Utb3V0OyB9XFxuXFxuLndhdmVzLWVmZmVjdCAud2F2ZXMtcmlwcGxlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIHdpZHRoOiAyMHB4O1xcbiAgaGVpZ2h0OiAyMHB4O1xcbiAgbWFyZ2luLXRvcDogLTEwcHg7XFxuICBtYXJnaW4tbGVmdDogLTEwcHg7XFxuICBvcGFjaXR5OiAwO1xcbiAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjIpO1xcbiAgdHJhbnNpdGlvbjogYWxsIDAuN3MgZWFzZS1vdXQ7XFxuICB0cmFuc2l0aW9uLXByb3BlcnR5OiBvcGFjaXR5LCAtd2Via2l0LXRyYW5zZm9ybTtcXG4gIHRyYW5zaXRpb24tcHJvcGVydHk6IHRyYW5zZm9ybSwgb3BhY2l0eTtcXG4gIHRyYW5zaXRpb24tcHJvcGVydHk6IHRyYW5zZm9ybSwgb3BhY2l0eSwgLXdlYmtpdC10cmFuc2Zvcm07XFxuICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMCk7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDApO1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7IH1cXG5cXG4ud2F2ZXMtZWZmZWN0LndhdmVzLWxpZ2h0IC53YXZlcy1yaXBwbGUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjQ1KTsgfVxcblxcbi53YXZlcy1lZmZlY3Qud2F2ZXMtcmVkIC53YXZlcy1yaXBwbGUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNDQsIDY3LCA1NCwgMC43KTsgfVxcblxcbi53YXZlcy1lZmZlY3Qud2F2ZXMteWVsbG93IC53YXZlcy1yaXBwbGUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDIzNSwgNTksIDAuNyk7IH1cXG5cXG4ud2F2ZXMtZWZmZWN0LndhdmVzLW9yYW5nZSAud2F2ZXMtcmlwcGxlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAxNTIsIDAsIDAuNyk7IH1cXG5cXG4ud2F2ZXMtZWZmZWN0LndhdmVzLXB1cnBsZSAud2F2ZXMtcmlwcGxlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTU2LCAzOSwgMTc2LCAwLjcpOyB9XFxuXFxuLndhdmVzLWVmZmVjdC53YXZlcy1ncmVlbiAud2F2ZXMtcmlwcGxlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNzYsIDE3NSwgODAsIDAuNyk7IH1cXG5cXG4ud2F2ZXMtZWZmZWN0LndhdmVzLXRlYWwgLndhdmVzLXJpcHBsZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDE1MCwgMTM2LCAwLjcpOyB9XFxuXFxuLndhdmVzLWVmZmVjdCBpbnB1dFt0eXBlPVxcXCJidXR0b25cXFwiXSwgLndhdmVzLWVmZmVjdCBpbnB1dFt0eXBlPVxcXCJyZXNldFxcXCJdLCAud2F2ZXMtZWZmZWN0IGlucHV0W3R5cGU9XFxcInN1Ym1pdFxcXCJdIHtcXG4gIGJvcmRlcjogMDtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcXG4gIHRleHQtdHJhbnNmb3JtOiBpbmhlcml0O1xcbiAgYmFja2dyb3VuZDogbm9uZTsgfVxcblxcbi53YXZlcy1lZmZlY3QgaW1nIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHotaW5kZXg6IC0xOyB9XFxuXFxuLndhdmVzLW5vdHJhbnNpdGlvbiB7XFxuICB0cmFuc2l0aW9uOiBub25lICFpbXBvcnRhbnQ7IH1cXG5cXG4ud2F2ZXMtY2lyY2xlIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xcbiAgLXdlYmtpdC1tYXNrLWltYWdlOiAtd2Via2l0LXJhZGlhbC1ncmFkaWVudChjaXJjbGUsICNmZmYgMTAwJSwgIzAwMCAxMDAlKTsgfVxcblxcbi53YXZlcy1pbnB1dC13cmFwcGVyIHtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMmVtO1xcbiAgdmVydGljYWwtYWxpZ246IGJvdHRvbTsgfVxcblxcbi53YXZlcy1pbnB1dC13cmFwcGVyIC53YXZlcy1idXR0b24taW5wdXQge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIHotaW5kZXg6IDE7IH1cXG5cXG4ud2F2ZXMtY2lyY2xlIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHdpZHRoOiAyLjVlbTtcXG4gIGhlaWdodDogMi41ZW07XFxuICBsaW5lLWhlaWdodDogMi41ZW07XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICAtd2Via2l0LW1hc2staW1hZ2U6IG5vbmU7IH1cXG5cXG4ud2F2ZXMtYmxvY2sge1xcbiAgZGlzcGxheTogYmxvY2s7IH1cXG5cXG4ud2F2ZXMtZWZmZWN0IC53YXZlcy1yaXBwbGUge1xcbiAgei1pbmRleDogLTE7IH1cXG5cXG4ubW9kYWwge1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIGxlZnQ6IDA7XFxuICByaWdodDogMDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmYWZhZmE7XFxuICBwYWRkaW5nOiAwO1xcbiAgbWF4LWhlaWdodDogNzAlO1xcbiAgd2lkdGg6IDU1JTtcXG4gIG1hcmdpbjogYXV0bztcXG4gIG92ZXJmbG93LXk6IGF1dG87XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxuICB3aWxsLWNoYW5nZTogdG9wLCBvcGFjaXR5OyB9XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA5OTJweCkge1xcbiAgLm1vZGFsIHtcXG4gICAgd2lkdGg6IDgwJTsgfSB9XFxuXFxuLm1vZGFsIGgxLCAubW9kYWwgaDIsIC5tb2RhbCBoMywgLm1vZGFsIGg0IHtcXG4gIG1hcmdpbi10b3A6IDA7IH1cXG5cXG4ubW9kYWwgLm1vZGFsLWNvbnRlbnQge1xcbiAgcGFkZGluZzogMjRweDsgfVxcblxcbi5tb2RhbCAubW9kYWwtY2xvc2Uge1xcbiAgY3Vyc29yOiBwb2ludGVyOyB9XFxuXFxuLm1vZGFsIC5tb2RhbC1mb290ZXIge1xcbiAgYm9yZGVyLXJhZGl1czogMCAwIDJweCAycHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmFmYWZhO1xcbiAgcGFkZGluZzogNHB4IDZweDtcXG4gIGhlaWdodDogNTZweDtcXG4gIHdpZHRoOiAxMDAlOyB9XFxuXFxuLm1vZGFsIC5tb2RhbC1mb290ZXIgLmJ0biwgLm1vZGFsIC5tb2RhbC1mb290ZXIgLmJ0bi1sYXJnZSwgLm1vZGFsIC5tb2RhbC1mb290ZXIgLmJ0bi1mbGF0IHtcXG4gIGZsb2F0OiByaWdodDtcXG4gIG1hcmdpbjogNnB4IDA7IH1cXG5cXG4ubW9kYWwtb3ZlcmxheSB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB6LWluZGV4OiA5OTk7XFxuICB0b3A6IC0xMDBweDtcXG4gIGxlZnQ6IDA7XFxuICBib3R0b206IDA7XFxuICByaWdodDogMDtcXG4gIGhlaWdodDogMTI1JTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYmFja2dyb3VuZDogIzAwMDtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICB3aWxsLWNoYW5nZTogb3BhY2l0eTsgfVxcblxcbi5tb2RhbC5tb2RhbC1maXhlZC1mb290ZXIge1xcbiAgcGFkZGluZzogMDtcXG4gIGhlaWdodDogNzAlOyB9XFxuXFxuLm1vZGFsLm1vZGFsLWZpeGVkLWZvb3RlciAubW9kYWwtY29udGVudCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDU2cHgpO1xcbiAgbWF4LWhlaWdodDogMTAwJTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgb3ZlcmZsb3cteTogYXV0bzsgfVxcblxcbi5tb2RhbC5tb2RhbC1maXhlZC1mb290ZXIgLm1vZGFsLWZvb3RlciB7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjEpO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm90dG9tOiAwOyB9XFxuXFxuLm1vZGFsLmJvdHRvbS1zaGVldCB7XFxuICB0b3A6IGF1dG87XFxuICBib3R0b206IC0xMDAlO1xcbiAgbWFyZ2luOiAwO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtYXgtaGVpZ2h0OiA0NSU7XFxuICBib3JkZXItcmFkaXVzOiAwO1xcbiAgd2lsbC1jaGFuZ2U6IGJvdHRvbSwgb3BhY2l0eTsgfVxcblxcbi5jb2xsYXBzaWJsZSB7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2RkZDtcXG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNkZGQ7XFxuICBib3JkZXItbGVmdDogMXB4IHNvbGlkICNkZGQ7XFxuICBtYXJnaW46IC41cmVtIDAgMXJlbSAwOyB9XFxuXFxuLmNvbGxhcHNpYmxlLWhlYWRlciB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIG1pbi1oZWlnaHQ6IDNyZW07XFxuICBsaW5lLWhlaWdodDogM3JlbTtcXG4gIHBhZGRpbmc6IDAgMXJlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2RkZDsgfVxcblxcbi5jb2xsYXBzaWJsZS1oZWFkZXIgaSB7XFxuICB3aWR0aDogMnJlbTtcXG4gIGZvbnQtc2l6ZTogMS42cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDNyZW07XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGZsb2F0OiBsZWZ0O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgbWFyZ2luLXJpZ2h0OiAxcmVtOyB9XFxuXFxuLmNvbGxhcHNpYmxlLWJvZHkge1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZGRkO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIHBhZGRpbmc6IDJyZW07IH1cXG5cXG4uc2lkZS1uYXYgLmNvbGxhcHNpYmxlLCAuc2lkZS1uYXYuZml4ZWQgLmNvbGxhcHNpYmxlIHtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJveC1zaGFkb3c6IG5vbmU7IH1cXG5cXG4uc2lkZS1uYXYgLmNvbGxhcHNpYmxlIGxpLCAuc2lkZS1uYXYuZml4ZWQgLmNvbGxhcHNpYmxlIGxpIHtcXG4gIHBhZGRpbmc6IDA7IH1cXG5cXG4uc2lkZS1uYXYgLmNvbGxhcHNpYmxlLWhlYWRlciwgLnNpZGUtbmF2LmZpeGVkIC5jb2xsYXBzaWJsZS1oZWFkZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXI6IG5vbmU7XFxuICBsaW5lLWhlaWdodDogaW5oZXJpdDtcXG4gIGhlaWdodDogaW5oZXJpdDtcXG4gIHBhZGRpbmc6IDAgMTZweDsgfVxcblxcbi5zaWRlLW5hdiAuY29sbGFwc2libGUtaGVhZGVyOmhvdmVyLCAuc2lkZS1uYXYuZml4ZWQgLmNvbGxhcHNpYmxlLWhlYWRlcjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMDUpOyB9XFxuXFxuLnNpZGUtbmF2IC5jb2xsYXBzaWJsZS1oZWFkZXIgaSwgLnNpZGUtbmF2LmZpeGVkIC5jb2xsYXBzaWJsZS1oZWFkZXIgaSB7XFxuICBsaW5lLWhlaWdodDogaW5oZXJpdDsgfVxcblxcbi5zaWRlLW5hdiAuY29sbGFwc2libGUtYm9keSwgLnNpZGUtbmF2LmZpeGVkIC5jb2xsYXBzaWJsZS1ib2R5IHtcXG4gIGJvcmRlcjogMDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7IH1cXG5cXG4uc2lkZS1uYXYgLmNvbGxhcHNpYmxlLWJvZHkgbGkgYSwgLnNpZGUtbmF2LmZpeGVkIC5jb2xsYXBzaWJsZS1ib2R5IGxpIGEge1xcbiAgcGFkZGluZzogMCAyMy41cHggMCAzMXB4OyB9XFxuXFxuLmNvbGxhcHNpYmxlLnBvcG91dCB7XFxuICBib3JkZXI6IG5vbmU7XFxuICBib3gtc2hhZG93OiBub25lOyB9XFxuXFxuLmNvbGxhcHNpYmxlLnBvcG91dCA+IGxpIHtcXG4gIGJveC1zaGFkb3c6IDAgMnB4IDVweCAwIHJnYmEoMCwgMCwgMCwgMC4xNiksIDAgMnB4IDEwcHggMCByZ2JhKDAsIDAsIDAsIDAuMTIpO1xcbiAgbWFyZ2luOiAwIDI0cHg7XFxuICB0cmFuc2l0aW9uOiBtYXJnaW4gMC4zNXMgY3ViaWMtYmV6aWVyKDAuMjUsIDAuNDYsIDAuNDUsIDAuOTQpOyB9XFxuXFxuLmNvbGxhcHNpYmxlLnBvcG91dCA+IGxpLmFjdGl2ZSB7XFxuICBib3gtc2hhZG93OiAwIDVweCAxMXB4IDAgcmdiYSgwLCAwLCAwLCAwLjE4KSwgMCA0cHggMTVweCAwIHJnYmEoMCwgMCwgMCwgMC4xNSk7XFxuICBtYXJnaW46IDE2cHggMDsgfVxcblxcbi5jaGlwIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGhlaWdodDogMzJweDtcXG4gIGZvbnQtc2l6ZTogMTNweDtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjYpO1xcbiAgbGluZS1oZWlnaHQ6IDMycHg7XFxuICBwYWRkaW5nOiAwIDEycHg7XFxuICBib3JkZXItcmFkaXVzOiAxNnB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U0ZTRlNDtcXG4gIG1hcmdpbi1ib3R0b206IDVweDtcXG4gIG1hcmdpbi1yaWdodDogNXB4OyB9XFxuXFxuLmNoaXAgPiBpbWcge1xcbiAgZmxvYXQ6IGxlZnQ7XFxuICBtYXJnaW46IDAgOHB4IDAgLTEycHg7XFxuICBoZWlnaHQ6IDMycHg7XFxuICB3aWR0aDogMzJweDtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTsgfVxcblxcbi5jaGlwIC5jbG9zZSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBmbG9hdDogcmlnaHQ7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBsaW5lLWhlaWdodDogMzJweDtcXG4gIHBhZGRpbmctbGVmdDogOHB4OyB9XFxuXFxuLmNoaXBzIHtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjOWU5ZTllO1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG4gIG1hcmdpbjogMCAwIDIwcHggMDtcXG4gIG1pbi1oZWlnaHQ6IDQ1cHg7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgdHJhbnNpdGlvbjogYWxsIC4zczsgfVxcblxcbi5jaGlwcy5mb2N1cyB7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzI2YTY5YTtcXG4gIGJveC1zaGFkb3c6IDAgMXB4IDAgMCAjMjZhNjlhOyB9XFxuXFxuLmNoaXBzOmhvdmVyIHtcXG4gIGN1cnNvcjogdGV4dDsgfVxcblxcbi5jaGlwcyAuY2hpcC5zZWxlY3RlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjZhNjlhO1xcbiAgY29sb3I6ICNmZmY7IH1cXG5cXG4uY2hpcHMgLmlucHV0IHtcXG4gIGJhY2tncm91bmQ6IG5vbmU7XFxuICBib3JkZXI6IDA7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjYpO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbiAgaGVpZ2h0OiAzcmVtO1xcbiAgbGluZS1oZWlnaHQ6IDMycHg7XFxuICBvdXRsaW5lOiAwO1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMCAhaW1wb3J0YW50O1xcbiAgd2lkdGg6IDEyMHB4ICFpbXBvcnRhbnQ7IH1cXG5cXG4uY2hpcHMgLmlucHV0OmZvY3VzIHtcXG4gIGJvcmRlcjogMCAhaW1wb3J0YW50O1xcbiAgYm94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50OyB9XFxuXFxuLmNoaXBzIC5hdXRvY29tcGxldGUtY29udGVudCB7XFxuICBtYXJnaW4tdG9wOiAwOyB9XFxuXFxuLnByZWZpeCB+IC5jaGlwcyB7XFxuICBtYXJnaW4tbGVmdDogM3JlbTtcXG4gIHdpZHRoOiA5MiU7XFxuICB3aWR0aDogY2FsYygxMDAlIC0gM3JlbSk7IH1cXG5cXG4uY2hpcHM6ZW1wdHkgfiBsYWJlbCB7XFxuICBmb250LXNpemU6IDAuOHJlbTtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xNDAlKTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTQwJSk7IH1cXG5cXG4ubWF0ZXJpYWxib3hlZCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGN1cnNvcjogLXdlYmtpdC16b29tLWluO1xcbiAgY3Vyc29yOiB6b29tLWluO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAuNHM7XFxuICAtd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjsgfVxcblxcbi5tYXRlcmlhbGJveGVkOmhvdmVyOm5vdCguYWN0aXZlKSB7XFxuICBvcGFjaXR5OiAuODsgfVxcblxcbi5tYXRlcmlhbGJveGVkLmFjdGl2ZSB7XFxuICBjdXJzb3I6IC13ZWJraXQtem9vbS1vdXQ7XFxuICBjdXJzb3I6IHpvb20tb3V0OyB9XFxuXFxuI21hdGVyaWFsYm94LW92ZXJsYXkge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI5MjkyOTtcXG4gIHotaW5kZXg6IDEwMDA7XFxuICB3aWxsLWNoYW5nZTogb3BhY2l0eTsgfVxcblxcbi5tYXRlcmlhbGJveC1jYXB0aW9uIHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGxpbmUtaGVpZ2h0OiA1MHB4O1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgcGFkZGluZzogMCUgMTUlO1xcbiAgaGVpZ2h0OiA1MHB4O1xcbiAgei1pbmRleDogMTAwMDtcXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkOyB9XFxuXFxuc2VsZWN0OmZvY3VzIHtcXG4gIG91dGxpbmU6IDFweCBzb2xpZCAjYzlmM2VmOyB9XFxuXFxuYnV0dG9uOmZvY3VzIHtcXG4gIG91dGxpbmU6IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmFiN2E5OyB9XFxuXFxubGFiZWwge1xcbiAgZm9udC1zaXplOiAuOHJlbTtcXG4gIGNvbG9yOiAjOWU5ZTllOyB9XFxuXFxuOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyIHtcXG4gIGNvbG9yOiAjZDFkMWQxOyB9XFxuXFxuOi1tb3otcGxhY2Vob2xkZXIge1xcbiAgY29sb3I6ICNkMWQxZDE7IH1cXG5cXG46Oi1tb3otcGxhY2Vob2xkZXIge1xcbiAgY29sb3I6ICNkMWQxZDE7IH1cXG5cXG46LW1zLWlucHV0LXBsYWNlaG9sZGVyIHtcXG4gIGNvbG9yOiAjZDFkMWQxOyB9XFxuXFxuaW5wdXQ6bm90KFt0eXBlXSksIGlucHV0W3R5cGU9dGV4dF0sIGlucHV0W3R5cGU9cGFzc3dvcmRdLCBpbnB1dFt0eXBlPWVtYWlsXSwgaW5wdXRbdHlwZT11cmxdLCBpbnB1dFt0eXBlPXRpbWVdLCBpbnB1dFt0eXBlPWRhdGVdLCBpbnB1dFt0eXBlPWRhdGV0aW1lXSwgaW5wdXRbdHlwZT1kYXRldGltZS1sb2NhbF0sIGlucHV0W3R5cGU9dGVsXSwgaW5wdXRbdHlwZT1udW1iZXJdLCBpbnB1dFt0eXBlPXNlYXJjaF0sIHRleHRhcmVhLm1hdGVyaWFsaXplLXRleHRhcmVhIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICM5ZTllOWU7XFxuICBib3JkZXItcmFkaXVzOiAwO1xcbiAgb3V0bGluZTogbm9uZTtcXG4gIGhlaWdodDogM3JlbTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbiAgbWFyZ2luOiAwIDAgMjBweCAwO1xcbiAgcGFkZGluZzogMDtcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcXG4gIHRyYW5zaXRpb246IGFsbCAwLjNzOyB9XFxuXFxuaW5wdXQ6bm90KFt0eXBlXSk6ZGlzYWJsZWQsIGlucHV0Om5vdChbdHlwZV0pW3JlYWRvbmx5PVxcXCJyZWFkb25seVxcXCJdLCBpbnB1dFt0eXBlPXRleHRdOmRpc2FibGVkLCBpbnB1dFt0eXBlPXRleHRdW3JlYWRvbmx5PVxcXCJyZWFkb25seVxcXCJdLCBpbnB1dFt0eXBlPXBhc3N3b3JkXTpkaXNhYmxlZCwgaW5wdXRbdHlwZT1wYXNzd29yZF1bcmVhZG9ubHk9XFxcInJlYWRvbmx5XFxcIl0sIGlucHV0W3R5cGU9ZW1haWxdOmRpc2FibGVkLCBpbnB1dFt0eXBlPWVtYWlsXVtyZWFkb25seT1cXFwicmVhZG9ubHlcXFwiXSwgaW5wdXRbdHlwZT11cmxdOmRpc2FibGVkLCBpbnB1dFt0eXBlPXVybF1bcmVhZG9ubHk9XFxcInJlYWRvbmx5XFxcIl0sIGlucHV0W3R5cGU9dGltZV06ZGlzYWJsZWQsIGlucHV0W3R5cGU9dGltZV1bcmVhZG9ubHk9XFxcInJlYWRvbmx5XFxcIl0sIGlucHV0W3R5cGU9ZGF0ZV06ZGlzYWJsZWQsIGlucHV0W3R5cGU9ZGF0ZV1bcmVhZG9ubHk9XFxcInJlYWRvbmx5XFxcIl0sIGlucHV0W3R5cGU9ZGF0ZXRpbWVdOmRpc2FibGVkLCBpbnB1dFt0eXBlPWRhdGV0aW1lXVtyZWFkb25seT1cXFwicmVhZG9ubHlcXFwiXSwgaW5wdXRbdHlwZT1kYXRldGltZS1sb2NhbF06ZGlzYWJsZWQsIGlucHV0W3R5cGU9ZGF0ZXRpbWUtbG9jYWxdW3JlYWRvbmx5PVxcXCJyZWFkb25seVxcXCJdLCBpbnB1dFt0eXBlPXRlbF06ZGlzYWJsZWQsIGlucHV0W3R5cGU9dGVsXVtyZWFkb25seT1cXFwicmVhZG9ubHlcXFwiXSwgaW5wdXRbdHlwZT1udW1iZXJdOmRpc2FibGVkLCBpbnB1dFt0eXBlPW51bWJlcl1bcmVhZG9ubHk9XFxcInJlYWRvbmx5XFxcIl0sIGlucHV0W3R5cGU9c2VhcmNoXTpkaXNhYmxlZCwgaW5wdXRbdHlwZT1zZWFyY2hdW3JlYWRvbmx5PVxcXCJyZWFkb25seVxcXCJdLCB0ZXh0YXJlYS5tYXRlcmlhbGl6ZS10ZXh0YXJlYTpkaXNhYmxlZCwgdGV4dGFyZWEubWF0ZXJpYWxpemUtdGV4dGFyZWFbcmVhZG9ubHk9XFxcInJlYWRvbmx5XFxcIl0ge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4yNik7XFxuICBib3JkZXItYm90dG9tOiAxcHggZG90dGVkIHJnYmEoMCwgMCwgMCwgMC4yNik7IH1cXG5cXG5pbnB1dDpub3QoW3R5cGVdKTpkaXNhYmxlZCArIGxhYmVsLCBpbnB1dDpub3QoW3R5cGVdKVtyZWFkb25seT1cXFwicmVhZG9ubHlcXFwiXSArIGxhYmVsLCBpbnB1dFt0eXBlPXRleHRdOmRpc2FibGVkICsgbGFiZWwsIGlucHV0W3R5cGU9dGV4dF1bcmVhZG9ubHk9XFxcInJlYWRvbmx5XFxcIl0gKyBsYWJlbCwgaW5wdXRbdHlwZT1wYXNzd29yZF06ZGlzYWJsZWQgKyBsYWJlbCwgaW5wdXRbdHlwZT1wYXNzd29yZF1bcmVhZG9ubHk9XFxcInJlYWRvbmx5XFxcIl0gKyBsYWJlbCwgaW5wdXRbdHlwZT1lbWFpbF06ZGlzYWJsZWQgKyBsYWJlbCwgaW5wdXRbdHlwZT1lbWFpbF1bcmVhZG9ubHk9XFxcInJlYWRvbmx5XFxcIl0gKyBsYWJlbCwgaW5wdXRbdHlwZT11cmxdOmRpc2FibGVkICsgbGFiZWwsIGlucHV0W3R5cGU9dXJsXVtyZWFkb25seT1cXFwicmVhZG9ubHlcXFwiXSArIGxhYmVsLCBpbnB1dFt0eXBlPXRpbWVdOmRpc2FibGVkICsgbGFiZWwsIGlucHV0W3R5cGU9dGltZV1bcmVhZG9ubHk9XFxcInJlYWRvbmx5XFxcIl0gKyBsYWJlbCwgaW5wdXRbdHlwZT1kYXRlXTpkaXNhYmxlZCArIGxhYmVsLCBpbnB1dFt0eXBlPWRhdGVdW3JlYWRvbmx5PVxcXCJyZWFkb25seVxcXCJdICsgbGFiZWwsIGlucHV0W3R5cGU9ZGF0ZXRpbWVdOmRpc2FibGVkICsgbGFiZWwsIGlucHV0W3R5cGU9ZGF0ZXRpbWVdW3JlYWRvbmx5PVxcXCJyZWFkb25seVxcXCJdICsgbGFiZWwsIGlucHV0W3R5cGU9ZGF0ZXRpbWUtbG9jYWxdOmRpc2FibGVkICsgbGFiZWwsIGlucHV0W3R5cGU9ZGF0ZXRpbWUtbG9jYWxdW3JlYWRvbmx5PVxcXCJyZWFkb25seVxcXCJdICsgbGFiZWwsIGlucHV0W3R5cGU9dGVsXTpkaXNhYmxlZCArIGxhYmVsLCBpbnB1dFt0eXBlPXRlbF1bcmVhZG9ubHk9XFxcInJlYWRvbmx5XFxcIl0gKyBsYWJlbCwgaW5wdXRbdHlwZT1udW1iZXJdOmRpc2FibGVkICsgbGFiZWwsIGlucHV0W3R5cGU9bnVtYmVyXVtyZWFkb25seT1cXFwicmVhZG9ubHlcXFwiXSArIGxhYmVsLCBpbnB1dFt0eXBlPXNlYXJjaF06ZGlzYWJsZWQgKyBsYWJlbCwgaW5wdXRbdHlwZT1zZWFyY2hdW3JlYWRvbmx5PVxcXCJyZWFkb25seVxcXCJdICsgbGFiZWwsIHRleHRhcmVhLm1hdGVyaWFsaXplLXRleHRhcmVhOmRpc2FibGVkICsgbGFiZWwsIHRleHRhcmVhLm1hdGVyaWFsaXplLXRleHRhcmVhW3JlYWRvbmx5PVxcXCJyZWFkb25seVxcXCJdICsgbGFiZWwge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4yNik7IH1cXG5cXG5pbnB1dDpub3QoW3R5cGVdKTpmb2N1czpub3QoW3JlYWRvbmx5XSksIGlucHV0W3R5cGU9dGV4dF06Zm9jdXM6bm90KFtyZWFkb25seV0pLCBpbnB1dFt0eXBlPXBhc3N3b3JkXTpmb2N1czpub3QoW3JlYWRvbmx5XSksIGlucHV0W3R5cGU9ZW1haWxdOmZvY3VzOm5vdChbcmVhZG9ubHldKSwgaW5wdXRbdHlwZT11cmxdOmZvY3VzOm5vdChbcmVhZG9ubHldKSwgaW5wdXRbdHlwZT10aW1lXTpmb2N1czpub3QoW3JlYWRvbmx5XSksIGlucHV0W3R5cGU9ZGF0ZV06Zm9jdXM6bm90KFtyZWFkb25seV0pLCBpbnB1dFt0eXBlPWRhdGV0aW1lXTpmb2N1czpub3QoW3JlYWRvbmx5XSksIGlucHV0W3R5cGU9ZGF0ZXRpbWUtbG9jYWxdOmZvY3VzOm5vdChbcmVhZG9ubHldKSwgaW5wdXRbdHlwZT10ZWxdOmZvY3VzOm5vdChbcmVhZG9ubHldKSwgaW5wdXRbdHlwZT1udW1iZXJdOmZvY3VzOm5vdChbcmVhZG9ubHldKSwgaW5wdXRbdHlwZT1zZWFyY2hdOmZvY3VzOm5vdChbcmVhZG9ubHldKSwgdGV4dGFyZWEubWF0ZXJpYWxpemUtdGV4dGFyZWE6Zm9jdXM6bm90KFtyZWFkb25seV0pIHtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjMjZhNjlhO1xcbiAgYm94LXNoYWRvdzogMCAxcHggMCAwICMyNmE2OWE7IH1cXG5cXG5pbnB1dDpub3QoW3R5cGVdKTpmb2N1czpub3QoW3JlYWRvbmx5XSkgKyBsYWJlbCwgaW5wdXRbdHlwZT10ZXh0XTpmb2N1czpub3QoW3JlYWRvbmx5XSkgKyBsYWJlbCwgaW5wdXRbdHlwZT1wYXNzd29yZF06Zm9jdXM6bm90KFtyZWFkb25seV0pICsgbGFiZWwsIGlucHV0W3R5cGU9ZW1haWxdOmZvY3VzOm5vdChbcmVhZG9ubHldKSArIGxhYmVsLCBpbnB1dFt0eXBlPXVybF06Zm9jdXM6bm90KFtyZWFkb25seV0pICsgbGFiZWwsIGlucHV0W3R5cGU9dGltZV06Zm9jdXM6bm90KFtyZWFkb25seV0pICsgbGFiZWwsIGlucHV0W3R5cGU9ZGF0ZV06Zm9jdXM6bm90KFtyZWFkb25seV0pICsgbGFiZWwsIGlucHV0W3R5cGU9ZGF0ZXRpbWVdOmZvY3VzOm5vdChbcmVhZG9ubHldKSArIGxhYmVsLCBpbnB1dFt0eXBlPWRhdGV0aW1lLWxvY2FsXTpmb2N1czpub3QoW3JlYWRvbmx5XSkgKyBsYWJlbCwgaW5wdXRbdHlwZT10ZWxdOmZvY3VzOm5vdChbcmVhZG9ubHldKSArIGxhYmVsLCBpbnB1dFt0eXBlPW51bWJlcl06Zm9jdXM6bm90KFtyZWFkb25seV0pICsgbGFiZWwsIGlucHV0W3R5cGU9c2VhcmNoXTpmb2N1czpub3QoW3JlYWRvbmx5XSkgKyBsYWJlbCwgdGV4dGFyZWEubWF0ZXJpYWxpemUtdGV4dGFyZWE6Zm9jdXM6bm90KFtyZWFkb25seV0pICsgbGFiZWwge1xcbiAgY29sb3I6ICMyNmE2OWE7IH1cXG5cXG5pbnB1dDpub3QoW3R5cGVdKS52YWxpZCwgaW5wdXQ6bm90KFt0eXBlXSk6Zm9jdXMudmFsaWQsIGlucHV0W3R5cGU9dGV4dF0udmFsaWQsIGlucHV0W3R5cGU9dGV4dF06Zm9jdXMudmFsaWQsIGlucHV0W3R5cGU9cGFzc3dvcmRdLnZhbGlkLCBpbnB1dFt0eXBlPXBhc3N3b3JkXTpmb2N1cy52YWxpZCwgaW5wdXRbdHlwZT1lbWFpbF0udmFsaWQsIGlucHV0W3R5cGU9ZW1haWxdOmZvY3VzLnZhbGlkLCBpbnB1dFt0eXBlPXVybF0udmFsaWQsIGlucHV0W3R5cGU9dXJsXTpmb2N1cy52YWxpZCwgaW5wdXRbdHlwZT10aW1lXS52YWxpZCwgaW5wdXRbdHlwZT10aW1lXTpmb2N1cy52YWxpZCwgaW5wdXRbdHlwZT1kYXRlXS52YWxpZCwgaW5wdXRbdHlwZT1kYXRlXTpmb2N1cy52YWxpZCwgaW5wdXRbdHlwZT1kYXRldGltZV0udmFsaWQsIGlucHV0W3R5cGU9ZGF0ZXRpbWVdOmZvY3VzLnZhbGlkLCBpbnB1dFt0eXBlPWRhdGV0aW1lLWxvY2FsXS52YWxpZCwgaW5wdXRbdHlwZT1kYXRldGltZS1sb2NhbF06Zm9jdXMudmFsaWQsIGlucHV0W3R5cGU9dGVsXS52YWxpZCwgaW5wdXRbdHlwZT10ZWxdOmZvY3VzLnZhbGlkLCBpbnB1dFt0eXBlPW51bWJlcl0udmFsaWQsIGlucHV0W3R5cGU9bnVtYmVyXTpmb2N1cy52YWxpZCwgaW5wdXRbdHlwZT1zZWFyY2hdLnZhbGlkLCBpbnB1dFt0eXBlPXNlYXJjaF06Zm9jdXMudmFsaWQsIHRleHRhcmVhLm1hdGVyaWFsaXplLXRleHRhcmVhLnZhbGlkLCB0ZXh0YXJlYS5tYXRlcmlhbGl6ZS10ZXh0YXJlYTpmb2N1cy52YWxpZCB7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzRDQUY1MDtcXG4gIGJveC1zaGFkb3c6IDAgMXB4IDAgMCAjNENBRjUwOyB9XFxuXFxuaW5wdXQ6bm90KFt0eXBlXSkudmFsaWQgKyBsYWJlbDphZnRlciwgaW5wdXQ6bm90KFt0eXBlXSk6Zm9jdXMudmFsaWQgKyBsYWJlbDphZnRlciwgaW5wdXRbdHlwZT10ZXh0XS52YWxpZCArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPXRleHRdOmZvY3VzLnZhbGlkICsgbGFiZWw6YWZ0ZXIsIGlucHV0W3R5cGU9cGFzc3dvcmRdLnZhbGlkICsgbGFiZWw6YWZ0ZXIsIGlucHV0W3R5cGU9cGFzc3dvcmRdOmZvY3VzLnZhbGlkICsgbGFiZWw6YWZ0ZXIsIGlucHV0W3R5cGU9ZW1haWxdLnZhbGlkICsgbGFiZWw6YWZ0ZXIsIGlucHV0W3R5cGU9ZW1haWxdOmZvY3VzLnZhbGlkICsgbGFiZWw6YWZ0ZXIsIGlucHV0W3R5cGU9dXJsXS52YWxpZCArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPXVybF06Zm9jdXMudmFsaWQgKyBsYWJlbDphZnRlciwgaW5wdXRbdHlwZT10aW1lXS52YWxpZCArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPXRpbWVdOmZvY3VzLnZhbGlkICsgbGFiZWw6YWZ0ZXIsIGlucHV0W3R5cGU9ZGF0ZV0udmFsaWQgKyBsYWJlbDphZnRlciwgaW5wdXRbdHlwZT1kYXRlXTpmb2N1cy52YWxpZCArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPWRhdGV0aW1lXS52YWxpZCArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPWRhdGV0aW1lXTpmb2N1cy52YWxpZCArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPWRhdGV0aW1lLWxvY2FsXS52YWxpZCArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPWRhdGV0aW1lLWxvY2FsXTpmb2N1cy52YWxpZCArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPXRlbF0udmFsaWQgKyBsYWJlbDphZnRlciwgaW5wdXRbdHlwZT10ZWxdOmZvY3VzLnZhbGlkICsgbGFiZWw6YWZ0ZXIsIGlucHV0W3R5cGU9bnVtYmVyXS52YWxpZCArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPW51bWJlcl06Zm9jdXMudmFsaWQgKyBsYWJlbDphZnRlciwgaW5wdXRbdHlwZT1zZWFyY2hdLnZhbGlkICsgbGFiZWw6YWZ0ZXIsIGlucHV0W3R5cGU9c2VhcmNoXTpmb2N1cy52YWxpZCArIGxhYmVsOmFmdGVyLCB0ZXh0YXJlYS5tYXRlcmlhbGl6ZS10ZXh0YXJlYS52YWxpZCArIGxhYmVsOmFmdGVyLCB0ZXh0YXJlYS5tYXRlcmlhbGl6ZS10ZXh0YXJlYTpmb2N1cy52YWxpZCArIGxhYmVsOmFmdGVyIHtcXG4gIGNvbnRlbnQ6IGF0dHIoZGF0YS1zdWNjZXNzKTtcXG4gIGNvbG9yOiAjNENBRjUwO1xcbiAgb3BhY2l0eTogMTsgfVxcblxcbmlucHV0Om5vdChbdHlwZV0pLmludmFsaWQsIGlucHV0Om5vdChbdHlwZV0pOmZvY3VzLmludmFsaWQsIGlucHV0W3R5cGU9dGV4dF0uaW52YWxpZCwgaW5wdXRbdHlwZT10ZXh0XTpmb2N1cy5pbnZhbGlkLCBpbnB1dFt0eXBlPXBhc3N3b3JkXS5pbnZhbGlkLCBpbnB1dFt0eXBlPXBhc3N3b3JkXTpmb2N1cy5pbnZhbGlkLCBpbnB1dFt0eXBlPWVtYWlsXS5pbnZhbGlkLCBpbnB1dFt0eXBlPWVtYWlsXTpmb2N1cy5pbnZhbGlkLCBpbnB1dFt0eXBlPXVybF0uaW52YWxpZCwgaW5wdXRbdHlwZT11cmxdOmZvY3VzLmludmFsaWQsIGlucHV0W3R5cGU9dGltZV0uaW52YWxpZCwgaW5wdXRbdHlwZT10aW1lXTpmb2N1cy5pbnZhbGlkLCBpbnB1dFt0eXBlPWRhdGVdLmludmFsaWQsIGlucHV0W3R5cGU9ZGF0ZV06Zm9jdXMuaW52YWxpZCwgaW5wdXRbdHlwZT1kYXRldGltZV0uaW52YWxpZCwgaW5wdXRbdHlwZT1kYXRldGltZV06Zm9jdXMuaW52YWxpZCwgaW5wdXRbdHlwZT1kYXRldGltZS1sb2NhbF0uaW52YWxpZCwgaW5wdXRbdHlwZT1kYXRldGltZS1sb2NhbF06Zm9jdXMuaW52YWxpZCwgaW5wdXRbdHlwZT10ZWxdLmludmFsaWQsIGlucHV0W3R5cGU9dGVsXTpmb2N1cy5pbnZhbGlkLCBpbnB1dFt0eXBlPW51bWJlcl0uaW52YWxpZCwgaW5wdXRbdHlwZT1udW1iZXJdOmZvY3VzLmludmFsaWQsIGlucHV0W3R5cGU9c2VhcmNoXS5pbnZhbGlkLCBpbnB1dFt0eXBlPXNlYXJjaF06Zm9jdXMuaW52YWxpZCwgdGV4dGFyZWEubWF0ZXJpYWxpemUtdGV4dGFyZWEuaW52YWxpZCwgdGV4dGFyZWEubWF0ZXJpYWxpemUtdGV4dGFyZWE6Zm9jdXMuaW52YWxpZCB7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI0Y0NDMzNjtcXG4gIGJveC1zaGFkb3c6IDAgMXB4IDAgMCAjRjQ0MzM2OyB9XFxuXFxuaW5wdXQ6bm90KFt0eXBlXSkuaW52YWxpZCArIGxhYmVsOmFmdGVyLCBpbnB1dDpub3QoW3R5cGVdKTpmb2N1cy5pbnZhbGlkICsgbGFiZWw6YWZ0ZXIsIGlucHV0W3R5cGU9dGV4dF0uaW52YWxpZCArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPXRleHRdOmZvY3VzLmludmFsaWQgKyBsYWJlbDphZnRlciwgaW5wdXRbdHlwZT1wYXNzd29yZF0uaW52YWxpZCArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPXBhc3N3b3JkXTpmb2N1cy5pbnZhbGlkICsgbGFiZWw6YWZ0ZXIsIGlucHV0W3R5cGU9ZW1haWxdLmludmFsaWQgKyBsYWJlbDphZnRlciwgaW5wdXRbdHlwZT1lbWFpbF06Zm9jdXMuaW52YWxpZCArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPXVybF0uaW52YWxpZCArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPXVybF06Zm9jdXMuaW52YWxpZCArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPXRpbWVdLmludmFsaWQgKyBsYWJlbDphZnRlciwgaW5wdXRbdHlwZT10aW1lXTpmb2N1cy5pbnZhbGlkICsgbGFiZWw6YWZ0ZXIsIGlucHV0W3R5cGU9ZGF0ZV0uaW52YWxpZCArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPWRhdGVdOmZvY3VzLmludmFsaWQgKyBsYWJlbDphZnRlciwgaW5wdXRbdHlwZT1kYXRldGltZV0uaW52YWxpZCArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPWRhdGV0aW1lXTpmb2N1cy5pbnZhbGlkICsgbGFiZWw6YWZ0ZXIsIGlucHV0W3R5cGU9ZGF0ZXRpbWUtbG9jYWxdLmludmFsaWQgKyBsYWJlbDphZnRlciwgaW5wdXRbdHlwZT1kYXRldGltZS1sb2NhbF06Zm9jdXMuaW52YWxpZCArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPXRlbF0uaW52YWxpZCArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPXRlbF06Zm9jdXMuaW52YWxpZCArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPW51bWJlcl0uaW52YWxpZCArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPW51bWJlcl06Zm9jdXMuaW52YWxpZCArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPXNlYXJjaF0uaW52YWxpZCArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPXNlYXJjaF06Zm9jdXMuaW52YWxpZCArIGxhYmVsOmFmdGVyLCB0ZXh0YXJlYS5tYXRlcmlhbGl6ZS10ZXh0YXJlYS5pbnZhbGlkICsgbGFiZWw6YWZ0ZXIsIHRleHRhcmVhLm1hdGVyaWFsaXplLXRleHRhcmVhOmZvY3VzLmludmFsaWQgKyBsYWJlbDphZnRlciB7XFxuICBjb250ZW50OiBhdHRyKGRhdGEtZXJyb3IpO1xcbiAgY29sb3I6ICNGNDQzMzY7XFxuICBvcGFjaXR5OiAxOyB9XFxuXFxuaW5wdXQ6bm90KFt0eXBlXSkudmFsaWRhdGUgKyBsYWJlbCwgaW5wdXRbdHlwZT10ZXh0XS52YWxpZGF0ZSArIGxhYmVsLCBpbnB1dFt0eXBlPXBhc3N3b3JkXS52YWxpZGF0ZSArIGxhYmVsLCBpbnB1dFt0eXBlPWVtYWlsXS52YWxpZGF0ZSArIGxhYmVsLCBpbnB1dFt0eXBlPXVybF0udmFsaWRhdGUgKyBsYWJlbCwgaW5wdXRbdHlwZT10aW1lXS52YWxpZGF0ZSArIGxhYmVsLCBpbnB1dFt0eXBlPWRhdGVdLnZhbGlkYXRlICsgbGFiZWwsIGlucHV0W3R5cGU9ZGF0ZXRpbWVdLnZhbGlkYXRlICsgbGFiZWwsIGlucHV0W3R5cGU9ZGF0ZXRpbWUtbG9jYWxdLnZhbGlkYXRlICsgbGFiZWwsIGlucHV0W3R5cGU9dGVsXS52YWxpZGF0ZSArIGxhYmVsLCBpbnB1dFt0eXBlPW51bWJlcl0udmFsaWRhdGUgKyBsYWJlbCwgaW5wdXRbdHlwZT1zZWFyY2hdLnZhbGlkYXRlICsgbGFiZWwsIHRleHRhcmVhLm1hdGVyaWFsaXplLXRleHRhcmVhLnZhbGlkYXRlICsgbGFiZWwge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTsgfVxcblxcbmlucHV0Om5vdChbdHlwZV0pICsgbGFiZWw6YWZ0ZXIsIGlucHV0W3R5cGU9dGV4dF0gKyBsYWJlbDphZnRlciwgaW5wdXRbdHlwZT1wYXNzd29yZF0gKyBsYWJlbDphZnRlciwgaW5wdXRbdHlwZT1lbWFpbF0gKyBsYWJlbDphZnRlciwgaW5wdXRbdHlwZT11cmxdICsgbGFiZWw6YWZ0ZXIsIGlucHV0W3R5cGU9dGltZV0gKyBsYWJlbDphZnRlciwgaW5wdXRbdHlwZT1kYXRlXSArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPWRhdGV0aW1lXSArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPWRhdGV0aW1lLWxvY2FsXSArIGxhYmVsOmFmdGVyLCBpbnB1dFt0eXBlPXRlbF0gKyBsYWJlbDphZnRlciwgaW5wdXRbdHlwZT1udW1iZXJdICsgbGFiZWw6YWZ0ZXIsIGlucHV0W3R5cGU9c2VhcmNoXSArIGxhYmVsOmFmdGVyLCB0ZXh0YXJlYS5tYXRlcmlhbGl6ZS10ZXh0YXJlYSArIGxhYmVsOmFmdGVyIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDYwcHg7XFxuICBvcGFjaXR5OiAwO1xcbiAgdHJhbnNpdGlvbjogLjJzIG9wYWNpdHkgZWFzZS1vdXQsIC4ycyBjb2xvciBlYXNlLW91dDsgfVxcblxcbi5pbnB1dC1maWVsZCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBtYXJnaW4tdG9wOiAxcmVtOyB9XFxuXFxuLmlucHV0LWZpZWxkLmlubGluZSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgbWFyZ2luLWxlZnQ6IDVweDsgfVxcblxcbi5pbnB1dC1maWVsZC5pbmxpbmUgaW5wdXQsIC5pbnB1dC1maWVsZC5pbmxpbmUgLnNlbGVjdC1kcm9wZG93biB7XFxuICBtYXJnaW4tYm90dG9tOiAxcmVtOyB9XFxuXFxuLmlucHV0LWZpZWxkLmNvbCBsYWJlbCB7XFxuICBsZWZ0OiAuNzVyZW07IH1cXG5cXG4uaW5wdXQtZmllbGQuY29sIC5wcmVmaXggfiBsYWJlbCwgLmlucHV0LWZpZWxkLmNvbCAucHJlZml4IH4gLnZhbGlkYXRlIH4gbGFiZWwge1xcbiAgd2lkdGg6IGNhbGMoMTAwJSAtIDNyZW0gLSAxLjVyZW0pOyB9XFxuXFxuLmlucHV0LWZpZWxkIGxhYmVsIHtcXG4gIGNvbG9yOiAjOWU5ZTllO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwLjhyZW07XFxuICBsZWZ0OiAwO1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbiAgY3Vyc29yOiB0ZXh0O1xcbiAgdHJhbnNpdGlvbjogLjJzIGVhc2Utb3V0O1xcbiAgdGV4dC1hbGlnbjogaW5pdGlhbDsgfVxcblxcbi5pbnB1dC1maWVsZCBsYWJlbDpub3QoLmxhYmVsLWljb24pLmFjdGl2ZSB7XFxuICBmb250LXNpemU6IC44cmVtO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTE0MCUpO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xNDAlKTsgfVxcblxcbi5pbnB1dC1maWVsZCAucHJlZml4IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiAzcmVtO1xcbiAgZm9udC1zaXplOiAycmVtO1xcbiAgdHJhbnNpdGlvbjogY29sb3IgLjJzOyB9XFxuXFxuLmlucHV0LWZpZWxkIC5wcmVmaXguYWN0aXZlIHtcXG4gIGNvbG9yOiAjMjZhNjlhOyB9XFxuXFxuLmlucHV0LWZpZWxkIC5wcmVmaXggfiBpbnB1dCwgLmlucHV0LWZpZWxkIC5wcmVmaXggfiB0ZXh0YXJlYSwgLmlucHV0LWZpZWxkIC5wcmVmaXggfiBsYWJlbCwgLmlucHV0LWZpZWxkIC5wcmVmaXggfiAudmFsaWRhdGUgfiBsYWJlbCwgLmlucHV0LWZpZWxkIC5wcmVmaXggfiAuYXV0b2NvbXBsZXRlLWNvbnRlbnQge1xcbiAgbWFyZ2luLWxlZnQ6IDNyZW07XFxuICB3aWR0aDogOTIlO1xcbiAgd2lkdGg6IGNhbGMoMTAwJSAtIDNyZW0pOyB9XFxuXFxuLmlucHV0LWZpZWxkIC5wcmVmaXggfiBsYWJlbCB7XFxuICBtYXJnaW4tbGVmdDogM3JlbTsgfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogOTkycHgpIHtcXG4gIC5pbnB1dC1maWVsZCAucHJlZml4IH4gaW5wdXQge1xcbiAgICB3aWR0aDogODYlO1xcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gM3JlbSk7IH0gfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjAwcHgpIHtcXG4gIC5pbnB1dC1maWVsZCAucHJlZml4IH4gaW5wdXQge1xcbiAgICB3aWR0aDogODAlO1xcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gM3JlbSk7IH0gfVxcblxcbi5pbnB1dC1maWVsZCBpbnB1dFt0eXBlPXNlYXJjaF0ge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBsaW5lLWhlaWdodDogaW5oZXJpdDtcXG4gIHBhZGRpbmctbGVmdDogNHJlbTtcXG4gIHdpZHRoOiBjYWxjKDEwMCUgLSA0cmVtKTsgfVxcblxcbi5pbnB1dC1maWVsZCBpbnB1dFt0eXBlPXNlYXJjaF06Zm9jdXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJvcmRlcjogMDtcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxuICBjb2xvcjogIzQ0NDsgfVxcblxcbi5pbnB1dC1maWVsZCBpbnB1dFt0eXBlPXNlYXJjaF06Zm9jdXMgKyBsYWJlbCBpLCAuaW5wdXQtZmllbGQgaW5wdXRbdHlwZT1zZWFyY2hdOmZvY3VzIH4gLm1kaS1uYXZpZ2F0aW9uLWNsb3NlLCAuaW5wdXQtZmllbGQgaW5wdXRbdHlwZT1zZWFyY2hdOmZvY3VzIH4gLm1hdGVyaWFsLWljb25zIHtcXG4gIGNvbG9yOiAjNDQ0OyB9XFxuXFxuLmlucHV0LWZpZWxkIGlucHV0W3R5cGU9c2VhcmNoXSArIGxhYmVsIHtcXG4gIGxlZnQ6IDFyZW07IH1cXG5cXG4uaW5wdXQtZmllbGQgaW5wdXRbdHlwZT1zZWFyY2hdIH4gLm1kaS1uYXZpZ2F0aW9uLWNsb3NlLCAuaW5wdXQtZmllbGQgaW5wdXRbdHlwZT1zZWFyY2hdIH4gLm1hdGVyaWFsLWljb25zIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAxcmVtO1xcbiAgY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZm9udC1zaXplOiAycmVtO1xcbiAgdHJhbnNpdGlvbjogLjNzIGNvbG9yOyB9XFxuXFxudGV4dGFyZWEge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDNyZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgfVxcblxcbnRleHRhcmVhLm1hdGVyaWFsaXplLXRleHRhcmVhIHtcXG4gIG92ZXJmbG93LXk6IGhpZGRlbjtcXG4gIHBhZGRpbmc6IC44cmVtIDAgMS42cmVtIDA7XFxuICByZXNpemU6IG5vbmU7XFxuICBtaW4taGVpZ2h0OiAzcmVtOyB9XFxuXFxuLmhpZGRlbmRpdiB7XFxuICBkaXNwbGF5OiBub25lO1xcbiAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xcbiAgb3ZlcmZsb3ctd3JhcDogYnJlYWstd29yZDtcXG4gIHBhZGRpbmctdG9wOiAxLjJyZW07XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7IH1cXG5cXG4uYXV0b2NvbXBsZXRlLWNvbnRlbnQge1xcbiAgbWFyZ2luLXRvcDogLTIwcHg7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG9wYWNpdHk6IDE7XFxuICBwb3NpdGlvbjogc3RhdGljOyB9XFxuXFxuLmF1dG9jb21wbGV0ZS1jb250ZW50IGxpIC5oaWdobGlnaHQge1xcbiAgY29sb3I6ICM0NDQ7IH1cXG5cXG4uYXV0b2NvbXBsZXRlLWNvbnRlbnQgbGkgaW1nIHtcXG4gIGhlaWdodDogNDBweDtcXG4gIHdpZHRoOiA0MHB4O1xcbiAgbWFyZ2luOiA1cHggMTVweDsgfVxcblxcblt0eXBlPVxcXCJyYWRpb1xcXCJdOm5vdCg6Y2hlY2tlZCksIFt0eXBlPVxcXCJyYWRpb1xcXCJdOmNoZWNrZWQge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogLTk5OTlweDtcXG4gIG9wYWNpdHk6IDA7IH1cXG5cXG5bdHlwZT1cXFwicmFkaW9cXFwiXTpub3QoOmNoZWNrZWQpICsgbGFiZWwsIFt0eXBlPVxcXCJyYWRpb1xcXCJdOmNoZWNrZWQgKyBsYWJlbCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBwYWRkaW5nLWxlZnQ6IDM1cHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBoZWlnaHQ6IDI1cHg7XFxuICBsaW5lLWhlaWdodDogMjVweDtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG4gIHRyYW5zaXRpb246IC4yOHMgZWFzZTtcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7IH1cXG5cXG5bdHlwZT1cXFwicmFkaW9cXFwiXSArIGxhYmVsOmJlZm9yZSwgW3R5cGU9XFxcInJhZGlvXFxcIl0gKyBsYWJlbDphZnRlciB7XFxuICBjb250ZW50OiAnJztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGxlZnQ6IDA7XFxuICB0b3A6IDA7XFxuICBtYXJnaW46IDRweDtcXG4gIHdpZHRoOiAxNnB4O1xcbiAgaGVpZ2h0OiAxNnB4O1xcbiAgei1pbmRleDogMDtcXG4gIHRyYW5zaXRpb246IC4yOHMgZWFzZTsgfVxcblxcblt0eXBlPVxcXCJyYWRpb1xcXCJdOm5vdCg6Y2hlY2tlZCkgKyBsYWJlbDpiZWZvcmUsIFt0eXBlPVxcXCJyYWRpb1xcXCJdOm5vdCg6Y2hlY2tlZCkgKyBsYWJlbDphZnRlciwgW3R5cGU9XFxcInJhZGlvXFxcIl06Y2hlY2tlZCArIGxhYmVsOmJlZm9yZSwgW3R5cGU9XFxcInJhZGlvXFxcIl06Y2hlY2tlZCArIGxhYmVsOmFmdGVyLCBbdHlwZT1cXFwicmFkaW9cXFwiXS53aXRoLWdhcDpjaGVja2VkICsgbGFiZWw6YmVmb3JlLCBbdHlwZT1cXFwicmFkaW9cXFwiXS53aXRoLWdhcDpjaGVja2VkICsgbGFiZWw6YWZ0ZXIge1xcbiAgYm9yZGVyLXJhZGl1czogNTAlOyB9XFxuXFxuW3R5cGU9XFxcInJhZGlvXFxcIl06bm90KDpjaGVja2VkKSArIGxhYmVsOmJlZm9yZSwgW3R5cGU9XFxcInJhZGlvXFxcIl06bm90KDpjaGVja2VkKSArIGxhYmVsOmFmdGVyIHtcXG4gIGJvcmRlcjogMnB4IHNvbGlkICM1YTVhNWE7IH1cXG5cXG5bdHlwZT1cXFwicmFkaW9cXFwiXTpub3QoOmNoZWNrZWQpICsgbGFiZWw6YWZ0ZXIge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDApO1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgwKTsgfVxcblxcblt0eXBlPVxcXCJyYWRpb1xcXCJdOmNoZWNrZWQgKyBsYWJlbDpiZWZvcmUge1xcbiAgYm9yZGVyOiAycHggc29saWQgdHJhbnNwYXJlbnQ7IH1cXG5cXG5bdHlwZT1cXFwicmFkaW9cXFwiXTpjaGVja2VkICsgbGFiZWw6YWZ0ZXIsIFt0eXBlPVxcXCJyYWRpb1xcXCJdLndpdGgtZ2FwOmNoZWNrZWQgKyBsYWJlbDpiZWZvcmUsIFt0eXBlPVxcXCJyYWRpb1xcXCJdLndpdGgtZ2FwOmNoZWNrZWQgKyBsYWJlbDphZnRlciB7XFxuICBib3JkZXI6IDJweCBzb2xpZCAjMjZhNjlhOyB9XFxuXFxuW3R5cGU9XFxcInJhZGlvXFxcIl06Y2hlY2tlZCArIGxhYmVsOmFmdGVyLCBbdHlwZT1cXFwicmFkaW9cXFwiXS53aXRoLWdhcDpjaGVja2VkICsgbGFiZWw6YWZ0ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI2YTY5YTsgfVxcblxcblt0eXBlPVxcXCJyYWRpb1xcXCJdOmNoZWNrZWQgKyBsYWJlbDphZnRlciB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMS4wMik7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDEuMDIpOyB9XFxuXFxuW3R5cGU9XFxcInJhZGlvXFxcIl0ud2l0aC1nYXA6Y2hlY2tlZCArIGxhYmVsOmFmdGVyIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwLjUpO1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgwLjUpOyB9XFxuXFxuW3R5cGU9XFxcInJhZGlvXFxcIl0udGFiYmVkOmZvY3VzICsgbGFiZWw6YmVmb3JlIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDEwcHggcmdiYSgwLCAwLCAwLCAwLjEpOyB9XFxuXFxuW3R5cGU9XFxcInJhZGlvXFxcIl0ud2l0aC1nYXA6ZGlzYWJsZWQ6Y2hlY2tlZCArIGxhYmVsOmJlZm9yZSB7XFxuICBib3JkZXI6IDJweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMjYpOyB9XFxuXFxuW3R5cGU9XFxcInJhZGlvXFxcIl0ud2l0aC1nYXA6ZGlzYWJsZWQ6Y2hlY2tlZCArIGxhYmVsOmFmdGVyIHtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4yNik7IH1cXG5cXG5bdHlwZT1cXFwicmFkaW9cXFwiXTpkaXNhYmxlZDpub3QoOmNoZWNrZWQpICsgbGFiZWw6YmVmb3JlLCBbdHlwZT1cXFwicmFkaW9cXFwiXTpkaXNhYmxlZDpjaGVja2VkICsgbGFiZWw6YmVmb3JlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMjYpOyB9XFxuXFxuW3R5cGU9XFxcInJhZGlvXFxcIl06ZGlzYWJsZWQgKyBsYWJlbCB7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjI2KTsgfVxcblxcblt0eXBlPVxcXCJyYWRpb1xcXCJdOmRpc2FibGVkOm5vdCg6Y2hlY2tlZCkgKyBsYWJlbDpiZWZvcmUge1xcbiAgYm9yZGVyLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMjYpOyB9XFxuXFxuW3R5cGU9XFxcInJhZGlvXFxcIl06ZGlzYWJsZWQ6Y2hlY2tlZCArIGxhYmVsOmFmdGVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4yNik7XFxuICBib3JkZXItY29sb3I6ICNCREJEQkQ7IH1cXG5cXG5mb3JtIHAge1xcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG4gIHRleHQtYWxpZ246IGxlZnQ7IH1cXG5cXG5mb3JtIHA6bGFzdC1jaGlsZCB7XFxuICBtYXJnaW4tYm90dG9tOiAwOyB9XFxuXFxuW3R5cGU9XFxcImNoZWNrYm94XFxcIl06bm90KDpjaGVja2VkKSwgW3R5cGU9XFxcImNoZWNrYm94XFxcIl06Y2hlY2tlZCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsZWZ0OiAtOTk5OXB4O1xcbiAgb3BhY2l0eTogMDsgfVxcblxcblt0eXBlPVxcXCJjaGVja2JveFxcXCJdICsgbGFiZWwge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgcGFkZGluZy1sZWZ0OiAzNXB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgaGVpZ2h0OiAyNXB4O1xcbiAgbGluZS1oZWlnaHQ6IDI1cHg7XFxuICBmb250LXNpemU6IDFyZW07XFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1raHRtbC11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1tcy11c2VyLXNlbGVjdDogbm9uZTsgfVxcblxcblt0eXBlPVxcXCJjaGVja2JveFxcXCJdICsgbGFiZWw6YmVmb3JlLCBbdHlwZT1cXFwiY2hlY2tib3hcXFwiXTpub3QoLmZpbGxlZC1pbikgKyBsYWJlbDphZnRlciB7XFxuICBjb250ZW50OiAnJztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICB3aWR0aDogMThweDtcXG4gIGhlaWdodDogMThweDtcXG4gIHotaW5kZXg6IDA7XFxuICBib3JkZXI6IDJweCBzb2xpZCAjNWE1YTVhO1xcbiAgYm9yZGVyLXJhZGl1czogMXB4O1xcbiAgbWFyZ2luLXRvcDogMnB4O1xcbiAgdHJhbnNpdGlvbjogLjJzOyB9XFxuXFxuW3R5cGU9XFxcImNoZWNrYm94XFxcIl06bm90KC5maWxsZWQtaW4pICsgbGFiZWw6YWZ0ZXIge1xcbiAgYm9yZGVyOiAwO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDApO1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgwKTsgfVxcblxcblt0eXBlPVxcXCJjaGVja2JveFxcXCJdOm5vdCg6Y2hlY2tlZCk6ZGlzYWJsZWQgKyBsYWJlbDpiZWZvcmUge1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjI2KTsgfVxcblxcblt0eXBlPVxcXCJjaGVja2JveFxcXCJdLnRhYmJlZDpmb2N1cyArIGxhYmVsOmFmdGVyIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxKTtcXG4gIHRyYW5zZm9ybTogc2NhbGUoMSk7XFxuICBib3JkZXI6IDA7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBib3gtc2hhZG93OiAwIDAgMCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4xKTsgfVxcblxcblt0eXBlPVxcXCJjaGVja2JveFxcXCJdOmNoZWNrZWQgKyBsYWJlbDpiZWZvcmUge1xcbiAgdG9wOiAtNHB4O1xcbiAgbGVmdDogLTVweDtcXG4gIHdpZHRoOiAxMnB4O1xcbiAgaGVpZ2h0OiAyMnB4O1xcbiAgYm9yZGVyLXRvcDogMnB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1yaWdodDogMnB4IHNvbGlkICMyNmE2OWE7XFxuICBib3JkZXItYm90dG9tOiAycHggc29saWQgIzI2YTY5YTtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoNDBkZWcpO1xcbiAgdHJhbnNmb3JtOiByb3RhdGUoNDBkZWcpO1xcbiAgLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XFxuICBiYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XFxuICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IDEwMCUgMTAwJTtcXG4gIHRyYW5zZm9ybS1vcmlnaW46IDEwMCUgMTAwJTsgfVxcblxcblt0eXBlPVxcXCJjaGVja2JveFxcXCJdOmNoZWNrZWQ6ZGlzYWJsZWQgKyBsYWJlbDpiZWZvcmUge1xcbiAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjI2KTtcXG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMjYpOyB9XFxuXFxuW3R5cGU9XFxcImNoZWNrYm94XFxcIl06aW5kZXRlcm1pbmF0ZSArIGxhYmVsOmJlZm9yZSB7XFxuICB0b3A6IC0xMXB4O1xcbiAgbGVmdDogLTEycHg7XFxuICB3aWR0aDogMTBweDtcXG4gIGhlaWdodDogMjJweDtcXG4gIGJvcmRlci10b3A6IG5vbmU7XFxuICBib3JkZXItbGVmdDogbm9uZTtcXG4gIGJvcmRlci1yaWdodDogMnB4IHNvbGlkICMyNmE2OWE7XFxuICBib3JkZXItYm90dG9tOiBub25lO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XFxuICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XFxuICAtd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcXG4gIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcXG4gIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogMTAwJSAxMDAlO1xcbiAgdHJhbnNmb3JtLW9yaWdpbjogMTAwJSAxMDAlOyB9XFxuXFxuW3R5cGU9XFxcImNoZWNrYm94XFxcIl06aW5kZXRlcm1pbmF0ZTpkaXNhYmxlZCArIGxhYmVsOmJlZm9yZSB7XFxuICBib3JkZXItcmlnaHQ6IDJweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMjYpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cXG5cXG5bdHlwZT1cXFwiY2hlY2tib3hcXFwiXS5maWxsZWQtaW4gKyBsYWJlbDphZnRlciB7XFxuICBib3JkZXItcmFkaXVzOiAycHg7IH1cXG5cXG5bdHlwZT1cXFwiY2hlY2tib3hcXFwiXS5maWxsZWQtaW4gKyBsYWJlbDpiZWZvcmUsIFt0eXBlPVxcXCJjaGVja2JveFxcXCJdLmZpbGxlZC1pbiArIGxhYmVsOmFmdGVyIHtcXG4gIGNvbnRlbnQ6ICcnO1xcbiAgbGVmdDogMDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRyYW5zaXRpb246IGJvcmRlciAuMjVzLCBiYWNrZ3JvdW5kLWNvbG9yIC4yNXMsIHdpZHRoIC4yMHMgLjFzLCBoZWlnaHQgLjIwcyAuMXMsIHRvcCAuMjBzIC4xcywgbGVmdCAuMjBzIC4xcztcXG4gIHotaW5kZXg6IDE7IH1cXG5cXG5bdHlwZT1cXFwiY2hlY2tib3hcXFwiXS5maWxsZWQtaW46bm90KDpjaGVja2VkKSArIGxhYmVsOmJlZm9yZSB7XFxuICB3aWR0aDogMDtcXG4gIGhlaWdodDogMDtcXG4gIGJvcmRlcjogM3B4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgbGVmdDogNnB4O1xcbiAgdG9wOiAxMHB4O1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZVooMzdkZWcpO1xcbiAgdHJhbnNmb3JtOiByb3RhdGVaKDM3ZGVnKTtcXG4gIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogMjAlIDQwJTtcXG4gIHRyYW5zZm9ybS1vcmlnaW46IDEwMCUgMTAwJTsgfVxcblxcblt0eXBlPVxcXCJjaGVja2JveFxcXCJdLmZpbGxlZC1pbjpub3QoOmNoZWNrZWQpICsgbGFiZWw6YWZ0ZXIge1xcbiAgaGVpZ2h0OiAyMHB4O1xcbiAgd2lkdGg6IDIwcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlcjogMnB4IHNvbGlkICM1YTVhNWE7XFxuICB0b3A6IDBweDtcXG4gIHotaW5kZXg6IDA7IH1cXG5cXG5bdHlwZT1cXFwiY2hlY2tib3hcXFwiXS5maWxsZWQtaW46Y2hlY2tlZCArIGxhYmVsOmJlZm9yZSB7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAxcHg7XFxuICB3aWR0aDogOHB4O1xcbiAgaGVpZ2h0OiAxM3B4O1xcbiAgYm9yZGVyLXRvcDogMnB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1yaWdodDogMnB4IHNvbGlkICNmZmY7XFxuICBib3JkZXItYm90dG9tOiAycHggc29saWQgI2ZmZjtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGVaKDM3ZGVnKTtcXG4gIHRyYW5zZm9ybTogcm90YXRlWigzN2RlZyk7XFxuICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IDEwMCUgMTAwJTtcXG4gIHRyYW5zZm9ybS1vcmlnaW46IDEwMCUgMTAwJTsgfVxcblxcblt0eXBlPVxcXCJjaGVja2JveFxcXCJdLmZpbGxlZC1pbjpjaGVja2VkICsgbGFiZWw6YWZ0ZXIge1xcbiAgdG9wOiAwO1xcbiAgd2lkdGg6IDIwcHg7XFxuICBoZWlnaHQ6IDIwcHg7XFxuICBib3JkZXI6IDJweCBzb2xpZCAjMjZhNjlhO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI2YTY5YTtcXG4gIHotaW5kZXg6IDA7IH1cXG5cXG5bdHlwZT1cXFwiY2hlY2tib3hcXFwiXS5maWxsZWQtaW4udGFiYmVkOmZvY3VzICsgbGFiZWw6YWZ0ZXIge1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgYm9yZGVyLWNvbG9yOiAjNWE1YTVhO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjEpOyB9XFxuXFxuW3R5cGU9XFxcImNoZWNrYm94XFxcIl0uZmlsbGVkLWluLnRhYmJlZDpjaGVja2VkOmZvY3VzICsgbGFiZWw6YWZ0ZXIge1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI2YTY5YTtcXG4gIGJvcmRlci1jb2xvcjogIzI2YTY5YTsgfVxcblxcblt0eXBlPVxcXCJjaGVja2JveFxcXCJdLmZpbGxlZC1pbjpkaXNhYmxlZDpub3QoOmNoZWNrZWQpICsgbGFiZWw6YmVmb3JlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyOiAycHggc29saWQgdHJhbnNwYXJlbnQ7IH1cXG5cXG5bdHlwZT1cXFwiY2hlY2tib3hcXFwiXS5maWxsZWQtaW46ZGlzYWJsZWQ6bm90KDpjaGVja2VkKSArIGxhYmVsOmFmdGVyIHtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjQkRCREJEOyB9XFxuXFxuW3R5cGU9XFxcImNoZWNrYm94XFxcIl0uZmlsbGVkLWluOmRpc2FibGVkOmNoZWNrZWQgKyBsYWJlbDpiZWZvcmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cXG5cXG5bdHlwZT1cXFwiY2hlY2tib3hcXFwiXS5maWxsZWQtaW46ZGlzYWJsZWQ6Y2hlY2tlZCArIGxhYmVsOmFmdGVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNCREJEQkQ7XFxuICBib3JkZXItY29sb3I6ICNCREJEQkQ7IH1cXG5cXG4uc3dpdGNoLCAuc3dpdGNoICoge1xcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAta2h0bWwtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7IH1cXG5cXG4uc3dpdGNoIGxhYmVsIHtcXG4gIGN1cnNvcjogcG9pbnRlcjsgfVxcblxcbi5zd2l0Y2ggbGFiZWwgaW5wdXRbdHlwZT1jaGVja2JveF0ge1xcbiAgb3BhY2l0eTogMDtcXG4gIHdpZHRoOiAwO1xcbiAgaGVpZ2h0OiAwOyB9XFxuXFxuLnN3aXRjaCBsYWJlbCBpbnB1dFt0eXBlPWNoZWNrYm94XTpjaGVja2VkICsgLmxldmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM4NGM3YzE7IH1cXG5cXG4uc3dpdGNoIGxhYmVsIGlucHV0W3R5cGU9Y2hlY2tib3hdOmNoZWNrZWQgKyAubGV2ZXI6YWZ0ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI2YTY5YTtcXG4gIGxlZnQ6IDI0cHg7IH1cXG5cXG4uc3dpdGNoIGxhYmVsIC5sZXZlciB7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiA0MHB4O1xcbiAgaGVpZ2h0OiAxNXB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzgxODE4MTtcXG4gIGJvcmRlci1yYWRpdXM6IDE1cHg7XFxuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIDAuM3MgZWFzZTtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICBtYXJnaW46IDAgMTZweDsgfVxcblxcbi5zd2l0Y2ggbGFiZWwgLmxldmVyOmFmdGVyIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDIxcHg7XFxuICBoZWlnaHQ6IDIxcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjFGMUYxO1xcbiAgYm9yZGVyLXJhZGl1czogMjFweDtcXG4gIGJveC1zaGFkb3c6IDAgMXB4IDNweCAxcHggcmdiYSgwLCAwLCAwLCAwLjQpO1xcbiAgbGVmdDogLTVweDtcXG4gIHRvcDogLTNweDtcXG4gIHRyYW5zaXRpb246IGxlZnQgMC4zcyBlYXNlLCBiYWNrZ3JvdW5kIC4zcyBlYXNlLCBib3gtc2hhZG93IDAuMXMgZWFzZTsgfVxcblxcbmlucHV0W3R5cGU9Y2hlY2tib3hdOmNoZWNrZWQ6bm90KDpkaXNhYmxlZCkgfiAubGV2ZXI6YWN0aXZlOjphZnRlciwgaW5wdXRbdHlwZT1jaGVja2JveF06Y2hlY2tlZDpub3QoOmRpc2FibGVkKS50YWJiZWQ6Zm9jdXMgfiAubGV2ZXI6OmFmdGVyIHtcXG4gIGJveC1zaGFkb3c6IDAgMXB4IDNweCAxcHggcmdiYSgwLCAwLCAwLCAwLjQpLCAwIDAgMCAxNXB4IHJnYmEoMzgsIDE2NiwgMTU0LCAwLjEpOyB9XFxuXFxuaW5wdXRbdHlwZT1jaGVja2JveF06bm90KDpkaXNhYmxlZCkgfiAubGV2ZXI6YWN0aXZlOmFmdGVyLCBpbnB1dFt0eXBlPWNoZWNrYm94XTpub3QoOmRpc2FibGVkKS50YWJiZWQ6Zm9jdXMgfiAubGV2ZXI6OmFmdGVyIHtcXG4gIGJveC1zaGFkb3c6IDAgMXB4IDNweCAxcHggcmdiYSgwLCAwLCAwLCAwLjQpLCAwIDAgMCAxNXB4IHJnYmEoMCwgMCwgMCwgMC4wOCk7IH1cXG5cXG4uc3dpdGNoIGlucHV0W3R5cGU9Y2hlY2tib3hdW2Rpc2FibGVkXSArIC5sZXZlciB7XFxuICBjdXJzb3I6IGRlZmF1bHQ7IH1cXG5cXG4uc3dpdGNoIGxhYmVsIGlucHV0W3R5cGU9Y2hlY2tib3hdW2Rpc2FibGVkXSArIC5sZXZlcjphZnRlciwgLnN3aXRjaCBsYWJlbCBpbnB1dFt0eXBlPWNoZWNrYm94XVtkaXNhYmxlZF06Y2hlY2tlZCArIC5sZXZlcjphZnRlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjQkRCREJEOyB9XFxuXFxuc2VsZWN0IHtcXG4gIGRpc3BsYXk6IG5vbmU7IH1cXG5cXG5zZWxlY3QuYnJvd3Nlci1kZWZhdWx0IHtcXG4gIGRpc3BsYXk6IGJsb2NrOyB9XFxuXFxuc2VsZWN0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC45KTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogNXB4O1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2YyZjJmMjtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIGhlaWdodDogM3JlbTsgfVxcblxcbi5zZWxlY3QtbGFiZWwge1xcbiAgcG9zaXRpb246IGFic29sdXRlOyB9XFxuXFxuLnNlbGVjdC13cmFwcGVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTsgfVxcblxcbi5zZWxlY3Qtd3JhcHBlciBpbnB1dC5zZWxlY3QtZHJvcGRvd24ge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXI6IG5vbmU7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzllOWU5ZTtcXG4gIG91dGxpbmU6IG5vbmU7XFxuICBoZWlnaHQ6IDNyZW07XFxuICBsaW5lLWhlaWdodDogM3JlbTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbiAgbWFyZ2luOiAwIDAgMjBweCAwO1xcbiAgcGFkZGluZzogMDtcXG4gIGRpc3BsYXk6IGJsb2NrOyB9XFxuXFxuLnNlbGVjdC13cmFwcGVyIHNwYW4uY2FyZXQge1xcbiAgY29sb3I6IGluaXRpYWw7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogMDtcXG4gIHRvcDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIGhlaWdodDogMTBweDtcXG4gIG1hcmdpbjogYXV0byAwO1xcbiAgZm9udC1zaXplOiAxMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDEwcHg7IH1cXG5cXG4uc2VsZWN0LXdyYXBwZXIgc3Bhbi5jYXJldC5kaXNhYmxlZCB7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjI2KTsgfVxcblxcbi5zZWxlY3Qtd3JhcHBlciArIGxhYmVsIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogLTE0cHg7XFxuICBmb250LXNpemU6IC44cmVtOyB9XFxuXFxuc2VsZWN0OmRpc2FibGVkIHtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMyk7IH1cXG5cXG4uc2VsZWN0LXdyYXBwZXIgaW5wdXQuc2VsZWN0LWRyb3Bkb3duOmRpc2FibGVkIHtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMyk7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMyk7IH1cXG5cXG4uc2VsZWN0LXdyYXBwZXIgaSB7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjMpOyB9XFxuXFxuLnNlbGVjdC1kcm9wZG93biBsaS5kaXNhYmxlZCwgLnNlbGVjdC1kcm9wZG93biBsaS5kaXNhYmxlZCA+IHNwYW4sIC5zZWxlY3QtZHJvcGRvd24gbGkub3B0Z3JvdXAge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4zKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyB9XFxuXFxuLnByZWZpeCB+IC5zZWxlY3Qtd3JhcHBlciB7XFxuICBtYXJnaW4tbGVmdDogM3JlbTtcXG4gIHdpZHRoOiA5MiU7XFxuICB3aWR0aDogY2FsYygxMDAlIC0gM3JlbSk7IH1cXG5cXG4ucHJlZml4IH4gbGFiZWwge1xcbiAgbWFyZ2luLWxlZnQ6IDNyZW07IH1cXG5cXG4uc2VsZWN0LWRyb3Bkb3duIGxpIGltZyB7XFxuICBoZWlnaHQ6IDQwcHg7XFxuICB3aWR0aDogNDBweDtcXG4gIG1hcmdpbjogNXB4IDE1cHg7XFxuICBmbG9hdDogcmlnaHQ7IH1cXG5cXG4uc2VsZWN0LWRyb3Bkb3duIGxpLm9wdGdyb3VwIHtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZWVlOyB9XFxuXFxuLnNlbGVjdC1kcm9wZG93biBsaS5vcHRncm91cC5zZWxlY3RlZCA+IHNwYW4ge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTsgfVxcblxcbi5zZWxlY3QtZHJvcGRvd24gbGkub3B0Z3JvdXAgPiBzcGFuIHtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNCk7IH1cXG5cXG4uc2VsZWN0LWRyb3Bkb3duIGxpLm9wdGdyb3VwIH4gbGkub3B0Z3JvdXAtb3B0aW9uIHtcXG4gIHBhZGRpbmctbGVmdDogMXJlbTsgfVxcblxcbi5maWxlLWZpZWxkIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTsgfVxcblxcbi5maWxlLWZpZWxkIC5maWxlLXBhdGgtd3JhcHBlciB7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgcGFkZGluZy1sZWZ0OiAxMHB4OyB9XFxuXFxuLmZpbGUtZmllbGQgaW5wdXQuZmlsZS1wYXRoIHtcXG4gIHdpZHRoOiAxMDAlOyB9XFxuXFxuLmZpbGUtZmllbGQgLmJ0biwgLmZpbGUtZmllbGQgLmJ0bi1sYXJnZSB7XFxuICBmbG9hdDogbGVmdDtcXG4gIGhlaWdodDogM3JlbTtcXG4gIGxpbmUtaGVpZ2h0OiAzcmVtOyB9XFxuXFxuLmZpbGUtZmllbGQgc3BhbiB7XFxuICBjdXJzb3I6IHBvaW50ZXI7IH1cXG5cXG4uZmlsZS1maWVsZCBpbnB1dFt0eXBlPWZpbGVdIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgbGVmdDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIG9wYWNpdHk6IDA7XFxuICBmaWx0ZXI6IGFscGhhKG9wYWNpdHk9MCk7IH1cXG5cXG4ucmFuZ2UtZmllbGQge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlOyB9XFxuXFxuaW5wdXRbdHlwZT1yYW5nZV0sIGlucHV0W3R5cGU9cmFuZ2VdICsgLnRodW1iIHtcXG4gIGN1cnNvcjogcG9pbnRlcjsgfVxcblxcbmlucHV0W3R5cGU9cmFuZ2VdIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyOiBub25lO1xcbiAgb3V0bGluZTogbm9uZTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgbWFyZ2luOiAxNXB4IDA7XFxuICBwYWRkaW5nOiAwOyB9XFxuXFxuaW5wdXRbdHlwZT1yYW5nZV06Zm9jdXMge1xcbiAgb3V0bGluZTogbm9uZTsgfVxcblxcbmlucHV0W3R5cGU9cmFuZ2VdICsgLnRodW1iIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMTBweDtcXG4gIGxlZnQ6IDA7XFxuICBib3JkZXI6IG5vbmU7XFxuICBoZWlnaHQ6IDA7XFxuICB3aWR0aDogMDtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyNmE2OWE7XFxuICBtYXJnaW4tbGVmdDogN3B4O1xcbiAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiA1MCUgNTAlO1xcbiAgdHJhbnNmb3JtLW9yaWdpbjogNTAlIDUwJTtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKTtcXG4gIHRyYW5zZm9ybTogcm90YXRlKC00NWRlZyk7IH1cXG5cXG5pbnB1dFt0eXBlPXJhbmdlXSArIC50aHVtYiAudmFsdWUge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB3aWR0aDogMzBweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGNvbG9yOiAjMjZhNjlhO1xcbiAgZm9udC1zaXplOiAwO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7XFxuICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7IH1cXG5cXG5pbnB1dFt0eXBlPXJhbmdlXSArIC50aHVtYi5hY3RpdmUge1xcbiAgYm9yZGVyLXJhZGl1czogNTAlIDUwJSA1MCUgMDsgfVxcblxcbmlucHV0W3R5cGU9cmFuZ2VdICsgLnRodW1iLmFjdGl2ZSAudmFsdWUge1xcbiAgY29sb3I6ICNmZmY7XFxuICBtYXJnaW4tbGVmdDogLTFweDtcXG4gIG1hcmdpbi10b3A6IDhweDtcXG4gIGZvbnQtc2l6ZTogMTBweDsgfVxcblxcbmlucHV0W3R5cGU9cmFuZ2VdIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsgfVxcblxcbmlucHV0W3R5cGU9cmFuZ2VdOjotd2Via2l0LXNsaWRlci1ydW5uYWJsZS10cmFjayB7XFxuICBoZWlnaHQ6IDNweDtcXG4gIGJhY2tncm91bmQ6ICNjMmMwYzI7XFxuICBib3JkZXI6IG5vbmU7IH1cXG5cXG5pbnB1dFt0eXBlPXJhbmdlXTo6LXdlYmtpdC1zbGlkZXItdGh1bWIge1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgaGVpZ2h0OiAxNHB4O1xcbiAgd2lkdGg6IDE0cHg7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjZhNjlhO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiA1MCUgNTAlO1xcbiAgdHJhbnNmb3JtLW9yaWdpbjogNTAlIDUwJTtcXG4gIG1hcmdpbjogLTVweCAwIDAgMDtcXG4gIHRyYW5zaXRpb246IC4zczsgfVxcblxcbmlucHV0W3R5cGU9cmFuZ2VdOmZvY3VzOjotd2Via2l0LXNsaWRlci1ydW5uYWJsZS10cmFjayB7XFxuICBiYWNrZ3JvdW5kOiAjY2NjOyB9XFxuXFxuaW5wdXRbdHlwZT1yYW5nZV0ge1xcbiAgYm9yZGVyOiAxcHggc29saWQgd2hpdGU7IH1cXG5cXG5pbnB1dFt0eXBlPXJhbmdlXTo6LW1vei1yYW5nZS10cmFjayB7XFxuICBoZWlnaHQ6IDNweDtcXG4gIGJhY2tncm91bmQ6ICNkZGQ7XFxuICBib3JkZXI6IG5vbmU7IH1cXG5cXG5pbnB1dFt0eXBlPXJhbmdlXTo6LW1vei1yYW5nZS10aHVtYiB7XFxuICBib3JkZXI6IG5vbmU7XFxuICBoZWlnaHQ6IDE0cHg7XFxuICB3aWR0aDogMTRweDtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIGJhY2tncm91bmQ6ICMyNmE2OWE7XFxuICBtYXJnaW4tdG9wOiAtNXB4OyB9XFxuXFxuaW5wdXRbdHlwZT1yYW5nZV06LW1vei1mb2N1c3Jpbmcge1xcbiAgb3V0bGluZTogMXB4IHNvbGlkICNmZmY7XFxuICBvdXRsaW5lLW9mZnNldDogLTFweDsgfVxcblxcbmlucHV0W3R5cGU9cmFuZ2VdOmZvY3VzOjotbW96LXJhbmdlLXRyYWNrIHtcXG4gIGJhY2tncm91bmQ6ICNjY2M7IH1cXG5cXG5pbnB1dFt0eXBlPXJhbmdlXTo6LW1zLXRyYWNrIHtcXG4gIGhlaWdodDogM3B4O1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLXdpZHRoOiA2cHggMDtcXG4gIGNvbG9yOiB0cmFuc3BhcmVudDsgfVxcblxcbmlucHV0W3R5cGU9cmFuZ2VdOjotbXMtZmlsbC1sb3dlciB7XFxuICBiYWNrZ3JvdW5kOiAjNzc3OyB9XFxuXFxuaW5wdXRbdHlwZT1yYW5nZV06Oi1tcy1maWxsLXVwcGVyIHtcXG4gIGJhY2tncm91bmQ6ICNkZGQ7IH1cXG5cXG5pbnB1dFt0eXBlPXJhbmdlXTo6LW1zLXRodW1iIHtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGhlaWdodDogMTRweDtcXG4gIHdpZHRoOiAxNHB4O1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgYmFja2dyb3VuZDogIzI2YTY5YTsgfVxcblxcbmlucHV0W3R5cGU9cmFuZ2VdOmZvY3VzOjotbXMtZmlsbC1sb3dlciB7XFxuICBiYWNrZ3JvdW5kOiAjODg4OyB9XFxuXFxuaW5wdXRbdHlwZT1yYW5nZV06Zm9jdXM6Oi1tcy1maWxsLXVwcGVyIHtcXG4gIGJhY2tncm91bmQ6ICNjY2M7IH1cXG5cXG4udGFibGUtb2YtY29udGVudHMuZml4ZWQge1xcbiAgcG9zaXRpb246IGZpeGVkOyB9XFxuXFxuLnRhYmxlLW9mLWNvbnRlbnRzIGxpIHtcXG4gIHBhZGRpbmc6IDJweCAwOyB9XFxuXFxuLnRhYmxlLW9mLWNvbnRlbnRzIGEge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgZm9udC13ZWlnaHQ6IDMwMDtcXG4gIGNvbG9yOiAjNzU3NTc1O1xcbiAgcGFkZGluZy1sZWZ0OiAyMHB4O1xcbiAgaGVpZ2h0OiAxLjVyZW07XFxuICBsaW5lLWhlaWdodDogMS41cmVtO1xcbiAgbGV0dGVyLXNwYWNpbmc6IC40O1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XFxuXFxuLnRhYmxlLW9mLWNvbnRlbnRzIGE6aG92ZXIge1xcbiAgY29sb3I6ICNhOGE4YTg7XFxuICBwYWRkaW5nLWxlZnQ6IDE5cHg7XFxuICBib3JkZXItbGVmdDogMXB4IHNvbGlkICNlZTZlNzM7IH1cXG5cXG4udGFibGUtb2YtY29udGVudHMgYS5hY3RpdmUge1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gIHBhZGRpbmctbGVmdDogMThweDtcXG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgI2VlNmU3MzsgfVxcblxcbi5zaWRlLW5hdiB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB3aWR0aDogMzAwcHg7XFxuICBsZWZ0OiAwO1xcbiAgdG9wOiAwO1xcbiAgbWFyZ2luOiAwO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTEwMCUpO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDAlKTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGhlaWdodDogY2FsYygxMDAlICsgNjBweCk7XFxuICBoZWlnaHQ6IC1tb3otY2FsYygxMDAlKTtcXG4gIHBhZGRpbmctYm90dG9tOiA2MHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIHotaW5kZXg6IDk5OTtcXG4gIG92ZXJmbG93LXk6IGF1dG87XFxuICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtO1xcbiAgLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XFxuICBiYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTA1JSk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTEwNSUpOyB9XFxuXFxuLnNpZGUtbmF2LnJpZ2h0LWFsaWduZWQge1xcbiAgcmlnaHQ6IDA7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgxMDUlKTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgxMDUlKTtcXG4gIGxlZnQ6IGF1dG87XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgxMDAlKTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgxMDAlKTsgfVxcblxcbi5zaWRlLW5hdiAuY29sbGFwc2libGUge1xcbiAgbWFyZ2luOiAwOyB9XFxuXFxuLnNpZGUtbmF2IGxpIHtcXG4gIGZsb2F0OiBub25lO1xcbiAgbGluZS1oZWlnaHQ6IDQ4cHg7IH1cXG5cXG4uc2lkZS1uYXYgbGkuYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4wNSk7IH1cXG5cXG4uc2lkZS1uYXYgbGkgPiBhIHtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuODcpO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBmb250LXdlaWdodDogNTAwO1xcbiAgaGVpZ2h0OiA0OHB4O1xcbiAgbGluZS1oZWlnaHQ6IDQ4cHg7XFxuICBwYWRkaW5nOiAwIDMycHg7IH1cXG5cXG4uc2lkZS1uYXYgbGkgPiBhOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4wNSk7IH1cXG5cXG4uc2lkZS1uYXYgbGkgPiBhLmJ0biwgLnNpZGUtbmF2IGxpID4gYS5idG4tbGFyZ2UsIC5zaWRlLW5hdiBsaSA+IGEuYnRuLWxhcmdlLCAuc2lkZS1uYXYgbGkgPiBhLmJ0bi1mbGF0LCAuc2lkZS1uYXYgbGkgPiBhLmJ0bi1mbG9hdGluZyB7XFxuICBtYXJnaW46IDEwcHggMTVweDsgfVxcblxcbi5zaWRlLW5hdiBsaSA+IGEuYnRuLCAuc2lkZS1uYXYgbGkgPiBhLmJ0bi1sYXJnZSwgLnNpZGUtbmF2IGxpID4gYS5idG4tbGFyZ2UsIC5zaWRlLW5hdiBsaSA+IGEuYnRuLWZsb2F0aW5nIHtcXG4gIGNvbG9yOiAjZmZmOyB9XFxuXFxuLnNpZGUtbmF2IGxpID4gYS5idG4tZmxhdCB7XFxuICBjb2xvcjogIzM0MzQzNDsgfVxcblxcbi5zaWRlLW5hdiBsaSA+IGEuYnRuOmhvdmVyLCAuc2lkZS1uYXYgbGkgPiBhLmJ0bi1sYXJnZTpob3ZlciwgLnNpZGUtbmF2IGxpID4gYS5idG4tbGFyZ2U6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzJiYmJhZDsgfVxcblxcbi5zaWRlLW5hdiBsaSA+IGEuYnRuLWZsb2F0aW5nOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyNmE2OWE7IH1cXG5cXG4uc2lkZS1uYXYgbGkgPiBhID4gaSwgLnNpZGUtbmF2IGxpID4gYSA+IFtjbGFzc149XFxcIm1kaS1cXFwiXSwgLnNpZGUtbmF2IGxpID4gYSBsaSA+IGEgPiBbY2xhc3MqPVxcXCJtZGktXFxcIl0sIC5zaWRlLW5hdiBsaSA+IGEgPiBpLm1hdGVyaWFsLWljb25zIHtcXG4gIGZsb2F0OiBsZWZ0O1xcbiAgaGVpZ2h0OiA0OHB4O1xcbiAgbGluZS1oZWlnaHQ6IDQ4cHg7XFxuICBtYXJnaW46IDAgMzJweCAwIDA7XFxuICB3aWR0aDogMjRweDtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNTQpOyB9XFxuXFxuLnNpZGUtbmF2IC5kaXZpZGVyIHtcXG4gIG1hcmdpbjogOHB4IDAgMCAwOyB9XFxuXFxuLnNpZGUtbmF2IC5zdWJoZWFkZXIge1xcbiAgY3Vyc29yOiBpbml0aWFsO1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjU0KTtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICBsaW5lLWhlaWdodDogNDhweDsgfVxcblxcbi5zaWRlLW5hdiAuc3ViaGVhZGVyOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyB9XFxuXFxuLnNpZGUtbmF2IC51c2VyVmlldyB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBwYWRkaW5nOiAzMnB4IDMycHggMDtcXG4gIG1hcmdpbi1ib3R0b206IDhweDsgfVxcblxcbi5zaWRlLW5hdiAudXNlclZpZXcgPiBhIHtcXG4gIGhlaWdodDogYXV0bztcXG4gIHBhZGRpbmc6IDA7IH1cXG5cXG4uc2lkZS1uYXYgLnVzZXJWaWV3ID4gYTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgfVxcblxcbi5zaWRlLW5hdiAudXNlclZpZXcgLmJhY2tncm91bmQge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIHotaW5kZXg6IC0xOyB9XFxuXFxuLnNpZGUtbmF2IC51c2VyVmlldyAuY2lyY2xlLCAuc2lkZS1uYXYgLnVzZXJWaWV3IC5uYW1lLCAuc2lkZS1uYXYgLnVzZXJWaWV3IC5lbWFpbCB7XFxuICBkaXNwbGF5OiBibG9jazsgfVxcblxcbi5zaWRlLW5hdiAudXNlclZpZXcgLmNpcmNsZSB7XFxuICBoZWlnaHQ6IDY0cHg7XFxuICB3aWR0aDogNjRweDsgfVxcblxcbi5zaWRlLW5hdiAudXNlclZpZXcgLm5hbWUsIC5zaWRlLW5hdiAudXNlclZpZXcgLmVtYWlsIHtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGxpbmUtaGVpZ2h0OiAyNHB4OyB9XFxuXFxuLnNpZGUtbmF2IC51c2VyVmlldyAubmFtZSB7XFxuICBtYXJnaW4tdG9wOiAxNnB4O1xcbiAgZm9udC13ZWlnaHQ6IDUwMDsgfVxcblxcbi5zaWRlLW5hdiAudXNlclZpZXcgLmVtYWlsIHtcXG4gIHBhZGRpbmctYm90dG9tOiAxNnB4O1xcbiAgZm9udC13ZWlnaHQ6IDQwMDsgfVxcblxcbi5kcmFnLXRhcmdldCB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTBweDtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIHotaW5kZXg6IDk5ODsgfVxcblxcbi5zaWRlLW5hdi5maXhlZCB7XFxuICBsZWZ0OiAwO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCk7XFxuICBwb3NpdGlvbjogZml4ZWQ7IH1cXG5cXG4uc2lkZS1uYXYuZml4ZWQucmlnaHQtYWxpZ25lZCB7XFxuICByaWdodDogMDtcXG4gIGxlZnQ6IGF1dG87IH1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDk5MnB4KSB7XFxuICAuc2lkZS1uYXYuZml4ZWQge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTA1JSk7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTA1JSk7IH1cXG4gIC5zaWRlLW5hdi5maXhlZC5yaWdodC1hbGlnbmVkIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMTA1JSk7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgxMDUlKTsgfVxcbiAgLnNpZGUtbmF2IGEge1xcbiAgICBwYWRkaW5nOiAwIDE2cHg7IH1cXG4gIC5zaWRlLW5hdiAudXNlclZpZXcge1xcbiAgICBwYWRkaW5nOiAxNnB4IDE2cHggMDsgfSB9XFxuXFxuLnNpZGUtbmF2IC5jb2xsYXBzaWJsZS1ib2R5ID4gdWw6bm90KC5jb2xsYXBzaWJsZSkgPiBsaS5hY3RpdmUsIC5zaWRlLW5hdi5maXhlZCAuY29sbGFwc2libGUtYm9keSA+IHVsOm5vdCguY29sbGFwc2libGUpID4gbGkuYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZTZlNzM7IH1cXG5cXG4uc2lkZS1uYXYgLmNvbGxhcHNpYmxlLWJvZHkgPiB1bDpub3QoLmNvbGxhcHNpYmxlKSA+IGxpLmFjdGl2ZSBhLCAuc2lkZS1uYXYuZml4ZWQgLmNvbGxhcHNpYmxlLWJvZHkgPiB1bDpub3QoLmNvbGxhcHNpYmxlKSA+IGxpLmFjdGl2ZSBhIHtcXG4gIGNvbG9yOiAjZmZmOyB9XFxuXFxuLnNpZGUtbmF2IC5jb2xsYXBzaWJsZS1ib2R5IHtcXG4gIHBhZGRpbmc6IDA7IH1cXG5cXG4jc2lkZW5hdi1vdmVybGF5IHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICByaWdodDogMDtcXG4gIGhlaWdodDogMTIwdmg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNSk7XFxuICB6LWluZGV4OiA5OTc7XFxuICB3aWxsLWNoYW5nZTogb3BhY2l0eTsgfVxcblxcbi5wcmVsb2FkZXItd3JhcHBlciB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogNTBweDtcXG4gIGhlaWdodDogNTBweDsgfVxcblxcbi5wcmVsb2FkZXItd3JhcHBlci5zbWFsbCB7XFxuICB3aWR0aDogMzZweDtcXG4gIGhlaWdodDogMzZweDsgfVxcblxcbi5wcmVsb2FkZXItd3JhcHBlci5iaWcge1xcbiAgd2lkdGg6IDY0cHg7XFxuICBoZWlnaHQ6IDY0cHg7IH1cXG5cXG4ucHJlbG9hZGVyLXdyYXBwZXIuYWN0aXZlIHtcXG4gIC13ZWJraXQtYW5pbWF0aW9uOiBjb250YWluZXItcm90YXRlIDE1NjhtcyBsaW5lYXIgaW5maW5pdGU7XFxuICBhbmltYXRpb246IGNvbnRhaW5lci1yb3RhdGUgMTU2OG1zIGxpbmVhciBpbmZpbml0ZTsgfVxcblxcbkAtd2Via2l0LWtleWZyYW1lcyBjb250YWluZXItcm90YXRlIHtcXG4gIHRvIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOyB9IH1cXG5cXG5Aa2V5ZnJhbWVzIGNvbnRhaW5lci1yb3RhdGUge1xcbiAgdG8ge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7IH0gfVxcblxcbi5zcGlubmVyLWxheWVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgb3BhY2l0eTogMDtcXG4gIGJvcmRlci1jb2xvcjogIzI2YTY5YTsgfVxcblxcbi5zcGlubmVyLWJsdWUsIC5zcGlubmVyLWJsdWUtb25seSB7XFxuICBib3JkZXItY29sb3I6ICM0Mjg1ZjQ7IH1cXG5cXG4uc3Bpbm5lci1yZWQsIC5zcGlubmVyLXJlZC1vbmx5IHtcXG4gIGJvcmRlci1jb2xvcjogI2RiNDQzNzsgfVxcblxcbi5zcGlubmVyLXllbGxvdywgLnNwaW5uZXIteWVsbG93LW9ubHkge1xcbiAgYm9yZGVyLWNvbG9yOiAjZjRiNDAwOyB9XFxuXFxuLnNwaW5uZXItZ3JlZW4sIC5zcGlubmVyLWdyZWVuLW9ubHkge1xcbiAgYm9yZGVyLWNvbG9yOiAjMGY5ZDU4OyB9XFxuXFxuLmFjdGl2ZSAuc3Bpbm5lci1sYXllci5zcGlubmVyLWJsdWUge1xcbiAgLXdlYmtpdC1hbmltYXRpb246IGZpbGwtdW5maWxsLXJvdGF0ZSA1MzMybXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKSBpbmZpbml0ZSBib3RoLCBibHVlLWZhZGUtaW4tb3V0IDUzMzJtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpIGluZmluaXRlIGJvdGg7XFxuICBhbmltYXRpb246IGZpbGwtdW5maWxsLXJvdGF0ZSA1MzMybXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKSBpbmZpbml0ZSBib3RoLCBibHVlLWZhZGUtaW4tb3V0IDUzMzJtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpIGluZmluaXRlIGJvdGg7IH1cXG5cXG4uYWN0aXZlIC5zcGlubmVyLWxheWVyLnNwaW5uZXItcmVkIHtcXG4gIC13ZWJraXQtYW5pbWF0aW9uOiBmaWxsLXVuZmlsbC1yb3RhdGUgNTMzMm1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSkgaW5maW5pdGUgYm90aCwgcmVkLWZhZGUtaW4tb3V0IDUzMzJtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpIGluZmluaXRlIGJvdGg7XFxuICBhbmltYXRpb246IGZpbGwtdW5maWxsLXJvdGF0ZSA1MzMybXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKSBpbmZpbml0ZSBib3RoLCByZWQtZmFkZS1pbi1vdXQgNTMzMm1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSkgaW5maW5pdGUgYm90aDsgfVxcblxcbi5hY3RpdmUgLnNwaW5uZXItbGF5ZXIuc3Bpbm5lci15ZWxsb3cge1xcbiAgLXdlYmtpdC1hbmltYXRpb246IGZpbGwtdW5maWxsLXJvdGF0ZSA1MzMybXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKSBpbmZpbml0ZSBib3RoLCB5ZWxsb3ctZmFkZS1pbi1vdXQgNTMzMm1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSkgaW5maW5pdGUgYm90aDtcXG4gIGFuaW1hdGlvbjogZmlsbC11bmZpbGwtcm90YXRlIDUzMzJtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpIGluZmluaXRlIGJvdGgsIHllbGxvdy1mYWRlLWluLW91dCA1MzMybXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKSBpbmZpbml0ZSBib3RoOyB9XFxuXFxuLmFjdGl2ZSAuc3Bpbm5lci1sYXllci5zcGlubmVyLWdyZWVuIHtcXG4gIC13ZWJraXQtYW5pbWF0aW9uOiBmaWxsLXVuZmlsbC1yb3RhdGUgNTMzMm1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSkgaW5maW5pdGUgYm90aCwgZ3JlZW4tZmFkZS1pbi1vdXQgNTMzMm1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSkgaW5maW5pdGUgYm90aDtcXG4gIGFuaW1hdGlvbjogZmlsbC11bmZpbGwtcm90YXRlIDUzMzJtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpIGluZmluaXRlIGJvdGgsIGdyZWVuLWZhZGUtaW4tb3V0IDUzMzJtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpIGluZmluaXRlIGJvdGg7IH1cXG5cXG4uYWN0aXZlIC5zcGlubmVyLWxheWVyLCAuYWN0aXZlIC5zcGlubmVyLWxheWVyLnNwaW5uZXItYmx1ZS1vbmx5LCAuYWN0aXZlIC5zcGlubmVyLWxheWVyLnNwaW5uZXItcmVkLW9ubHksIC5hY3RpdmUgLnNwaW5uZXItbGF5ZXIuc3Bpbm5lci15ZWxsb3ctb25seSwgLmFjdGl2ZSAuc3Bpbm5lci1sYXllci5zcGlubmVyLWdyZWVuLW9ubHkge1xcbiAgb3BhY2l0eTogMTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uOiBmaWxsLXVuZmlsbC1yb3RhdGUgNTMzMm1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSkgaW5maW5pdGUgYm90aDtcXG4gIGFuaW1hdGlvbjogZmlsbC11bmZpbGwtcm90YXRlIDUzMzJtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpIGluZmluaXRlIGJvdGg7IH1cXG5cXG5ALXdlYmtpdC1rZXlmcmFtZXMgZmlsbC11bmZpbGwtcm90YXRlIHtcXG4gIDEyLjUlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgxMzVkZWcpOyB9XFxuICAyNSUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDI3MGRlZyk7IH1cXG4gIDM3LjUlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSg0MDVkZWcpOyB9XFxuICA1MCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDU0MGRlZyk7IH1cXG4gIDYyLjUlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSg2NzVkZWcpOyB9XFxuICA3NSUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDgxMGRlZyk7IH1cXG4gIDg3LjUlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSg5NDVkZWcpOyB9XFxuICB0byB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMTA4MGRlZyk7IH0gfVxcblxcbkBrZXlmcmFtZXMgZmlsbC11bmZpbGwtcm90YXRlIHtcXG4gIDEyLjUlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgxMzVkZWcpO1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxMzVkZWcpOyB9XFxuICAyNSUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDI3MGRlZyk7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDI3MGRlZyk7IH1cXG4gIDM3LjUlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSg0MDVkZWcpO1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSg0MDVkZWcpOyB9XFxuICA1MCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDU0MGRlZyk7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDU0MGRlZyk7IH1cXG4gIDYyLjUlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSg2NzVkZWcpO1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSg2NzVkZWcpOyB9XFxuICA3NSUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDgxMGRlZyk7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDgxMGRlZyk7IH1cXG4gIDg3LjUlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSg5NDVkZWcpO1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5NDVkZWcpOyB9XFxuICB0byB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMTA4MGRlZyk7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDEwODBkZWcpOyB9IH1cXG5cXG5ALXdlYmtpdC1rZXlmcmFtZXMgYmx1ZS1mYWRlLWluLW91dCB7XFxuICBmcm9tIHtcXG4gICAgb3BhY2l0eTogMTsgfVxcbiAgMjUlIHtcXG4gICAgb3BhY2l0eTogMTsgfVxcbiAgMjYlIHtcXG4gICAgb3BhY2l0eTogMDsgfVxcbiAgODklIHtcXG4gICAgb3BhY2l0eTogMDsgfVxcbiAgOTAlIHtcXG4gICAgb3BhY2l0eTogMTsgfVxcbiAgMTAwJSB7XFxuICAgIG9wYWNpdHk6IDE7IH0gfVxcblxcbkBrZXlmcmFtZXMgYmx1ZS1mYWRlLWluLW91dCB7XFxuICBmcm9tIHtcXG4gICAgb3BhY2l0eTogMTsgfVxcbiAgMjUlIHtcXG4gICAgb3BhY2l0eTogMTsgfVxcbiAgMjYlIHtcXG4gICAgb3BhY2l0eTogMDsgfVxcbiAgODklIHtcXG4gICAgb3BhY2l0eTogMDsgfVxcbiAgOTAlIHtcXG4gICAgb3BhY2l0eTogMTsgfVxcbiAgMTAwJSB7XFxuICAgIG9wYWNpdHk6IDE7IH0gfVxcblxcbkAtd2Via2l0LWtleWZyYW1lcyByZWQtZmFkZS1pbi1vdXQge1xcbiAgZnJvbSB7XFxuICAgIG9wYWNpdHk6IDA7IH1cXG4gIDE1JSB7XFxuICAgIG9wYWNpdHk6IDA7IH1cXG4gIDI1JSB7XFxuICAgIG9wYWNpdHk6IDE7IH1cXG4gIDUwJSB7XFxuICAgIG9wYWNpdHk6IDE7IH1cXG4gIDUxJSB7XFxuICAgIG9wYWNpdHk6IDA7IH0gfVxcblxcbkBrZXlmcmFtZXMgcmVkLWZhZGUtaW4tb3V0IHtcXG4gIGZyb20ge1xcbiAgICBvcGFjaXR5OiAwOyB9XFxuICAxNSUge1xcbiAgICBvcGFjaXR5OiAwOyB9XFxuICAyNSUge1xcbiAgICBvcGFjaXR5OiAxOyB9XFxuICA1MCUge1xcbiAgICBvcGFjaXR5OiAxOyB9XFxuICA1MSUge1xcbiAgICBvcGFjaXR5OiAwOyB9IH1cXG5cXG5ALXdlYmtpdC1rZXlmcmFtZXMgeWVsbG93LWZhZGUtaW4tb3V0IHtcXG4gIGZyb20ge1xcbiAgICBvcGFjaXR5OiAwOyB9XFxuICA0MCUge1xcbiAgICBvcGFjaXR5OiAwOyB9XFxuICA1MCUge1xcbiAgICBvcGFjaXR5OiAxOyB9XFxuICA3NSUge1xcbiAgICBvcGFjaXR5OiAxOyB9XFxuICA3NiUge1xcbiAgICBvcGFjaXR5OiAwOyB9IH1cXG5cXG5Aa2V5ZnJhbWVzIHllbGxvdy1mYWRlLWluLW91dCB7XFxuICBmcm9tIHtcXG4gICAgb3BhY2l0eTogMDsgfVxcbiAgNDAlIHtcXG4gICAgb3BhY2l0eTogMDsgfVxcbiAgNTAlIHtcXG4gICAgb3BhY2l0eTogMTsgfVxcbiAgNzUlIHtcXG4gICAgb3BhY2l0eTogMTsgfVxcbiAgNzYlIHtcXG4gICAgb3BhY2l0eTogMDsgfSB9XFxuXFxuQC13ZWJraXQta2V5ZnJhbWVzIGdyZWVuLWZhZGUtaW4tb3V0IHtcXG4gIGZyb20ge1xcbiAgICBvcGFjaXR5OiAwOyB9XFxuICA2NSUge1xcbiAgICBvcGFjaXR5OiAwOyB9XFxuICA3NSUge1xcbiAgICBvcGFjaXR5OiAxOyB9XFxuICA5MCUge1xcbiAgICBvcGFjaXR5OiAxOyB9XFxuICAxMDAlIHtcXG4gICAgb3BhY2l0eTogMDsgfSB9XFxuXFxuQGtleWZyYW1lcyBncmVlbi1mYWRlLWluLW91dCB7XFxuICBmcm9tIHtcXG4gICAgb3BhY2l0eTogMDsgfVxcbiAgNjUlIHtcXG4gICAgb3BhY2l0eTogMDsgfVxcbiAgNzUlIHtcXG4gICAgb3BhY2l0eTogMTsgfVxcbiAgOTAlIHtcXG4gICAgb3BhY2l0eTogMTsgfVxcbiAgMTAwJSB7XFxuICAgIG9wYWNpdHk6IDA7IH0gfVxcblxcbi5nYXAtcGF0Y2gge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogNDUlO1xcbiAgd2lkdGg6IDEwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBib3JkZXItY29sb3I6IGluaGVyaXQ7IH1cXG5cXG4uZ2FwLXBhdGNoIC5jaXJjbGUge1xcbiAgd2lkdGg6IDEwMDAlO1xcbiAgbGVmdDogLTQ1MCU7IH1cXG5cXG4uY2lyY2xlLWNsaXBwZXIge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgd2lkdGg6IDUwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBib3JkZXItY29sb3I6IGluaGVyaXQ7IH1cXG5cXG4uY2lyY2xlLWNsaXBwZXIgLmNpcmNsZSB7XFxuICB3aWR0aDogMjAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGJvcmRlci13aWR0aDogM3B4O1xcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcXG4gIGJvcmRlci1jb2xvcjogaW5oZXJpdDtcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICAtd2Via2l0LWFuaW1hdGlvbjogbm9uZTtcXG4gIGFuaW1hdGlvbjogbm9uZTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwOyB9XFxuXFxuLmNpcmNsZS1jbGlwcGVyLmxlZnQgLmNpcmNsZSB7XFxuICBsZWZ0OiAwO1xcbiAgYm9yZGVyLXJpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50O1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgxMjlkZWcpO1xcbiAgdHJhbnNmb3JtOiByb3RhdGUoMTI5ZGVnKTsgfVxcblxcbi5jaXJjbGUtY2xpcHBlci5yaWdodCAuY2lyY2xlIHtcXG4gIGxlZnQ6IC0xMDAlO1xcbiAgYm9yZGVyLWxlZnQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKC0xMjlkZWcpO1xcbiAgdHJhbnNmb3JtOiByb3RhdGUoLTEyOWRlZyk7IH1cXG5cXG4uYWN0aXZlIC5jaXJjbGUtY2xpcHBlci5sZWZ0IC5jaXJjbGUge1xcbiAgLXdlYmtpdC1hbmltYXRpb246IGxlZnQtc3BpbiAxMzMzbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKSBpbmZpbml0ZSBib3RoO1xcbiAgYW5pbWF0aW9uOiBsZWZ0LXNwaW4gMTMzM21zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSkgaW5maW5pdGUgYm90aDsgfVxcblxcbi5hY3RpdmUgLmNpcmNsZS1jbGlwcGVyLnJpZ2h0IC5jaXJjbGUge1xcbiAgLXdlYmtpdC1hbmltYXRpb246IHJpZ2h0LXNwaW4gMTMzM21zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSkgaW5maW5pdGUgYm90aDtcXG4gIGFuaW1hdGlvbjogcmlnaHQtc3BpbiAxMzMzbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKSBpbmZpbml0ZSBib3RoOyB9XFxuXFxuQC13ZWJraXQta2V5ZnJhbWVzIGxlZnQtc3BpbiB7XFxuICBmcm9tIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgxMzBkZWcpOyB9XFxuICA1MCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKC01ZGVnKTsgfVxcbiAgdG8ge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDEzMGRlZyk7IH0gfVxcblxcbkBrZXlmcmFtZXMgbGVmdC1zcGluIHtcXG4gIGZyb20ge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDEzMGRlZyk7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDEzMGRlZyk7IH1cXG4gIDUwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoLTVkZWcpO1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtNWRlZyk7IH1cXG4gIHRvIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgxMzBkZWcpO1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxMzBkZWcpOyB9IH1cXG5cXG5ALXdlYmtpdC1rZXlmcmFtZXMgcmlnaHQtc3BpbiB7XFxuICBmcm9tIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgtMTMwZGVnKTsgfVxcbiAgNTAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSg1ZGVnKTsgfVxcbiAgdG8ge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKC0xMzBkZWcpOyB9IH1cXG5cXG5Aa2V5ZnJhbWVzIHJpZ2h0LXNwaW4ge1xcbiAgZnJvbSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoLTEzMGRlZyk7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKC0xMzBkZWcpOyB9XFxuICA1MCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDVkZWcpO1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSg1ZGVnKTsgfVxcbiAgdG8ge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKC0xMzBkZWcpO1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtMTMwZGVnKTsgfSB9XFxuXFxuI3NwaW5uZXJDb250YWluZXIuY29vbGRvd24ge1xcbiAgLXdlYmtpdC1hbmltYXRpb246IGNvbnRhaW5lci1yb3RhdGUgMTU2OG1zIGxpbmVhciBpbmZpbml0ZSwgZmFkZS1vdXQgNDAwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTtcXG4gIGFuaW1hdGlvbjogY29udGFpbmVyLXJvdGF0ZSAxNTY4bXMgbGluZWFyIGluZmluaXRlLCBmYWRlLW91dCA0MDBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpOyB9XFxuXFxuQC13ZWJraXQta2V5ZnJhbWVzIGZhZGUtb3V0IHtcXG4gIGZyb20ge1xcbiAgICBvcGFjaXR5OiAxOyB9XFxuICB0byB7XFxuICAgIG9wYWNpdHk6IDA7IH0gfVxcblxcbkBrZXlmcmFtZXMgZmFkZS1vdXQge1xcbiAgZnJvbSB7XFxuICAgIG9wYWNpdHk6IDE7IH1cXG4gIHRvIHtcXG4gICAgb3BhY2l0eTogMDsgfSB9XFxuXFxuLnNsaWRlciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBoZWlnaHQ6IDQwMHB4O1xcbiAgd2lkdGg6IDEwMCU7IH1cXG5cXG4uc2xpZGVyLmZ1bGxzY3JlZW4ge1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBib3R0b206IDA7IH1cXG5cXG4uc2xpZGVyLmZ1bGxzY3JlZW4gdWwuc2xpZGVzIHtcXG4gIGhlaWdodDogMTAwJTsgfVxcblxcbi5zbGlkZXIuZnVsbHNjcmVlbiB1bC5pbmRpY2F0b3JzIHtcXG4gIHotaW5kZXg6IDI7XFxuICBib3R0b206IDMwcHg7IH1cXG5cXG4uc2xpZGVyIC5zbGlkZXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzllOWU5ZTtcXG4gIG1hcmdpbjogMDtcXG4gIGhlaWdodDogNDAwcHg7IH1cXG5cXG4uc2xpZGVyIC5zbGlkZXMgbGkge1xcbiAgb3BhY2l0eTogMDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICB6LWluZGV4OiAxO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IGluaGVyaXQ7XFxuICBvdmVyZmxvdzogaGlkZGVuOyB9XFxuXFxuLnNsaWRlciAuc2xpZGVzIGxpIGltZyB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XFxuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7IH1cXG5cXG4uc2xpZGVyIC5zbGlkZXMgbGkgLmNhcHRpb24ge1xcbiAgY29sb3I6ICNmZmY7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDE1JTtcXG4gIGxlZnQ6IDE1JTtcXG4gIHdpZHRoOiA3MCU7XFxuICBvcGFjaXR5OiAwOyB9XFxuXFxuLnNsaWRlciAuc2xpZGVzIGxpIC5jYXB0aW9uIHAge1xcbiAgY29sb3I6ICNlMGUwZTA7IH1cXG5cXG4uc2xpZGVyIC5zbGlkZXMgbGkuYWN0aXZlIHtcXG4gIHotaW5kZXg6IDI7IH1cXG5cXG4uc2xpZGVyIC5pbmRpY2F0b3JzIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGxlZnQ6IDA7XFxuICByaWdodDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIG1hcmdpbjogMDsgfVxcblxcbi5zbGlkZXIgLmluZGljYXRvcnMgLmluZGljYXRvci1pdGVtIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGhlaWdodDogMTZweDtcXG4gIHdpZHRoOiAxNnB4O1xcbiAgbWFyZ2luOiAwIDEycHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTBlMGUwO1xcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAuM3M7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7IH1cXG5cXG4uc2xpZGVyIC5pbmRpY2F0b3JzIC5pbmRpY2F0b3ItaXRlbS5hY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzRDQUY1MDsgfVxcblxcbi5jYXJvdXNlbCB7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDQwMHB4O1xcbiAgLXdlYmtpdC1wZXJzcGVjdGl2ZTogNTAwcHg7XFxuICBwZXJzcGVjdGl2ZTogNTAwcHg7XFxuICAtd2Via2l0LXRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2Q7XFxuICB0cmFuc2Zvcm0tc3R5bGU6IHByZXNlcnZlLTNkO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiAwJSA1MCU7XFxuICB0cmFuc2Zvcm0tb3JpZ2luOiAwJSA1MCU7IH1cXG5cXG4uY2Fyb3VzZWwuY2Fyb3VzZWwtc2xpZGVyIHtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICBoZWlnaHQ6IDA7IH1cXG5cXG4uY2Fyb3VzZWwuY2Fyb3VzZWwtc2xpZGVyIC5jYXJvdXNlbC1maXhlZC1pdGVtIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGxlZnQ6IDA7XFxuICByaWdodDogMDtcXG4gIGJvdHRvbTogMjBweDtcXG4gIHotaW5kZXg6IDE7IH1cXG5cXG4uY2Fyb3VzZWwuY2Fyb3VzZWwtc2xpZGVyIC5jYXJvdXNlbC1maXhlZC1pdGVtLndpdGgtaW5kaWNhdG9ycyB7XFxuICBib3R0b206IDY4cHg7IH1cXG5cXG4uY2Fyb3VzZWwuY2Fyb3VzZWwtc2xpZGVyIC5jYXJvdXNlbC1pdGVtIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgbWluLWhlaWdodDogNDAwcHg7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwOyB9XFxuXFxuLmNhcm91c2VsLmNhcm91c2VsLXNsaWRlciAuY2Fyb3VzZWwtaXRlbSBoMiB7XFxuICBmb250LXNpemU6IDI0cHg7XFxuICBmb250LXdlaWdodDogNTAwO1xcbiAgbGluZS1oZWlnaHQ6IDMycHg7IH1cXG5cXG4uY2Fyb3VzZWwuY2Fyb3VzZWwtc2xpZGVyIC5jYXJvdXNlbC1pdGVtIHAge1xcbiAgZm9udC1zaXplOiAxNXB4OyB9XFxuXFxuLmNhcm91c2VsIC5jYXJvdXNlbC1pdGVtIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICB3aWR0aDogMjAwcHg7XFxuICBoZWlnaHQ6IDIwMHB4O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDsgfVxcblxcbi5jYXJvdXNlbCAuY2Fyb3VzZWwtaXRlbSA+IGltZyB7XFxuICB3aWR0aDogMTAwJTsgfVxcblxcbi5jYXJvdXNlbCAuaW5kaWNhdG9ycyB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBib3R0b206IDA7XFxuICBtYXJnaW46IDA7IH1cXG5cXG4uY2Fyb3VzZWwgLmluZGljYXRvcnMgLmluZGljYXRvci1pdGVtIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGhlaWdodDogOHB4O1xcbiAgd2lkdGg6IDhweDtcXG4gIG1hcmdpbjogMjRweCA0cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSk7XFxuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIC4zcztcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTsgfVxcblxcbi5jYXJvdXNlbCAuaW5kaWNhdG9ycyAuaW5kaWNhdG9yLWl0ZW0uYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7IH1cXG5cXG4uY2Fyb3VzZWwuc2Nyb2xsaW5nIC5jYXJvdXNlbC1pdGVtIC5tYXRlcmlhbGJveGVkLCAuY2Fyb3VzZWwgLmNhcm91c2VsLWl0ZW06bm90KC5hY3RpdmUpIC5tYXRlcmlhbGJveGVkIHtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lOyB9XFxuXFxuLnRhcC10YXJnZXQtd3JhcHBlciB7XFxuICB3aWR0aDogODAwcHg7XFxuICBoZWlnaHQ6IDgwMHB4O1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgei1pbmRleDogMTAwMDtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXG4gIHRyYW5zaXRpb246IHZpc2liaWxpdHkgMHMgLjNzOyB9XFxuXFxuLnRhcC10YXJnZXQtd3JhcHBlci5vcGVuIHtcXG4gIHZpc2liaWxpdHk6IHZpc2libGU7XFxuICB0cmFuc2l0aW9uOiB2aXNpYmlsaXR5IDBzOyB9XFxuXFxuLnRhcC10YXJnZXQtd3JhcHBlci5vcGVuIC50YXAtdGFyZ2V0IHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxKTtcXG4gIHRyYW5zZm9ybTogc2NhbGUoMSk7XFxuICBvcGFjaXR5OiAuOTU7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgY3ViaWMtYmV6aWVyKDAuNDIsIDAsIDAuNTgsIDEpLCAtd2Via2l0LXRyYW5zZm9ybSAwLjNzIGN1YmljLWJlemllcigwLjQyLCAwLCAwLjU4LCAxKTtcXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzIGN1YmljLWJlemllcigwLjQyLCAwLCAwLjU4LCAxKSwgb3BhY2l0eSAwLjNzIGN1YmljLWJlemllcigwLjQyLCAwLCAwLjU4LCAxKTtcXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzIGN1YmljLWJlemllcigwLjQyLCAwLCAwLjU4LCAxKSwgb3BhY2l0eSAwLjNzIGN1YmljLWJlemllcigwLjQyLCAwLCAwLjU4LCAxKSwgLXdlYmtpdC10cmFuc2Zvcm0gMC4zcyBjdWJpYy1iZXppZXIoMC40MiwgMCwgMC41OCwgMSk7IH1cXG5cXG4udGFwLXRhcmdldC13cmFwcGVyLm9wZW4gLnRhcC10YXJnZXQtd2F2ZTo6YmVmb3JlIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxKTtcXG4gIHRyYW5zZm9ybTogc2NhbGUoMSk7IH1cXG5cXG4udGFwLXRhcmdldC13cmFwcGVyLm9wZW4gLnRhcC10YXJnZXQtd2F2ZTo6YWZ0ZXIge1xcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uOiBwdWxzZS1hbmltYXRpb24gMXMgY3ViaWMtYmV6aWVyKDAuMjQsIDAsIDAuMzgsIDEpIGluZmluaXRlO1xcbiAgYW5pbWF0aW9uOiBwdWxzZS1hbmltYXRpb24gMXMgY3ViaWMtYmV6aWVyKDAuMjQsIDAsIDAuMzgsIDEpIGluZmluaXRlO1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAuM3MsIHZpc2liaWxpdHkgMHMgMXMsIC13ZWJraXQtdHJhbnNmb3JtIC4zcztcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgLjNzLCB0cmFuc2Zvcm0gLjNzLCB2aXNpYmlsaXR5IDBzIDFzO1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAuM3MsIHRyYW5zZm9ybSAuM3MsIHZpc2liaWxpdHkgMHMgMXMsIC13ZWJraXQtdHJhbnNmb3JtIC4zczsgfVxcblxcbi50YXAtdGFyZ2V0IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZTZlNzM7XFxuICBib3gtc2hhZG93OiAwIDIwcHggMjBweCAwIHJnYmEoMCwgMCwgMCwgMC4xNCksIDAgMTBweCA1MHB4IDAgcmdiYSgwLCAwLCAwLCAwLjEyKSwgMCAzMHB4IDEwcHggLTIwcHggcmdiYSgwLCAwLCAwLCAwLjIpO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBvcGFjaXR5OiAwO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDApO1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgwKTtcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC4zcyBjdWJpYy1iZXppZXIoMC40MiwgMCwgMC41OCwgMSksIC13ZWJraXQtdHJhbnNmb3JtIDAuM3MgY3ViaWMtYmV6aWVyKDAuNDIsIDAsIDAuNTgsIDEpO1xcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuM3MgY3ViaWMtYmV6aWVyKDAuNDIsIDAsIDAuNTgsIDEpLCBvcGFjaXR5IDAuM3MgY3ViaWMtYmV6aWVyKDAuNDIsIDAsIDAuNTgsIDEpO1xcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuM3MgY3ViaWMtYmV6aWVyKDAuNDIsIDAsIDAuNTgsIDEpLCBvcGFjaXR5IDAuM3MgY3ViaWMtYmV6aWVyKDAuNDIsIDAsIDAuNTgsIDEpLCAtd2Via2l0LXRyYW5zZm9ybSAwLjNzIGN1YmljLWJlemllcigwLjQyLCAwLCAwLjU4LCAxKTsgfVxcblxcbi50YXAtdGFyZ2V0LWNvbnRlbnQge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogdGFibGUtY2VsbDsgfVxcblxcbi50YXAtdGFyZ2V0LXdhdmUge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgei1pbmRleDogMTAwMDE7IH1cXG5cXG4udGFwLXRhcmdldC13YXZlOjpiZWZvcmUsIC50YXAtdGFyZ2V0LXdhdmU6OmFmdGVyIHtcXG4gIGNvbnRlbnQ6ICcnO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7IH1cXG5cXG4udGFwLXRhcmdldC13YXZlOjpiZWZvcmUge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDApO1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgwKTtcXG4gIHRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIC4zcztcXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAuM3M7XFxuICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gLjNzLCAtd2Via2l0LXRyYW5zZm9ybSAuM3M7IH1cXG5cXG4udGFwLXRhcmdldC13YXZlOjphZnRlciB7XFxuICB2aXNpYmlsaXR5OiBoaWRkZW47XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IC4zcywgdmlzaWJpbGl0eSAwcywgLXdlYmtpdC10cmFuc2Zvcm0gLjNzO1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAuM3MsIHRyYW5zZm9ybSAuM3MsIHZpc2liaWxpdHkgMHM7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IC4zcywgdHJhbnNmb3JtIC4zcywgdmlzaWJpbGl0eSAwcywgLXdlYmtpdC10cmFuc2Zvcm0gLjNzO1xcbiAgei1pbmRleDogLTE7IH1cXG5cXG4udGFwLXRhcmdldC1vcmlnaW4ge1xcbiAgdG9wOiA1MCU7XFxuICBsZWZ0OiA1MCU7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxuICB6LWluZGV4OiAxMDAwMjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZSAhaW1wb3J0YW50OyB9XFxuXFxuLnRhcC10YXJnZXQtb3JpZ2luOm5vdCguYnRuKTpub3QoLmJ0bi1sYXJnZSksIC50YXAtdGFyZ2V0LW9yaWdpbjpub3QoLmJ0bik6bm90KC5idG4tbGFyZ2UpOmhvdmVyIHtcXG4gIGJhY2tncm91bmQ6IG5vbmU7IH1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDYwMHB4KSB7XFxuICAudGFwLXRhcmdldCwgLnRhcC10YXJnZXQtd3JhcHBlciB7XFxuICAgIHdpZHRoOiA2MDBweDtcXG4gICAgaGVpZ2h0OiA2MDBweDsgfSB9XFxuXFxuLnB1bHNlIHtcXG4gIG92ZXJmbG93OiBpbml0aWFsO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlOyB9XFxuXFxuLnB1bHNlOjpiZWZvcmUge1xcbiAgY29udGVudDogJyc7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XFxuICBib3JkZXItcmFkaXVzOiBpbmhlcml0O1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAuM3MsIC13ZWJraXQtdHJhbnNmb3JtIC4zcztcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgLjNzLCB0cmFuc2Zvcm0gLjNzO1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAuM3MsIHRyYW5zZm9ybSAuM3MsIC13ZWJraXQtdHJhbnNmb3JtIC4zcztcXG4gIC13ZWJraXQtYW5pbWF0aW9uOiBwdWxzZS1hbmltYXRpb24gMXMgY3ViaWMtYmV6aWVyKDAuMjQsIDAsIDAuMzgsIDEpIGluZmluaXRlO1xcbiAgYW5pbWF0aW9uOiBwdWxzZS1hbmltYXRpb24gMXMgY3ViaWMtYmV6aWVyKDAuMjQsIDAsIDAuMzgsIDEpIGluZmluaXRlO1xcbiAgei1pbmRleDogLTE7IH1cXG5cXG5ALXdlYmtpdC1rZXlmcmFtZXMgcHVsc2UtYW5pbWF0aW9uIHtcXG4gIDAlIHtcXG4gICAgb3BhY2l0eTogMTtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEpO1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpOyB9XFxuICA1MCUge1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMS41KTtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxLjUpOyB9XFxuICAxMDAlIHtcXG4gICAgb3BhY2l0eTogMDtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEuNSk7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMS41KTsgfSB9XFxuXFxuQGtleWZyYW1lcyBwdWxzZS1hbmltYXRpb24ge1xcbiAgMCUge1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSk7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7IH1cXG4gIDUwJSB7XFxuICAgIG9wYWNpdHk6IDA7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLjUpO1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEuNSk7IH1cXG4gIDEwMCUge1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMS41KTtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxLjUpOyB9IH1cXG5cXG4ucGlja2VyIHtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxuICBsaW5lLWhlaWdodDogMS4yO1xcbiAgY29sb3I6ICMwMDAwMDA7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB6LWluZGV4OiAxMDAwMDtcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7IH1cXG5cXG4ucGlja2VyX19pbnB1dCB7XFxuICBjdXJzb3I6IGRlZmF1bHQ7IH1cXG5cXG4ucGlja2VyX19pbnB1dC5waWNrZXJfX2lucHV0LS1hY3RpdmUge1xcbiAgYm9yZGVyLWNvbG9yOiAjMDA4OWVjOyB9XFxuXFxuLnBpY2tlcl9faG9sZGVyIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgb3ZlcmZsb3cteTogYXV0bztcXG4gIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDsgfVxcblxcbi8qIVxcbiAqIERlZmF1bHQgbW9iaWxlLWZpcnN0LCByZXNwb25zaXZlIHN0eWxpbmcgZm9yIHBpY2thZGF0ZS5qc1xcbiAqIERlbW86IGh0dHA6Ly9hbXN1bC5naXRodWIuaW8vcGlja2FkYXRlLmpzXFxuICovXFxuLnBpY2tlcl9faG9sZGVyLCAucGlja2VyX19mcmFtZSB7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IDA7XFxuICB0b3A6IDEwMCU7IH1cXG5cXG4ucGlja2VyX19ob2xkZXIge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAwLjE1cyBlYXNlLW91dCwgdG9wIDBzIDAuMTVzO1xcbiAgLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47IH1cXG5cXG4ucGlja2VyX19mcmFtZSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBtYXJnaW46IDAgYXV0bztcXG4gIG1pbi13aWR0aDogMjU2cHg7XFxuICB3aWR0aDogMzAwcHg7XFxuICBtYXgtaGVpZ2h0OiAzNTBweDtcXG4gIC1tcy1maWx0ZXI6IFxcXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQWxwaGEoT3BhY2l0eT0wKVxcXCI7XFxuICBmaWx0ZXI6IGFscGhhKG9wYWNpdHk9MCk7XFxuICAtbW96LW9wYWNpdHk6IDA7XFxuICBvcGFjaXR5OiAwO1xcbiAgdHJhbnNpdGlvbjogYWxsIDAuMTVzIGVhc2Utb3V0OyB9XFxuXFxuQG1lZGlhIChtaW4taGVpZ2h0OiAyOC44NzVlbSkge1xcbiAgLnBpY2tlcl9fZnJhbWUge1xcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcXG4gICAgdG9wOiBhdXRvO1xcbiAgICBib3R0b206IC0xMDAlO1xcbiAgICBtYXgtaGVpZ2h0OiA4MCU7IH0gfVxcblxcbkBtZWRpYSAobWluLWhlaWdodDogNDAuMTI1ZW0pIHtcXG4gIC5waWNrZXJfX2ZyYW1lIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogNy41JTsgfSB9XFxuXFxuLnBpY2tlcl9fd3JhcCB7XFxuICBkaXNwbGF5OiB0YWJsZTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlOyB9XFxuXFxuQG1lZGlhIChtaW4taGVpZ2h0OiAyOC44NzVlbSkge1xcbiAgLnBpY2tlcl9fd3JhcCB7XFxuICAgIGRpc3BsYXk6IGJsb2NrOyB9IH1cXG5cXG4ucGlja2VyX19ib3gge1xcbiAgYmFja2dyb3VuZDogI2ZmZmZmZjtcXG4gIGRpc3BsYXk6IHRhYmxlLWNlbGw7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyB9XFxuXFxuQG1lZGlhIChtaW4taGVpZ2h0OiAyOC44NzVlbSkge1xcbiAgLnBpY2tlcl9fYm94IHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICM3Nzc3Nzc7XFxuICAgIGJvcmRlci10b3AtY29sb3I6ICM4OTg5ODk7XFxuICAgIGJvcmRlci1ib3R0b20td2lkdGg6IDA7XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweCA1cHggMCAwO1xcbiAgICBib3gtc2hhZG93OiAwIDEycHggMzZweCAxNnB4IHJnYmEoMCwgMCwgMCwgMC4yNCk7IH0gfVxcblxcbi5waWNrZXItLW9wZW5lZCAucGlja2VyX19ob2xkZXIge1xcbiAgdG9wOiAwO1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICAtbXMtZmlsdGVyOiBcXFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LmdyYWRpZW50KHN0YXJ0Q29sb3JzdHI9IzFFMDAwMDAwLGVuZENvbG9yc3RyPSMxRTAwMDAwMClcXFwiO1xcbiAgem9vbTogMTtcXG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4zMik7XFxuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIDAuMTVzIGVhc2Utb3V0OyB9XFxuXFxuLnBpY2tlci0tb3BlbmVkIC5waWNrZXJfX2ZyYW1lIHtcXG4gIHRvcDogMDtcXG4gIC1tcy1maWx0ZXI6IFxcXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQWxwaGEoT3BhY2l0eT0xMDApXFxcIjtcXG4gIGZpbHRlcjogYWxwaGEob3BhY2l0eT0xMDApO1xcbiAgLW1vei1vcGFjaXR5OiAxO1xcbiAgb3BhY2l0eTogMTsgfVxcblxcbkBtZWRpYSAobWluLWhlaWdodDogMzUuODc1ZW0pIHtcXG4gIC5waWNrZXItLW9wZW5lZCAucGlja2VyX19mcmFtZSB7XFxuICAgIHRvcDogMTAlO1xcbiAgICBib3R0b206IGF1dG87IH0gfVxcblxcbi5waWNrZXJfX2lucHV0LnBpY2tlcl9faW5wdXQtLWFjdGl2ZSB7XFxuICBib3JkZXItY29sb3I6ICNFM0YyRkQ7IH1cXG5cXG4ucGlja2VyX19mcmFtZSB7XFxuICBtYXJnaW46IDAgYXV0bztcXG4gIG1heC13aWR0aDogMzI1cHg7IH1cXG5cXG5AbWVkaWEgKG1pbi1oZWlnaHQ6IDM4Ljg3NWVtKSB7XFxuICAucGlja2VyLS1vcGVuZWQgLnBpY2tlcl9fZnJhbWUge1xcbiAgICB0b3A6IDEwJTtcXG4gICAgYm90dG9tOiBhdXRvOyB9IH1cXG5cXG4ucGlja2VyX19ib3gge1xcbiAgcGFkZGluZzogMCAxZW07IH1cXG5cXG4ucGlja2VyX19oZWFkZXIge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgbWFyZ2luLXRvcDogLjc1ZW07IH1cXG5cXG4ucGlja2VyX19tb250aCwgLnBpY2tlcl9feWVhciB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBtYXJnaW4tbGVmdDogLjI1ZW07XFxuICBtYXJnaW4tcmlnaHQ6IC4yNWVtOyB9XFxuXFxuLnBpY2tlcl9fc2VsZWN0LS1tb250aCwgLnBpY2tlcl9fc2VsZWN0LS15ZWFyIHtcXG4gIGhlaWdodDogMmVtO1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbi1sZWZ0OiAuMjVlbTtcXG4gIG1hcmdpbi1yaWdodDogLjI1ZW07IH1cXG5cXG4ucGlja2VyX19zZWxlY3QtLW1vbnRoLmJyb3dzZXItZGVmYXVsdCB7XFxuICBkaXNwbGF5OiBpbmxpbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRkZGO1xcbiAgd2lkdGg6IDQwJTsgfVxcblxcbi5waWNrZXJfX3NlbGVjdC0teWVhci5icm93c2VyLWRlZmF1bHQge1xcbiAgZGlzcGxheTogaW5saW5lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI0ZGRkZGRjtcXG4gIHdpZHRoOiAyNiU7IH1cXG5cXG4ucGlja2VyX19zZWxlY3QtLW1vbnRoOmZvY3VzLCAucGlja2VyX19zZWxlY3QtLXllYXI6Zm9jdXMge1xcbiAgYm9yZGVyLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMDUpOyB9XFxuXFxuLnBpY2tlcl9fbmF2LS1wcmV2LCAucGlja2VyX19uYXYtLW5leHQge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcGFkZGluZzogLjVlbSAxLjI1ZW07XFxuICB3aWR0aDogMWVtO1xcbiAgaGVpZ2h0OiAxZW07XFxuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcXG4gIHRvcDogLTAuMjVlbTsgfVxcblxcbi5waWNrZXJfX25hdi0tcHJldiB7XFxuICBsZWZ0OiAtMWVtO1xcbiAgcGFkZGluZy1yaWdodDogMS4yNWVtOyB9XFxuXFxuLnBpY2tlcl9fbmF2LS1uZXh0IHtcXG4gIHJpZ2h0OiAtMWVtO1xcbiAgcGFkZGluZy1sZWZ0OiAxLjI1ZW07IH1cXG5cXG4ucGlja2VyX19uYXYtLWRpc2FibGVkLCAucGlja2VyX19uYXYtLWRpc2FibGVkOmhvdmVyLCAucGlja2VyX19uYXYtLWRpc2FibGVkOmJlZm9yZSwgLnBpY2tlcl9fbmF2LS1kaXNhYmxlZDpiZWZvcmU6aG92ZXIge1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIGJvcmRlci1yaWdodC1jb2xvcjogI2Y1ZjVmNTtcXG4gIGJvcmRlci1sZWZ0LWNvbG9yOiAjZjVmNWY1OyB9XFxuXFxuLnBpY2tlcl9fdGFibGUge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXG4gIGJvcmRlci1zcGFjaW5nOiAwO1xcbiAgdGFibGUtbGF5b3V0OiBmaXhlZDtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgbWFyZ2luLXRvcDogLjc1ZW07XFxuICBtYXJnaW4tYm90dG9tOiAuNWVtOyB9XFxuXFxuLnBpY2tlcl9fdGFibGUgdGgsIC5waWNrZXJfX3RhYmxlIHRkIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjsgfVxcblxcbi5waWNrZXJfX3RhYmxlIHRkIHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7IH1cXG5cXG4ucGlja2VyX193ZWVrZGF5IHtcXG4gIHdpZHRoOiAxNC4yODU3MTQyODYlO1xcbiAgZm9udC1zaXplOiAuNzVlbTtcXG4gIHBhZGRpbmctYm90dG9tOiAuMjVlbTtcXG4gIGNvbG9yOiAjOTk5OTk5O1xcbiAgZm9udC13ZWlnaHQ6IDUwMDsgfVxcblxcbkBtZWRpYSAobWluLWhlaWdodDogMzMuODc1ZW0pIHtcXG4gIC5waWNrZXJfX3dlZWtkYXkge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogLjVlbTsgfSB9XFxuXFxuLnBpY2tlcl9fZGF5LS10b2RheSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBjb2xvcjogIzU5NTk1OTtcXG4gIGxldHRlci1zcGFjaW5nOiAtLjM7XFxuICBwYWRkaW5nOiAuNzVyZW0gMDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDsgfVxcblxcbi5waWNrZXJfX2RheS0tZGlzYWJsZWQ6YmVmb3JlIHtcXG4gIGJvcmRlci10b3AtY29sb3I6ICNhYWFhYWE7IH1cXG5cXG4ucGlja2VyX19kYXktLWluZm9jdXM6aG92ZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgY29sb3I6ICMwMDA7XFxuICBmb250LXdlaWdodDogNTAwOyB9XFxuXFxuLnBpY2tlcl9fZGF5LS1vdXRmb2N1cyB7XFxuICBkaXNwbGF5OiBub25lO1xcbiAgcGFkZGluZzogLjc1cmVtIDA7XFxuICBjb2xvcjogI2ZmZjsgfVxcblxcbi5waWNrZXJfX2RheS0tb3V0Zm9jdXM6aG92ZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgY29sb3I6ICNkZGRkZGQ7XFxuICBmb250LXdlaWdodDogNTAwOyB9XFxuXFxuLnBpY2tlcl9fZGF5LS1oaWdobGlnaHRlZDpob3ZlciwgLnBpY2tlci0tZm9jdXNlZCAucGlja2VyX19kYXktLWhpZ2hsaWdodGVkIHtcXG4gIGN1cnNvcjogcG9pbnRlcjsgfVxcblxcbi5waWNrZXJfX2RheS0tc2VsZWN0ZWQsIC5waWNrZXJfX2RheS0tc2VsZWN0ZWQ6aG92ZXIsIC5waWNrZXItLWZvY3VzZWQgLnBpY2tlcl9fZGF5LS1zZWxlY3RlZCB7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMC43NSk7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDAuNzUpO1xcbiAgYmFja2dyb3VuZDogIzAwODllYztcXG4gIGNvbG9yOiAjZmZmZmZmOyB9XFxuXFxuLnBpY2tlcl9fZGF5LS1kaXNhYmxlZCwgLnBpY2tlcl9fZGF5LS1kaXNhYmxlZDpob3ZlciwgLnBpY2tlci0tZm9jdXNlZCAucGlja2VyX19kYXktLWRpc2FibGVkIHtcXG4gIGJhY2tncm91bmQ6ICNmNWY1ZjU7XFxuICBib3JkZXItY29sb3I6ICNmNWY1ZjU7XFxuICBjb2xvcjogI2RkZGRkZDtcXG4gIGN1cnNvcjogZGVmYXVsdDsgfVxcblxcbi5waWNrZXJfX2RheS0taGlnaGxpZ2h0ZWQucGlja2VyX19kYXktLWRpc2FibGVkLCAucGlja2VyX19kYXktLWhpZ2hsaWdodGVkLnBpY2tlcl9fZGF5LS1kaXNhYmxlZDpob3ZlciB7XFxuICBiYWNrZ3JvdW5kOiAjYmJiYmJiOyB9XFxuXFxuLnBpY2tlcl9fZm9vdGVyIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgLXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICAtbXMtZmxleC1wYWNrOiBqdXN0aWZ5O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOyB9XFxuXFxuLnBpY2tlcl9fYnV0dG9uLS10b2RheSwgLnBpY2tlcl9fYnV0dG9uLS1jbGVhciwgLnBpY2tlcl9fYnV0dG9uLS1jbG9zZSB7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjZmZmZmZmO1xcbiAgYmFja2dyb3VuZDogI2ZmZmZmZjtcXG4gIGZvbnQtc2l6ZTogLjhlbTtcXG4gIHBhZGRpbmc6IC42NmVtIDA7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIHdpZHRoOiAzMyU7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB2ZXJ0aWNhbC1hbGlnbjogYm90dG9tOyB9XFxuXFxuLnBpY2tlcl9fYnV0dG9uLS10b2RheTpob3ZlciwgLnBpY2tlcl9fYnV0dG9uLS1jbGVhcjpob3ZlciwgLnBpY2tlcl9fYnV0dG9uLS1jbG9zZTpob3ZlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBjb2xvcjogIzAwMDAwMDtcXG4gIGJhY2tncm91bmQ6ICNiMWRjZmI7XFxuICBib3JkZXItYm90dG9tLWNvbG9yOiAjYjFkY2ZiOyB9XFxuXFxuLnBpY2tlcl9fYnV0dG9uLS10b2RheTpmb2N1cywgLnBpY2tlcl9fYnV0dG9uLS1jbGVhcjpmb2N1cywgLnBpY2tlcl9fYnV0dG9uLS1jbG9zZTpmb2N1cyB7XFxuICBiYWNrZ3JvdW5kOiAjYjFkY2ZiO1xcbiAgYm9yZGVyLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMDUpO1xcbiAgb3V0bGluZTogbm9uZTsgfVxcblxcbi5waWNrZXJfX2J1dHRvbi0tdG9kYXk6YmVmb3JlLCAucGlja2VyX19idXR0b24tLWNsZWFyOmJlZm9yZSwgLnBpY2tlcl9fYnV0dG9uLS1jbG9zZTpiZWZvcmUge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgaGVpZ2h0OiAwOyB9XFxuXFxuLnBpY2tlcl9fYnV0dG9uLS10b2RheTpiZWZvcmUsIC5waWNrZXJfX2J1dHRvbi0tY2xlYXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCIgXFxcIjtcXG4gIG1hcmdpbi1yaWdodDogLjQ1ZW07IH1cXG5cXG4ucGlja2VyX19idXR0b24tLXRvZGF5OmJlZm9yZSB7XFxuICB0b3A6IC0wLjA1ZW07XFxuICB3aWR0aDogMDtcXG4gIGJvcmRlci10b3A6IDAuNjZlbSBzb2xpZCAjMDA1OWJjO1xcbiAgYm9yZGVyLWxlZnQ6IC42NmVtIHNvbGlkIHRyYW5zcGFyZW50OyB9XFxuXFxuLnBpY2tlcl9fYnV0dG9uLS1jbGVhcjpiZWZvcmUge1xcbiAgdG9wOiAtMC4yNWVtO1xcbiAgd2lkdGg6IC42NmVtO1xcbiAgYm9yZGVyLXRvcDogM3B4IHNvbGlkICNlZTIyMDA7IH1cXG5cXG4ucGlja2VyX19idXR0b24tLWNsb3NlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEQ3XFxcIjtcXG4gIHRvcDogLTAuMWVtO1xcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcXG4gIGZvbnQtc2l6ZTogMS4xZW07XFxuICBtYXJnaW4tcmlnaHQ6IC4zNWVtO1xcbiAgY29sb3I6ICM3Nzc3Nzc7IH1cXG5cXG4ucGlja2VyX19idXR0b24tLXRvZGF5W2Rpc2FibGVkXSwgLnBpY2tlcl9fYnV0dG9uLS10b2RheVtkaXNhYmxlZF06aG92ZXIge1xcbiAgYmFja2dyb3VuZDogI2Y1ZjVmNTtcXG4gIGJvcmRlci1jb2xvcjogI2Y1ZjVmNTtcXG4gIGNvbG9yOiAjZGRkZGRkO1xcbiAgY3Vyc29yOiBkZWZhdWx0OyB9XFxuXFxuLnBpY2tlcl9fYnV0dG9uLS10b2RheVtkaXNhYmxlZF06YmVmb3JlIHtcXG4gIGJvcmRlci10b3AtY29sb3I6ICNhYWFhYWE7IH1cXG5cXG4ucGlja2VyX19ib3gge1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjsgfVxcblxcbi5waWNrZXJfX2RhdGUtZGlzcGxheSB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjZhNjlhO1xcbiAgY29sb3I6ICNmZmY7XFxuICBwYWRkaW5nLWJvdHRvbTogMTVweDtcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7IH1cXG5cXG4ucGlja2VyX19uYXYtLXByZXY6aG92ZXIsIC5waWNrZXJfX25hdi0tbmV4dDpob3ZlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBjb2xvcjogIzAwMDAwMDtcXG4gIGJhY2tncm91bmQ6ICNhMWRlZDg7IH1cXG5cXG4ucGlja2VyX193ZWVrZGF5LWRpc3BsYXkge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzFmODk3ZjtcXG4gIHBhZGRpbmc6IDEwcHg7XFxuICBmb250LXdlaWdodDogMjAwO1xcbiAgbGV0dGVyLXNwYWNpbmc6IC41O1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbiAgbWFyZ2luLWJvdHRvbTogMTVweDsgfVxcblxcbi5waWNrZXJfX21vbnRoLWRpc3BsYXkge1xcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXG4gIGZvbnQtc2l6ZTogMnJlbTsgfVxcblxcbi5waWNrZXJfX2RheS1kaXNwbGF5IHtcXG4gIGZvbnQtc2l6ZTogNC41cmVtO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDsgfVxcblxcbi5waWNrZXJfX3llYXItZGlzcGxheSB7XFxuICBmb250LXNpemU6IDEuOHJlbTtcXG4gIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNCk7IH1cXG5cXG4ucGlja2VyX19ib3gge1xcbiAgcGFkZGluZzogMDsgfVxcblxcbi5waWNrZXJfX2NhbGVuZGFyLWNvbnRhaW5lciB7XFxuICBwYWRkaW5nOiAwIDFyZW07IH1cXG5cXG4ucGlja2VyX19jYWxlbmRhci1jb250YWluZXIgdGhlYWQge1xcbiAgYm9yZGVyOiBub25lOyB9XFxuXFxuLnBpY2tlcl9fdGFibGUge1xcbiAgbWFyZ2luLXRvcDogMDtcXG4gIG1hcmdpbi1ib3R0b206IC41ZW07IH1cXG5cXG4ucGlja2VyX19kYXktLWluZm9jdXMge1xcbiAgY29sb3I6ICM1OTU5NTk7XFxuICBsZXR0ZXItc3BhY2luZzogLS4zO1xcbiAgcGFkZGluZzogLjc1cmVtIDA7XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7IH1cXG5cXG4ucGlja2VyX19kYXkucGlja2VyX19kYXktLXRvZGF5IHtcXG4gIGNvbG9yOiAjMjZhNjlhOyB9XFxuXFxuLnBpY2tlcl9fZGF5LnBpY2tlcl9fZGF5LS10b2RheS5waWNrZXJfX2RheS0tc2VsZWN0ZWQge1xcbiAgY29sb3I6ICNmZmY7IH1cXG5cXG4ucGlja2VyX193ZWVrZGF5IHtcXG4gIGZvbnQtc2l6ZTogLjlyZW07IH1cXG5cXG4ucGlja2VyX19kYXktLXNlbGVjdGVkLCAucGlja2VyX19kYXktLXNlbGVjdGVkOmhvdmVyLCAucGlja2VyLS1mb2N1c2VkIC5waWNrZXJfX2RheS0tc2VsZWN0ZWQge1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDAuOSk7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDAuOSk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjZhNjlhO1xcbiAgY29sb3I6ICNmZmZmZmY7IH1cXG5cXG4ucGlja2VyX19kYXktLXNlbGVjdGVkLnBpY2tlcl9fZGF5LS1vdXRmb2N1cywgLnBpY2tlcl9fZGF5LS1zZWxlY3RlZDpob3Zlci5waWNrZXJfX2RheS0tb3V0Zm9jdXMsIC5waWNrZXItLWZvY3VzZWQgLnBpY2tlcl9fZGF5LS1zZWxlY3RlZC5waWNrZXJfX2RheS0tb3V0Zm9jdXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ExZGVkODsgfVxcblxcbi5waWNrZXJfX2Zvb3RlciB7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG4gIHBhZGRpbmc6IDVweCAxMHB4OyB9XFxuXFxuLnBpY2tlcl9fY2xvc2UsIC5waWNrZXJfX3RvZGF5IHtcXG4gIGZvbnQtc2l6ZTogMS4xcmVtO1xcbiAgcGFkZGluZzogMCAxcmVtO1xcbiAgY29sb3I6ICMyNmE2OWE7IH1cXG5cXG4ucGlja2VyX19uYXYtLXByZXY6YmVmb3JlLCAucGlja2VyX19uYXYtLW5leHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCIgXFxcIjtcXG4gIGJvcmRlci10b3A6IC41ZW0gc29saWQgdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItYm90dG9tOiAuNWVtIHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLXJpZ2h0OiAwLjc1ZW0gc29saWQgIzY3Njc2NztcXG4gIHdpZHRoOiAwO1xcbiAgaGVpZ2h0OiAwO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBtYXJnaW46IDAgYXV0bzsgfVxcblxcbi5waWNrZXJfX25hdi0tbmV4dDpiZWZvcmUge1xcbiAgYm9yZGVyLXJpZ2h0OiAwO1xcbiAgYm9yZGVyLWxlZnQ6IDAuNzVlbSBzb2xpZCAjNjc2NzY3OyB9XFxuXFxuYnV0dG9uLnBpY2tlcl9fdG9kYXk6Zm9jdXMsIGJ1dHRvbi5waWNrZXJfX2NsZWFyOmZvY3VzLCBidXR0b24ucGlja2VyX19jbG9zZTpmb2N1cyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYTFkZWQ4OyB9XFxuXFxuLnBpY2tlcl9fbGlzdCB7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbiAgcGFkZGluZzogMC43NWVtIDAgNC4yZW07XFxuICBtYXJnaW46IDA7IH1cXG5cXG4ucGlja2VyX19saXN0LWl0ZW0ge1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkZGRkZGQ7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2RkZGRkZDtcXG4gIG1hcmdpbi1ib3R0b206IC0xcHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBiYWNrZ3JvdW5kOiAjZmZmZmZmO1xcbiAgcGFkZGluZzogLjc1ZW0gMS4yNWVtOyB9XFxuXFxuQG1lZGlhIChtaW4taGVpZ2h0OiA0Ni43NWVtKSB7XFxuICAucGlja2VyX19saXN0LWl0ZW0ge1xcbiAgICBwYWRkaW5nOiAuNWVtIDFlbTsgfSB9XFxuXFxuLnBpY2tlcl9fbGlzdC1pdGVtOmhvdmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGNvbG9yOiAjMDAwMDAwO1xcbiAgYmFja2dyb3VuZDogI2IxZGNmYjtcXG4gIGJvcmRlci1jb2xvcjogIzAwODllYztcXG4gIHotaW5kZXg6IDEwOyB9XFxuXFxuLnBpY2tlcl9fbGlzdC1pdGVtLS1oaWdobGlnaHRlZCB7XFxuICBib3JkZXItY29sb3I6ICMwMDg5ZWM7XFxuICB6LWluZGV4OiAxMDsgfVxcblxcbi5waWNrZXJfX2xpc3QtaXRlbS0taGlnaGxpZ2h0ZWQ6aG92ZXIsIC5waWNrZXItLWZvY3VzZWQgLnBpY2tlcl9fbGlzdC1pdGVtLS1oaWdobGlnaHRlZCB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBjb2xvcjogIzAwMDAwMDtcXG4gIGJhY2tncm91bmQ6ICNiMWRjZmI7IH1cXG5cXG4ucGlja2VyX19saXN0LWl0ZW0tLXNlbGVjdGVkLCAucGlja2VyX19saXN0LWl0ZW0tLXNlbGVjdGVkOmhvdmVyLCAucGlja2VyLS1mb2N1c2VkIC5waWNrZXJfX2xpc3QtaXRlbS0tc2VsZWN0ZWQge1xcbiAgYmFja2dyb3VuZDogIzAwODllYztcXG4gIGNvbG9yOiAjZmZmZmZmO1xcbiAgei1pbmRleDogMTA7IH1cXG5cXG4ucGlja2VyX19saXN0LWl0ZW0tLWRpc2FibGVkLCAucGlja2VyX19saXN0LWl0ZW0tLWRpc2FibGVkOmhvdmVyLCAucGlja2VyLS1mb2N1c2VkIC5waWNrZXJfX2xpc3QtaXRlbS0tZGlzYWJsZWQge1xcbiAgYmFja2dyb3VuZDogI2Y1ZjVmNTtcXG4gIGJvcmRlci1jb2xvcjogI2Y1ZjVmNTtcXG4gIGNvbG9yOiAjZGRkZGRkO1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbiAgYm9yZGVyLWNvbG9yOiAjZGRkZGRkO1xcbiAgei1pbmRleDogYXV0bzsgfVxcblxcbi5waWNrZXItLXRpbWUgLnBpY2tlcl9fYnV0dG9uLS1jbGVhciB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiA4MCU7XFxuICBtYXJnaW46IDFlbSBhdXRvIDA7XFxuICBwYWRkaW5nOiAxZW0gMS4yNWVtO1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIGJvcmRlcjogMDtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICBmb250LXNpemU6IC42N2VtO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXG4gIGNvbG9yOiAjNjY2OyB9XFxuXFxuLnBpY2tlci0tdGltZSAucGlja2VyX19idXR0b24tLWNsZWFyOmhvdmVyLCAucGlja2VyLS10aW1lIC5waWNrZXJfX2J1dHRvbi0tY2xlYXI6Zm9jdXMge1xcbiAgY29sb3I6ICMwMDAwMDA7XFxuICBiYWNrZ3JvdW5kOiAjYjFkY2ZiO1xcbiAgYmFja2dyb3VuZDogI2VlMjIwMDtcXG4gIGJvcmRlci1jb2xvcjogI2VlMjIwMDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGNvbG9yOiAjZmZmZmZmO1xcbiAgb3V0bGluZTogbm9uZTsgfVxcblxcbi5waWNrZXItLXRpbWUgLnBpY2tlcl9fYnV0dG9uLS1jbGVhcjpiZWZvcmUge1xcbiAgdG9wOiAtMC4yNWVtO1xcbiAgY29sb3I6ICM2NjY7XFxuICBmb250LXNpemU6IDEuMjVlbTtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkOyB9XFxuXFxuLnBpY2tlci0tdGltZSAucGlja2VyX19idXR0b24tLWNsZWFyOmhvdmVyOmJlZm9yZSwgLnBpY2tlci0tdGltZSAucGlja2VyX19idXR0b24tLWNsZWFyOmZvY3VzOmJlZm9yZSB7XFxuICBjb2xvcjogI2ZmZmZmZjsgfVxcblxcbi5waWNrZXItLXRpbWUgLnBpY2tlcl9fZnJhbWUge1xcbiAgbWluLXdpZHRoOiAyNTZweDtcXG4gIG1heC13aWR0aDogMzIwcHg7IH1cXG5cXG4ucGlja2VyLS10aW1lIC5waWNrZXJfX2JveCB7XFxuICBmb250LXNpemU6IDFlbTtcXG4gIGJhY2tncm91bmQ6ICNmMmYyZjI7XFxuICBwYWRkaW5nOiAwOyB9XFxuXFxuQG1lZGlhIChtaW4taGVpZ2h0OiA0MC4xMjVlbSkge1xcbiAgLnBpY2tlci0tdGltZSAucGlja2VyX19ib3gge1xcbiAgICBtYXJnaW4tYm90dG9tOiA1ZW07IH0gfVxcblxcbmJvZHkge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZjZmNmYzsgfVxcblxcbnAuYm94IHtcXG4gIHBhZGRpbmc6IDIwcHg7IH1cXG5cXG5wIHtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNzEpO1xcbiAgcGFkZGluZzogMDtcXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkOyB9XFxuXFxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiB7XFxuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsgfVxcblxcbmg1ID4gc3BhbiB7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBtYXJnaW4tbGVmdDogMTVweDtcXG4gIGNvbG9yOiAjNzc3OyB9XFxuXFxubmF2IGEge1xcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7IH1cXG5cXG5uYXYgdWwgbGkgYTpob3ZlciwgbmF2IHVsIGxpLmFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWE0NTRiOyB9XFxuXFxuLmhlYWRlciB7XFxuICBjb2xvcjogI2VlNmU3MztcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7IH1cXG5cXG4uY2FwdGlvbiB7XFxuICBmb250LXNpemU6IDEuMjVyZW07XFxuICBmb250LXdlaWdodDogMzAwO1xcbiAgbWFyZ2luLWJvdHRvbTogMzBweDsgfVxcblxcbi5wcmV2aWV3IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNGRkY7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjZWVlO1xcbiAgcGFkZGluZzogMjBweCAyMHB4OyB9XFxuXFxuaGVhZGVyLCBtYWluLCBmb290ZXIge1xcbiAgcGFkZGluZy1sZWZ0OiAzMDBweDsgfVxcblxcbi5wYXJhbGxheC1kZW1vIGhlYWRlciwgLnBhcmFsbGF4LWRlbW8gbWFpbiwgLnBhcmFsbGF4LWRlbW8gZm9vdGVyIHtcXG4gIHBhZGRpbmctbGVmdDogMDsgfVxcblxcbmZvb3Rlci5leGFtcGxlIHtcXG4gIHBhZGRpbmctbGVmdDogMDsgfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogOTkycHgpIHtcXG4gIGhlYWRlciwgbWFpbiwgZm9vdGVyIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAwOyB9XFxuICBoNSA+IHNwYW4ge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgbWFyZ2luOiAwIDAgMTVweCAwOyB9IH1cXG5cXG51bC5zaWRlLW5hdi5maXhlZCBsaS5sb2dvIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIG1hcmdpbi10b3A6IDMycHg7XFxuICBtYXJnaW4tYm90dG9tOiA4MHB4OyB9XFxuXFxudWwuc2lkZS1uYXYuZml4ZWQgbGkubG9nbzpob3ZlciwgdWwuc2lkZS1uYXYuZml4ZWQgbGkubG9nbyAjbG9nby1jb250YWluZXI6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cXG5cXG51bC5zaWRlLW5hdi5maXhlZCB7XFxuICBvdmVyZmxvdzogaGlkZGVuOyB9XFxuXFxudWwuc2lkZS1uYXYuZml4ZWQgbGkge1xcbiAgbGluZS1oZWlnaHQ6IDQ0cHg7IH1cXG5cXG51bC5zaWRlLW5hdi5maXhlZCBsaS5hY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjA1KTsgfVxcblxcbnVsLnNpZGUtbmF2LmZpeGVkIGxpIGEge1xcbiAgZm9udC1zaXplOiAxM3B4O1xcbiAgbGluZS1oZWlnaHQ6IDQ0cHg7XFxuICBoZWlnaHQ6IDQ0cHg7XFxuICBwYWRkaW5nOiAwIDMwcHg7IH1cXG5cXG51bC5zaWRlLW5hdi5maXhlZCB1bC5jb2xsYXBzaWJsZS1hY2NvcmRpb24ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI0ZGRjsgfVxcblxcbnVsLnNpZGUtbmF2LmZpeGVkIHVsLmNvbGxhcHNpYmxlLWFjY29yZGlvbiBhLmNvbGxhcHNpYmxlLWhlYWRlciB7XFxuICBwYWRkaW5nOiAwIDMwcHg7IH1cXG5cXG51bC5zaWRlLW5hdi5maXhlZCB1bC5jb2xsYXBzaWJsZS1hY2NvcmRpb24gLmNvbGxhcHNpYmxlLWJvZHkgbGkgYSB7XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgcGFkZGluZzogMCAzNy41cHggMCA0NXB4OyB9XFxuXFxudWwuc2lkZS1uYXYuZml4ZWQ6aG92ZXIge1xcbiAgb3ZlcmZsb3cteTogYXV0bzsgfVxcblxcbi5ib2xkID4gYSB7XFxuICBmb250LXdlaWdodDogYm9sZDsgfVxcblxcbiNsb2dvLWNvbnRhaW5lciB7XFxuICBoZWlnaHQ6IDU3cHg7XFxuICBtYXJnaW4tYm90dG9tOiAzMnB4OyB9XFxuXFxubmF2LnRvcC1uYXYge1xcbiAgaGVpZ2h0OiAxMjJweDtcXG4gIGJveC1zaGFkb3c6IG5vbmU7IH1cXG5cXG5uYXYudG9wLW5hdiBhLnBhZ2UtdGl0bGUge1xcbiAgbGluZS1oZWlnaHQ6IDEyMnB4O1xcbiAgZm9udC1zaXplOiA0OHB4OyB9XFxuXFxuYS5idXR0b24tY29sbGFwc2UudG9wLW5hdiB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBoZWlnaHQ6IDQ4cHg7XFxuICB3aWR0aDogNDhweDtcXG4gIGxlZnQ6IDcuNSU7XFxuICB0b3A6IDA7XFxuICBmbG9hdDogbm9uZTtcXG4gIG1hcmdpbi1sZWZ0OiAxLjVyZW07XFxuICBjb2xvcjogI2ZmZjtcXG4gIGZvbnQtc2l6ZTogMzZweDtcXG4gIHotaW5kZXg6IDI7IH1cXG5cXG5hLmJ1dHRvbi1jb2xsYXBzZS50b3AtbmF2LmZ1bGwge1xcbiAgbGluZS1oZWlnaHQ6IDEyMnB4OyB9XFxuXFxuYS5idXR0b24tY29sbGFwc2UudG9wLW5hdiBpIHtcXG4gIGZvbnQtc2l6ZTogMzJweDsgfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjAwcHgpIHtcXG4gIGEuYnV0dG9uLWNvbGxhcHNlLnRvcC1uYXYge1xcbiAgICBsZWZ0OiA1JTsgfSB9XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA5OTJweCkge1xcbiAgbmF2IC5uYXYtd3JhcHBlciB7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjsgfVxcbiAgbmF2IC5uYXYtd3JhcHBlciBhLnBhZ2UtdGl0bGUge1xcbiAgICBmb250LXNpemU6IDM2cHg7IH0gfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogOTkzcHgpIHtcXG4gIC5jb250YWluZXIge1xcbiAgICB3aWR0aDogODUlOyB9IH1cXG5cXG4jZnJvbnQtcGFnZS1sb2dvIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGhlaWdodDogMTAwJTtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lOyB9XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA5OTJweCkge1xcbiAgI2Zyb250LXBhZ2UtbmF2IHVsLnNpZGUtbmF2IGxpIHtcXG4gICAgZmxvYXQ6IG5vbmU7XFxuICAgIHBhZGRpbmc6IDAgMTVweDsgfVxcbiAgI2Zyb250LXBhZ2UtbmF2IHVsLnNpZGUtbmF2IGxpOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2RkZDsgfVxcbiAgI2Zyb250LXBhZ2UtbmF2IHVsLnNpZGUtbmF2IGxpIC5hY3RpdmUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgfVxcbiAgI2Zyb250LXBhZ2UtbmF2IHVsLnNpZGUtbmF2IGEge1xcbiAgICBjb2xvcjogIzQ0NDsgfSB9XFxuXFxuI3Jlc3BvbnNpdmUtaW1nIHtcXG4gIHdpZHRoOiA4MCU7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG1hcmdpbjogMCBhdXRvOyB9XFxuXFxuI2luZGV4LWJhbm5lciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWU2ZTczOyB9XFxuXFxuI2luZGV4LWJhbm5lciAuY29udGFpbmVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTsgfVxcblxcbiNpbmRleC1iYW5uZXIgLmhlYWRlciB7XFxuICBjb2xvcjogI0ZGRjsgfVxcblxcbiNpbmRleC1iYW5uZXIgaDQge1xcbiAgbWFyZ2luLWJvdHRvbTogNDBweDsgfVxcblxcbiNpbmRleC1iYW5uZXIgaDEge1xcbiAgbWFyZ2luLXRvcDogMTZweDsgfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogOTkycHgpIHtcXG4gICNpbmRleC1iYW5uZXIgaDEge1xcbiAgICBtYXJnaW4tdG9wOiA2MHB4OyB9XFxuICAjaW5kZXgtYmFubmVyIGg0IHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMTVweDsgfSB9XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2MDBweCkge1xcbiAgI2luZGV4LWJhbm5lciBoNCB7XFxuICAgIG1hcmdpbi1ib3R0b206IDA7IH0gfVxcblxcbi5naXRodWItY29tbWl0IHtcXG4gIHBhZGRpbmc6IDE0cHggMDtcXG4gIGhlaWdodDogNjRweDtcXG4gIGxpbmUtaGVpZ2h0OiAzNnB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzVjNTc1NztcXG4gIGNvbG9yOiAjZTZlNmU2O1xcbiAgZm9udC1zaXplOiAuOXJlbTsgfVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogOTkycHgpIHtcXG4gIC5naXRodWItY29tbWl0IHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyOyB9IH1cXG5cXG4jZ2l0aHViLWJ1dHRvbiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNmY2ZDZkO1xcbiAgdHJhbnNpdGlvbjogLjI1cyBlYXNlOyB9XFxuXFxuI2dpdGh1Yi1idXR0b246aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzc5Nzc3NzsgfVxcblxcbi5zaGEge1xcbiAgY29sb3I6ICNmMGYwZjA7XFxuICBtYXJnaW46IDAgNnB4IDAgNnB4OyB9XFxuXFxuI2Rvd25sb2FkLWJ1dHRvbiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjM5ODliO1xcbiAgd2lkdGg6IDI2MHB4O1xcbiAgaGVpZ2h0OiA3MHB4O1xcbiAgbGluZS1oZWlnaHQ6IDcwcHg7XFxuICBmb250LXNpemU6IDE4cHg7XFxuICBmb250LXdlaWdodDogNDAwOyB9XFxuXFxuI2Rvd25sb2FkLWJ1dHRvbjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVhNWE4OyB9XFxuXFxuLnByb21vIHtcXG4gIHdpZHRoOiAxMDAlOyB9XFxuXFxuLnByb21vIGkge1xcbiAgbWFyZ2luOiA0MHB4IDA7XFxuICBjb2xvcjogI2VlNmU3MztcXG4gIGZvbnQtc2l6ZTogN3JlbTtcXG4gIGRpc3BsYXk6IGJsb2NrOyB9XFxuXFxuLnByb21vLWNhcHRpb24ge1xcbiAgZm9udC1zaXplOiAxLjdyZW07XFxuICBmb250LXdlaWdodDogNTAwO1xcbiAgbWFyZ2luLXRvcDogNXB4O1xcbiAgbWFyZ2luLWJvdHRvbTogMDsgfVxcblxcbiNmcm9udC1wYWdlLW5hdiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlOyB9XFxuXFxuI2Zyb250LXBhZ2UtbmF2IGEge1xcbiAgY29sb3I6ICNlZTZlNzM7IH1cXG5cXG4jZnJvbnQtcGFnZS1uYXYgbGk6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZkZWFlYjsgfVxcblxcbiNmcm9udC1wYWdlLW5hdiBsaS5hY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZkZWFlYjsgfVxcblxcbiNmcm9udC1wYWdlLW5hdiAuY29udGFpbmVyIHtcXG4gIGhlaWdodDogaW5oZXJpdDsgfVxcblxcbi5jb2wuZ3JpZC1leGFtcGxlIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNlZWU7XFxuICBtYXJnaW46IDdweCAwO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgbGluZS1oZWlnaHQ6IDUwcHg7XFxuICBmb250LXNpemU6IDI4cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0b21hdG87XFxuICBjb2xvcjogd2hpdGU7XFxuICBwYWRkaW5nOiAwOyB9XFxuXFxuLmNvbC5ncmlkLWV4YW1wbGUgc3BhbiB7XFxuICBmb250LXdlaWdodDogMTAwO1xcbiAgbGluZS1oZWlnaHQ6IDUwcHg7IH1cXG5cXG4ucHJvbW8tZXhhbXBsZSB7XFxuICBvdmVyZmxvdzogaGlkZGVuOyB9XFxuXFxuI3NpdGUtbGF5b3V0LWV4YW1wbGUtbGVmdCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTBhNGFlO1xcbiAgaGVpZ2h0OiAzMDBweDsgfVxcblxcbiNzaXRlLWxheW91dC1leGFtcGxlLXJpZ2h0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyNmE2OWE7XFxuICBoZWlnaHQ6IDMwMHB4OyB9XFxuXFxuI3NpdGUtbGF5b3V0LWV4YW1wbGUtdG9wIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNFNTczNzM7XFxuICBoZWlnaHQ6IDQycHg7IH1cXG5cXG4uZmxhdC10ZXh0LWhlYWRlciB7XFxuICBoZWlnaHQ6IDM1cHg7XFxuICB3aWR0aDogODAlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjE1KTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbWFyZ2luOiAyN3B4IGF1dG87IH1cXG5cXG4uZmxhdC10ZXh0IHtcXG4gIGhlaWdodDogMjVweDtcXG4gIHdpZHRoOiA4MCU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMTUpO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBtYXJnaW46IDI3cHggYXV0bzsgfVxcblxcbi5mbGF0LXRleHQuc21hbGwge1xcbiAgd2lkdGg6IDI1JTtcXG4gIGhlaWdodDogMjVweDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4xNSk7IH1cXG5cXG4uZmxhdC10ZXh0LmZ1bGwtd2lkdGgge1xcbiAgd2lkdGg6IDEwMCU7IH1cXG5cXG4uYnJvd3Nlci13aW5kb3cge1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiBhdXRvO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgYm9yZGVyLXJhZGl1czogNXB4IDVweCAycHggMnB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIG1hcmdpbjogMjBweCAwcHg7XFxuICBvdmVyZmxvdzogaGlkZGVuOyB9XFxuXFxuLmJyb3dzZXItd2luZG93IC50b3AtYmFyIHtcXG4gIGhlaWdodDogMzBweDtcXG4gIGJvcmRlci1yYWRpdXM6IDVweCA1cHggMCAwO1xcbiAgYm9yZGVyLXRvcDogdGhpbiBzb2xpZCAjZWFlYWU5O1xcbiAgYm9yZGVyLWJvdHRvbTogdGhpbiBzb2xpZCAjZGZkZmRlO1xcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KCNlN2U3ZTYsICNFMkUyRTEpOyB9XFxuXFxuLmJyb3dzZXItd2luZG93IC5jaXJjbGUge1xcbiAgaGVpZ2h0OiAxMHB4O1xcbiAgd2lkdGg6IDEwcHg7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgbWFyZ2luLXJpZ2h0OiAxcHg7IH1cXG5cXG4jY2xvc2UtY2lyY2xlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNGRjVDNUE7IH1cXG5cXG4jbWluaW1pemUtY2lyY2xlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNGRkJCNTA7IH1cXG5cXG4jbWF4aW1pemUtY2lyY2xlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxQkM2NTY7IH1cXG5cXG4uYnJvd3Nlci13aW5kb3cgLmNpcmNsZXMge1xcbiAgbWFyZ2luOiA1cHggMTJweDsgfVxcblxcbi5icm93c2VyLXdpbmRvdyAuY29udGVudCB7XFxuICBtYXJnaW46IDA7XFxuICB3aWR0aDogMTAwJTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGJvcmRlci1yYWRpdXM6IDAgMCA1cHggNXB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZhZmFmYTsgfVxcblxcbi5icm93c2VyLXdpbmRvdyAucm93IHtcXG4gIG1hcmdpbjogMDsgfVxcblxcbi5jbGVhciB7XFxuICBjbGVhcjogYm90aDsgfVxcblxcbi5keW5hbWljLWNvbG9yIC5yZWQsIC5keW5hbWljLWNvbG9yIC5waW5rLCAuZHluYW1pYy1jb2xvciAucHVycGxlLCAuZHluYW1pYy1jb2xvciAuZGVlcC1wdXJwbGUsIC5keW5hbWljLWNvbG9yIC5pbmRpZ28sIC5keW5hbWljLWNvbG9yIC5ibHVlLCAuZHluYW1pYy1jb2xvciAubGlnaHQtYmx1ZSwgLmR5bmFtaWMtY29sb3IgLmN5YW4sIC5keW5hbWljLWNvbG9yIC50ZWFsLCAuZHluYW1pYy1jb2xvciAuZ3JlZW4sIC5keW5hbWljLWNvbG9yIC5saWdodC1ncmVlbiwgLmR5bmFtaWMtY29sb3IgLmxpbWUsIC5keW5hbWljLWNvbG9yIC55ZWxsb3csIC5keW5hbWljLWNvbG9yIC5hbWJlciwgLmR5bmFtaWMtY29sb3IgLm9yYW5nZSwgLmR5bmFtaWMtY29sb3IgLmRlZXAtb3JhbmdlLCAuZHluYW1pYy1jb2xvciAuYnJvd24sIC5keW5hbWljLWNvbG9yIC5ncmV5LCAuZHluYW1pYy1jb2xvciAuYmx1ZS1ncmV5LCAuZHluYW1pYy1jb2xvciAuYmxhY2ssIC5keW5hbWljLWNvbG9yIC53aGl0ZSwgLmR5bmFtaWMtY29sb3IgLnRyYW5zcGFyZW50IHtcXG4gIGhlaWdodDogNTVweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogMCAxNXB4O1xcbiAgbGluZS1oZWlnaHQ6IDU1cHg7XFxuICBmb250LXdlaWdodDogNTAwO1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9XFxuXFxuLmR5bmFtaWMtY29sb3IgLmNvbCB7XFxuICBtYXJnaW4tYm90dG9tOiA1NXB4OyB9XFxuXFxuLmNlbnRlciB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyB9XFxuXFxuLm1hdGVyaWFsLWljb25zLmljb24tZGVtbyB7XFxuICBsaW5lLWhlaWdodDogNTBweDsgfVxcblxcbi5pY29uLWNvbnRhaW5lciBpIHtcXG4gIGZvbnQtc2l6ZTogM2VtO1xcbiAgbWFyZ2luLWJvdHRvbTogMTBweDsgfVxcblxcbi5pY29uLWNvbnRhaW5lciAuaWNvbi1wcmV2aWV3IHtcXG4gIGhlaWdodDogMTIwcHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cXG5cXG4uaWNvbi1jb250YWluZXIgc3BhbiB7XFxuICBkaXNwbGF5OiBibG9jazsgfVxcblxcbi5pY29uLWhvbGRlciB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHdpZHRoOiAxNTBweDtcXG4gIGhlaWdodDogMTE1cHg7XFxuICBmbG9hdDogbGVmdDtcXG4gIG1hcmdpbjogMCAwcHggMTVweCAwcHg7IH1cXG5cXG4uaWNvbi1ob2xkZXIgcCB7XFxuICBtYXJnaW46IDAgMDsgfVxcblxcbi50YWJzLXdyYXBwZXIge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgaGVpZ2h0OiA0OHB4OyB9XFxuXFxuLnRhYnMtd3JhcHBlciAucm93LnBpbm5lZCB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB3aWR0aDogMTAwJTtcXG4gIHRvcDogMDtcXG4gIHotaW5kZXg6IDEwOyB9XFxuXFxuLnNoYWRvdy1kZW1vIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyNmE2OWE7XFxuICB3aWR0aDogMTAwcHg7XFxuICBoZWlnaHQ6IDEwMHB4O1xcbiAgbWFyZ2luOiAyMHB4IGF1dG87IH1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDYwMHB4KSB7XFxuICAuc2hhZG93LWRlbW8ge1xcbiAgICB3aWR0aDogMTUwcHg7XFxuICAgIGhlaWdodDogMTUwcHg7IH0gfVxcblxcbi5wYXJhbGxheC1jb250YWluZXIgLnRleHQtY2VudGVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogNTAlO1xcbiAgbGVmdDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgbWFyZ2luLXRvcDogLTI3cHg7IH1cXG5cXG51bC50YWJsZS1vZi1jb250ZW50cyB7XFxuICBtYXJnaW4tdG9wOiAwO1xcbiAgcGFkZGluZy10b3A6IDQ4cHg7IH1cXG5cXG5jb2RlLCBwcmUge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZm9udC1zaXplOiAxLjFyZW07IH1cXG5cXG4uZGlyZWN0b3J5LW1hcmt1cCB7XFxuICBmb250LXNpemU6IDFyZW07XFxuICBsaW5lLWhlaWdodDogMS4xcmVtICFpbXBvcnRhbnQ7IH1cXG5cXG46bm90KHByZSkgPiBjb2RlW2NsYXNzKj1cXFwibGFuZ3VhZ2UtXFxcIl0ge1xcbiAgcGFkZGluZzogLjFlbSAuMjVlbTtcXG4gIGJvcmRlcjogc29saWQgMXB4IHJnYmEoNTEsIDUxLCA1MSwgMC4xMik7IH1cXG5cXG5wcmVbY2xhc3MqPVxcXCJsYW5ndWFnZS1cXFwiXSB7XFxuICBwYWRkaW5nOiAyNXB4IDEycHggN3B4IDEycHg7XFxuICBib3JkZXI6IHNvbGlkIDFweCByZ2JhKDUxLCA1MSwgNTEsIDAuMTIpOyB9XFxuXFxucHJlW2NsYXNzKj1cXFwibGFuZ3VhZ2UtXFxcIl06YmVmb3JlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHBhZGRpbmc6IDFweCA1cHg7XFxuICBiYWNrZ3JvdW5kOiAjZThlNmUzO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiUm9ib3RvXFxcIiwgc2Fucy1zZXJpZjtcXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xcbiAgY29sb3I6ICM1NTU7XFxuICBjb250ZW50OiBhdHRyKGNsYXNzKTtcXG4gIGZvbnQtc2l6ZTogLjlyZW07XFxuICBib3JkZXI6IHNvbGlkIDFweCByZ2JhKDUxLCA1MSwgNTEsIDAuMTIpO1xcbiAgYm9yZGVyLXRvcDogbm9uZTtcXG4gIGJvcmRlci1sZWZ0OiBub25lOyB9XFxuXFxuLnRvYy13cmFwcGVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIG1hcmdpbi10b3A6IDQycHg7IH1cXG5cXG4udG9jLXdyYXBwZXIucGluLWJvdHRvbSB7XFxuICBtYXJnaW4tdG9wOiA4NHB4OyB9XFxuXFxuI2NhcmJvbmFkcyB7XFxuICBtYXgtd2lkdGg6IDE1MHB4O1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkOyB9XFxuXFxuI2NhcmJvbmFkcyA+IHNwYW4sICNjYXJib25hZHMgc3Bhbi5jYXJib24td3JhcCB7XFxuICBoZWlnaHQ6IDEwMHB4O1xcbiAgZGlzcGxheTogYmxvY2s7IH1cXG5cXG4jY2FyYm9uYWRzIGEuY2FyYm9uLWltZyB7XFxuICBoZWlnaHQ6IDEwMHB4O1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4OyB9XFxuXFxuI2NhcmJvbmFkcyBhLmNhcmJvbi10ZXh0LCAjY2FyYm9uYWRzIGlucHV0W3R5cGU9XFxcInN1Ym1pdFxcXCJdIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHRvcDogMDtcXG4gIHdpZHRoOiAxNTBweDtcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBmb250LXNpemU6IDEzcHg7XFxuICBjb2xvcjogI0U1NzM3MzsgfVxcblxcbiNjYXJib25hZHMgYS5jYXJib24tcG93ZXJlZGJ5IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGxlZnQ6IDI4cHg7XFxuICBmb250LXNpemU6IDExcHg7XFxuICBjb2xvcjogI0VGOUE5QTsgfVxcblxcbi5idXlzZWxsYWRzICNjYXJib25hZHMgPiBzcGFuLCAuYnV5c2VsbGFkcyAjY2FyYm9uYWRzIHNwYW4uY2FyYm9uLXdyYXAge1xcbiAgaGVpZ2h0OiBhdXRvOyB9XFxuXFxuLmJ1eXNlbGxhZHMgI2NhcmJvbmFkcyBhLmNhcmJvbi10ZXh0IHtcXG4gIHRvcDogNXB4O1xcbiAgbGVmdDogMDtcXG4gIHdpZHRoOiAxMzBweDtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgZm9udC1zaXplOiAxM3B4O1xcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxuICBjb2xvcjogI0U1NzM3MzsgfVxcblxcbi5idXlzZWxsYWRzICNjYXJib25hZHMgYS5jYXJib24tcG93ZXJlZGJ5IHtcXG4gIHRvcDogNXB4OyB9XFxuXFxuLmJ1eXNlbGxhZHMtaGVhZGVyICNjYXJib25hZHMgPiBzcGFuLCAuYnV5c2VsbGFkcy1oZWFkZXIgI2NhcmJvbmFkcyBzcGFuLmNhcmJvbi13cmFwIHtcXG4gIGhlaWdodDogYXV0bzsgfVxcblxcbi5idXlzZWxsYWRzLWhlYWRlciAjY2FyYm9uYWRzIGEuY2FyYm9uLXRleHQge1xcbiAgY29sb3I6ICNmZmY7IH1cXG5cXG4uYnV5c2VsbGFkcy1oZWFkZXIgI2NhcmJvbmFkcyBhLmNhcmJvbi1wb3dlcmVkYnkge1xcbiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC44KTsgfVxcblxcbi5idXlzZWxsYWRzLWhvbWVwYWdlICNjYXJib25hZHMge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgbWFyZ2luOiA0ZW0gYXV0byAwO1xcbiAgcGFkZGluZzogMWVtO1xcbiAgbWF4LXdpZHRoOiAzNjBweDtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMyk7IH1cXG5cXG4uYnV5c2VsbGFkcy1ob21lcGFnZSAjY2FyYm9uYWRzIHNwYW4ge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBvdmVyZmxvdzogaGlkZGVuOyB9XFxuXFxuLmJ1eXNlbGxhZHMtaG9tZXBhZ2UgI2NhcmJvbmFkcyAuY2FyYm9uLWltZyB7XFxuICBmbG9hdDogbGVmdDtcXG4gIG1hcmdpbi1yaWdodDogMWVtOyB9XFxuXFxuLmJ1eXNlbGxhZHMtaG9tZXBhZ2UgI2NhcmJvbmFkcyAuY2FyYm9uLXRleHQge1xcbiAgbWF4LXdpZHRoOiBjYWxjKDEwMCUgLSAxMzVweCAtIDFlbSk7XFxuICB3aWR0aDogYXV0bzsgfVxcblxcbi5idXlzZWxsYWRzLWhvbWVwYWdlICNjYXJib25hZHMgLmNhcmJvbi1wb3dlcmVkYnkge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogYXV0bztcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAtNHB4OyB9XFxuXFxuLmJ1eXNlbGxhZHMge1xcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7IH1cXG5cXG4uYnV5c2VsbGFkcy5idXlzZWxsYWRzLWRlbW8ge1xcbiAgYm90dG9tOiAyMHB4O1xcbiAgcmlnaHQ6IDIwcHg7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjkpO1xcbiAgei1pbmRleDogMTAwMDsgfVxcblxcbi5idXlzZWxsYWRzLmJ1eXNlbGxhZHMtZGVtbyAjY2FyYm9uYWRzIGEuY2FyYm9uLWltZyB7XFxuICBtYXJnaW4tcmlnaHQ6IDA7IH1cXG5cXG4uYnV5c2VsbGFkcy5idXlzZWxsYWRzLWRlbW8gI2NhcmJvbmFkcyBhLmNhcmJvbi10ZXh0IHtcXG4gIHRvcDogMDsgfVxcblxcbi5idXlzZWxsYWRzLmJ1eXNlbGxhZHMtZGVtbyBhLmNsb3NlIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBib3gtc2hhZG93OiAwIDJweCA0cHggMCByZ2JhKDAsIDAsIDAsIDAuMSk7XFxuICBoZWlnaHQ6IDI0cHg7XFxuICB3aWR0aDogMjRweDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogLTZweDtcXG4gIHJpZ2h0OiAtNnB4O1xcbiAgei1pbmRleDogMTtcXG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgLjJzOyB9XFxuXFxuLmJ1eXNlbGxhZHMuYnV5c2VsbGFkcy1kZW1vIGEuY2xvc2U6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RkZDsgfVxcblxcbi5idXlzZWxsYWRzLmJ1eXNlbGxhZHMtZGVtbyBhLmNsb3NlIC5tYXRlcmlhbC1pY29ucyB7XFxuICBmb250LXNpemU6IDE4cHg7XFxuICBsaW5lLWhlaWdodDogMjRweDsgfVxcblxcbi5idXlzZWxsYWRzIC5ic2FfaXQub25lIHtcXG4gIHdpZHRoOiAxMzBweDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGxlZnQ6IDA7XFxuICB0b3A6IDUwcHg7IH1cXG5cXG4uYnV5c2VsbGFkcyAuYnNhX2l0Lm9uZSAuYnNhX2l0X3Age1xcbiAgbGVmdDogMDtcXG4gIGJvdHRvbTogLTE1cHg7IH1cXG5cXG4uYnV5c2VsbGFkcyAuYnNhX2l0Lm9uZSAuYnNhX2l0X2FkIC5ic2FfaXRfdCB7XFxuICBjb2xvcjogI0U1NzM3MzsgfVxcblxcbi5idXlzZWxsYWRzIC5ic2FfaXQub25lIC5ic2FfaXRfYWQgLmJzYV9pdF9kIHtcXG4gIGNvbG9yOiAjRUY5QTlBOyB9XFxuXFxuLmJ1eXNlbGxhZHMgLmJzYV9pdF9hZCBhIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgd2lkdGg6IDEzMHB4OyB9XFxuXFxuLmJ1eXNlbGxhZHMtaGVhZGVyIHtcXG4gIG1hcmdpbi10b3A6IDMwcHg7IH1cXG5cXG4uYnV5c2VsbGFkcy1oZWFkZXIgLmJzYV9pdC5vbmUgLmJzYV9pdF9wIHtcXG4gIGJvdHRvbTogLTIwcHg7IH1cXG5cXG4uYnNhX2l0Lm9uZSB7XFxuICBtaW4td2lkdGg6IDIzMHB4O1xcbiAgbWF4LXdpZHRoOiAyNzBweDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHRleHQtYWxpZ246IGxlZnQ7IH1cXG5cXG4uYnNhX2l0Lm9uZSAuYnNhX2l0X2FkIHtcXG4gIGJvcmRlcjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgfVxcblxcbi5ic2FfaXQub25lIC5ic2FfaXRfYWQgLmJzYV9pdF90IHtcXG4gIGNvbG9yOiAjZmZmOyB9XFxuXFxuLmJzYV9pdC5vbmUgLmJzYV9pdF9hZCAuYnNhX2l0X2Qge1xcbiAgY29sb3I6ICNGRkNERDI7IH1cXG5cXG4uYnNhX2l0Lm9uZSAuYnNhX2l0X3Age1xcbiAgcmlnaHQ6IGF1dG87XFxuICBsZWZ0OiA0MHB4O1xcbiAgYm90dG9tOiAtNXB4OyB9XFxuXFxuLmJzYV9pdC5vbmUgLmJzYV9pdF9wIGEge1xcbiAgY29sb3I6ICNGRkNERDI7IH1cXG5cXG5mb290ZXIge1xcbiAgZm9udC1zaXplOiAuOXJlbTsgfVxcblxcbmJvZHkucGFyYWxsYXgtZGVtbyBmb290ZXIge1xcbiAgbWFyZ2luLXRvcDogMDsgfVxcblxcbi5pbWFnZS1jb250YWluZXIge1xcbiAgd2lkdGg6IDEwMCU7IH1cXG5cXG4uaW1hZ2UtY29udGFpbmVyIGltZyB7XFxuICBtYXgtd2lkdGg6IDEwMCU7IH1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDYwMHB4KSB7XFxuICAubW9iaWxlLWltYWdlIHtcXG4gICAgbWF4LXdpZHRoOiAxMDAlOyB9IH1cXG5cXG4ud2F2ZXMtY29sb3ItZGVtbyAuY29sbGVjdGlvbi1pdGVtIHtcXG4gIGhlaWdodDogMzdweDtcXG4gIGxpbmUtaGVpZ2h0OiAzN3B4O1xcbiAgYm94LXNpemluZzogY29udGVudC1ib3g7IH1cXG5cXG4ud2F2ZXMtY29sb3ItZGVtbyAuY29sbGVjdGlvbi1pdGVtIGNvZGUge1xcbiAgbGluZS1oZWlnaHQ6IDM3cHg7IH1cXG5cXG4ud2F2ZXMtY29sb3ItZGVtbyAuYnRuOm5vdCgud2F2ZXMtbGlnaHQpLCAud2F2ZXMtY29sb3ItZGVtbyAuYnRuLWxhcmdlOm5vdCgud2F2ZXMtbGlnaHQpIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBjb2xvcjogIzIxMjEyMTsgfVxcblxcbi5jYXJkLXBhbmVsIHNwYW4sIC5jYXJkLWNvbnRlbnQgcCB7XFxuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsgfVxcblxcbiNpbWFnZXMgLmNhcmQtcGFuZWwgLnJvdyB7XFxuICBtYXJnaW4tYm90dG9tOiAwOyB9XFxuXFxuLnB1c2hwaW4tZGVtbyB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBoZWlnaHQ6IDEwMHB4OyB9XFxuXFxuI3B1c2hwaW4tZGVtby0xIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgaGVpZ2h0OiBpbmhlcml0O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RkZDsgfVxcblxcbi52YWxpZ24tZGVtbyB7XFxuICBoZWlnaHQ6IDQwMHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RkZDsgfVxcblxcbi50YWxpZ24tZGVtbyB7XFxuICBoZWlnaHQ6IDEwMHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RkZDsgfVxcblxcbiNzdGFnZ2VyZWQtdGVzdCBsaSwgI2ltYWdlLXRlc3Qge1xcbiAgb3BhY2l0eTogMDsgfVxcblxcbiN0eC1saXZlLWxhbmctY29udGFpbmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmY2ZjZmM7XFxuICB6LWluZGV4OiA5OTk7IH1cXG5cXG4jdHgtbGl2ZS1sYW5nLWNvbnRhaW5lciAjdHgtbGl2ZS1sYW5nLXBpY2tlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmNmY2ZjOyB9XFxuXFxuI3R4LWxpdmUtbGFuZy1jb250YWluZXIgI3R4LWxpdmUtbGFuZy1waWNrZXIgbGkge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44Nyk7IH1cXG5cXG4jdHgtbGl2ZS1sYW5nLWNvbnRhaW5lciAjdHgtbGl2ZS1sYW5nLXBpY2tlciBsaTpob3ZlciB7XFxuICBjb2xvcjogaW5oZXJpdDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZGVhZWI7IH1cXG5cXG4jdHgtbGl2ZS1sYW5nLWNvbnRhaW5lciAudHhsaXZlLWxhbmdzZWxlY3Rvci10b2dnbGUge1xcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICNlZTZlNzM7IH1cXG5cXG4jdHgtbGl2ZS1sYW5nLWNvbnRhaW5lciAudHhsaXZlLWxhbmdzZWxlY3Rvci1jdXJyZW50IHtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuODcpOyB9XFxuXFxuI3R4LWxpdmUtbGFuZy1jb250YWluZXIgLnR4bGl2ZS1sYW5nc2VsZWN0b3ItbWFya2VyIHtcXG4gIGJvcmRlci1ib3R0b206IDRweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuNjEpOyB9XFxuXFxuI2Rvd25sb2FkLXRoYW5rcyB7XFxuICBkaXNwbGF5OiBub25lOyB9XFxuXFxuI3R3aXR0ZXItd2lkZ2V0LTAge1xcbiAgd2lkdGg6IDMwMHB4ICFpbXBvcnRhbnQ7IH1cXG5cXG4jbmF2LW1vYmlsZSBsaS5zZWFyY2gge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgdG9wOiAxMjBweDtcXG4gIG1hcmdpbi10b3A6IDFweDtcXG4gIHBhZGRpbmc6IDFweCAwIDAgMDtcXG4gIHotaW5kZXg6IDI7IH1cXG5cXG4jbmF2LW1vYmlsZSBsaS5zZWFyY2g6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsgfVxcblxcbiNuYXYtbW9iaWxlIGxpLnNlYXJjaCAuc2VhcmNoLXdyYXBwZXIge1xcbiAgbWFyZ2luOiAwIDEycHg7XFxuICB0cmFuc2l0aW9uOiBtYXJnaW4gLjI1cyBlYXNlOyB9XFxuXFxuI25hdi1tb2JpbGUgbGkuc2VhcmNoIC5zZWFyY2gtd3JhcHBlci5mb2N1c2VkIHtcXG4gIG1hcmdpbjogMDsgfVxcblxcbiNuYXYtbW9iaWxlIGxpLnNlYXJjaCAuc2VhcmNoLXdyYXBwZXIgaW5wdXQjc2VhcmNoIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgZm9udC13ZWlnaHQ6IDMwMDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiA0NXB4O1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMCA0NXB4IDAgMTVweDtcXG4gIGJvcmRlcjogMDsgfVxcblxcbiNuYXYtbW9iaWxlIGxpLnNlYXJjaCAuc2VhcmNoLXdyYXBwZXIgaW5wdXQjc2VhcmNoOmZvY3VzIHtcXG4gIG91dGxpbmU6IG5vbmU7XFxuICBib3gtc2hhZG93OiBub25lOyB9XFxuXFxuI25hdi1tb2JpbGUgbGkuc2VhcmNoIC5zZWFyY2gtd3JhcHBlciBpLm1hdGVyaWFsLWljb25zIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMTBweDtcXG4gIHJpZ2h0OiAxMHB4O1xcbiAgY3Vyc29yOiBwb2ludGVyOyB9XFxuXFxuI25hdi1tb2JpbGUgbGkuc2VhcmNoIC5zZWFyY2gtcmVzdWx0cyB7XFxuICBtYXJnaW46IDA7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2U5ZTllOTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7IH1cXG5cXG4jbmF2LW1vYmlsZSBsaS5zZWFyY2ggLnNlYXJjaC1yZXN1bHRzIGEge1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIGRpc3BsYXk6IGJsb2NrOyB9XFxuXFxuI25hdi1tb2JpbGUgbGkuc2VhcmNoIC5zZWFyY2gtcmVzdWx0cyBhOmhvdmVyLCAjbmF2LW1vYmlsZSBsaS5zZWFyY2ggLnNlYXJjaC1yZXN1bHRzIGEuZm9jdXNlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlO1xcbiAgb3V0bGluZTogbm9uZTsgfVxcblxcbmJvZHkudGhlbWVzIC50aGVtZXMtc2VjdGlvbiB7XFxuICBwYWRkaW5nOiA2MHB4IDAgNDBweCAwOyB9XFxuXFxuYm9keS50aGVtZXMgLnRoZW1lcy1zZWN0aW9uIC50aGVtZS1wcmV2aWV3IHtcXG4gIHdpZHRoOiAxMDAlOyB9XFxuXFxuYm9keS50aGVtZXMgLnRoZW1lcy1zZWN0aW9uIGg0IHtcXG4gIG1hcmdpbi10b3A6IDA7IH1cXG5cXG4uc2hvcGlmeS1idXktZnJhbWUsIC5zaG9waWZ5LWJ0biB7XFxuICBmbG9hdDogbGVmdDsgfVxcblxcbi5zaG9waWZ5LWJ1eS1mcmFtZSB7XFxuICB3aWR0aDogMTA1cHg7IH1cXG5cXG4uc2hvcGlmeS1idG4ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzc4QjY1NztcXG4gIGZvbnQtc2l6ZTogMTVweDtcXG4gIGZvbnQtZmFtaWx5OiAnSGVsdmV0aWNhIE5ldWUnO1xcbiAgbGV0dGVyLXNwYWNpbmc6IC4zcHg7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxuICBjb2xvcjogI2ZmZjtcXG4gIHBhZGRpbmc6IDEwcHggMjBweDtcXG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQgLjJzO1xcbiAgbWFyZ2luOiAyMHB4IDAgMCA1cHg7XFxuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsgfVxcblxcbi5zaG9waWZ5LWJ0bjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNWY5ZDNlOyB9XFxuXFxuLnRoZW1lcy1iYW5uZXIge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzVmNWY1ZjtcXG4gIHBhZGRpbmc6IDMwcHggMDsgfVxcblxcbi50aGVtZXMtYmFubmVyIHAge1xcbiAgZm9udC1zaXplOiAxOHB4O1xcbiAgY29sb3I6ICNmZmY7IH1cXG5cXG4udGhlbWVzLWJhbm5lciBhIHtcXG4gIGNvbG9yOiAjYmFlZjc0OyB9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2Nzcy1sb2FkZXIhLi9+L3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9+L21hdGVyaWFsaXplLWNzcy9jc3MvZ2hwYWdlcy1tYXRlcmlhbGl6ZS5jc3Ncbi8vIG1vZHVsZSBpZCA9IDQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSgpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLypcXG4gU29sYXJpemVkIENvbG9yIFNjaGVtZXMgb3JpZ2luYWxseSBieSBFdGhhbiBTY2hvb25vdmVyXFxuIGh0dHA6Ly9ldGhhbnNjaG9vbm92ZXIuY29tL3NvbGFyaXplZFxcblxcbiBQb3J0ZWQgZm9yIFByaXNtSlMgYnkgSGVjdG9yIE1hdG9zXFxuIFdlYnNpdGU6IGh0dHBzOi8va3Jha2VuZGV2LmlvXFxuIFR3aXR0ZXIgSGFuZGxlOiBodHRwczovL3R3aXR0ZXIuY29tL2FsbG9uc3lrcmFrZW4pXFxuKi9cXG4vKlxcblNPTEFSSVpFRCBIRVhcXG4tLS0tLS0tLS0gLS0tLS0tLVxcbmJhc2UwMyAgICAjMDAyYjM2XFxuYmFzZTAyICAgICMwNzM2NDJcXG5iYXNlMDEgICAgIzU4NmU3NVxcbmJhc2UwMCAgICAjNjU3YjgzXFxuYmFzZTAgICAgICM4Mzk0OTZcXG5iYXNlMSAgICAgIzkzYTFhMVxcbmJhc2UyICAgICAjZWVlOGQ1XFxuYmFzZTMgICAgICNmZGY2ZTNcXG55ZWxsb3cgICAgI2I1ODkwMFxcbm9yYW5nZSAgICAjY2I0YjE2XFxucmVkICAgICAgICNkYzMyMmZcXG5tYWdlbnRhICAgI2QzMzY4MlxcbnZpb2xldCAgICAjNmM3MWM0XFxuYmx1ZSAgICAgICMyNjhiZDJcXG5jeWFuICAgICAgIzJhYTE5OFxcbmdyZWVuICAgICAjODU5OTAwXFxuKi9cXG5jb2RlW2NsYXNzKj1cXFwibGFuZ3VhZ2UtXFxcIl0sXFxucHJlW2NsYXNzKj1cXFwibGFuZ3VhZ2UtXFxcIl0ge1xcbiAgY29sb3I6ICM2NTdiODM7XFxuICAvKiBiYXNlMDAgKi9cXG4gIGZvbnQtZmFtaWx5OiBDb25zb2xhcywgTW9uYWNvLCAnQW5kYWxlIE1vbm8nLCAnVWJ1bnR1IE1vbm8nLCBtb25vc3BhY2U7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgd2hpdGUtc3BhY2U6IHByZTtcXG4gIHdvcmQtc3BhY2luZzogbm9ybWFsO1xcbiAgd29yZC1icmVhazogbm9ybWFsO1xcbiAgd29yZC13cmFwOiBub3JtYWw7XFxuICBsaW5lLWhlaWdodDogMS41O1xcbiAgLW1vei10YWItc2l6ZTogNDtcXG4gIC1vLXRhYi1zaXplOiA0O1xcbiAgdGFiLXNpemU6IDQ7XFxuICAtd2Via2l0LWh5cGhlbnM6IG5vbmU7XFxuICAtbW96LWh5cGhlbnM6IG5vbmU7XFxuICAtbXMtaHlwaGVuczogbm9uZTtcXG4gIGh5cGhlbnM6IG5vbmU7IH1cXG5cXG5wcmVbY2xhc3MqPVxcXCJsYW5ndWFnZS1cXFwiXTo6LW1vei1zZWxlY3Rpb24sIHByZVtjbGFzcyo9XFxcImxhbmd1YWdlLVxcXCJdIDo6LW1vei1zZWxlY3Rpb24sXFxuY29kZVtjbGFzcyo9XFxcImxhbmd1YWdlLVxcXCJdOjotbW96LXNlbGVjdGlvbiwgY29kZVtjbGFzcyo9XFxcImxhbmd1YWdlLVxcXCJdIDo6LW1vei1zZWxlY3Rpb24ge1xcbiAgYmFja2dyb3VuZDogIzA3MzY0MjtcXG4gIC8qIGJhc2UwMiAqLyB9XFxuXFxucHJlW2NsYXNzKj1cXFwibGFuZ3VhZ2UtXFxcIl06OnNlbGVjdGlvbiwgcHJlW2NsYXNzKj1cXFwibGFuZ3VhZ2UtXFxcIl0gOjpzZWxlY3Rpb24sXFxuY29kZVtjbGFzcyo9XFxcImxhbmd1YWdlLVxcXCJdOjpzZWxlY3Rpb24sIGNvZGVbY2xhc3MqPVxcXCJsYW5ndWFnZS1cXFwiXSA6OnNlbGVjdGlvbiB7XFxuICBiYWNrZ3JvdW5kOiAjMDczNjQyO1xcbiAgLyogYmFzZTAyICovIH1cXG5cXG4vKiBDb2RlIGJsb2NrcyAqL1xcbnByZVtjbGFzcyo9XFxcImxhbmd1YWdlLVxcXCJdIHtcXG4gIHBhZGRpbmc6IDFlbTtcXG4gIG1hcmdpbjogLjVlbSAwO1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxuICBib3JkZXItcmFkaXVzOiAwLjNlbTsgfVxcblxcbjpub3QocHJlKSA+IGNvZGVbY2xhc3MqPVxcXCJsYW5ndWFnZS1cXFwiXSxcXG5wcmVbY2xhc3MqPVxcXCJsYW5ndWFnZS1cXFwiXSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmRmNmUzO1xcbiAgLyogYmFzZTMgKi8gfVxcblxcbi8qIElubGluZSBjb2RlICovXFxuOm5vdChwcmUpID4gY29kZVtjbGFzcyo9XFxcImxhbmd1YWdlLVxcXCJdIHtcXG4gIHBhZGRpbmc6IC4xZW07XFxuICBib3JkZXItcmFkaXVzOiAuM2VtOyB9XFxuXFxuLnRva2VuLmNvbW1lbnQsXFxuLnRva2VuLnByb2xvZyxcXG4udG9rZW4uZG9jdHlwZSxcXG4udG9rZW4uY2RhdGEge1xcbiAgY29sb3I6ICM5M2ExYTE7XFxuICAvKiBiYXNlMSAqLyB9XFxuXFxuLnRva2VuLnB1bmN0dWF0aW9uIHtcXG4gIGNvbG9yOiAjNTg2ZTc1O1xcbiAgLyogYmFzZTAxICovIH1cXG5cXG4ubmFtZXNwYWNlIHtcXG4gIG9wYWNpdHk6IC43OyB9XFxuXFxuLnRva2VuLnByb3BlcnR5LFxcbi50b2tlbi50YWcsXFxuLnRva2VuLmJvb2xlYW4sXFxuLnRva2VuLm51bWJlcixcXG4udG9rZW4uY29uc3RhbnQsXFxuLnRva2VuLnN5bWJvbCxcXG4udG9rZW4uZGVsZXRlZCB7XFxuICBjb2xvcjogIzI2OGJkMjtcXG4gIC8qIGJsdWUgKi8gfVxcblxcbi50b2tlbi5zZWxlY3RvcixcXG4udG9rZW4uYXR0ci1uYW1lLFxcbi50b2tlbi5zdHJpbmcsXFxuLnRva2VuLmNoYXIsXFxuLnRva2VuLmJ1aWx0aW4sXFxuLnRva2VuLnVybCxcXG4udG9rZW4uaW5zZXJ0ZWQge1xcbiAgY29sb3I6ICMyYWExOTg7XFxuICAvKiBjeWFuICovIH1cXG5cXG4udG9rZW4uZW50aXR5IHtcXG4gIGNvbG9yOiAjNjU3YjgzO1xcbiAgLyogYmFzZTAwICovXFxuICBiYWNrZ3JvdW5kOiAjZWVlOGQ1O1xcbiAgLyogYmFzZTIgKi8gfVxcblxcbi50b2tlbi5hdHJ1bGUsXFxuLnRva2VuLmF0dHItdmFsdWUsXFxuLnRva2VuLmtleXdvcmQge1xcbiAgY29sb3I6ICM4NTk5MDA7XFxuICAvKiBncmVlbiAqLyB9XFxuXFxuLnRva2VuLmZ1bmN0aW9uIHtcXG4gIGNvbG9yOiAjYjU4OTAwO1xcbiAgLyogeWVsbG93ICovIH1cXG5cXG4udG9rZW4ucmVnZXgsXFxuLnRva2VuLmltcG9ydGFudCxcXG4udG9rZW4udmFyaWFibGUge1xcbiAgY29sb3I6ICNjYjRiMTY7XFxuICAvKiBvcmFuZ2UgKi8gfVxcblxcbi50b2tlbi5pbXBvcnRhbnQsXFxuLnRva2VuLmJvbGQge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7IH1cXG5cXG4udG9rZW4uaXRhbGljIHtcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYzsgfVxcblxcbi50b2tlbi5lbnRpdHkge1xcbiAgY3Vyc29yOiBoZWxwOyB9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2Nzcy1sb2FkZXIhLi9+L3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9+L3ByaXNtanMvdGhlbWVzL3ByaXNtLXNvbGFyaXplZGxpZ2h0LmNzc1xuLy8gbW9kdWxlIGlkID0gNDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gZW1wdHkgKG51bGwtbG9hZGVyKVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9tYXRlcmlhbGl6ZS1jc3MvZm9udHMvcm9ib3RvL1JvYm90by1Cb2xkLndvZmZcbi8vIG1vZHVsZSBpZCA9IDQ4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGVtcHR5IChudWxsLWxvYWRlcilcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbWF0ZXJpYWxpemUtY3NzL2ZvbnRzL3JvYm90by9Sb2JvdG8tQm9sZC53b2ZmMlxuLy8gbW9kdWxlIGlkID0gNDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gZW1wdHkgKG51bGwtbG9hZGVyKVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9tYXRlcmlhbGl6ZS1jc3MvZm9udHMvcm9ib3RvL1JvYm90by1MaWdodC53b2ZmXG4vLyBtb2R1bGUgaWQgPSA1MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBlbXB0eSAobnVsbC1sb2FkZXIpXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L21hdGVyaWFsaXplLWNzcy9mb250cy9yb2JvdG8vUm9ib3RvLUxpZ2h0LndvZmYyXG4vLyBtb2R1bGUgaWQgPSA1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBlbXB0eSAobnVsbC1sb2FkZXIpXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L21hdGVyaWFsaXplLWNzcy9mb250cy9yb2JvdG8vUm9ib3RvLU1lZGl1bS53b2ZmXG4vLyBtb2R1bGUgaWQgPSA1MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBlbXB0eSAobnVsbC1sb2FkZXIpXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L21hdGVyaWFsaXplLWNzcy9mb250cy9yb2JvdG8vUm9ib3RvLU1lZGl1bS53b2ZmMlxuLy8gbW9kdWxlIGlkID0gNTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gZW1wdHkgKG51bGwtbG9hZGVyKVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9tYXRlcmlhbGl6ZS1jc3MvZm9udHMvcm9ib3RvL1JvYm90by1SZWd1bGFyLndvZmZcbi8vIG1vZHVsZSBpZCA9IDU0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGVtcHR5IChudWxsLWxvYWRlcilcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbWF0ZXJpYWxpemUtY3NzL2ZvbnRzL3JvYm90by9Sb2JvdG8tUmVndWxhci53b2ZmMlxuLy8gbW9kdWxlIGlkID0gNTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gZW1wdHkgKG51bGwtbG9hZGVyKVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9tYXRlcmlhbGl6ZS1jc3MvZm9udHMvcm9ib3RvL1JvYm90by1UaGluLndvZmZcbi8vIG1vZHVsZSBpZCA9IDU2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGVtcHR5IChudWxsLWxvYWRlcilcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbWF0ZXJpYWxpemUtY3NzL2ZvbnRzL3JvYm90by9Sb2JvdG8tVGhpbi53b2ZmMlxuLy8gbW9kdWxlIGlkID0gNTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vaGVhZGVyLnNjc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIHt9KTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9oZWFkZXIuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9oZWFkZXIuc2Nzc1wiKTtcblx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9kZW1vL2hlYWRlci5zY3NzXG4vLyBtb2R1bGUgaWQgPSA1OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9wbGF5Z3JvdW5kLnNjc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIHt9KTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9wbGF5Z3JvdW5kLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vcGxheWdyb3VuZC5zY3NzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2RlbW8vcGxheWdyb3VuZC5zY3NzXG4vLyBtb2R1bGUgaWQgPSA1OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi90dXRvcmlhbC5zY3NzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCB7fSk7XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcblx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vdHV0b3JpYWwuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi90dXRvcmlhbC5zY3NzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2RlbW8vdHV0b3JpYWwuc2Nzc1xuLy8gbW9kdWxlIGlkID0gNjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3ByaXNtLXNvbGFyaXplZGxpZ2h0LmNzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCB7fSk7XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcblx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3ByaXNtLXNvbGFyaXplZGxpZ2h0LmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vcHJpc20tc29sYXJpemVkbGlnaHQuY3NzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcHJpc21qcy90aGVtZXMvcHJpc20tc29sYXJpemVkbGlnaHQuY3NzXG4vLyBtb2R1bGUgaWQgPSA2MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9